; Formatter$Conversion-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:39:45 CDT 2014.
;

(defconst *java.util.Formatter$Conversion*
 (make-class-def
      '(class "java.util.Formatter$Conversion"
            "java.lang.Object"
            (constant_pool
                        (INT 100)
                        (INT 111)
                        (INT 120)
                        (INT 88)
                        (INT 101)
                        (INT 69)
                        (INT 103)
                        (INT 71)
                        (INT 102)
                        (INT 97)
                        (INT 65)
                        (INT 99)
                        (INT 67)
                        (INT 116)
                        (INT 84)
                        (INT 98)
                        (INT 66)
                        (INT 115)
                        (INT 83)
                        (INT 104)
                        (INT 72)
                        (INT 110)
                        (INT 37))
            (fields
                        (field "DECIMAL_INTEGER" char (accessflags  *class*  *final*  *static* ) 0)
                        (field "OCTAL_INTEGER" char (accessflags  *class*  *final*  *static* ) 1)
                        (field "HEXADECIMAL_INTEGER" char (accessflags  *class*  *final*  *static* ) 2)
                        (field "HEXADECIMAL_INTEGER_UPPER" char (accessflags  *class*  *final*  *static* ) 3)
                        (field "SCIENTIFIC" char (accessflags  *class*  *final*  *static* ) 4)
                        (field "SCIENTIFIC_UPPER" char (accessflags  *class*  *final*  *static* ) 5)
                        (field "GENERAL" char (accessflags  *class*  *final*  *static* ) 6)
                        (field "GENERAL_UPPER" char (accessflags  *class*  *final*  *static* ) 7)
                        (field "DECIMAL_FLOAT" char (accessflags  *class*  *final*  *static* ) 8)
                        (field "HEXADECIMAL_FLOAT" char (accessflags  *class*  *final*  *static* ) 9)
                        (field "HEXADECIMAL_FLOAT_UPPER" char (accessflags  *class*  *final*  *static* ) 10)
                        (field "CHARACTER" char (accessflags  *class*  *final*  *static* ) 11)
                        (field "CHARACTER_UPPER" char (accessflags  *class*  *final*  *static* ) 12)
                        (field "DATE_TIME" char (accessflags  *class*  *final*  *static* ) 13)
                        (field "DATE_TIME_UPPER" char (accessflags  *class*  *final*  *static* ) 14)
                        (field "BOOLEAN" char (accessflags  *class*  *final*  *static* ) 15)
                        (field "BOOLEAN_UPPER" char (accessflags  *class*  *final*  *static* ) 16)
                        (field "STRING" char (accessflags  *class*  *final*  *static* ) 17)
                        (field "STRING_UPPER" char (accessflags  *class*  *final*  *static* ) 18)
                        (field "HASHCODE" char (accessflags  *class*  *final*  *static* ) 19)
                        (field "HASHCODE_UPPER" char (accessflags  *class*  *final*  *static* ) 20)
                        (field "LINE_SEPARATOR" char (accessflags  *class*  *final*  *static* ) 21)
                        (field "PERCENT_SIGN" char (accessflags  *class*  *final*  *static* ) 22))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isValid"
                              (parameters char)
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 47)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (invokestatic (methodCP "isGeneral" "java.util.Formatter$Conversion" (char) boolean))) 
                                      (4 (ifne 41)) ;;to TAG_0
                                      (7 (iload_0)) 
                                      (8 (invokestatic (methodCP "isInteger" "java.util.Formatter$Conversion" (char) boolean))) 
                                      (11 (ifne 41)) ;;to TAG_0
                                      (14 (iload_0)) 
                                      (15 (invokestatic (methodCP "isFloat" "java.util.Formatter$Conversion" (char) boolean))) 
                                      (18 (ifne 41)) ;;to TAG_0
                                      (21 (iload_0)) 
                                      (22 (invokestatic (methodCP "isText" "java.util.Formatter$Conversion" (char) boolean))) 
                                      (25 (ifne 41)) ;;to TAG_0
                                      (28 (iload_0)) 
                                      (29 (bipush 116)) 
                                      (31 (if_icmpeq 41)) ;;to TAG_0
                                      (34 (iload_0)) 
                                      (35 (invokestatic (methodCP "isCharacter" "java.util.Formatter$Conversion" (char) boolean))) 
                                      (38 (ifeq 45)) ;;to TAG_1
                                      (41 (iconst_1)) ;;at TAG_0
                                      (42 (goto 46))  ;;to TAG_2
                                      (45 (iconst_0)) ;;at TAG_1
                                      (46 (ireturn)) ;;at TAG_2
                                      (endofcode 47))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isGeneral"
                              (parameters char)
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 64)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (lookupswitch (lookupswitchinfo 62 6 ((66 . 60) (72 . 60) (83 . 60) (98 . 60) (104 . 60) (115 . 60)))))  ;;to TAG_0;;to TAG_1
                                      (60 (iconst_1)) ;;at TAG_1
                                      (61 (ireturn)) 
                                      (62 (iconst_0)) ;;at TAG_0
                                      (63 (ireturn)) 
                                      (endofcode 64))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isCharacter"
                              (parameters char)
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 32)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (lookupswitch (lookupswitchinfo 30 2 ((67 . 28) (99 . 28)))))  ;;to TAG_0;;to TAG_1
                                      (28 (iconst_1)) ;;at TAG_1
                                      (29 (ireturn)) 
                                      (30 (iconst_0)) ;;at TAG_0
                                      (31 (ireturn)) 
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isInteger"
                              (parameters char)
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 48)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (lookupswitch (lookupswitchinfo 46 4 ((88 . 44) (100 . 44) (111 . 44) (120 . 44)))))  ;;to TAG_0;;to TAG_1
                                      (44 (iconst_1)) ;;at TAG_1
                                      (45 (ireturn)) 
                                      (46 (iconst_0)) ;;at TAG_0
                                      (47 (ireturn)) 
                                      (endofcode 48))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isFloat"
                              (parameters char)
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 72)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (lookupswitch (lookupswitchinfo 70 7 ((65 . 68) (69 . 68) (71 . 68) (97 . 68) (101 . 68) (102 . 68) (103 . 68)))))  ;;to TAG_0;;to TAG_1
                                      (68 (iconst_1)) ;;at TAG_1
                                      (69 (ireturn)) 
                                      (70 (iconst_0)) ;;at TAG_0
                                      (71 (ireturn)) 
                                      (endofcode 72))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isText"
                              (parameters char)
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 32)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (lookupswitch (lookupswitchinfo 30 2 ((37 . 28) (110 . 28)))))  ;;to TAG_0;;to TAG_1
                                      (28 (iconst_1)) ;;at TAG_1
                                      (29 (ireturn)) 
                                      (30 (iconst_0)) ;;at TAG_0
                                      (31 (ireturn)) 
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Formatter$Conversion-class-table*
  (make-static-class-decls 
   *java.util.Formatter$Conversion*))

(defconst *package-name-map* 
  ("java.util.Formatter$Conversion" . "java.util"))

