; Pattern$BackRef-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:39:47 CDT 2014.
;

(defconst *java.util.regex.Pattern$BackRef*
 (make-class-def
      '(class "java.util.regex.Pattern$BackRef"
            "java.util.regex.Pattern$Node"
            (constant_pool)
            (fields
                        (field "groupIndex" int (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters int)
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.util.regex.Pattern$Node" () void)))
                                      (4 (aload_0))
                                      (5 (iload_1))
                                      (6 (iload_1))
                                      (7 (iadd))
                                      (8 (putfield (fieldCP "groupIndex" "java.util.regex.Pattern$BackRef" int)))
                                      (11 (return))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "match"
                              (parameters (class "java.util.regex.Matcher") int (class "java.lang.CharSequence"))
                              (returntype . boolean)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 4) (max_locals . 8) (code_length . 112)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (getfield (fieldCP "groups" "java.util.regex.Matcher" (array int)))) 
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "groupIndex" "java.util.regex.Pattern$BackRef" int))) 
                                      (8 (iaload)) 
                                      (9 (istore 4)) 
                                      (11 (aload_1)) 
                                      (12 (getfield (fieldCP "groups" "java.util.regex.Matcher" (array int)))) 
                                      (15 (aload_0)) 
                                      (16 (getfield (fieldCP "groupIndex" "java.util.regex.Pattern$BackRef" int))) 
                                      (19 (iconst_1)) 
                                      (20 (iadd)) 
                                      (21 (iaload)) 
                                      (22 (istore 5)) 
                                      (24 (iload 5)) 
                                      (26 (iload 4)) 
                                      (28 (isub)) 
                                      (29 (istore 6)) 
                                      (31 (iload 4)) 
                                      (33 (ifge 38)) ;;to TAG_0
                                      (36 (iconst_0)) 
                                      (37 (ireturn)) 
                                      (38 (iload_2)) ;;at TAG_0
                                      (39 (iload 6)) 
                                      (41 (iadd)) 
                                      (42 (aload_1)) 
                                      (43 (getfield (fieldCP "to" "java.util.regex.Matcher" int))) 
                                      (46 (if_icmple 56)) ;;to TAG_1
                                      (49 (aload_1)) 
                                      (50 (iconst_1)) 
                                      (51 (putfield (fieldCP "hitEnd" "java.util.regex.Matcher" boolean))) 
                                      (54 (iconst_0)) 
                                      (55 (ireturn)) 
                                      (56 (iconst_0)) ;;at TAG_1
                                      (57 (istore 7)) 
                                      (59 (iload 7)) ;;at TAG_4
                                      (61 (iload 6)) 
                                      (63 (if_icmpge 98))  ;;to TAG_2
                                      (66 (aload_3)) 
                                      (67 (iload_2)) 
                                      (68 (iload 7)) 
                                      (70 (iadd)) 
                                      (71 (invokeinterface (methodCP "charAt" "java.lang.CharSequence" (int) char) 2)) 
                                      (76 (aload_3)) 
                                      (77 (iload 4)) 
                                      (79 (iload 7)) 
                                      (81 (iadd)) 
                                      (82 (invokeinterface (methodCP "charAt" "java.lang.CharSequence" (int) char) 2)) 
                                      (87 (if_icmpeq 92)) ;;to TAG_3
                                      (90 (iconst_0)) 
                                      (91 (ireturn)) 
                                      (92 (iinc 7 1)) ;;at TAG_3
                                      (95 (goto 59)) ;;to TAG_4
                                      (98 (aload_0)) ;;at TAG_2
                                      (99 (getfield (fieldCP "next" "java.util.regex.Pattern$BackRef" (class "java.util.regex.Pattern$Node")))) 
                                      (102 (aload_1)) 
                                      (103 (iload_2)) 
                                      (104 (iload 6)) 
                                      (106 (iadd)) 
                                      (107 (aload_3)) 
                                      (108 (invokevirtual (methodCP "match" "java.util.regex.Pattern$Node" ((class "java.util.regex.Matcher") int (class "java.lang.CharSequence")) boolean))) 
                                      (111 (ireturn)) 
                                      (endofcode 112))
                                   (Exceptions )
                                   (StackMap )))
                        (method "study"
                              (parameters (class "java.util.regex.Pattern$TreeInfo"))
                              (returntype . boolean)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (iconst_0))
                                      (2 (putfield (fieldCP "maxValid" "java.util.regex.Pattern$TreeInfo" boolean)))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "next" "java.util.regex.Pattern$BackRef" (class "java.util.regex.Pattern$Node"))))
                                      (9 (aload_1))
                                      (10 (invokevirtual
					(methodCP "study" "java.util.regex.Pattern$Node" ((class "java.util.regex.Pattern$TreeInfo")) boolean)))
                                      (13 (ireturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Pattern$BackRef-class-table*
  (make-static-class-decls 
   *java.util.regex.Pattern$BackRef*))

(defconst *package-name-map* 
  ("java.util.regex.Pattern$BackRef" . "java.util.regex"))

