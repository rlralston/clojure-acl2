; Handler-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:39:46 CDT 2014.
;

(defconst *java.util.logging.Handler*
 (make-class-def
      '(class "java.util.logging.Handler"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Handler.reportError caught:"))
            (fields
                        (field "offValue" int (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "manager" (class "java.util.logging.LogManager") (accessflags  *class*  *private* ) -1)
                        (field "filter" (class "java.util.logging.Filter") (accessflags  *class*  *private* ) -1)
                        (field "formatter" (class "java.util.logging.Formatter") (accessflags  *class*  *private* ) -1)
                        (field "logLevel" (class "java.util.logging.Level") (accessflags  *class*  *private* ) -1)
                        (field "errorManager" (class "java.util.logging.ErrorManager") (accessflags  *class*  *private* ) -1)
                        (field "encoding" (class "java.lang.String") (accessflags  *class*  *private* ) -1)
                        (field "sealed" boolean (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *protected* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 35)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (invokestatic
					(methodCP "getLogManager" "java.util.logging.LogManager" () (class "java.util.logging.LogManager"))))
                                      (8 (putfield (fieldCP "manager" "java.util.logging.Handler" (class "java.util.logging.LogManager"))))
                                      (11 (aload_0))
                                      (12 (getstatic (fieldCP "ALL" "java.util.logging.Level" (class "java.util.logging.Level"))))
                                      (15 (putfield (fieldCP "logLevel" "java.util.logging.Handler" (class "java.util.logging.Level"))))
                                      (18 (aload_0))
                                      (19 (new (class "java.util.logging.ErrorManager")))
                                      (22 (dup))
                                      (23 (invokespecial
					(methodCP "<init>" "java.util.logging.ErrorManager" () void)))
                                      (26 (putfield (fieldCP "errorManager" "java.util.logging.Handler" (class "java.util.logging.ErrorManager"))))
                                      (29 (aload_0))
                                      (30 (iconst_1))
                                      (31 (putfield (fieldCP "sealed" "java.util.logging.Handler" boolean)))
                                      (34 (return))
                                      (endofcode 35))
                                   (Exceptions )
                                   (StackMap )))
                        (method "publish"
                              (parameters (class "java.util.logging.LogRecord"))
                              (returntype . void)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "flush"
                              (parameters )
                              (returntype . void)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "close"
                              (parameters )
                              (returntype . void)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "setFormatter"
                              (parameters (class "java.util.logging.Formatter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "checkAccess" "java.util.logging.Handler" () void)))
                                      (4 (aload_1))
                                      (5 (invokevirtual
					(methodCP "getClass" "java.lang.Object" () (class "java.lang.Class"))))
                                      (8 (pop))
                                      (9 (aload_0))
                                      (10 (aload_1))
                                      (11 (putfield (fieldCP "formatter" "java.util.logging.Handler" (class "java.util.logging.Formatter"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getFormatter"
                              (parameters )
                              (returntype . (class "java.util.logging.Formatter"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "formatter" "java.util.logging.Handler" (class "java.util.logging.Formatter"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "setEncoding"
                              (parameters (class "java.lang.String"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 43)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "checkAccess" "java.util.logging.Handler" () void))) 
                                      (4 (aload_1)) 
                                      (5 (ifnull 37)) ;;to TAG_0
                                      (8 (aload_1)) ;;at TAG_2
                                      (9 (invokestatic (methodCP "isSupported" "java.nio.charset.Charset" ((class "java.lang.String")) boolean))) 
                                      (12 (ifne 24)) ;;to TAG_1
                                      (15 (new (class "java.io.UnsupportedEncodingException"))) 
                                      (18 (dup)) 
                                      (19 (aload_1)) 
                                      (20 (invokespecial (methodCP "<init>" "java.io.UnsupportedEncodingException" ((class "java.lang.String")) void))) 
                                      (23 (athrow)) 
                                      (24 (goto 37)) ;;to TAG_0;;at TAG_1
                                      (27 (astore_2)) ;;at TAG_3
                                      (28 (new (class "java.io.UnsupportedEncodingException"))) 
                                      (31 (dup)) 
                                      (32 (aload_1)) 
                                      (33 (invokespecial (methodCP "<init>" "java.io.UnsupportedEncodingException" ((class "java.lang.String")) void))) 
                                      (36 (athrow)) 
                                      (37 (aload_0)) ;;at TAG_0
                                      (38 (aload_1)) 
                                      (39 (putfield (fieldCP "encoding" "java.util.logging.Handler" (class "java.lang.String")))) 
                                      (42 (return)) 
                                      (endofcode 43))
                                   (Exceptions 
                                     (handler 8 24  27 (class "java.nio.charset.IllegalCharsetNameException")))
                                   (StackMap )))
                        (method "getEncoding"
                              (parameters )
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "encoding" "java.util.logging.Handler" (class "java.lang.String"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "setFilter"
                              (parameters (class "java.util.logging.Filter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "checkAccess" "java.util.logging.Handler" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "filter" "java.util.logging.Handler" (class "java.util.logging.Filter"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getFilter"
                              (parameters )
                              (returntype . (class "java.util.logging.Filter"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "filter" "java.util.logging.Handler" (class "java.util.logging.Filter"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "setErrorManager"
                              (parameters (class "java.util.logging.ErrorManager"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "checkAccess" "java.util.logging.Handler" () void))) 
                                      (4 (aload_1)) 
                                      (5 (ifnonnull 16))  ;;to TAG_0
                                      (8 (new (class "java.lang.NullPointerException"))) 
                                      (11 (dup)) 
                                      (12 (invokespecial (methodCP "<init>" "java.lang.NullPointerException" () void))) 
                                      (15 (athrow)) 
                                      (16 (aload_0)) ;;at TAG_0
                                      (17 (aload_1)) 
                                      (18 (putfield (fieldCP "errorManager" "java.util.logging.Handler" (class "java.util.logging.ErrorManager")))) 
                                      (21 (return)) 
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getErrorManager"
                              (parameters )
                              (returntype . (class "java.util.logging.ErrorManager"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "checkAccess" "java.util.logging.Handler" () void)))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "errorManager" "java.util.logging.Handler" (class "java.util.logging.ErrorManager"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "reportError"
                              (parameters (class "java.lang.String") (class "java.lang.Exception") int)
                              (returntype . void)
                              (accessflags  *class*  *protected* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 29)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_1
                                      (1 (getfield (fieldCP "errorManager" "java.util.logging.Handler" (class "java.util.logging.ErrorManager")))) 
                                      (4 (aload_1)) 
                                      (5 (aload_2)) 
                                      (6 (iload_3)) 
                                      (7 (invokevirtual (methodCP "error" "java.util.logging.ErrorManager" ((class "java.lang.String") (class "java.lang.Exception") int) void))) 
                                      (10 (goto 28)) ;;to TAG_0;;at TAG_2
                                      (13 (astore 4)) ;;at TAG_3
                                      (15 (getstatic (fieldCP "err" "java.lang.System" (class "java.io.PrintStream")))) 
                                      (18 (ldc 0)) ;;STRING:: "Handler.reportError caught:"
                                      (20 (invokevirtual (methodCP "println" "java.io.PrintStream" ((class "java.lang.String")) void))) 
                                      (23 (aload 4)) 
                                      (25 (invokevirtual (methodCP "printStackTrace" "java.lang.Exception" () void))) 
                                      (28 (return)) ;;at TAG_0
                                      (endofcode 29))
                                   (Exceptions 
                                     (handler 0 10  13 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "setLevel"
                              (parameters (class "java.util.logging.Level"))
                              (returntype . void)
                              (accessflags  *class*  *public*  *super*  *synchronized* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnonnull 12))  ;;to TAG_0
                                      (4 (new (class "java.lang.NullPointerException"))) 
                                      (7 (dup)) 
                                      (8 (invokespecial (methodCP "<init>" "java.lang.NullPointerException" () void))) 
                                      (11 (athrow)) 
                                      (12 (aload_0)) ;;at TAG_0
                                      (13 (invokevirtual (methodCP "checkAccess" "java.util.logging.Handler" () void))) 
                                      (16 (aload_0)) 
                                      (17 (aload_1)) 
                                      (18 (putfield (fieldCP "logLevel" "java.util.logging.Handler" (class "java.util.logging.Level")))) 
                                      (21 (return)) 
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getLevel"
                              (parameters )
                              (returntype . (class "java.util.logging.Level"))
                              (accessflags  *class*  *public*  *super*  *synchronized* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "logLevel" "java.util.logging.Handler" (class "java.util.logging.Level"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isLoggable"
                              (parameters (class "java.util.logging.LogRecord"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 47)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "getLevel" "java.util.logging.Handler" () (class "java.util.logging.Level")))) 
                                      (4 (invokevirtual (methodCP "intValue" "java.util.logging.Level" () int))) 
                                      (7 (istore_2)) 
                                      (8 (aload_1)) 
                                      (9 (invokevirtual (methodCP "getLevel" "java.util.logging.LogRecord" () (class "java.util.logging.Level")))) 
                                      (12 (invokevirtual (methodCP "intValue" "java.util.logging.Level" () int))) 
                                      (15 (iload_2)) 
                                      (16 (if_icmplt 26)) ;;to TAG_0
                                      (19 (iload_2)) 
                                      (20 (getstatic (fieldCP "offValue" "java.util.logging.Handler" int))) 
                                      (23 (if_icmpne 28)) ;;to TAG_1
                                      (26 (iconst_0)) ;;at TAG_0
                                      (27 (ireturn)) 
                                      (28 (aload_0)) ;;at TAG_1
                                      (29 (invokevirtual (methodCP "getFilter" "java.util.logging.Handler" () (class "java.util.logging.Filter")))) 
                                      (32 (astore_3)) 
                                      (33 (aload_3)) 
                                      (34 (ifnonnull 39))  ;;to TAG_2
                                      (37 (iconst_1)) 
                                      (38 (ireturn)) 
                                      (39 (aload_3)) ;;at TAG_2
                                      (40 (aload_1)) 
                                      (41 (invokeinterface (methodCP "isLoggable" "java.util.logging.Filter" ((class "java.util.logging.LogRecord")) boolean) 2)) 
                                      (46 (ireturn)) 
                                      (endofcode 47))
                                   (Exceptions )
                                   (StackMap )))
                        (method "checkAccess"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "sealed" "java.util.logging.Handler" boolean))) 
                                      (4 (ifeq 14))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "manager" "java.util.logging.Handler" (class "java.util.logging.LogManager")))) 
                                      (11 (invokevirtual (methodCP "checkAccess" "java.util.logging.LogManager" () void))) 
                                      (14 (return)) ;;at TAG_0
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 10)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "OFF" "java.util.logging.Level" (class "java.util.logging.Level"))))
                                      (3 (invokevirtual
					(methodCP "intValue" "java.util.logging.Level" () int)))
                                      (6 (putstatic (fieldCP "offValue" "java.util.logging.Handler" int)))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *abstract*  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))


(defconst *Handler-class-table*
  (make-static-class-decls 
   *java.util.logging.Handler*))

(defconst *package-name-map* 
  ("java.util.logging.Handler" . "java.util.logging"))

