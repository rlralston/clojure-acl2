; ReentrantLock$FairSync-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:39:44 CDT 2014.
;

(defconst *java.util.concurrent.locks.ReentrantLock$FairSync*
 (make-class-def
      '(class "java.util.concurrent.locks.ReentrantLock$FairSync"
            "java.util.concurrent.locks.ReentrantLock$Sync"
            (constant_pool
                        (LONG -3000897897090466540)
                        (STRING  "Maximum lock count exceeded"))
            (fields
                        (field "serialVersionUID" long (accessflags  *class*  *final*  *private*  *static* ) 0))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.util.concurrent.locks.ReentrantLock$Sync" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lock"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *final* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iconst_1))
                                      (2 (invokevirtual
					(methodCP "acquire" "java.util.concurrent.locks.ReentrantLock$FairSync" (int) void)))
                                      (5 (return))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "tryAcquire"
                              (parameters int)
                              (returntype . boolean)
                              (accessflags  *class*  *final*  *protected* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 74)
                                   (parsedcode
                                      (0 (invokestatic (methodCP "currentThread" "java.lang.Thread" () (class "java.lang.Thread")))) 
                                      (3 (astore_2)) 
                                      (4 (aload_0)) 
                                      (5 (invokevirtual (methodCP "getState" "java.util.concurrent.locks.ReentrantLock$FairSync" () int))) 
                                      (8 (istore_3)) 
                                      (9 (iload_3)) 
                                      (10 (ifne 36)) ;;to TAG_0
                                      (13 (aload_0)) 
                                      (14 (invokevirtual (methodCP "hasQueuedPredecessors" "java.util.concurrent.locks.ReentrantLock$FairSync" () boolean))) 
                                      (17 (ifne 72)) ;;to TAG_1
                                      (20 (aload_0)) 
                                      (21 (iconst_0)) 
                                      (22 (iload_1)) 
                                      (23 (invokevirtual (methodCP "compareAndSetState" "java.util.concurrent.locks.ReentrantLock$FairSync" (int int) boolean))) 
                                      (26 (ifeq 72)) ;;to TAG_1
                                      (29 (aload_0)) 
                                      (30 (aload_2)) 
                                      (31 (invokevirtual (methodCP "setExclusiveOwnerThread" "java.util.concurrent.locks.ReentrantLock$FairSync" ((class "java.lang.Thread")) void))) 
                                      (34 (iconst_1)) 
                                      (35 (ireturn)) 
                                      (36 (aload_2)) ;;at TAG_0
                                      (37 (aload_0)) 
                                      (38 (invokevirtual (methodCP "getExclusiveOwnerThread" "java.util.concurrent.locks.ReentrantLock$FairSync" () (class "java.lang.Thread")))) 
                                      (41 (if_acmpne 72)) ;;to TAG_1
                                      (44 (iload_3)) 
                                      (45 (iload_1)) 
                                      (46 (iadd)) 
                                      (47 (istore 4)) 
                                      (49 (iload 4)) 
                                      (51 (ifge 64))  ;;to TAG_2
                                      (54 (new (class "java.lang.Error"))) 
                                      (57 (dup)) 
                                      (58 (ldc 1)) ;;STRING:: "Maximum lock count exceeded"
                                      (60 (invokespecial (methodCP "<init>" "java.lang.Error" ((class "java.lang.String")) void))) 
                                      (63 (athrow)) 
                                      (64 (aload_0)) ;;at TAG_2
                                      (65 (iload 4)) 
                                      (67 (invokevirtual (methodCP "setState" "java.util.concurrent.locks.ReentrantLock$FairSync" (int) void))) 
                                      (70 (iconst_1)) 
                                      (71 (ireturn)) 
                                      (72 (iconst_0)) ;;at TAG_1
                                      (73 (ireturn)) 
                                      (endofcode 74))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *ReentrantLock$FairSync-class-table*
  (make-static-class-decls 
   *java.util.concurrent.locks.ReentrantLock$FairSync*))

(defconst *package-name-map* 
  ("java.util.concurrent.locks.ReentrantLock$FairSync" . "java.util.concurrent.locks"))

