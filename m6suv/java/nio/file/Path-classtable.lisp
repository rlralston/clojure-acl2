; Path-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:39:39 CDT 2014.
;

(defconst *java.nio.file.Path*
 (make-class-def
      '(class "java.nio.file.Path"
            "java.lang.Object"
            (constant_pool)
            (fields)
            (methods
                        (method "getFileSystem"
                              (parameters )
                              (returntype . (class "java.nio.file.FileSystem"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "isAbsolute"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "getRoot"
                              (parameters )
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "getFileName"
                              (parameters )
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "getParent"
                              (parameters )
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "getNameCount"
                              (parameters )
                              (returntype . int)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "getName"
                              (parameters int)
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "subpath"
                              (parameters int int)
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "startsWith"
                              (parameters (class "java.nio.file.Path"))
                              (returntype . boolean)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "startsWith"
                              (parameters (class "java.lang.String"))
                              (returntype . boolean)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "endsWith"
                              (parameters (class "java.nio.file.Path"))
                              (returntype . boolean)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "endsWith"
                              (parameters (class "java.lang.String"))
                              (returntype . boolean)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "normalize"
                              (parameters )
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "resolve"
                              (parameters (class "java.nio.file.Path"))
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "resolve"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "resolveSibling"
                              (parameters (class "java.nio.file.Path"))
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "resolveSibling"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "relativize"
                              (parameters (class "java.nio.file.Path"))
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "toUri"
                              (parameters )
                              (returntype . (class "java.net.URI"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "toAbsolutePath"
                              (parameters )
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "toRealPath"
                              (parameters (array (class "java.nio.file.LinkOption")))
                              (returntype . (class "java.nio.file.Path"))
                              (accessflags  *abstract*  *class*  *public*  *transient* )
                              (code))
                        (method "toFile"
                              (parameters )
                              (returntype . (class "java.io.File"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "register"
                              (parameters (class "java.nio.file.WatchService") (array (class "java.nio.file.WatchEvent$Kind")) (array (class "java.nio.file.WatchEvent$Modifier")))
                              (returntype . (class "java.nio.file.WatchKey"))
                              (accessflags  *abstract*  *class*  *public*  *transient* )
                              (code))
                        (method "register"
                              (parameters (class "java.nio.file.WatchService") (array (class "java.nio.file.WatchEvent$Kind")))
                              (returntype . (class "java.nio.file.WatchKey"))
                              (accessflags  *abstract*  *class*  *public*  *transient* )
                              (code))
                        (method "iterator"
                              (parameters )
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "compareTo"
                              (parameters (class "java.nio.file.Path"))
                              (returntype . int)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "equals"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "hashCode"
                              (parameters )
                              (returntype . int)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "toString"
                              (parameters )
                              (returntype . (class "java.lang.String"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code)))
            (interfaces "java.lang.Comparable" "java.lang.Iterable" "java.nio.file.Watchable")
            (accessflags  *abstract*  *interface*  *public* )
            (attributes
              (attribute "SourceFile")
              (attribute "Signature")
              (attribute "InnerClasses")))))


(defconst *Path-class-table*
  (make-static-class-decls 
   *java.nio.file.Path*))

(defconst *package-name-map* 
  ("java.nio.file.Path" . "java.nio.file"))

