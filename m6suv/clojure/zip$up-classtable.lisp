; zip$up-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:59 CDT 2014.
;

(defconst *clojure.zip$up*
 (make-class-def
      '(class "clojure.zip$up"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "nth")
                        (STRING  "seq?")
                        (STRING  "seq")
                        (STRING  "get")
                        (STRING  "l")
                        (STRING  "ppath")
                        (STRING  "pnodes")
                        (STRING  "r")
                        (STRING  "changed?")
                        (STRING  "peek")
                        (STRING  "with-meta")
                        (STRING  "clojure.zip")
                        (STRING  "make-node")
                        (STRING  "concat")
                        (STRING  "cons")
                        (STRING  "assoc")
                        (STRING  "meta"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__11" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__12" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__13" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__14" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__15" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__16" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__17" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 218)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "nth"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.zip$up" (class "clojure.lang.Var"))))
                                      (13 (lconst_0))
                                      (14 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (17 (putstatic (fieldCP "const__1" "clojure.zip$up" (class "java.lang.Object"))))
                                      (20 (lconst_1))
                                      (21 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (24 (putstatic (fieldCP "const__2" "clojure.zip$up" (class "java.lang.Object"))))
                                      (27 (ldc 0))        ;;STRING:: "clojure.core"
                                      (29 (ldc 2))        ;;STRING:: "seq?"
                                      (31 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (34 (checkcast (class "clojure.lang.Var")))
                                      (37 (putstatic (fieldCP "const__3" "clojure.zip$up" (class "clojure.lang.Var"))))
                                      (40 (ldc 0))        ;;STRING:: "clojure.core"
                                      (42 (ldc 3))        ;;STRING:: "seq"
                                      (44 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (47 (checkcast (class "clojure.lang.Var")))
                                      (50 (putstatic (fieldCP "const__4" "clojure.zip$up" (class "clojure.lang.Var"))))
                                      (53 (ldc 0))        ;;STRING:: "clojure.core"
                                      (55 (ldc 4))        ;;STRING:: "get"
                                      (57 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (60 (checkcast (class "clojure.lang.Var")))
                                      (63 (putstatic (fieldCP "const__5" "clojure.zip$up" (class "clojure.lang.Var"))))
                                      (66 (aconst_null))
                                      (67 (ldc 5))        ;;STRING:: "l"
                                      (69 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (72 (checkcast (class "clojure.lang.Keyword")))
                                      (75 (putstatic (fieldCP "const__6" "clojure.zip$up" (class "clojure.lang.Keyword"))))
                                      (78 (aconst_null))
                                      (79 (ldc 6))        ;;STRING:: "ppath"
                                      (81 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (84 (checkcast (class "clojure.lang.Keyword")))
                                      (87 (putstatic (fieldCP "const__7" "clojure.zip$up" (class "clojure.lang.Keyword"))))
                                      (90 (aconst_null))
                                      (91 (ldc 7))        ;;STRING:: "pnodes"
                                      (93 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (96 (checkcast (class "clojure.lang.Keyword")))
                                      (99 (putstatic (fieldCP "const__8" "clojure.zip$up" (class "clojure.lang.Keyword"))))
                                      (102 (aconst_null))
                                      (103 (ldc 8))       ;;STRING:: "r"
                                      (105 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (108 (checkcast (class "clojure.lang.Keyword")))
                                      (111 (putstatic (fieldCP "const__9" "clojure.zip$up" (class "clojure.lang.Keyword"))))
                                      (114 (aconst_null))
                                      (115 (ldc 9))       ;;STRING:: "changed?"
                                      (117 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (120 (checkcast (class "clojure.lang.Keyword")))
                                      (123 (putstatic (fieldCP "const__10" "clojure.zip$up" (class "clojure.lang.Keyword"))))
                                      (126 (ldc 0))       ;;STRING:: "clojure.core"
                                      (128 (ldc 10))      ;;STRING:: "peek"
                                      (130 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (133 (checkcast (class "clojure.lang.Var")))
                                      (136 (putstatic (fieldCP "const__11" "clojure.zip$up" (class "clojure.lang.Var"))))
                                      (139 (ldc 0))       ;;STRING:: "clojure.core"
                                      (141 (ldc 11))      ;;STRING:: "with-meta"
                                      (143 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (146 (checkcast (class "clojure.lang.Var")))
                                      (149 (putstatic (fieldCP "const__12" "clojure.zip$up" (class "clojure.lang.Var"))))
                                      (152 (ldc 12))      ;;STRING:: "clojure.zip"
                                      (154 (ldc 13))      ;;STRING:: "make-node"
                                      (156 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (159 (checkcast (class "clojure.lang.Var")))
                                      (162 (putstatic (fieldCP "const__13" "clojure.zip$up" (class "clojure.lang.Var"))))
                                      (165 (ldc 0))       ;;STRING:: "clojure.core"
                                      (167 (ldc 14))      ;;STRING:: "concat"
                                      (169 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (172 (checkcast (class "clojure.lang.Var")))
                                      (175 (putstatic (fieldCP "const__14" "clojure.zip$up" (class "clojure.lang.Var"))))
                                      (178 (ldc 0))       ;;STRING:: "clojure.core"
                                      (180 (ldc 15))      ;;STRING:: "cons"
                                      (182 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (185 (checkcast (class "clojure.lang.Var")))
                                      (188 (putstatic (fieldCP "const__15" "clojure.zip$up" (class "clojure.lang.Var"))))
                                      (191 (ldc 0))       ;;STRING:: "clojure.core"
                                      (193 (ldc 16))      ;;STRING:: "assoc"
                                      (195 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (198 (checkcast (class "clojure.lang.Var")))
                                      (201 (putstatic (fieldCP "const__16" "clojure.zip$up" (class "clojure.lang.Var"))))
                                      (204 (ldc 0))       ;;STRING:: "clojure.core"
                                      (206 (ldc 17))      ;;STRING:: "meta"
                                      (208 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (211 (checkcast (class "clojure.lang.Var")))
                                      (214 (putstatic (fieldCP "const__17" "clojure.zip$up" (class "clojure.lang.Var"))))
                                      (217 (return))
                                      (endofcode 218))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 13) (max_locals . 14) (code_length . 380)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (astore_2)) 
                                      (2 (aload_2)) 
                                      (3 (lconst_0)) 
                                      (4 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (7 (aconst_null)) 
                                      (8 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (11 (astore_3)) 
                                      (12 (aload_2)) 
                                      (13 (aconst_null)) 
                                      (14 (astore_2)) 
                                      (15 (lconst_1)) 
                                      (16 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (19 (aconst_null)) 
                                      (20 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (23 (astore 4)) 
                                      (25 (getstatic (fieldCP "const__3" "clojure.zip$up" (class "clojure.lang.Var")))) 
                                      (28 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (31 (checkcast (class "clojure.lang.IFn"))) 
                                      (34 (aload 4)) 
                                      (36 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (41 (dup)) 
                                      (42 (ifnull 79)) ;;to TAG_0
                                      (45 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (48 (if_acmpeq 80))  ;;to TAG_1
                                      (51 (getstatic (fieldCP "const__4" "clojure.zip$up" (class "clojure.lang.Var")))) 
                                      (54 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (57 (checkcast (class "clojure.lang.IFn"))) 
                                      (60 (aload 4)) 
                                      (62 (aconst_null)) 
                                      (63 (astore 4)) 
                                      (65 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (70 (checkcast (class "clojure.lang.ISeq"))) 
                                      (73 (invokestatic (methodCP "create" "clojure.lang.PersistentHashMap" ((class "clojure.lang.ISeq")) (class "clojure.lang.PersistentHashMap")))) 
                                      (76 (goto 85)) ;;to TAG_2
                                      (79 (pop)) ;;at TAG_0
                                      (80 (aload 4)) ;;at TAG_1
                                      (82 (aconst_null)) 
                                      (83 (astore 4)) 
                                      (85 (astore 5)) ;;at TAG_2
                                      (87 (aload 5)) 
                                      (89 (astore 6)) 
                                      (91 (aload 5)) 
                                      (93 (getstatic (fieldCP "const__6" "clojure.zip$up" (class "clojure.lang.Keyword")))) 
                                      (96 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (99 (astore 7)) 
                                      (101 (aload 5)) 
                                      (103 (getstatic (fieldCP "const__7" "clojure.zip$up" (class "clojure.lang.Keyword")))) 
                                      (106 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (109 (astore 8)) 
                                      (111 (aload 5)) 
                                      (113 (getstatic (fieldCP "const__8" "clojure.zip$up" (class "clojure.lang.Keyword")))) 
                                      (116 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (119 (astore 9)) 
                                      (121 (aload 5)) 
                                      (123 (getstatic (fieldCP "const__9" "clojure.zip$up" (class "clojure.lang.Keyword")))) 
                                      (126 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (129 (astore 10)) 
                                      (131 (aload 5)) 
                                      (133 (aconst_null)) 
                                      (134 (astore 5)) 
                                      (136 (getstatic (fieldCP "const__10" "clojure.zip$up" (class "clojure.lang.Keyword")))) 
                                      (139 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (142 (astore 11)) 
                                      (144 (aload 9)) 
                                      (146 (dup)) 
                                      (147 (ifnull 377)) ;;to TAG_3
                                      (150 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (153 (if_acmpeq 378)) ;;to TAG_4
                                      (156 (getstatic (fieldCP "const__11" "clojure.zip$up" (class "clojure.lang.Var")))) 
                                      (159 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (162 (checkcast (class "clojure.lang.IFn"))) 
                                      (165 (aload 9)) 
                                      (167 (aconst_null)) 
                                      (168 (astore 9)) 
                                      (170 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (175 (astore 12)) 
                                      (177 (getstatic (fieldCP "const__12" "clojure.zip$up" (class "clojure.lang.Var")))) 
                                      (180 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (183 (checkcast (class "clojure.lang.IFn"))) 
                                      (186 (aload 11)) 
                                      (188 (aconst_null)) 
                                      (189 (astore 11)) 
                                      (191 (dup)) 
                                      (192 (ifnull 328)) ;;to TAG_5
                                      (195 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (198 (if_acmpeq 329)) ;;to TAG_6
                                      (201 (iconst_2)) 
                                      (202 (anewarray (class "java.lang.Object"))) 
                                      (205 (dup)) 
                                      (206 (iconst_0)) 
                                      (207 (getstatic (fieldCP "const__13" "clojure.zip$up" (class "clojure.lang.Var")))) 
                                      (210 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (213 (checkcast (class "clojure.lang.IFn"))) 
                                      (216 (aload_1)) 
                                      (217 (aload 12)) 
                                      (219 (aconst_null)) 
                                      (220 (astore 12)) 
                                      (222 (getstatic (fieldCP "const__14" "clojure.zip$up" (class "clojure.lang.Var")))) 
                                      (225 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (228 (checkcast (class "clojure.lang.IFn"))) 
                                      (231 (aload 7)) 
                                      (233 (aconst_null)) 
                                      (234 (astore 7)) 
                                      (236 (getstatic (fieldCP "const__15" "clojure.zip$up" (class "clojure.lang.Var")))) 
                                      (239 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (242 (checkcast (class "clojure.lang.IFn"))) 
                                      (245 (aload_3)) 
                                      (246 (aconst_null)) 
                                      (247 (astore_3)) 
                                      (248 (aload 10)) 
                                      (250 (aconst_null)) 
                                      (251 (astore 10)) 
                                      (253 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (258 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (263 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (268 (aastore)) 
                                      (269 (dup)) 
                                      (270 (iconst_1)) 
                                      (271 (aload 8)) 
                                      (273 (astore 13)) 
                                      (275 (aload 13)) 
                                      (277 (dup)) 
                                      (278 (ifnull 315)) ;;to TAG_7
                                      (281 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (284 (if_acmpeq 316)) ;;to TAG_8
                                      (287 (getstatic (fieldCP "const__16" "clojure.zip$up" (class "clojure.lang.Var")))) 
                                      (290 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (293 (checkcast (class "clojure.lang.IFn"))) 
                                      (296 (aload 8)) 
                                      (298 (aconst_null)) 
                                      (299 (astore 8)) 
                                      (301 (getstatic (fieldCP "const__10" "clojure.zip$up" (class "clojure.lang.Keyword")))) 
                                      (304 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (307 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (312 (goto 321)) ;;to TAG_9
                                      (315 (pop)) ;;at TAG_7
                                      (316 (aload 13)) ;;at TAG_8
                                      (318 (aconst_null)) 
                                      (319 (astore 13)) 
                                      (321 (aastore)) ;;at TAG_9
                                      (322 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (325 (goto 352)) ;;to TAG_10
                                      (328 (pop)) ;;at TAG_5
                                      (329 (iconst_2)) ;;at TAG_6
                                      (330 (anewarray (class "java.lang.Object"))) 
                                      (333 (dup)) 
                                      (334 (iconst_0)) 
                                      (335 (aload 12)) 
                                      (337 (aconst_null)) 
                                      (338 (astore 12)) 
                                      (340 (aastore)) 
                                      (341 (dup)) 
                                      (342 (iconst_1)) 
                                      (343 (aload 8)) 
                                      (345 (aconst_null)) 
                                      (346 (astore 8)) 
                                      (348 (aastore)) 
                                      (349 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (352 (getstatic (fieldCP "const__17" "clojure.zip$up" (class "clojure.lang.Var")))) ;;at TAG_10
                                      (355 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (358 (checkcast (class "clojure.lang.IFn"))) 
                                      (361 (aload_1)) 
                                      (362 (aconst_null)) 
                                      (363 (astore_1)) 
                                      (364 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (369 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (374 (goto 379)) ;;to TAG_11
                                      (377 (pop)) ;;at TAG_3
                                      (378 (aconst_null)) ;;at TAG_4
                                      (379 (areturn)) ;;at TAG_11
                                      (endofcode 380))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *zip$up-class-table*
  (make-static-class-decls 
   *clojure.zip$up*))

(defconst *package-name-map* 
  ("clojure.zip$up" . "clojure"))

