; core$assert_valid_fdecl$fn__6491-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:40 CDT 2014.
;

(defconst *clojure.core$assert_valid_fdecl$fn__6491*
 (make-class-def
      '(class "clojure.core$assert_valid_fdecl$fn__6491"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "seq?")
                        (STRING  "first")
                        (STRING  "str")
                        (STRING  "Invalid signature ")
                        (STRING  " should be a list")
                        (STRING  "Parameter declaration ")
                        (STRING  " should be a vector"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "fdecl" (class "java.lang.Object") (accessflags  *class* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 40)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "seq?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$assert_valid_fdecl$fn__6491" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "first"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$assert_valid_fdecl$fn__6491" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "str"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$assert_valid_fdecl$fn__6491" (class "clojure.lang.Var"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "fdecl" "clojure.core$assert_valid_fdecl$fn__6491" (class "java.lang.Object"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 149)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$assert_valid_fdecl$fn__6491" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (dup)) 
                                      (16 (ifnull 45)) ;;to TAG_0
                                      (19 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (22 (if_acmpeq 46)) ;;to TAG_1
                                      (25 (getstatic (fieldCP "const__1" "clojure.core$assert_valid_fdecl$fn__6491" (class "clojure.lang.Var")))) 
                                      (28 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (31 (checkcast (class "clojure.lang.IFn"))) 
                                      (34 (aload_1)) 
                                      (35 (aconst_null)) 
                                      (36 (astore_1)) 
                                      (37 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (42 (goto 148))  ;;to TAG_2
                                      (45 (pop)) ;;at TAG_0
                                      (46 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_1
                                      (49 (dup)) 
                                      (50 (getstatic (fieldCP "const__0" "clojure.core$assert_valid_fdecl$fn__6491" (class "clojure.lang.Var")))) 
                                      (53 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (56 (checkcast (class "clojure.lang.IFn"))) 
                                      (59 (getstatic (fieldCP "const__1" "clojure.core$assert_valid_fdecl$fn__6491" (class "clojure.lang.Var")))) 
                                      (62 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (65 (checkcast (class "clojure.lang.IFn"))) 
                                      (68 (aload_0)) 
                                      (69 (getfield (fieldCP "fdecl" "clojure.core$assert_valid_fdecl$fn__6491" (class "java.lang.Object")))) 
                                      (72 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (77 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (82 (dup)) 
                                      (83 (ifnull 116)) ;;to TAG_3
                                      (86 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (89 (if_acmpeq 117)) ;;to TAG_4
                                      (92 (getstatic (fieldCP "const__2" "clojure.core$assert_valid_fdecl$fn__6491" (class "clojure.lang.Var")))) 
                                      (95 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (98 (checkcast (class "clojure.lang.IFn"))) 
                                      (101 (ldc 4)) ;;STRING:: "Invalid signature "
                                      (103 (aload_1)) 
                                      (104 (aconst_null)) 
                                      (105 (astore_1)) 
                                      (106 (ldc 5)) ;;STRING:: " should be a list"
                                      (108 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (113 (goto 138)) ;;to TAG_5
                                      (116 (pop)) ;;at TAG_3
                                      (117 (getstatic (fieldCP "const__2" "clojure.core$assert_valid_fdecl$fn__6491" (class "clojure.lang.Var")))) ;;at TAG_4
                                      (120 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (123 (checkcast (class "clojure.lang.IFn"))) 
                                      (126 (ldc 6)) ;;STRING:: "Parameter declaration "
                                      (128 (aload_1)) 
                                      (129 (aconst_null)) 
                                      (130 (astore_1)) 
                                      (131 (ldc 7)) ;;STRING:: " should be a vector"
                                      (133 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (138 (checkcast (class "java.lang.String"))) ;;at TAG_5
                                      (141 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (144 (checkcast (class "java.lang.Throwable"))) 
                                      (147 (athrow)) 
                                      (148 (areturn)) ;;at TAG_2
                                      (endofcode 149))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$assert_valid_fdecl$fn__6491-class-table*
  (make-static-class-decls 
   *clojure.core$assert_valid_fdecl$fn__6491*))

(defconst *package-name-map* 
  ("clojure.core$assert_valid_fdecl$fn__6491" . "clojure"))

