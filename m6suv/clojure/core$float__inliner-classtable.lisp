; core$float__inliner-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:42 CDT 2014.
;

(defconst *clojure.core$float__inliner*
 (make-class-def
      '(class "clojure.core$float__inliner"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "seq")
                        (STRING  "concat")
                        (STRING  "list")
                        (STRING  ".")
                        (STRING  "clojure.lang.RT")
                        (STRING  "*unchecked-math*")
                        (STRING  "uncheckedFloatCast")
                        (STRING  "floatCast"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 101)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "seq"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$float__inliner" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "concat"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$float__inliner" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "list"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$float__inliner" (class "clojure.lang.Var"))))
                                      (39 (aconst_null))
                                      (40 (ldc 4))        ;;STRING:: "."
                                      (42 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (45 (checkcast (class "clojure.lang.AFn")))
                                      (48 (putstatic (fieldCP "const__3" "clojure.core$float__inliner" (class "clojure.lang.AFn"))))
                                      (51 (aconst_null))
                                      (52 (ldc 5))        ;;STRING:: "clojure.lang.RT"
                                      (54 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (57 (checkcast (class "clojure.lang.AFn")))
                                      (60 (putstatic (fieldCP "const__4" "clojure.core$float__inliner" (class "clojure.lang.AFn"))))
                                      (63 (ldc 0))        ;;STRING:: "clojure.core"
                                      (65 (ldc 6))        ;;STRING:: "*unchecked-math*"
                                      (67 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (70 (checkcast (class "clojure.lang.Var")))
                                      (73 (putstatic (fieldCP "const__5" "clojure.core$float__inliner" (class "clojure.lang.Var"))))
                                      (76 (aconst_null))
                                      (77 (ldc 7))        ;;STRING:: "uncheckedFloatCast"
                                      (79 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (82 (checkcast (class "clojure.lang.AFn")))
                                      (85 (putstatic (fieldCP "const__6" "clojure.core$float__inliner" (class "clojure.lang.AFn"))))
                                      (88 (aconst_null))
                                      (89 (ldc 8))        ;;STRING:: "floatCast"
                                      (91 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (94 (checkcast (class "clojure.lang.AFn")))
                                      (97 (putstatic (fieldCP "const__7" "clojure.core$float__inliner" (class "clojure.lang.AFn"))))
                                      (100 (return))
                                      (endofcode 101))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 11) (max_locals . 2) (code_length . 162)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$float__inliner" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (getstatic (fieldCP "const__1" "clojure.core$float__inliner" (class "clojure.lang.Var")))) 
                                      (12 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (15 (checkcast (class "clojure.lang.IFn"))) 
                                      (18 (getstatic (fieldCP "const__2" "clojure.core$float__inliner" (class "clojure.lang.Var")))) 
                                      (21 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (24 (checkcast (class "clojure.lang.IFn"))) 
                                      (27 (getstatic (fieldCP "const__3" "clojure.core$float__inliner" (class "clojure.lang.AFn")))) 
                                      (30 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (35 (getstatic (fieldCP "const__2" "clojure.core$float__inliner" (class "clojure.lang.Var")))) 
                                      (38 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (41 (checkcast (class "clojure.lang.IFn"))) 
                                      (44 (getstatic (fieldCP "const__4" "clojure.core$float__inliner" (class "clojure.lang.AFn")))) 
                                      (47 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (52 (getstatic (fieldCP "const__2" "clojure.core$float__inliner" (class "clojure.lang.Var")))) 
                                      (55 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (58 (checkcast (class "clojure.lang.IFn"))) 
                                      (61 (getstatic (fieldCP "const__0" "clojure.core$float__inliner" (class "clojure.lang.Var")))) 
                                      (64 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (67 (checkcast (class "clojure.lang.IFn"))) 
                                      (70 (getstatic (fieldCP "const__1" "clojure.core$float__inliner" (class "clojure.lang.Var")))) 
                                      (73 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (76 (checkcast (class "clojure.lang.IFn"))) 
                                      (79 (getstatic (fieldCP "const__2" "clojure.core$float__inliner" (class "clojure.lang.Var")))) 
                                      (82 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (85 (checkcast (class "clojure.lang.IFn"))) 
                                      (88 (getstatic (fieldCP "const__5" "clojure.core$float__inliner" (class "clojure.lang.Var")))) 
                                      (91 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (94 (dup)) 
                                      (95 (ifnull 110)) ;;to TAG_0
                                      (98 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (101 (if_acmpeq 111)) ;;to TAG_1
                                      (104 (getstatic (fieldCP "const__6" "clojure.core$float__inliner" (class "clojure.lang.AFn")))) 
                                      (107 (goto 114))  ;;to TAG_2
                                      (110 (pop)) ;;at TAG_0
                                      (111 (getstatic (fieldCP "const__7" "clojure.core$float__inliner" (class "clojure.lang.AFn")))) ;;at TAG_1
                                      (114 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_2
                                      (119 (getstatic (fieldCP "const__2" "clojure.core$float__inliner" (class "clojure.lang.Var")))) 
                                      (122 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (125 (checkcast (class "clojure.lang.IFn"))) 
                                      (128 (aload_1)) 
                                      (129 (aconst_null)) 
                                      (130 (astore_1)) 
                                      (131 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (136 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (141 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (146 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (151 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (156 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (161 (areturn)) 
                                      (endofcode 162))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$float__inliner-class-table*
  (make-static-class-decls 
   *clojure.core$float__inliner*))

(defconst *package-name-map* 
  ("clojure.core$float__inliner" . "clojure"))

