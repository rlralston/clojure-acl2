; pprint$pretty_character-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:56 CDT 2014.
;

(defconst *clojure.pprint$pretty_character*
 (make-class-def
      '(class "clojure.pprint$pretty_character"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.pprint")
                        (STRING  "next-arg")
                        (STRING  "clojure.core")
                        (STRING  "nth")
                        (STRING  "int")
                        (STRING  "bit-and")
                        (LONG 127)
                        (LONG 128)
                        (STRING  "get")
                        (STRING  "special-chars")
                        (STRING  ">")
                        (STRING  "print")
                        (STRING  "<")
                        (LONG 32)
                        (STRING  "str")
                        (STRING  "char")
                        (STRING  "+")
                        (LONG 64)
                        (STRING  "=")
                        (STRING  "else")
                        (STRING  "Meta-")
                        (STRING  "Control-")
                        (STRING  "Control-?"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__11" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__12" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__13" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__14" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__15" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__16" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__17" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__18" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__19" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 232)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.pprint"
                                      (2 (ldc 1))         ;;STRING:: "next-arg"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.core"
                                      (15 (ldc 3))        ;;STRING:: "nth"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (26 (lconst_0))
                                      (27 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (30 (putstatic (fieldCP "const__2" "clojure.pprint$pretty_character" (class "java.lang.Object"))))
                                      (33 (lconst_1))
                                      (34 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (37 (putstatic (fieldCP "const__3" "clojure.pprint$pretty_character" (class "java.lang.Object"))))
                                      (40 (ldc 2))        ;;STRING:: "clojure.core"
                                      (42 (ldc 4))        ;;STRING:: "int"
                                      (44 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (47 (checkcast (class "clojure.lang.Var")))
                                      (50 (putstatic (fieldCP "const__4" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (53 (ldc 2))        ;;STRING:: "clojure.core"
                                      (55 (ldc 5))        ;;STRING:: "bit-and"
                                      (57 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (60 (checkcast (class "clojure.lang.Var")))
                                      (63 (putstatic (fieldCP "const__5" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (66 (ldc2_w 6))     ;; LONG:: "127"
                                      (69 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (72 (putstatic (fieldCP "const__6" "clojure.pprint$pretty_character" (class "java.lang.Object"))))
                                      (75 (ldc2_w 7))     ;; LONG:: "128"
                                      (78 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (81 (putstatic (fieldCP "const__7" "clojure.pprint$pretty_character" (class "java.lang.Object"))))
                                      (84 (ldc 2))        ;;STRING:: "clojure.core"
                                      (86 (ldc 8))        ;;STRING:: "get"
                                      (88 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (91 (checkcast (class "clojure.lang.Var")))
                                      (94 (putstatic (fieldCP "const__8" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (97 (ldc 0))        ;;STRING:: "clojure.pprint"
                                      (99 (ldc 9))        ;;STRING:: "special-chars"
                                      (101 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (104 (checkcast (class "clojure.lang.Var")))
                                      (107 (putstatic (fieldCP "const__9" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (110 (ldc 2))       ;;STRING:: "clojure.core"
                                      (112 (ldc 10))      ;;STRING:: ">"
                                      (114 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (117 (checkcast (class "clojure.lang.Var")))
                                      (120 (putstatic (fieldCP "const__10" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (123 (ldc 2))       ;;STRING:: "clojure.core"
                                      (125 (ldc 11))      ;;STRING:: "print"
                                      (127 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (130 (checkcast (class "clojure.lang.Var")))
                                      (133 (putstatic (fieldCP "const__11" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (136 (ldc 2))       ;;STRING:: "clojure.core"
                                      (138 (ldc 12))      ;;STRING:: "<"
                                      (140 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (143 (checkcast (class "clojure.lang.Var")))
                                      (146 (putstatic (fieldCP "const__12" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (149 (ldc2_w 13))   ;; LONG:: "32"
                                      (152 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (155 (putstatic (fieldCP "const__13" "clojure.pprint$pretty_character" (class "java.lang.Object"))))
                                      (158 (ldc 2))       ;;STRING:: "clojure.core"
                                      (160 (ldc 14))      ;;STRING:: "str"
                                      (162 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (165 (checkcast (class "clojure.lang.Var")))
                                      (168 (putstatic (fieldCP "const__14" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (171 (ldc 2))       ;;STRING:: "clojure.core"
                                      (173 (ldc 15))      ;;STRING:: "char"
                                      (175 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (178 (checkcast (class "clojure.lang.Var")))
                                      (181 (putstatic (fieldCP "const__15" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (184 (ldc 2))       ;;STRING:: "clojure.core"
                                      (186 (ldc 16))      ;;STRING:: "+"
                                      (188 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (191 (checkcast (class "clojure.lang.Var")))
                                      (194 (putstatic (fieldCP "const__16" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (197 (ldc2_w 17))   ;; LONG:: "64"
                                      (200 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (203 (putstatic (fieldCP "const__17" "clojure.pprint$pretty_character" (class "java.lang.Object"))))
                                      (206 (ldc 2))       ;;STRING:: "clojure.core"
                                      (208 (ldc 18))      ;;STRING:: "="
                                      (210 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (213 (checkcast (class "clojure.lang.Var")))
                                      (216 (putstatic (fieldCP "const__18" "clojure.pprint$pretty_character" (class "clojure.lang.Var"))))
                                      (219 (aconst_null))
                                      (220 (ldc 19))      ;;STRING:: "else"
                                      (222 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (225 (checkcast (class "clojure.lang.Keyword")))
                                      (228 (putstatic (fieldCP "const__19" "clojure.pprint$pretty_character" (class "clojure.lang.Keyword"))))
                                      (231 (return))
                                      (endofcode 232))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 13) (code_length . 246)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$pretty_character" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_2)) 
                                      (10 (aconst_null)) 
                                      (11 (astore_2)) 
                                      (12 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (17 (astore 4)) 
                                      (19 (aload 4)) 
                                      (21 (lconst_0)) 
                                      (22 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (25 (aconst_null)) 
                                      (26 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (29 (astore 5)) 
                                      (31 (aload 4)) 
                                      (33 (aconst_null)) 
                                      (34 (astore 4)) 
                                      (36 (lconst_1)) 
                                      (37 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (40 (aconst_null)) 
                                      (41 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (44 (astore 6)) 
                                      (46 (aload 5)) 
                                      (48 (aconst_null)) 
                                      (49 (astore 5)) 
                                      (51 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (54 (istore 7)) 
                                      (56 (iload 7)) 
                                      (58 (i2l)) 
                                      (59 (ldc2_w 6)) ;; LONG:: "127"
                                      (62 (land)) 
                                      (63 (lstore 8)) 
                                      (65 (iload 7)) 
                                      (67 (i2l)) 
                                      (68 (ldc2_w 7)) ;; LONG:: "128"
                                      (71 (land)) 
                                      (72 (lstore 10)) 
                                      (74 (getstatic (fieldCP "const__9" "clojure.pprint$pretty_character" (class "clojure.lang.Var")))) 
                                      (77 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (80 (lload 8)) 
                                      (82 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (85 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (88 (astore 12)) 
                                      (90 (lload 10)) 
                                      (92 (lconst_0)) 
                                      (93 (lcmp)) 
                                      (94 (ifle 118)) ;;to TAG_0
                                      (97 (getstatic (fieldCP "const__11" "clojure.pprint$pretty_character" (class "clojure.lang.Var")))) 
                                      (100 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (103 (checkcast (class "clojure.lang.IFn"))) 
                                      (106 (ldc 20)) ;;STRING:: "Meta-"
                                      (108 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (113 (pop)) 
                                      (114 (goto 120))  ;;to TAG_1
                                      (117 (pop)) 
                                      (118 (aconst_null)) ;;at TAG_0
                                      (119 (pop)) 
                                      (120 (getstatic (fieldCP "const__11" "clojure.pprint$pretty_character" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (123 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (126 (checkcast (class "clojure.lang.IFn"))) 
                                      (129 (aload 12)) 
                                      (131 (dup)) 
                                      (132 (ifnull 149)) ;;to TAG_2
                                      (135 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (138 (if_acmpeq 150)) ;;to TAG_3
                                      (141 (aload 12)) 
                                      (143 (aconst_null)) 
                                      (144 (astore 12)) 
                                      (146 (goto 234)) ;;to TAG_4
                                      (149 (pop)) ;;at TAG_2
                                      (150 (lload 8)) ;;at TAG_3
                                      (152 (ldc2_w 13)) ;; LONG:: "32"
                                      (155 (lcmp)) 
                                      (156 (ifge 193)) ;;to TAG_5
                                      (159 (getstatic (fieldCP "const__14" "clojure.pprint$pretty_character" (class "clojure.lang.Var")))) 
                                      (162 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (165 (checkcast (class "clojure.lang.IFn"))) 
                                      (168 (ldc 21)) ;;STRING:: "Control-"
                                      (170 (lload 8)) 
                                      (172 (ldc2_w 17)) ;; LONG:: "64"
                                      (175 (invokestatic (methodCP "add" "clojure.lang.Numbers" (long long) long))) 
                                      (178 (invokestatic (methodCP "charCast" "clojure.lang.RT" (long) char))) 
                                      (181 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (184 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (189 (goto 234)) ;;to TAG_4
                                      (192 (pop)) 
                                      (193 (lload 8)) ;;at TAG_5
                                      (195 (ldc2_w 6)) ;; LONG:: "127"
                                      (198 (lcmp)) 
                                      (199 (ifne 208)) ;;to TAG_6
                                      (202 (ldc 22)) ;;STRING:: "Control-?"
                                      (204 (goto 234)) ;;to TAG_4
                                      (207 (pop)) 
                                      (208 (getstatic (fieldCP "const__19" "clojure.pprint$pretty_character" (class "clojure.lang.Keyword")))) ;;at TAG_6
                                      (211 (dup)) 
                                      (212 (ifnull 232)) ;;to TAG_7
                                      (215 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (218 (if_acmpeq 233)) ;;to TAG_8
                                      (221 (lload 8)) 
                                      (223 (invokestatic (methodCP "charCast" "clojure.lang.RT" (long) char))) 
                                      (226 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (229 (goto 234)) ;;to TAG_4
                                      (232 (pop)) ;;at TAG_7
                                      (233 (aconst_null)) ;;at TAG_8
                                      (234 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_4
                                      (239 (pop)) 
                                      (240 (aload 6)) 
                                      (242 (aconst_null)) 
                                      (243 (astore 6)) 
                                      (245 (areturn)) 
                                      (endofcode 246))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$pretty_character-class-table*
  (make-static-class-decls 
   *clojure.pprint$pretty_character*))

(defconst *package-name-map* 
  ("clojure.pprint$pretty_character" . "clojure"))

