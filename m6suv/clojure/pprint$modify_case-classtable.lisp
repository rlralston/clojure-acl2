; pprint$modify_case-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:56 CDT 2014.
;

(defconst *clojure.pprint$modify_case*
 (make-class-def
      '(class "clojure.pprint$modify_case"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "first")
                        (STRING  "clauses")
                        (STRING  "push-thread-bindings")
                        (STRING  "hash-map")
                        (STRING  "*out*")
                        (STRING  "clojure.pprint")
                        (STRING  "execute-sub-format")
                        (STRING  "base-args")
                        (STRING  "pop-thread-bindings"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "__site__0__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__0__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1)
                        (field "__site__1__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__1__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 0) (code_length . 143)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "first"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$modify_case" (class "clojure.lang.Var"))))
                                      (13 (aconst_null))
                                      (14 (ldc 2))        ;;STRING:: "clauses"
                                      (16 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (19 (checkcast (class "clojure.lang.Keyword")))
                                      (22 (putstatic (fieldCP "const__1" "clojure.pprint$modify_case" (class "clojure.lang.Keyword"))))
                                      (25 (ldc 0))        ;;STRING:: "clojure.core"
                                      (27 (ldc 3))        ;;STRING:: "push-thread-bindings"
                                      (29 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (32 (checkcast (class "clojure.lang.Var")))
                                      (35 (putstatic (fieldCP "const__2" "clojure.pprint$modify_case" (class "clojure.lang.Var"))))
                                      (38 (ldc 0))        ;;STRING:: "clojure.core"
                                      (40 (ldc 4))        ;;STRING:: "hash-map"
                                      (42 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (45 (checkcast (class "clojure.lang.Var")))
                                      (48 (putstatic (fieldCP "const__3" "clojure.pprint$modify_case" (class "clojure.lang.Var"))))
                                      (51 (ldc 0))        ;;STRING:: "clojure.core"
                                      (53 (ldc 5))        ;;STRING:: "*out*"
                                      (55 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (58 (checkcast (class "clojure.lang.Var")))
                                      (61 (putstatic (fieldCP "const__4" "clojure.pprint$modify_case" (class "clojure.lang.Var"))))
                                      (64 (ldc 6))        ;;STRING:: "clojure.pprint"
                                      (66 (ldc 7))        ;;STRING:: "execute-sub-format"
                                      (68 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (71 (checkcast (class "clojure.lang.Var")))
                                      (74 (putstatic (fieldCP "const__5" "clojure.pprint$modify_case" (class "clojure.lang.Var"))))
                                      (77 (aconst_null))
                                      (78 (ldc 8))        ;;STRING:: "base-args"
                                      (80 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (83 (checkcast (class "clojure.lang.Keyword")))
                                      (86 (putstatic (fieldCP "const__6" "clojure.pprint$modify_case" (class "clojure.lang.Keyword"))))
                                      (89 (ldc 0))        ;;STRING:: "clojure.core"
                                      (91 (ldc 9))        ;;STRING:: "pop-thread-bindings"
                                      (93 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (96 (checkcast (class "clojure.lang.Var")))
                                      (99 (putstatic (fieldCP "const__7" "clojure.pprint$modify_case" (class "clojure.lang.Var"))))
                                      (102 (new (class "clojure.lang.KeywordLookupSite")))
                                      (105 (dup))
                                      (106 (aconst_null))
                                      (107 (ldc 2))       ;;STRING:: "clauses"
                                      (109 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (112 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (115 (dup))
                                      (116 (putstatic (fieldCP "__site__0__" "clojure.pprint$modify_case" (class "clojure.lang.KeywordLookupSite"))))
                                      (119 (putstatic (fieldCP "__thunk__0__" "clojure.pprint$modify_case" (class "clojure.lang.ILookupThunk"))))
                                      (122 (new (class "clojure.lang.KeywordLookupSite")))
                                      (125 (dup))
                                      (126 (aconst_null))
                                      (127 (ldc 8))       ;;STRING:: "base-args"
                                      (129 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (132 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (135 (dup))
                                      (136 (putstatic (fieldCP "__site__1__" "clojure.pprint$modify_case" (class "clojure.lang.KeywordLookupSite"))))
                                      (139 (putstatic (fieldCP "__thunk__1__" "clojure.pprint$modify_case" (class "clojure.lang.ILookupThunk"))))
                                      (142 (return))
                                      (endofcode 143))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 8) (code_length . 214)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$modify_case" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (getstatic (fieldCP "__thunk__0__" "clojure.pprint$modify_case" (class "clojure.lang.ILookupThunk")))) 
                                      (12 (dup)) 
                                      (13 (aload_2)) 
                                      (14 (dup_x2)) 
                                      (15 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (20 (dup_x2)) 
                                      (21 (if_acmpeq 28)) ;;to TAG_0
                                      (24 (pop)) 
                                      (25 (goto 50)) ;;to TAG_1
                                      (28 (swap)) ;;at TAG_0
                                      (29 (pop)) 
                                      (30 (dup)) 
                                      (31 (getstatic (fieldCP "__site__0__" "clojure.pprint$modify_case" (class "clojure.lang.KeywordLookupSite")))) 
                                      (34 (swap)) 
                                      (35 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (40 (dup)) 
                                      (41 (putstatic (fieldCP "__thunk__0__" "clojure.pprint$modify_case" (class "clojure.lang.ILookupThunk")))) 
                                      (44 (swap)) 
                                      (45 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (50 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_1
                                      (55 (astore 5)) 
                                      (57 (getstatic (fieldCP "const__2" "clojure.pprint$modify_case" (class "clojure.lang.Var")))) 
                                      (60 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (63 (checkcast (class "clojure.lang.IFn"))) 
                                      (66 (getstatic (fieldCP "const__3" "clojure.pprint$modify_case" (class "clojure.lang.Var")))) 
                                      (69 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (72 (checkcast (class "clojure.lang.IFn"))) 
                                      (75 (getstatic (fieldCP "const__4" "clojure.pprint$modify_case" (class "clojure.lang.Var")))) 
                                      (78 (aload_1)) 
                                      (79 (aconst_null)) 
                                      (80 (astore_1)) 
                                      (81 (checkcast (class "clojure.lang.IFn"))) 
                                      (84 (getstatic (fieldCP "const__4" "clojure.pprint$modify_case" (class "clojure.lang.Var")))) 
                                      (87 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (90 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (95 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (100 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (105 (pop)) 
                                      (106 (getstatic (fieldCP "const__5" "clojure.pprint$modify_case" (class "clojure.lang.Var")))) ;;at TAG_5
                                      (109 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (112 (checkcast (class "clojure.lang.IFn"))) 
                                      (115 (aload 5)) 
                                      (117 (aconst_null)) 
                                      (118 (astore 5)) 
                                      (120 (aload_3)) 
                                      (121 (aconst_null)) 
                                      (122 (astore_3)) 
                                      (123 (getstatic (fieldCP "__thunk__1__" "clojure.pprint$modify_case" (class "clojure.lang.ILookupThunk")))) 
                                      (126 (dup)) 
                                      (127 (aload_2)) 
                                      (128 (aconst_null)) 
                                      (129 (astore_2)) 
                                      (130 (dup_x2)) 
                                      (131 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (136 (dup_x2)) 
                                      (137 (if_acmpeq 144))  ;;to TAG_2
                                      (140 (pop)) 
                                      (141 (goto 166)) ;;to TAG_3
                                      (144 (swap)) ;;at TAG_2
                                      (145 (pop)) 
                                      (146 (dup)) 
                                      (147 (getstatic (fieldCP "__site__1__" "clojure.pprint$modify_case" (class "clojure.lang.KeywordLookupSite")))) 
                                      (150 (swap)) 
                                      (151 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (156 (dup)) 
                                      (157 (putstatic (fieldCP "__thunk__1__" "clojure.pprint$modify_case" (class "clojure.lang.ILookupThunk")))) 
                                      (160 (swap)) 
                                      (161 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (166 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) ;;at TAG_3
                                      (171 (astore 6)) 
                                      (173 (getstatic (fieldCP "const__7" "clojure.pprint$modify_case" (class "clojure.lang.Var")))) ;;at TAG_6
                                      (176 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (179 (checkcast (class "clojure.lang.IFn"))) 
                                      (182 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (187 (pop)) 
                                      (188 (goto 211)) ;;to TAG_4
                                      (191 (astore 7)) ;;at TAG_7
                                      (193 (getstatic (fieldCP "const__7" "clojure.pprint$modify_case" (class "clojure.lang.Var")))) 
                                      (196 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (199 (checkcast (class "clojure.lang.IFn"))) 
                                      (202 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (207 (pop)) 
                                      (208 (aload 7)) 
                                      (210 (athrow)) 
                                      (211 (aload 6)) ;;at TAG_4
                                      (213 (areturn)) 
                                      (endofcode 214))
                                   (Exceptions 
                                     (handler 106 173  191 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "swapThunk"
                              (parameters int (class "clojure.lang.ILookupThunk"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 39)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (tableswitch (tableswitchinfo 38 (0 . 1) (24 31))))  ;;to TAG_2;;to TAG_0;;to TAG_1
                                      (24 (aload_2)) ;;at TAG_1
                                      (25 (putstatic (fieldCP "__thunk__0__" "clojure.pprint$modify_case" (class "clojure.lang.ILookupThunk")))) 
                                      (28 (goto 38)) ;;to TAG_0
                                      (31 (aload_2)) ;;at TAG_2
                                      (32 (putstatic (fieldCP "__thunk__1__" "clojure.pprint$modify_case" (class "clojure.lang.ILookupThunk")))) 
                                      (35 (goto 38)) ;;to TAG_0
                                      (38 (return)) ;;at TAG_0
                                      (endofcode 39))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$modify_case-class-table*
  (make-static-class-decls 
   *clojure.pprint$modify_case*))

(defconst *package-name-map* 
  ("clojure.pprint$modify_case" . "clojure"))

