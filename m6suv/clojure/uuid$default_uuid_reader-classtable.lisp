; uuid$default_uuid_reader-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:59 CDT 2014.
;

(defconst *clojure.uuid$default_uuid_reader*
 (make-class-def
      '(class "clojure.uuid$default_uuid_reader"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "string?")
                        (STRING  "str")
                        (STRING  "pr-str")
                        (STRING  "form")
                        (STRING  "line")
                        (STRING  "column")
                        (STRING  "Assert failed: "))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 0) (code_length . 123)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "string?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.uuid$default_uuid_reader" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "str"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.uuid$default_uuid_reader" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "pr-str"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.uuid$default_uuid_reader" (class "clojure.lang.Var"))))
                                      (39 (iconst_2))
                                      (40 (anewarray (class "java.lang.Object")))
                                      (43 (dup))
                                      (44 (iconst_0))
                                      (45 (aconst_null))
                                      (46 (ldc 1))        ;;STRING:: "string?"
                                      (48 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (51 (aastore))
                                      (52 (dup))
                                      (53 (iconst_1))
                                      (54 (aconst_null))
                                      (55 (ldc 4))        ;;STRING:: "form"
                                      (57 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (60 (aastore))
                                      (61 (invokestatic
					(methodCP "asList" "java.util.Arrays" ((array (class "java.lang.Object"))) (class "java.util.List"))))
                                      (64 (invokestatic
					(methodCP "create" "clojure.lang.PersistentList" ((class "java.util.List")) (class "clojure.lang.IPersistentList"))))
                                      (67 (checkcast (class "clojure.lang.IObj")))
                                      (70 (iconst_4))
                                      (71 (anewarray (class "java.lang.Object")))
                                      (74 (dup))
                                      (75 (iconst_0))
                                      (76 (aconst_null))
                                      (77 (ldc 5))        ;;STRING:: "line"
                                      (79 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (82 (aastore))
                                      (83 (dup))
                                      (84 (iconst_1))
                                      (85 (bipush 12))
                                      (87 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (90 (aastore))
                                      (91 (dup))
                                      (92 (iconst_2))
                                      (93 (aconst_null))
                                      (94 (ldc 6))        ;;STRING:: "column"
                                      (96 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (99 (aastore))
                                      (100 (dup))
                                      (101 (iconst_3))
                                      (102 (bipush 10))
                                      (104 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (107 (aastore))
                                      (108 (invokestatic
					(methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (111 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (114 (invokeinterface
					(methodCP "withMeta" "clojure.lang.IObj" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")) 2))
                                      (119 (putstatic (fieldCP "const__3" "clojure.uuid$default_uuid_reader" (class "java.lang.Object"))))
                                      (122 (return))
                                      (endofcode 123))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 85)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.uuid$default_uuid_reader" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (dup)) 
                                      (16 (ifnull 30)) ;;to TAG_0
                                      (19 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (22 (if_acmpeq 31)) ;;to TAG_1
                                      (25 (aconst_null)) 
                                      (26 (pop)) 
                                      (27 (goto 75))  ;;to TAG_2
                                      (30 (pop)) ;;at TAG_0
                                      (31 (new (class "java.lang.AssertionError"))) ;;at TAG_1
                                      (34 (dup)) 
                                      (35 (getstatic (fieldCP "const__1" "clojure.uuid$default_uuid_reader" (class "clojure.lang.Var")))) 
                                      (38 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (41 (checkcast (class "clojure.lang.IFn"))) 
                                      (44 (ldc 7)) ;;STRING:: "Assert failed: "
                                      (46 (getstatic (fieldCP "const__2" "clojure.uuid$default_uuid_reader" (class "clojure.lang.Var")))) 
                                      (49 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (52 (checkcast (class "clojure.lang.IFn"))) 
                                      (55 (getstatic (fieldCP "const__3" "clojure.uuid$default_uuid_reader" (class "java.lang.Object")))) 
                                      (58 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (63 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (68 (invokespecial (methodCP "<init>" "java.lang.AssertionError" ((class "java.lang.Object")) void))) 
                                      (71 (checkcast (class "java.lang.Throwable"))) 
                                      (74 (athrow)) 
                                      (75 (aload_1)) ;;at TAG_2
                                      (76 (aconst_null)) 
                                      (77 (astore_1)) 
                                      (78 (checkcast (class "java.lang.String"))) 
                                      (81 (invokestatic (methodCP "fromString" "java.util.UUID" ((class "java.lang.String")) (class "java.util.UUID")))) 
                                      (84 (areturn)) 
                                      (endofcode 85))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *uuid$default_uuid_reader-class-table*
  (make-static-class-decls 
   *clojure.uuid$default_uuid_reader*))

(defconst *package-name-map* 
  ("clojure.uuid$default_uuid_reader" . "clojure"))

