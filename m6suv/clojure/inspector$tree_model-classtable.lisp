; inspector$tree_model-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:49 CDT 2014.
;

(defconst *clojure.inspector$tree_model*
 (make-class-def
      '(class "clojure.inspector$tree_model"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "init-proxy")
                        (STRING  "removeTreeModelListener")
                        (STRING  "getIndexOfChild")
                        (STRING  "valueForPathChanged")
                        (STRING  "isLeaf")
                        (STRING  "getChildCount")
                        (STRING  "getChild")
                        (STRING  "addTreeModelListener")
                        (STRING  "getRoot"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 14)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "init-proxy"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.inspector$tree_model" (class "clojure.lang.Var"))))
                                      (13 (return))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 9) (max_locals . 3) (code_length . 169)
                                   (parsedcode
                                      (0 (new (class "clojure.inspector.proxy$java.lang.Object$TreeModel$fd84fd03")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "clojure.inspector.proxy$java.lang.Object$TreeModel$fd84fd03" () void)))
                                      (7 (astore_2))
                                      (8 (getstatic (fieldCP "const__0" "clojure.inspector$tree_model" (class "clojure.lang.Var"))))
                                      (11 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (14 (checkcast (class "clojure.lang.IFn")))
                                      (17 (aload_2))
                                      (18 (bipush 16))
                                      (20 (anewarray (class "java.lang.Object")))
                                      (23 (dup))
                                      (24 (iconst_0))
                                      (25 (ldc 2))        ;;STRING:: "removeTreeModelListener"
                                      (27 (aastore))
                                      (28 (dup))
                                      (29 (iconst_1))
                                      (30 (new (class "clojure.inspector$tree_model$fn__6882")))
                                      (33 (dup))
                                      (34 (invokespecial
					(methodCP "<init>" "clojure.inspector$tree_model$fn__6882" () void)))
                                      (37 (aastore))
                                      (38 (dup))
                                      (39 (iconst_2))
                                      (40 (ldc 3))        ;;STRING:: "getIndexOfChild"
                                      (42 (aastore))
                                      (43 (dup))
                                      (44 (iconst_3))
                                      (45 (new (class "clojure.inspector$tree_model$fn__6884")))
                                      (48 (dup))
                                      (49 (invokespecial
					(methodCP "<init>" "clojure.inspector$tree_model$fn__6884" () void)))
                                      (52 (aastore))
                                      (53 (dup))
                                      (54 (iconst_4))
                                      (55 (ldc 4))        ;;STRING:: "valueForPathChanged"
                                      (57 (aastore))
                                      (58 (dup))
                                      (59 (iconst_5))
                                      (60 (new (class "clojure.inspector$tree_model$fn__6886")))
                                      (63 (dup))
                                      (64 (invokespecial
					(methodCP "<init>" "clojure.inspector$tree_model$fn__6886" () void)))
                                      (67 (aastore))
                                      (68 (dup))
                                      (69 (bipush 6))
                                      (71 (ldc 5))        ;;STRING:: "isLeaf"
                                      (73 (aastore))
                                      (74 (dup))
                                      (75 (bipush 7))
                                      (77 (new (class "clojure.inspector$tree_model$fn__6888")))
                                      (80 (dup))
                                      (81 (invokespecial
					(methodCP "<init>" "clojure.inspector$tree_model$fn__6888" () void)))
                                      (84 (aastore))
                                      (85 (dup))
                                      (86 (bipush 8))
                                      (88 (ldc 6))        ;;STRING:: "getChildCount"
                                      (90 (aastore))
                                      (91 (dup))
                                      (92 (bipush 9))
                                      (94 (new (class "clojure.inspector$tree_model$fn__6890")))
                                      (97 (dup))
                                      (98 (invokespecial
					(methodCP "<init>" "clojure.inspector$tree_model$fn__6890" () void)))
                                      (101 (aastore))
                                      (102 (dup))
                                      (103 (bipush 10))
                                      (105 (ldc 7))       ;;STRING:: "getChild"
                                      (107 (aastore))
                                      (108 (dup))
                                      (109 (bipush 11))
                                      (111 (new (class "clojure.inspector$tree_model$fn__6892")))
                                      (114 (dup))
                                      (115 (invokespecial
					(methodCP "<init>" "clojure.inspector$tree_model$fn__6892" () void)))
                                      (118 (aastore))
                                      (119 (dup))
                                      (120 (bipush 12))
                                      (122 (ldc 8))       ;;STRING:: "addTreeModelListener"
                                      (124 (aastore))
                                      (125 (dup))
                                      (126 (bipush 13))
                                      (128 (new (class "clojure.inspector$tree_model$fn__6894")))
                                      (131 (dup))
                                      (132 (invokespecial
					(methodCP "<init>" "clojure.inspector$tree_model$fn__6894" () void)))
                                      (135 (aastore))
                                      (136 (dup))
                                      (137 (bipush 14))
                                      (139 (ldc 9))       ;;STRING:: "getRoot"
                                      (141 (aastore))
                                      (142 (dup))
                                      (143 (bipush 15))
                                      (145 (new (class "clojure.inspector$tree_model$fn__6896")))
                                      (148 (dup))
                                      (149 (aload_1))
                                      (150 (aconst_null))
                                      (151 (astore_1))
                                      (152 (invokespecial
					(methodCP "<init>" "clojure.inspector$tree_model$fn__6896" ((class "java.lang.Object")) void)))
                                      (155 (aastore))
                                      (156 (invokestatic
					(methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (159 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3))
                                      (164 (pop))
                                      (165 (aload_2))
                                      (166 (aconst_null))
                                      (167 (astore_2))
                                      (168 (areturn))
                                      (endofcode 169))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *inspector$tree_model-class-table*
  (make-static-class-decls 
   *clojure.inspector$tree_model*))

(defconst *package-name-map* 
  ("clojure.inspector$tree_model" . "clojure"))

