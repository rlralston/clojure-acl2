; instant$construct_calendar-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:49 CDT 2014.
;

(defconst *clojure.instant$construct_calendar*
 (make-class-def
      '(class "clojure.instant$construct_calendar"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "dec")
                        (STRING  "quot")
                        (LONG 1000000)
                        (STRING  "format")
                        (STRING  "neg?")
                        (STRING  "GMT%s%02d:%02d")
                        (STRING  "-")
                        (STRING  "+"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 62)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "dec"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.instant$construct_calendar" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "quot"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.instant$construct_calendar" (class "clojure.lang.Var"))))
                                      (26 (ldc2_w 3))     ;; LONG:: "1000000"
                                      (29 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (32 (putstatic (fieldCP "const__2" "clojure.instant$construct_calendar" (class "java.lang.Object"))))
                                      (35 (ldc 0))        ;;STRING:: "clojure.core"
                                      (37 (ldc 4))        ;;STRING:: "format"
                                      (39 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (42 (checkcast (class "clojure.lang.Var")))
                                      (45 (putstatic (fieldCP "const__3" "clojure.instant$construct_calendar" (class "clojure.lang.Var"))))
                                      (48 (ldc 0))        ;;STRING:: "clojure.core"
                                      (50 (ldc 5))        ;;STRING:: "neg?"
                                      (52 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (55 (checkcast (class "clojure.lang.Var")))
                                      (58 (putstatic (fieldCP "const__4" "clojure.instant$construct_calendar" (class "clojure.lang.Var"))))
                                      (61 (return))
                                      (endofcode 62))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 9) (max_locals . 12) (code_length . 172)
                                   (parsedcode
                                      (0 (new (class "java.util.GregorianCalendar"))) 
                                      (3 (dup)) 
                                      (4 (aload_1)) 
                                      (5 (aconst_null)) 
                                      (6 (astore_1)) 
                                      (7 (checkcast (class "java.lang.Number"))) 
                                      (10 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (13 (aload_2)) 
                                      (14 (aconst_null)) 
                                      (15 (astore_2)) 
                                      (16 (invokestatic (methodCP "dec" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (19 (checkcast (class "java.lang.Number"))) 
                                      (22 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (25 (aload_3)) 
                                      (26 (aconst_null)) 
                                      (27 (astore_3)) 
                                      (28 (checkcast (class "java.lang.Number"))) 
                                      (31 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (34 (aload 4)) 
                                      (36 (aconst_null)) 
                                      (37 (astore 4)) 
                                      (39 (checkcast (class "java.lang.Number"))) 
                                      (42 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (45 (aload 5)) 
                                      (47 (aconst_null)) 
                                      (48 (astore 5)) 
                                      (50 (checkcast (class "java.lang.Number"))) 
                                      (53 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (56 (aload 6)) 
                                      (58 (aconst_null)) 
                                      (59 (astore 6)) 
                                      (61 (checkcast (class "java.lang.Number"))) 
                                      (64 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (67 (invokespecial (methodCP "<init>" "java.util.GregorianCalendar" (int int int int int int) void))) 
                                      (70 (astore 11)) 
                                      (72 (aload 11)) 
                                      (74 (checkcast (class "java.util.Calendar"))) 
                                      (77 (getstatic (fieldCP "MILLISECOND" "java.util.Calendar" int))) 
                                      (80 (aload 7)) 
                                      (82 (aconst_null)) 
                                      (83 (astore 7)) 
                                      (85 (ldc2_w 3)) ;; LONG:: "1000000"
                                      (88 (invokestatic (methodCP "quotient" "clojure.lang.Numbers" ((class "java.lang.Object") long) (class "java.lang.Number")))) 
                                      (91 (checkcast (class "java.lang.Number"))) 
                                      (94 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (97 (invokevirtual (methodCP "set" "java.util.Calendar" (int int) void))) 
                                      (100 (aconst_null)) 
                                      (101 (pop)) 
                                      (102 (aload 11)) 
                                      (104 (checkcast (class "java.util.GregorianCalendar"))) 
                                      (107 (getstatic (fieldCP "const__3" "clojure.instant$construct_calendar" (class "clojure.lang.Var")))) 
                                      (110 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (113 (checkcast (class "clojure.lang.IFn"))) 
                                      (116 (ldc 6)) ;;STRING:: "GMT%s%02d:%02d"
                                      (118 (aload 8)) 
                                      (120 (aconst_null)) 
                                      (121 (astore 8)) 
                                      (123 (invokestatic (methodCP "isNeg" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (126 (ifeq 135))  ;;to TAG_0
                                      (129 (ldc 7)) ;;STRING:: "-"
                                      (131 (goto 137)) ;;to TAG_1
                                      (134 (pop)) 
                                      (135 (ldc 8)) ;;at TAG_0;;STRING:: "+"
                                      (137 (aload 9)) ;;at TAG_1
                                      (139 (aconst_null)) 
                                      (140 (astore 9)) 
                                      (142 (aload 10)) 
                                      (144 (aconst_null)) 
                                      (145 (astore 10)) 
                                      (147 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (152 (checkcast (class "java.lang.String"))) 
                                      (155 (invokestatic (methodCP "getTimeZone" "java.util.TimeZone" ((class "java.lang.String")) (class "java.util.TimeZone")))) 
                                      (158 (checkcast (class "java.util.TimeZone"))) 
                                      (161 (invokevirtual (methodCP "setTimeZone" "java.util.GregorianCalendar" ((class "java.util.TimeZone")) void))) 
                                      (164 (aconst_null)) 
                                      (165 (pop)) 
                                      (166 (aload 11)) 
                                      (168 (aconst_null)) 
                                      (169 (astore 11)) 
                                      (171 (areturn)) 
                                      (endofcode 172))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *instant$construct_calendar-class-table*
  (make-static-class-decls 
   *clojure.instant$construct_calendar*))

(defconst *package-name-map* 
  ("clojure.instant$construct_calendar" . "clojure"))

