; pprint$format_logical_block$fn__7878-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:56 CDT 2014.
;

(defconst *clojure.pprint$format_logical_block$fn__7878*
 (make-class-def
      '(class "clojure.pprint$format_logical_block$fn__7878"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.pprint")
                        (STRING  "start-block")
                        (STRING  "clojure.core")
                        (STRING  "*out*")
                        (STRING  "execute-sub-format")
                        (STRING  "init-navigator")
                        (STRING  "base-args")
                        (STRING  "end-block")
                        (STRING  "pop-thread-bindings"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "__site__0__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__0__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1)
                        (field "arg" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "suffix" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "body" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "prefix" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "params" (class "java.lang.Object") (accessflags  *class* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 0) (code_length . 111)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.pprint"
                                      (2 (ldc 1))         ;;STRING:: "start-block"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.core"
                                      (15 (ldc 3))        ;;STRING:: "*out*"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.pprint"
                                      (28 (ldc 4))        ;;STRING:: "execute-sub-format"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.pprint"
                                      (41 (ldc 5))        ;;STRING:: "init-navigator"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var"))))
                                      (52 (aconst_null))
                                      (53 (ldc 6))        ;;STRING:: "base-args"
                                      (55 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (58 (checkcast (class "clojure.lang.Keyword")))
                                      (61 (putstatic (fieldCP "const__4" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Keyword"))))
                                      (64 (ldc 0))        ;;STRING:: "clojure.pprint"
                                      (66 (ldc 7))        ;;STRING:: "end-block"
                                      (68 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (71 (checkcast (class "clojure.lang.Var")))
                                      (74 (putstatic (fieldCP "const__5" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var"))))
                                      (77 (ldc 2))        ;;STRING:: "clojure.core"
                                      (79 (ldc 8))        ;;STRING:: "pop-thread-bindings"
                                      (81 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (84 (checkcast (class "clojure.lang.Var")))
                                      (87 (putstatic (fieldCP "const__6" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var"))))
                                      (90 (new (class "clojure.lang.KeywordLookupSite")))
                                      (93 (dup))
                                      (94 (aconst_null))
                                      (95 (ldc 6))        ;;STRING:: "base-args"
                                      (97 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (100 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (103 (dup))
                                      (104 (putstatic (fieldCP "__site__0__" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.KeywordLookupSite"))))
                                      (107 (putstatic (fieldCP "__thunk__0__" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.ILookupThunk"))))
                                      (110 (return))
                                      (endofcode 111))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 6) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "arg" "clojure.pprint$format_logical_block$fn__7878" (class "java.lang.Object"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "suffix" "clojure.pprint$format_logical_block$fn__7878" (class "java.lang.Object"))))
                                      (14 (aload_0))
                                      (15 (aload_3))
                                      (16 (putfield (fieldCP "body" "clojure.pprint$format_logical_block$fn__7878" (class "java.lang.Object"))))
                                      (19 (aload_0))
                                      (20 (aload 4))
                                      (22 (putfield (fieldCP "prefix" "clojure.pprint$format_logical_block$fn__7878" (class "java.lang.Object"))))
                                      (25 (aload_0))
                                      (26 (aload 5))
                                      (28 (putfield (fieldCP "params" "clojure.pprint$format_logical_block$fn__7878" (class "java.lang.Object"))))
                                      (31 (return))
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 3) (code_length . 164)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var")))) ;;at TAG_3
                                      (3 (checkcast (class "clojure.lang.IFn"))) 
                                      (6 (getstatic (fieldCP "const__1" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var")))) 
                                      (9 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "prefix" "clojure.pprint$format_logical_block$fn__7878" (class "java.lang.Object")))) 
                                      (16 (aconst_null)) 
                                      (17 (aload_0)) 
                                      (18 (getfield (fieldCP "suffix" "clojure.pprint$format_logical_block$fn__7878" (class "java.lang.Object")))) 
                                      (21 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (26 (pop)) 
                                      (27 (getstatic (fieldCP "const__2" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var")))) 
                                      (30 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (33 (checkcast (class "clojure.lang.IFn"))) 
                                      (36 (aload_0)) 
                                      (37 (getfield (fieldCP "body" "clojure.pprint$format_logical_block$fn__7878" (class "java.lang.Object")))) 
                                      (40 (getstatic (fieldCP "const__3" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var")))) 
                                      (43 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (46 (checkcast (class "clojure.lang.IFn"))) 
                                      (49 (aload_0)) 
                                      (50 (getfield (fieldCP "arg" "clojure.pprint$format_logical_block$fn__7878" (class "java.lang.Object")))) 
                                      (53 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (58 (getstatic (fieldCP "__thunk__0__" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.ILookupThunk")))) 
                                      (61 (dup)) 
                                      (62 (aload_0)) 
                                      (63 (getfield (fieldCP "params" "clojure.pprint$format_logical_block$fn__7878" (class "java.lang.Object")))) 
                                      (66 (dup_x2)) 
                                      (67 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (72 (dup_x2)) 
                                      (73 (if_acmpeq 80)) ;;to TAG_0
                                      (76 (pop)) 
                                      (77 (goto 102)) ;;to TAG_1
                                      (80 (swap)) ;;at TAG_0
                                      (81 (pop)) 
                                      (82 (dup)) 
                                      (83 (getstatic (fieldCP "__site__0__" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.KeywordLookupSite")))) 
                                      (86 (swap)) 
                                      (87 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (92 (dup)) 
                                      (93 (putstatic (fieldCP "__thunk__0__" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.ILookupThunk")))) 
                                      (96 (swap)) 
                                      (97 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (102 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) ;;at TAG_1
                                      (107 (pop)) 
                                      (108 (getstatic (fieldCP "const__5" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var")))) 
                                      (111 (checkcast (class "clojure.lang.IFn"))) 
                                      (114 (getstatic (fieldCP "const__1" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var")))) 
                                      (117 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (120 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (125 (astore_1)) 
                                      (126 (getstatic (fieldCP "const__6" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var")))) ;;at TAG_4
                                      (129 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (132 (checkcast (class "clojure.lang.IFn"))) 
                                      (135 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (140 (pop)) 
                                      (141 (goto 162))  ;;to TAG_2
                                      (144 (astore_2)) ;;at TAG_5
                                      (145 (getstatic (fieldCP "const__6" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.Var")))) 
                                      (148 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (151 (checkcast (class "clojure.lang.IFn"))) 
                                      (154 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (159 (pop)) 
                                      (160 (aload_2)) 
                                      (161 (athrow)) 
                                      (162 (aload_1)) ;;at TAG_2
                                      (163 (areturn)) 
                                      (endofcode 164))
                                   (Exceptions 
                                     (handler 0 126  144 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "swapThunk"
                              (parameters int (class "clojure.lang.ILookupThunk"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 28)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (tableswitch (tableswitchinfo 27 (0 . 0) (20))))  ;;to TAG_0;;to TAG_1
                                      (20 (aload_2)) ;;at TAG_1
                                      (21 (putstatic (fieldCP "__thunk__0__" "clojure.pprint$format_logical_block$fn__7878" (class "clojure.lang.ILookupThunk")))) 
                                      (24 (goto 27))  ;;to TAG_0
                                      (27 (return)) ;;at TAG_0
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$format_logical_block$fn__7878-class-table*
  (make-static-class-decls 
   *clojure.pprint$format_logical_block$fn__7878*))

(defconst *package-name-map* 
  ("clojure.pprint$format_logical_block$fn__7878" . "clojure"))

