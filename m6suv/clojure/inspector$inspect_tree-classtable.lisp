; inspector$inspect_tree-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:49 CDT 2014.
;

(defconst *clojure.inspector$inspect_tree*
 (make-class-def
      '(class "clojure.inspector$inspect_tree"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.inspector")
                        (STRING  "tree-model")
                        (LONG 400)
                        (LONG 600)
                        (STRING  "Clojure Inspector")
                        (STRING  "javax.swing.JTree"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 32)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.inspector"
                                      (2 (ldc 1))         ;;STRING:: "tree-model"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.inspector$inspect_tree" (class "clojure.lang.Var"))))
                                      (13 (ldc2_w 2))     ;; LONG:: "400"
                                      (16 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (19 (putstatic (fieldCP "const__1" "clojure.inspector$inspect_tree" (class "java.lang.Object"))))
                                      (22 (ldc2_w 3))     ;; LONG:: "600"
                                      (25 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (28 (putstatic (fieldCP "const__2" "clojure.inspector$inspect_tree" (class "java.lang.Object"))))
                                      (31 (return))
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 10) (max_locals . 3) (code_length . 109)
                                   (parsedcode
                                      (0 (new (class "javax.swing.JFrame")))
                                      (3 (dup))
                                      (4 (ldc 4))         ;;STRING:: "Clojure Inspector"
                                      (6 (checkcast (class "java.lang.String")))
                                      (9 (invokespecial
					(methodCP "<init>" "javax.swing.JFrame" ((class "java.lang.String")) void)))
                                      (12 (astore_2))
                                      (13 (aload_2))
                                      (14 (checkcast (class "java.awt.Container")))
                                      (17 (new (class "javax.swing.JScrollPane")))
                                      (20 (dup))
                                      (21 (ldc 5))        ;;STRING:: "javax.swing.JTree"
                                      (23 (invokestatic
					(methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class"))))
                                      (26 (iconst_1))
                                      (27 (anewarray (class "java.lang.Object")))
                                      (30 (dup))
                                      (31 (iconst_0))
                                      (32 (getstatic (fieldCP "const__0" "clojure.inspector$inspect_tree" (class "clojure.lang.Var"))))
                                      (35 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (38 (checkcast (class "clojure.lang.IFn")))
                                      (41 (aload_1))
                                      (42 (aconst_null))
                                      (43 (astore_1))
                                      (44 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2))
                                      (49 (aastore))
                                      (50 (invokestatic
					(methodCP "invokeConstructor" "clojure.lang.Reflector" ((class "java.lang.Class") (array (class "java.lang.Object"))) (class "java.lang.Object"))))
                                      (53 (checkcast (class "java.awt.Component")))
                                      (56 (invokespecial
					(methodCP "<init>" "javax.swing.JScrollPane" ((class "java.awt.Component")) void)))
                                      (59 (checkcast (class "java.awt.Component")))
                                      (62 (invokevirtual
					(methodCP "add" "java.awt.Container" ((class "java.awt.Component")) (class "java.awt.Component"))))
                                      (65 (pop))
                                      (66 (aload_2))
                                      (67 (checkcast (class "java.awt.Window")))
                                      (70 (ldc2_w 2))     ;; LONG:: "400"
                                      (73 (invokestatic
					(methodCP "intCast" "clojure.lang.RT" (long) int)))
                                      (76 (ldc2_w 3))     ;; LONG:: "600"
                                      (79 (invokestatic
					(methodCP "intCast" "clojure.lang.RT" (long) int)))
                                      (82 (invokevirtual
					(methodCP "setSize" "java.awt.Window" (int int) void)))
                                      (85 (aconst_null))
                                      (86 (pop))
                                      (87 (aload_2))
                                      (88 (checkcast (class "java.awt.Window")))
                                      (91 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean"))))
                                      (94 (checkcast (class "java.lang.Boolean")))
                                      (97 (invokevirtual
					(methodCP "booleanValue" "java.lang.Boolean" () boolean)))
                                      (100 (invokevirtual
					(methodCP "setVisible" "java.awt.Window" (boolean) void)))
                                      (103 (aconst_null))
                                      (104 (pop))
                                      (105 (aload_2))
                                      (106 (aconst_null))
                                      (107 (astore_2))
                                      (108 (areturn))
                                      (endofcode 109))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *inspector$inspect_tree-class-table*
  (make-static-class-decls 
   *clojure.inspector$inspect_tree*))

(defconst *package-name-map* 
  ("clojure.inspector$inspect_tree" . "clojure"))

