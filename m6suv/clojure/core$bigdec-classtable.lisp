; core$bigdec-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:40 CDT 2014.
;

(defconst *clojure.core$bigdec*
 (make-class-def
      '(class "clojure.core$bigdec"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "decimal?")
                        (STRING  "float?")
                        (STRING  "double")
                        (STRING  "ratio?")
                        (STRING  "/")
                        (STRING  "instance?")
                        (STRING  "number?")
                        (STRING  "long")
                        (STRING  "else")
                        (STRING  "java.math.BigDecimal"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 117)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "decimal?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$bigdec" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "float?"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$bigdec" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "double"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$bigdec" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "ratio?"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.core$bigdec" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "/"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.core$bigdec" (class "clojure.lang.Var"))))
                                      (65 (ldc 0))        ;;STRING:: "clojure.core"
                                      (67 (ldc 6))        ;;STRING:: "instance?"
                                      (69 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (72 (checkcast (class "clojure.lang.Var")))
                                      (75 (putstatic (fieldCP "const__5" "clojure.core$bigdec" (class "clojure.lang.Var"))))
                                      (78 (ldc 0))        ;;STRING:: "clojure.core"
                                      (80 (ldc 7))        ;;STRING:: "number?"
                                      (82 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (85 (checkcast (class "clojure.lang.Var")))
                                      (88 (putstatic (fieldCP "const__6" "clojure.core$bigdec" (class "clojure.lang.Var"))))
                                      (91 (ldc 0))        ;;STRING:: "clojure.core"
                                      (93 (ldc 8))        ;;STRING:: "long"
                                      (95 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (98 (checkcast (class "clojure.lang.Var")))
                                      (101 (putstatic (fieldCP "const__7" "clojure.core$bigdec" (class "clojure.lang.Var"))))
                                      (104 (aconst_null))
                                      (105 (ldc 9))       ;;STRING:: "else"
                                      (107 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (110 (checkcast (class "clojure.lang.Keyword")))
                                      (113 (putstatic (fieldCP "const__8" "clojure.core$bigdec" (class "clojure.lang.Keyword"))))
                                      (116 (return))
                                      (endofcode 117))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 247)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$bigdec" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (dup)) 
                                      (16 (ifnull 31)) ;;to TAG_0
                                      (19 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (22 (if_acmpeq 32))  ;;to TAG_1
                                      (25 (aload_1)) 
                                      (26 (aconst_null)) 
                                      (27 (astore_1)) 
                                      (28 (goto 246)) ;;to TAG_2
                                      (31 (pop)) ;;at TAG_0
                                      (32 (getstatic (fieldCP "const__1" "clojure.core$bigdec" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (35 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (38 (checkcast (class "clojure.lang.IFn"))) 
                                      (41 (aload_1)) 
                                      (42 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (47 (dup)) 
                                      (48 (ifnull 69)) ;;to TAG_3
                                      (51 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (54 (if_acmpeq 70)) ;;to TAG_4
                                      (57 (aload_1)) 
                                      (58 (aconst_null)) 
                                      (59 (astore_1)) 
                                      (60 (invokestatic (methodCP "doubleCast" "clojure.lang.RT" ((class "java.lang.Object")) double))) 
                                      (63 (invokestatic (methodCP "valueOf" "java.math.BigDecimal" (double) (class "java.math.BigDecimal")))) 
                                      (66 (goto 246)) ;;to TAG_2
                                      (69 (pop)) ;;at TAG_3
                                      (70 (getstatic (fieldCP "const__3" "clojure.core$bigdec" (class "clojure.lang.Var")))) ;;at TAG_4
                                      (73 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (76 (checkcast (class "clojure.lang.IFn"))) 
                                      (79 (aload_1)) 
                                      (80 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (85 (dup)) 
                                      (86 (ifnull 127)) ;;to TAG_5
                                      (89 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (92 (if_acmpeq 128)) ;;to TAG_6
                                      (95 (new (class "java.math.BigDecimal"))) 
                                      (98 (dup)) 
                                      (99 (aload_1)) 
                                      (100 (checkcast (class "clojure.lang.Ratio"))) 
                                      (103 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (106 (checkcast (class "java.math.BigInteger"))) 
                                      (109 (invokespecial (methodCP "<init>" "java.math.BigDecimal" ((class "java.math.BigInteger")) void))) 
                                      (112 (aload_1)) 
                                      (113 (aconst_null)) 
                                      (114 (astore_1)) 
                                      (115 (checkcast (class "clojure.lang.Ratio"))) 
                                      (118 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (121 (invokestatic (methodCP "divide" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (124 (goto 246)) ;;to TAG_2
                                      (127 (pop)) ;;at TAG_5
                                      (128 (aload_1)) ;;at TAG_6
                                      (129 (instanceof (class "clojure.lang.BigInt"))) 
                                      (132 (ifeq 148)) ;;to TAG_7
                                      (135 (aload_1)) 
                                      (136 (aconst_null)) 
                                      (137 (astore_1)) 
                                      (138 (checkcast (class "clojure.lang.BigInt"))) 
                                      (141 (invokevirtual (methodCP "toBigDecimal" "clojure.lang.BigInt" () (class "java.math.BigDecimal")))) 
                                      (144 (goto 246)) ;;to TAG_2
                                      (147 (pop)) 
                                      (148 (aload_1)) ;;at TAG_7
                                      (149 (instanceof (class "java.math.BigInteger"))) 
                                      (152 (ifeq 172)) ;;to TAG_8
                                      (155 (new (class "java.math.BigDecimal"))) 
                                      (158 (dup)) 
                                      (159 (aload_1)) 
                                      (160 (aconst_null)) 
                                      (161 (astore_1)) 
                                      (162 (checkcast (class "java.math.BigInteger"))) 
                                      (165 (invokespecial (methodCP "<init>" "java.math.BigDecimal" ((class "java.math.BigInteger")) void))) 
                                      (168 (goto 246)) ;;to TAG_2
                                      (171 (pop)) 
                                      (172 (getstatic (fieldCP "const__6" "clojure.core$bigdec" (class "clojure.lang.Var")))) ;;at TAG_8
                                      (175 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (178 (checkcast (class "clojure.lang.IFn"))) 
                                      (181 (aload_1)) 
                                      (182 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (187 (dup)) 
                                      (188 (ifnull 209)) ;;to TAG_9
                                      (191 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (194 (if_acmpeq 210)) ;;to TAG_10
                                      (197 (aload_1)) 
                                      (198 (aconst_null)) 
                                      (199 (astore_1)) 
                                      (200 (invokestatic (methodCP "longCast" "clojure.lang.RT" ((class "java.lang.Object")) long))) 
                                      (203 (invokestatic (methodCP "valueOf" "java.math.BigDecimal" (long) (class "java.math.BigDecimal")))) 
                                      (206 (goto 246)) ;;to TAG_2
                                      (209 (pop)) ;;at TAG_9
                                      (210 (getstatic (fieldCP "const__8" "clojure.core$bigdec" (class "clojure.lang.Keyword")))) ;;at TAG_10
                                      (213 (dup)) 
                                      (214 (ifnull 244)) ;;to TAG_11
                                      (217 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (220 (if_acmpeq 245)) ;;to TAG_12
                                      (223 (ldc 10)) ;;STRING:: "java.math.BigDecimal"
                                      (225 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (228 (iconst_1)) 
                                      (229 (anewarray (class "java.lang.Object"))) 
                                      (232 (dup)) 
                                      (233 (iconst_0)) 
                                      (234 (aload_1)) 
                                      (235 (aconst_null)) 
                                      (236 (astore_1)) 
                                      (237 (aastore)) 
                                      (238 (invokestatic (methodCP "invokeConstructor" "clojure.lang.Reflector" ((class "java.lang.Class") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (241 (goto 246)) ;;to TAG_2
                                      (244 (pop)) ;;at TAG_11
                                      (245 (aconst_null)) ;;at TAG_12
                                      (246 (areturn)) ;;at TAG_2
                                      (endofcode 247))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$bigdec-class-table*
  (make-static-class-decls 
   *clojure.core$bigdec*))

(defconst *package-name-map* 
  ("clojure.core$bigdec" . "clojure"))

