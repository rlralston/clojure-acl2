; core$destructure$pb__4541-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:41 CDT 2014.
;

(defconst *clojure.core$destructure$pb__4541*
 (make-class-def
      '(class "clojure.core$destructure$pb__4541"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "symbol?")
                        (STRING  "conj")
                        (STRING  "vector?")
                        (STRING  "map?")
                        (STRING  "else")
                        (STRING  "str")
                        (STRING  "Unsupported binding form: "))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 78)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "symbol?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$destructure$pb__4541" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "conj"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$destructure$pb__4541" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "vector?"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$destructure$pb__4541" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "map?"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.core$destructure$pb__4541" (class "clojure.lang.Var"))))
                                      (52 (aconst_null))
                                      (53 (ldc 5))        ;;STRING:: "else"
                                      (55 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (58 (checkcast (class "clojure.lang.Keyword")))
                                      (61 (putstatic (fieldCP "const__4" "clojure.core$destructure$pb__4541" (class "clojure.lang.Keyword"))))
                                      (64 (ldc 0))        ;;STRING:: "clojure.core"
                                      (66 (ldc 6))        ;;STRING:: "str"
                                      (68 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (71 (checkcast (class "clojure.lang.Var")))
                                      (74 (putstatic (fieldCP "const__5" "clojure.core$destructure$pb__4541" (class "clojure.lang.Var"))))
                                      (77 (return))
                                      (endofcode 78))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 6) (code_length . 240)
                                   (parsedcode
                                      (0 (new (class "clojure.core$destructure$pb__4541$pvec__4542"))) 
                                      (3 (dup)) 
                                      (4 (aload_0)) 
                                      (5 (invokespecial (methodCP "<init>" "clojure.core$destructure$pb__4541$pvec__4542" ((class "java.lang.Object")) void))) 
                                      (8 (astore 4)) 
                                      (10 (new (class "clojure.core$destructure$pb__4541$pmap__4544"))) 
                                      (13 (dup)) 
                                      (14 (aload_0)) 
                                      (15 (invokespecial (methodCP "<init>" "clojure.core$destructure$pb__4541$pmap__4544" ((class "java.lang.Object")) void))) 
                                      (18 (astore 5)) 
                                      (20 (getstatic (fieldCP "const__0" "clojure.core$destructure$pb__4541" (class "clojure.lang.Var")))) 
                                      (23 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (26 (checkcast (class "clojure.lang.IFn"))) 
                                      (29 (aload_2)) 
                                      (30 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (35 (dup)) 
                                      (36 (ifnull 85)) ;;to TAG_0
                                      (39 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (42 (if_acmpeq 86))  ;;to TAG_1
                                      (45 (getstatic (fieldCP "const__1" "clojure.core$destructure$pb__4541" (class "clojure.lang.Var")))) 
                                      (48 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (51 (checkcast (class "clojure.lang.IFn"))) 
                                      (54 (getstatic (fieldCP "const__1" "clojure.core$destructure$pb__4541" (class "clojure.lang.Var")))) 
                                      (57 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (60 (checkcast (class "clojure.lang.IFn"))) 
                                      (63 (aload_1)) 
                                      (64 (aconst_null)) 
                                      (65 (astore_1)) 
                                      (66 (aload_2)) 
                                      (67 (aconst_null)) 
                                      (68 (astore_2)) 
                                      (69 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (74 (aload_3)) 
                                      (75 (aconst_null)) 
                                      (76 (astore_3)) 
                                      (77 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (82 (goto 239)) ;;to TAG_2
                                      (85 (pop)) ;;at TAG_0
                                      (86 (getstatic (fieldCP "const__2" "clojure.core$destructure$pb__4541" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (89 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (92 (checkcast (class "clojure.lang.IFn"))) 
                                      (95 (aload_2)) 
                                      (96 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (101 (dup)) 
                                      (102 (ifnull 136)) ;;to TAG_3
                                      (105 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (108 (if_acmpeq 137)) ;;to TAG_4
                                      (111 (aload 4)) 
                                      (113 (aconst_null)) 
                                      (114 (astore 4)) 
                                      (116 (checkcast (class "clojure.lang.IFn"))) 
                                      (119 (aload_1)) 
                                      (120 (aconst_null)) 
                                      (121 (astore_1)) 
                                      (122 (aload_2)) 
                                      (123 (aconst_null)) 
                                      (124 (astore_2)) 
                                      (125 (aload_3)) 
                                      (126 (aconst_null)) 
                                      (127 (astore_3)) 
                                      (128 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (133 (goto 239)) ;;to TAG_2
                                      (136 (pop)) ;;at TAG_3
                                      (137 (getstatic (fieldCP "const__3" "clojure.core$destructure$pb__4541" (class "clojure.lang.Var")))) ;;at TAG_4
                                      (140 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (143 (checkcast (class "clojure.lang.IFn"))) 
                                      (146 (aload_2)) 
                                      (147 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (152 (dup)) 
                                      (153 (ifnull 187)) ;;to TAG_5
                                      (156 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (159 (if_acmpeq 188)) ;;to TAG_6
                                      (162 (aload 5)) 
                                      (164 (aconst_null)) 
                                      (165 (astore 5)) 
                                      (167 (checkcast (class "clojure.lang.IFn"))) 
                                      (170 (aload_1)) 
                                      (171 (aconst_null)) 
                                      (172 (astore_1)) 
                                      (173 (aload_2)) 
                                      (174 (aconst_null)) 
                                      (175 (astore_2)) 
                                      (176 (aload_3)) 
                                      (177 (aconst_null)) 
                                      (178 (astore_3)) 
                                      (179 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (184 (goto 239)) ;;to TAG_2
                                      (187 (pop)) ;;at TAG_5
                                      (188 (getstatic (fieldCP "const__4" "clojure.core$destructure$pb__4541" (class "clojure.lang.Keyword")))) ;;at TAG_6
                                      (191 (dup)) 
                                      (192 (ifnull 237)) ;;to TAG_7
                                      (195 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (198 (if_acmpeq 238)) ;;to TAG_8
                                      (201 (new (class "java.lang.Exception"))) 
                                      (204 (dup)) 
                                      (205 (getstatic (fieldCP "const__5" "clojure.core$destructure$pb__4541" (class "clojure.lang.Var")))) 
                                      (208 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (211 (checkcast (class "clojure.lang.IFn"))) 
                                      (214 (ldc 7)) ;;STRING:: "Unsupported binding form: "
                                      (216 (aload_2)) 
                                      (217 (aconst_null)) 
                                      (218 (astore_2)) 
                                      (219 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (224 (checkcast (class "java.lang.String"))) 
                                      (227 (invokespecial (methodCP "<init>" "java.lang.Exception" ((class "java.lang.String")) void))) 
                                      (230 (checkcast (class "java.lang.Throwable"))) 
                                      (233 (athrow)) 
                                      (234 (goto 239)) ;;to TAG_2
                                      (237 (pop)) ;;at TAG_7
                                      (238 (aconst_null)) ;;at TAG_8
                                      (239 (areturn)) ;;at TAG_2
                                      (endofcode 240))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$destructure$pb__4541-class-table*
  (make-static-class-decls 
   *clojure.core$destructure$pb__4541*))

(defconst *package-name-map* 
  ("clojure.core$destructure$pb__4541" . "clojure"))

