; core$ref-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:45 CDT 2014.
;

(defconst *clojure.core$ref*
 (make-class-def
      '(class "clojure.core$ref"
            "clojure.lang.RestFn"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "setup-reference")
                        (STRING  "ref")
                        (STRING  "apply")
                        (STRING  "hash-map")
                        (STRING  "max-history")
                        (STRING  "min-history"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "__site__0__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__0__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1)
                        (field "__site__1__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__1__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1)
                        (field "__site__2__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__2__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1)
                        (field "__site__3__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__3__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 0) (code_length . 157)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "setup-reference"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$ref" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "ref"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$ref" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "apply"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$ref" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "hash-map"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.core$ref" (class "clojure.lang.Var"))))
                                      (52 (aconst_null))
                                      (53 (ldc 5))        ;;STRING:: "max-history"
                                      (55 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (58 (checkcast (class "clojure.lang.Keyword")))
                                      (61 (putstatic (fieldCP "const__4" "clojure.core$ref" (class "clojure.lang.Keyword"))))
                                      (64 (aconst_null))
                                      (65 (ldc 6))        ;;STRING:: "min-history"
                                      (67 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (70 (checkcast (class "clojure.lang.Keyword")))
                                      (73 (putstatic (fieldCP "const__5" "clojure.core$ref" (class "clojure.lang.Keyword"))))
                                      (76 (new (class "clojure.lang.KeywordLookupSite")))
                                      (79 (dup))
                                      (80 (aconst_null))
                                      (81 (ldc 5))        ;;STRING:: "max-history"
                                      (83 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (86 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (89 (dup))
                                      (90 (putstatic (fieldCP "__site__0__" "clojure.core$ref" (class "clojure.lang.KeywordLookupSite"))))
                                      (93 (putstatic (fieldCP "__thunk__0__" "clojure.core$ref" (class "clojure.lang.ILookupThunk"))))
                                      (96 (new (class "clojure.lang.KeywordLookupSite")))
                                      (99 (dup))
                                      (100 (aconst_null))
                                      (101 (ldc 5))       ;;STRING:: "max-history"
                                      (103 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (106 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (109 (dup))
                                      (110 (putstatic (fieldCP "__site__1__" "clojure.core$ref" (class "clojure.lang.KeywordLookupSite"))))
                                      (113 (putstatic (fieldCP "__thunk__1__" "clojure.core$ref" (class "clojure.lang.ILookupThunk"))))
                                      (116 (new (class "clojure.lang.KeywordLookupSite")))
                                      (119 (dup))
                                      (120 (aconst_null))
                                      (121 (ldc 6))       ;;STRING:: "min-history"
                                      (123 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (126 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (129 (dup))
                                      (130 (putstatic (fieldCP "__site__2__" "clojure.core$ref" (class "clojure.lang.KeywordLookupSite"))))
                                      (133 (putstatic (fieldCP "__thunk__2__" "clojure.core$ref" (class "clojure.lang.ILookupThunk"))))
                                      (136 (new (class "clojure.lang.KeywordLookupSite")))
                                      (139 (dup))
                                      (140 (aconst_null))
                                      (141 (ldc 6))       ;;STRING:: "min-history"
                                      (143 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (146 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (149 (dup))
                                      (150 (putstatic (fieldCP "__site__3__" "clojure.core$ref" (class "clojure.lang.KeywordLookupSite"))))
                                      (153 (putstatic (fieldCP "__thunk__3__" "clojure.core$ref" (class "clojure.lang.ILookupThunk"))))
                                      (156 (return))
                                      (endofcode 157))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.RestFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doInvoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 293)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$ref" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (getstatic (fieldCP "const__1" "clojure.core$ref" (class "clojure.lang.Var")))) 
                                      (12 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (15 (checkcast (class "clojure.lang.IFn"))) 
                                      (18 (aload_1)) 
                                      (19 (aconst_null)) 
                                      (20 (astore_1)) 
                                      (21 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (26 (aload_2)) 
                                      (27 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (32 (astore_3)) 
                                      (33 (getstatic (fieldCP "const__2" "clojure.core$ref" (class "clojure.lang.Var")))) 
                                      (36 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (39 (checkcast (class "clojure.lang.IFn"))) 
                                      (42 (getstatic (fieldCP "const__3" "clojure.core$ref" (class "clojure.lang.Var")))) 
                                      (45 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (48 (aload_2)) 
                                      (49 (aconst_null)) 
                                      (50 (astore_2)) 
                                      (51 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (56 (astore 4)) 
                                      (58 (getstatic (fieldCP "__thunk__0__" "clojure.core$ref" (class "clojure.lang.ILookupThunk")))) 
                                      (61 (dup)) 
                                      (62 (aload 4)) 
                                      (64 (dup_x2)) 
                                      (65 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (70 (dup_x2)) 
                                      (71 (if_acmpeq 78)) ;;to TAG_0
                                      (74 (pop)) 
                                      (75 (goto 100))  ;;to TAG_1
                                      (78 (swap)) ;;at TAG_0
                                      (79 (pop)) 
                                      (80 (dup)) 
                                      (81 (getstatic (fieldCP "__site__0__" "clojure.core$ref" (class "clojure.lang.KeywordLookupSite")))) 
                                      (84 (swap)) 
                                      (85 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (90 (dup)) 
                                      (91 (putstatic (fieldCP "__thunk__0__" "clojure.core$ref" (class "clojure.lang.ILookupThunk")))) 
                                      (94 (swap)) 
                                      (95 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (100 (dup)) ;;at TAG_1
                                      (101 (ifnull 169)) ;;to TAG_2
                                      (104 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (107 (if_acmpeq 170)) ;;to TAG_3
                                      (110 (aload_3)) 
                                      (111 (checkcast (class "clojure.lang.Ref"))) 
                                      (114 (getstatic (fieldCP "__thunk__1__" "clojure.core$ref" (class "clojure.lang.ILookupThunk")))) 
                                      (117 (dup)) 
                                      (118 (aload 4)) 
                                      (120 (dup_x2)) 
                                      (121 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (126 (dup_x2)) 
                                      (127 (if_acmpeq 134)) ;;to TAG_4
                                      (130 (pop)) 
                                      (131 (goto 156)) ;;to TAG_5
                                      (134 (swap)) ;;at TAG_4
                                      (135 (pop)) 
                                      (136 (dup)) 
                                      (137 (getstatic (fieldCP "__site__1__" "clojure.core$ref" (class "clojure.lang.KeywordLookupSite")))) 
                                      (140 (swap)) 
                                      (141 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (146 (dup)) 
                                      (147 (putstatic (fieldCP "__thunk__1__" "clojure.core$ref" (class "clojure.lang.ILookupThunk")))) 
                                      (150 (swap)) 
                                      (151 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (156 (checkcast (class "java.lang.Number"))) ;;at TAG_5
                                      (159 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (162 (invokevirtual (methodCP "setMaxHistory" "clojure.lang.Ref" (int) (class "clojure.lang.Ref")))) 
                                      (165 (pop)) 
                                      (166 (goto 172)) ;;to TAG_6
                                      (169 (pop)) ;;at TAG_2
                                      (170 (aconst_null)) ;;at TAG_3
                                      (171 (pop)) 
                                      (172 (getstatic (fieldCP "__thunk__2__" "clojure.core$ref" (class "clojure.lang.ILookupThunk")))) ;;at TAG_6
                                      (175 (dup)) 
                                      (176 (aload 4)) 
                                      (178 (dup_x2)) 
                                      (179 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (184 (dup_x2)) 
                                      (185 (if_acmpeq 192)) ;;to TAG_7
                                      (188 (pop)) 
                                      (189 (goto 214)) ;;to TAG_8
                                      (192 (swap)) ;;at TAG_7
                                      (193 (pop)) 
                                      (194 (dup)) 
                                      (195 (getstatic (fieldCP "__site__2__" "clojure.core$ref" (class "clojure.lang.KeywordLookupSite")))) 
                                      (198 (swap)) 
                                      (199 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (204 (dup)) 
                                      (205 (putstatic (fieldCP "__thunk__2__" "clojure.core$ref" (class "clojure.lang.ILookupThunk")))) 
                                      (208 (swap)) 
                                      (209 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (214 (dup)) ;;at TAG_8
                                      (215 (ifnull 286)) ;;to TAG_9
                                      (218 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (221 (if_acmpeq 287)) ;;to TAG_10
                                      (224 (aload_3)) 
                                      (225 (checkcast (class "clojure.lang.Ref"))) 
                                      (228 (getstatic (fieldCP "__thunk__3__" "clojure.core$ref" (class "clojure.lang.ILookupThunk")))) 
                                      (231 (dup)) 
                                      (232 (aload 4)) 
                                      (234 (aconst_null)) 
                                      (235 (astore 4)) 
                                      (237 (dup_x2)) 
                                      (238 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (243 (dup_x2)) 
                                      (244 (if_acmpeq 251)) ;;to TAG_11
                                      (247 (pop)) 
                                      (248 (goto 273)) ;;to TAG_12
                                      (251 (swap)) ;;at TAG_11
                                      (252 (pop)) 
                                      (253 (dup)) 
                                      (254 (getstatic (fieldCP "__site__3__" "clojure.core$ref" (class "clojure.lang.KeywordLookupSite")))) 
                                      (257 (swap)) 
                                      (258 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (263 (dup)) 
                                      (264 (putstatic (fieldCP "__thunk__3__" "clojure.core$ref" (class "clojure.lang.ILookupThunk")))) 
                                      (267 (swap)) 
                                      (268 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (273 (checkcast (class "java.lang.Number"))) ;;at TAG_12
                                      (276 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (279 (invokevirtual (methodCP "setMinHistory" "clojure.lang.Ref" (int) (class "clojure.lang.Ref")))) 
                                      (282 (pop)) 
                                      (283 (goto 289)) ;;to TAG_13
                                      (286 (pop)) ;;at TAG_9
                                      (287 (aconst_null)) ;;at TAG_10
                                      (288 (pop)) 
                                      (289 (aload_3)) ;;at TAG_13
                                      (290 (aconst_null)) 
                                      (291 (astore_3)) 
                                      (292 (areturn)) 
                                      (endofcode 293))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 11)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.Ref")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (aconst_null))
                                      (6 (astore_1))
                                      (7 (invokespecial
					(methodCP "<init>" "clojure.lang.Ref" ((class "java.lang.Object")) void)))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getRequiredArity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "swapThunk"
                              (parameters int (class "clojure.lang.ILookupThunk"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 61)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (tableswitch (tableswitchinfo 60 (0 . 3) (32 39 46 53))))  ;;to TAG_2;;to TAG_3;;to TAG_4;;to TAG_0;;to TAG_1
                                      (32 (aload_2)) ;;at TAG_1
                                      (33 (putstatic (fieldCP "__thunk__0__" "clojure.core$ref" (class "clojure.lang.ILookupThunk")))) 
                                      (36 (goto 60)) ;;to TAG_0
                                      (39 (aload_2)) ;;at TAG_2
                                      (40 (putstatic (fieldCP "__thunk__1__" "clojure.core$ref" (class "clojure.lang.ILookupThunk")))) 
                                      (43 (goto 60)) ;;to TAG_0
                                      (46 (aload_2)) ;;at TAG_3
                                      (47 (putstatic (fieldCP "__thunk__2__" "clojure.core$ref" (class "clojure.lang.ILookupThunk")))) 
                                      (50 (goto 60)) ;;to TAG_0
                                      (53 (aload_2)) ;;at TAG_4
                                      (54 (putstatic (fieldCP "__thunk__3__" "clojure.core$ref" (class "clojure.lang.ILookupThunk")))) 
                                      (57 (goto 60)) ;;to TAG_0
                                      (60 (return)) ;;at TAG_0
                                      (endofcode 61))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$ref-class-table*
  (make-static-class-decls 
   *clojure.core$ref*))

(defconst *package-name-map* 
  ("clojure.core$ref" . "clojure"))

