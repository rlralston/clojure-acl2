; zip$zipper-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:59 CDT 2014.
;

(defconst *clojure.zip$zipper*
 (make-class-def
      '(class "clojure.zip$zipper"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "zip")
                        (STRING  "make-node")
                        (STRING  "children")
                        (STRING  "branch?"))
            (fields
                        (field "const__0" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 40)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "zip"
                                      (2 (ldc 1))         ;;STRING:: "make-node"
                                      (4 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (7 (checkcast (class "clojure.lang.Keyword")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.zip$zipper" (class "clojure.lang.Keyword"))))
                                      (13 (ldc 0))        ;;STRING:: "zip"
                                      (15 (ldc 2))        ;;STRING:: "children"
                                      (17 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (20 (checkcast (class "clojure.lang.Keyword")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.zip$zipper" (class "clojure.lang.Keyword"))))
                                      (26 (ldc 0))        ;;STRING:: "zip"
                                      (28 (ldc 3))        ;;STRING:: "branch?"
                                      (30 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (33 (checkcast (class "clojure.lang.Keyword")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.zip$zipper" (class "clojure.lang.Keyword"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 5) (code_length . 75)
                                   (parsedcode
                                      (0 (iconst_2))
                                      (1 (anewarray (class "java.lang.Object")))
                                      (4 (dup))
                                      (5 (iconst_0))
                                      (6 (aload 4))
                                      (8 (aconst_null))
                                      (9 (astore 4))
                                      (11 (aastore))
                                      (12 (dup))
                                      (13 (iconst_1))
                                      (14 (aconst_null))
                                      (15 (aastore))
                                      (16 (invokestatic
					(methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector"))))
                                      (19 (checkcast (class "clojure.lang.IObj")))
                                      (22 (bipush 6))
                                      (24 (anewarray (class "java.lang.Object")))
                                      (27 (dup))
                                      (28 (iconst_0))
                                      (29 (getstatic (fieldCP "const__0" "clojure.zip$zipper" (class "clojure.lang.Keyword"))))
                                      (32 (aastore))
                                      (33 (dup))
                                      (34 (iconst_1))
                                      (35 (aload_3))
                                      (36 (aconst_null))
                                      (37 (astore_3))
                                      (38 (aastore))
                                      (39 (dup))
                                      (40 (iconst_2))
                                      (41 (getstatic (fieldCP "const__1" "clojure.zip$zipper" (class "clojure.lang.Keyword"))))
                                      (44 (aastore))
                                      (45 (dup))
                                      (46 (iconst_3))
                                      (47 (aload_2))
                                      (48 (aconst_null))
                                      (49 (astore_2))
                                      (50 (aastore))
                                      (51 (dup))
                                      (52 (iconst_4))
                                      (53 (getstatic (fieldCP "const__2" "clojure.zip$zipper" (class "clojure.lang.Keyword"))))
                                      (56 (aastore))
                                      (57 (dup))
                                      (58 (iconst_5))
                                      (59 (aload_1))
                                      (60 (aconst_null))
                                      (61 (astore_1))
                                      (62 (aastore))
                                      (63 (invokestatic
					(methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (66 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (69 (invokeinterface
					(methodCP "withMeta" "clojure.lang.IObj" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")) 2))
                                      (74 (areturn))
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *zip$zipper-class-table*
  (make-static-class-decls 
   *clojure.zip$zipper*))

(defconst *package-name-map* 
  ("clojure.zip$zipper" . "clojure"))

