; data$diff_associative_key-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:48 CDT 2014.
;

(defconst *clojure.data$diff_associative_key*
 (make-class-def
      '(class "clojure.data$diff_associative_key"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "get")
                        (STRING  "clojure.data")
                        (STRING  "diff")
                        (STRING  "nth")
                        (LONG 2)
                        (STRING  "contains?")
                        (STRING  "not")
                        (STRING  "nil?"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 102)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "get"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.data$diff_associative_key" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.data"
                                      (15 (ldc 3))        ;;STRING:: "diff"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.data$diff_associative_key" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 4))        ;;STRING:: "nth"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.data$diff_associative_key" (class "clojure.lang.Var"))))
                                      (39 (lconst_0))
                                      (40 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (43 (putstatic (fieldCP "const__3" "clojure.data$diff_associative_key" (class "java.lang.Object"))))
                                      (46 (lconst_1))
                                      (47 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (50 (putstatic (fieldCP "const__4" "clojure.data$diff_associative_key" (class "java.lang.Object"))))
                                      (53 (ldc2_w 5))     ;; LONG:: "2"
                                      (56 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (59 (putstatic (fieldCP "const__5" "clojure.data$diff_associative_key" (class "java.lang.Object"))))
                                      (62 (ldc 0))        ;;STRING:: "clojure.core"
                                      (64 (ldc 6))        ;;STRING:: "contains?"
                                      (66 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (69 (checkcast (class "clojure.lang.Var")))
                                      (72 (putstatic (fieldCP "const__6" "clojure.data$diff_associative_key" (class "clojure.lang.Var"))))
                                      (75 (ldc 0))        ;;STRING:: "clojure.core"
                                      (77 (ldc 7))        ;;STRING:: "not"
                                      (79 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (82 (checkcast (class "clojure.lang.Var")))
                                      (85 (putstatic (fieldCP "const__7" "clojure.data$diff_associative_key" (class "clojure.lang.Var"))))
                                      (88 (ldc 0))        ;;STRING:: "clojure.core"
                                      (90 (ldc 8))        ;;STRING:: "nil?"
                                      (92 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (95 (checkcast (class "clojure.lang.Var")))
                                      (98 (putstatic (fieldCP "const__8" "clojure.data$diff_associative_key" (class "clojure.lang.Var"))))
                                      (101 (return))
                                      (endofcode 102))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 16) (code_length . 601)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aload_3)) 
                                      (2 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (5 (astore 4)) 
                                      (7 (aload_2)) 
                                      (8 (aload_3)) 
                                      (9 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (12 (astore 5)) 
                                      (14 (getstatic (fieldCP "const__1" "clojure.data$diff_associative_key" (class "clojure.lang.Var")))) 
                                      (17 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (20 (checkcast (class "clojure.lang.IFn"))) 
                                      (23 (aload 4)) 
                                      (25 (aload 5)) 
                                      (27 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (32 (astore 6)) 
                                      (34 (aload 6)) 
                                      (36 (lconst_0)) 
                                      (37 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (40 (aconst_null)) 
                                      (41 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (44 (astore 7)) 
                                      (46 (aload 6)) 
                                      (48 (lconst_1)) 
                                      (49 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (52 (aconst_null)) 
                                      (53 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (56 (astore 8)) 
                                      (58 (aload 6)) 
                                      (60 (aconst_null)) 
                                      (61 (astore 6)) 
                                      (63 (ldc2_w 5)) ;; LONG:: "2"
                                      (66 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (69 (aconst_null)) 
                                      (70 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (73 (astore 9)) 
                                      (75 (getstatic (fieldCP "const__6" "clojure.data$diff_associative_key" (class "clojure.lang.Var")))) 
                                      (78 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (81 (checkcast (class "clojure.lang.IFn"))) 
                                      (84 (aload_1)) 
                                      (85 (aconst_null)) 
                                      (86 (astore_1)) 
                                      (87 (aload_3)) 
                                      (88 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (93 (astore 10)) 
                                      (95 (getstatic (fieldCP "const__6" "clojure.data$diff_associative_key" (class "clojure.lang.Var")))) 
                                      (98 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (101 (checkcast (class "clojure.lang.IFn"))) 
                                      (104 (aload_2)) 
                                      (105 (aconst_null)) 
                                      (106 (astore_2)) 
                                      (107 (aload_3)) 
                                      (108 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (113 (astore 11)) 
                                      (115 (aload 10)) 
                                      (117 (astore 12)) 
                                      (119 (aload 12)) 
                                      (121 (dup)) 
                                      (122 (ifnull 269))  ;;to TAG_0
                                      (125 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (128 (if_acmpeq 270)) ;;to TAG_1
                                      (131 (aload 11)) 
                                      (133 (astore 13)) 
                                      (135 (aload 13)) 
                                      (137 (dup)) 
                                      (138 (ifnull 260)) ;;to TAG_2
                                      (141 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (144 (if_acmpeq 261)) ;;to TAG_3
                                      (147 (getstatic (fieldCP "const__7" "clojure.data$diff_associative_key" (class "clojure.lang.Var")))) 
                                      (150 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (153 (checkcast (class "clojure.lang.IFn"))) 
                                      (156 (aload 9)) 
                                      (158 (aconst_null)) 
                                      (159 (invokestatic (methodCP "identical" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (162 (ifeq 171)) ;;to TAG_4
                                      (165 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (168 (goto 174)) ;;to TAG_5
                                      (171 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_4
                                      (174 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_5
                                      (179 (astore 14)) 
                                      (181 (aload 14)) 
                                      (183 (dup)) 
                                      (184 (ifnull 201)) ;;to TAG_6
                                      (187 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (190 (if_acmpeq 202)) ;;to TAG_7
                                      (193 (aload 14)) 
                                      (195 (aconst_null)) 
                                      (196 (astore 14)) 
                                      (198 (goto 257)) ;;to TAG_8
                                      (201 (pop)) ;;at TAG_6
                                      (202 (aload 4)) ;;at TAG_7
                                      (204 (aconst_null)) 
                                      (205 (astore 4)) 
                                      (207 (aconst_null)) 
                                      (208 (invokestatic (methodCP "identical" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (211 (istore 15)) 
                                      (213 (iload 15)) 
                                      (215 (ifeq 243)) ;;to TAG_9
                                      (218 (aload 5)) 
                                      (220 (aconst_null)) 
                                      (221 (astore 5)) 
                                      (223 (aconst_null)) 
                                      (224 (invokestatic (methodCP "identical" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (227 (ifeq 236)) ;;to TAG_10
                                      (230 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (233 (goto 239)) ;;to TAG_11
                                      (236 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_10
                                      (239 (goto 257)) ;;to TAG_8;;at TAG_11
                                      (242 (pop)) 
                                      (243 (iload 15)) ;;at TAG_9
                                      (245 (ifeq 254)) ;;to TAG_12
                                      (248 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (251 (goto 257)) ;;to TAG_8
                                      (254 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_12
                                      (257 (goto 266)) ;;to TAG_13;;at TAG_8
                                      (260 (pop)) ;;at TAG_2
                                      (261 (aload 13)) ;;at TAG_3
                                      (263 (aconst_null)) 
                                      (264 (astore 13)) 
                                      (266 (goto 275)) ;;to TAG_14;;at TAG_13
                                      (269 (pop)) ;;at TAG_0
                                      (270 (aload 12)) ;;at TAG_1
                                      (272 (aconst_null)) 
                                      (273 (astore 12)) 
                                      (275 (astore 12)) ;;at TAG_14
                                      (277 (iconst_3)) 
                                      (278 (anewarray (class "java.lang.Object"))) 
                                      (281 (dup)) 
                                      (282 (iconst_0)) 
                                      (283 (aload 10)) 
                                      (285 (aconst_null)) 
                                      (286 (astore 10)) 
                                      (288 (astore 13)) 
                                      (290 (aload 13)) 
                                      (292 (dup)) 
                                      (293 (ifnull 376)) ;;to TAG_15
                                      (296 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (299 (if_acmpeq 377)) ;;to TAG_16
                                      (302 (getstatic (fieldCP "const__7" "clojure.data$diff_associative_key" (class "clojure.lang.Var")))) 
                                      (305 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (308 (checkcast (class "clojure.lang.IFn"))) 
                                      (311 (aload 7)) 
                                      (313 (aconst_null)) 
                                      (314 (invokestatic (methodCP "identical" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (317 (ifeq 326)) ;;to TAG_17
                                      (320 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (323 (goto 329)) ;;to TAG_18
                                      (326 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_17
                                      (329 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_18
                                      (334 (astore 14)) 
                                      (336 (aload 14)) 
                                      (338 (dup)) 
                                      (339 (ifnull 356)) ;;to TAG_19
                                      (342 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (345 (if_acmpeq 357)) ;;to TAG_20
                                      (348 (aload 14)) 
                                      (350 (aconst_null)) 
                                      (351 (astore 14)) 
                                      (353 (goto 373)) ;;to TAG_21
                                      (356 (pop)) ;;at TAG_19
                                      (357 (getstatic (fieldCP "const__7" "clojure.data$diff_associative_key" (class "clojure.lang.Var")))) ;;at TAG_20
                                      (360 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (363 (checkcast (class "clojure.lang.IFn"))) 
                                      (366 (aload 12)) 
                                      (368 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (373 (goto 382)) ;;to TAG_22;;at TAG_21
                                      (376 (pop)) ;;at TAG_15
                                      (377 (aload 13)) ;;at TAG_16
                                      (379 (aconst_null)) 
                                      (380 (astore 13)) 
                                      (382 (dup)) ;;at TAG_22
                                      (383 (ifnull 414)) ;;to TAG_23
                                      (386 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (389 (if_acmpeq 415)) ;;to TAG_24
                                      (392 (iconst_2)) 
                                      (393 (anewarray (class "java.lang.Object"))) 
                                      (396 (dup)) 
                                      (397 (iconst_0)) 
                                      (398 (aload_3)) 
                                      (399 (aastore)) 
                                      (400 (dup)) 
                                      (401 (iconst_1)) 
                                      (402 (aload 7)) 
                                      (404 (aconst_null)) 
                                      (405 (astore 7)) 
                                      (407 (aastore)) 
                                      (408 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (411 (goto 416)) ;;to TAG_25
                                      (414 (pop)) ;;at TAG_23
                                      (415 (aconst_null)) ;;at TAG_24
                                      (416 (aastore)) ;;at TAG_25
                                      (417 (dup)) 
                                      (418 (iconst_1)) 
                                      (419 (aload 11)) 
                                      (421 (aconst_null)) 
                                      (422 (astore 11)) 
                                      (424 (astore 13)) 
                                      (426 (aload 13)) 
                                      (428 (dup)) 
                                      (429 (ifnull 512)) ;;to TAG_26
                                      (432 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (435 (if_acmpeq 513)) ;;to TAG_27
                                      (438 (getstatic (fieldCP "const__7" "clojure.data$diff_associative_key" (class "clojure.lang.Var")))) 
                                      (441 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (444 (checkcast (class "clojure.lang.IFn"))) 
                                      (447 (aload 8)) 
                                      (449 (aconst_null)) 
                                      (450 (invokestatic (methodCP "identical" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (453 (ifeq 462)) ;;to TAG_28
                                      (456 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (459 (goto 465)) ;;to TAG_29
                                      (462 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_28
                                      (465 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_29
                                      (470 (astore 14)) 
                                      (472 (aload 14)) 
                                      (474 (dup)) 
                                      (475 (ifnull 492)) ;;to TAG_30
                                      (478 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (481 (if_acmpeq 493)) ;;to TAG_31
                                      (484 (aload 14)) 
                                      (486 (aconst_null)) 
                                      (487 (astore 14)) 
                                      (489 (goto 509)) ;;to TAG_32
                                      (492 (pop)) ;;at TAG_30
                                      (493 (getstatic (fieldCP "const__7" "clojure.data$diff_associative_key" (class "clojure.lang.Var")))) ;;at TAG_31
                                      (496 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (499 (checkcast (class "clojure.lang.IFn"))) 
                                      (502 (aload 12)) 
                                      (504 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (509 (goto 518)) ;;to TAG_33;;at TAG_32
                                      (512 (pop)) ;;at TAG_26
                                      (513 (aload 13)) ;;at TAG_27
                                      (515 (aconst_null)) 
                                      (516 (astore 13)) 
                                      (518 (dup)) ;;at TAG_33
                                      (519 (ifnull 550)) ;;to TAG_34
                                      (522 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (525 (if_acmpeq 551)) ;;to TAG_35
                                      (528 (iconst_2)) 
                                      (529 (anewarray (class "java.lang.Object"))) 
                                      (532 (dup)) 
                                      (533 (iconst_0)) 
                                      (534 (aload_3)) 
                                      (535 (aastore)) 
                                      (536 (dup)) 
                                      (537 (iconst_1)) 
                                      (538 (aload 8)) 
                                      (540 (aconst_null)) 
                                      (541 (astore 8)) 
                                      (543 (aastore)) 
                                      (544 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (547 (goto 552)) ;;to TAG_36
                                      (550 (pop)) ;;at TAG_34
                                      (551 (aconst_null)) ;;at TAG_35
                                      (552 (aastore)) ;;at TAG_36
                                      (553 (dup)) 
                                      (554 (iconst_2)) 
                                      (555 (aload 12)) 
                                      (557 (aconst_null)) 
                                      (558 (astore 12)) 
                                      (560 (dup)) 
                                      (561 (ifnull 594)) ;;to TAG_37
                                      (564 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (567 (if_acmpeq 595)) ;;to TAG_38
                                      (570 (iconst_2)) 
                                      (571 (anewarray (class "java.lang.Object"))) 
                                      (574 (dup)) 
                                      (575 (iconst_0)) 
                                      (576 (aload_3)) 
                                      (577 (aconst_null)) 
                                      (578 (astore_3)) 
                                      (579 (aastore)) 
                                      (580 (dup)) 
                                      (581 (iconst_1)) 
                                      (582 (aload 9)) 
                                      (584 (aconst_null)) 
                                      (585 (astore 9)) 
                                      (587 (aastore)) 
                                      (588 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (591 (goto 596)) ;;to TAG_39
                                      (594 (pop)) ;;at TAG_37
                                      (595 (aconst_null)) ;;at TAG_38
                                      (596 (aastore)) ;;at TAG_39
                                      (597 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (600 (areturn)) 
                                      (endofcode 601))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *data$diff_associative_key-class-table*
  (make-static-class-decls 
   *clojure.data$diff_associative_key*))

(defconst *package-name-map* 
  ("clojure.data$diff_associative_key" . "clojure"))

