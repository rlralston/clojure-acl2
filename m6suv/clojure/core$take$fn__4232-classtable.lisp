; core$take$fn__4232-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:45 CDT 2014.
;

(defconst *clojure.core$take$fn__4232*
 (make-class-def
      '(class "clojure.core$take$fn__4232"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "pos?")
                        (STRING  "seq")
                        (STRING  "cons")
                        (STRING  "first")
                        (STRING  "take")
                        (STRING  "dec")
                        (STRING  "rest"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "coll" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "n" (class "java.lang.Object") (accessflags  *class* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 92)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "pos?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$take$fn__4232" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "seq"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$take$fn__4232" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "cons"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$take$fn__4232" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "first"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.core$take$fn__4232" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "take"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.core$take$fn__4232" (class "clojure.lang.Var"))))
                                      (65 (ldc 0))        ;;STRING:: "clojure.core"
                                      (67 (ldc 6))        ;;STRING:: "dec"
                                      (69 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (72 (checkcast (class "clojure.lang.Var")))
                                      (75 (putstatic (fieldCP "const__5" "clojure.core$take$fn__4232" (class "clojure.lang.Var"))))
                                      (78 (ldc 0))        ;;STRING:: "clojure.core"
                                      (80 (ldc 7))        ;;STRING:: "rest"
                                      (82 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (85 (checkcast (class "clojure.lang.Var")))
                                      (88 (putstatic (fieldCP "const__6" "clojure.core$take$fn__4232" (class "clojure.lang.Var"))))
                                      (91 (return))
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "coll" "clojure.core$take$fn__4232" (class "java.lang.Object"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "n" "clojure.core$take$fn__4232" (class "java.lang.Object"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 3) (code_length . 132)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "n" "clojure.core$take$fn__4232" (class "java.lang.Object")))) 
                                      (4 (invokestatic (methodCP "isPos" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (7 (ifeq 130)) ;;to TAG_0
                                      (10 (getstatic (fieldCP "const__1" "clojure.core$take$fn__4232" (class "clojure.lang.Var")))) 
                                      (13 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (16 (checkcast (class "clojure.lang.IFn"))) 
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "coll" "clojure.core$take$fn__4232" (class "java.lang.Object")))) 
                                      (23 (aload_0)) 
                                      (24 (aconst_null)) 
                                      (25 (putfield (fieldCP "coll" "clojure.core$take$fn__4232" (class "java.lang.Object")))) 
                                      (28 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (33 (astore_1)) 
                                      (34 (aload_1)) 
                                      (35 (dup)) 
                                      (36 (ifnull 124)) ;;to TAG_1
                                      (39 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (42 (if_acmpeq 125))  ;;to TAG_2
                                      (45 (aload_1)) 
                                      (46 (aconst_null)) 
                                      (47 (astore_1)) 
                                      (48 (astore_2)) 
                                      (49 (getstatic (fieldCP "const__2" "clojure.core$take$fn__4232" (class "clojure.lang.Var")))) 
                                      (52 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (55 (checkcast (class "clojure.lang.IFn"))) 
                                      (58 (getstatic (fieldCP "const__3" "clojure.core$take$fn__4232" (class "clojure.lang.Var")))) 
                                      (61 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (64 (checkcast (class "clojure.lang.IFn"))) 
                                      (67 (aload_2)) 
                                      (68 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (73 (getstatic (fieldCP "const__4" "clojure.core$take$fn__4232" (class "clojure.lang.Var")))) 
                                      (76 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (79 (checkcast (class "clojure.lang.IFn"))) 
                                      (82 (aload_0)) 
                                      (83 (getfield (fieldCP "n" "clojure.core$take$fn__4232" (class "java.lang.Object")))) 
                                      (86 (aload_0)) 
                                      (87 (aconst_null)) 
                                      (88 (putfield (fieldCP "n" "clojure.core$take$fn__4232" (class "java.lang.Object")))) 
                                      (91 (invokestatic (methodCP "dec" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (94 (getstatic (fieldCP "const__6" "clojure.core$take$fn__4232" (class "clojure.lang.Var")))) 
                                      (97 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (100 (checkcast (class "clojure.lang.IFn"))) 
                                      (103 (aload_2)) 
                                      (104 (aconst_null)) 
                                      (105 (astore_2)) 
                                      (106 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (111 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (116 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (121 (goto 126)) ;;to TAG_3
                                      (124 (pop)) ;;at TAG_1
                                      (125 (aconst_null)) ;;at TAG_2
                                      (126 (goto 131)) ;;to TAG_4;;at TAG_3
                                      (129 (pop)) 
                                      (130 (aconst_null)) ;;at TAG_0
                                      (131 (areturn)) ;;at TAG_4
                                      (endofcode 132))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$take$fn__4232-class-table*
  (make-static-class-decls 
   *clojure.core$take$fn__4232*))

(defconst *package-name-map* 
  ("clojure.core$take$fn__4232" . "clojure"))

