; pprint$map_passing_context-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:56 CDT 2014.
;

(defconst *clojure.pprint$map_passing_context*
 (make-class-def
      '(class "clojure.pprint$map_passing_context"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "empty?")
                        (STRING  "first")
                        (STRING  "next")
                        (STRING  "apply")
                        (STRING  "nth")
                        (STRING  "conj"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 93)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "empty?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$map_passing_context" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "first"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$map_passing_context" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "next"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.pprint$map_passing_context" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "apply"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.pprint$map_passing_context" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "nth"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.pprint$map_passing_context" (class "clojure.lang.Var"))))
                                      (65 (lconst_0))
                                      (66 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (69 (putstatic (fieldCP "const__5" "clojure.pprint$map_passing_context" (class "java.lang.Object"))))
                                      (72 (lconst_1))
                                      (73 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (76 (putstatic (fieldCP "const__6" "clojure.pprint$map_passing_context" (class "java.lang.Object"))))
                                      (79 (ldc 0))        ;;STRING:: "clojure.core"
                                      (81 (ldc 6))        ;;STRING:: "conj"
                                      (83 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (86 (checkcast (class "clojure.lang.Var")))
                                      (89 (putstatic (fieldCP "const__7" "clojure.pprint$map_passing_context" (class "clojure.lang.Var"))))
                                      (92 (return))
                                      (endofcode 93))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 12) (code_length . 203)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (aconst_null)) 
                                      (2 (astore_2)) 
                                      (3 (astore 4)) 
                                      (5 (aload_3)) 
                                      (6 (aconst_null)) 
                                      (7 (astore_3)) 
                                      (8 (astore 5)) 
                                      (10 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (13 (astore 6)) 
                                      (15 (getstatic (fieldCP "const__0" "clojure.pprint$map_passing_context" (class "clojure.lang.Var")))) ;;at TAG_3
                                      (18 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (21 (checkcast (class "clojure.lang.IFn"))) 
                                      (24 (aload 5)) 
                                      (26 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (31 (dup)) 
                                      (32 (ifnull 61)) ;;to TAG_0
                                      (35 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (38 (if_acmpeq 62)) ;;to TAG_1
                                      (41 (iconst_2)) 
                                      (42 (anewarray (class "java.lang.Object"))) 
                                      (45 (dup)) 
                                      (46 (iconst_0)) 
                                      (47 (aload 6)) 
                                      (49 (aastore)) 
                                      (50 (dup)) 
                                      (51 (iconst_1)) 
                                      (52 (aload 4)) 
                                      (54 (aastore)) 
                                      (55 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (58 (goto 202))  ;;to TAG_2
                                      (61 (pop)) ;;at TAG_0
                                      (62 (getstatic (fieldCP "const__1" "clojure.pprint$map_passing_context" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (65 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (68 (checkcast (class "clojure.lang.IFn"))) 
                                      (71 (aload 5)) 
                                      (73 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (78 (astore 7)) 
                                      (80 (getstatic (fieldCP "const__2" "clojure.pprint$map_passing_context" (class "clojure.lang.Var")))) 
                                      (83 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (86 (checkcast (class "clojure.lang.IFn"))) 
                                      (89 (aload 5)) 
                                      (91 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (96 (astore 8)) 
                                      (98 (getstatic (fieldCP "const__3" "clojure.pprint$map_passing_context" (class "clojure.lang.Var")))) 
                                      (101 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (104 (checkcast (class "clojure.lang.IFn"))) 
                                      (107 (aload_1)) 
                                      (108 (iconst_2)) 
                                      (109 (anewarray (class "java.lang.Object"))) 
                                      (112 (dup)) 
                                      (113 (iconst_0)) 
                                      (114 (aload 7)) 
                                      (116 (aconst_null)) 
                                      (117 (astore 7)) 
                                      (119 (aastore)) 
                                      (120 (dup)) 
                                      (121 (iconst_1)) 
                                      (122 (aload 4)) 
                                      (124 (aastore)) 
                                      (125 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (128 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (133 (astore 9)) 
                                      (135 (aload 9)) 
                                      (137 (lconst_0)) 
                                      (138 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (141 (aconst_null)) 
                                      (142 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (145 (astore 10)) 
                                      (147 (aload 9)) 
                                      (149 (aconst_null)) 
                                      (150 (astore 9)) 
                                      (152 (lconst_1)) 
                                      (153 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (156 (aconst_null)) 
                                      (157 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (160 (astore 11)) 
                                      (162 (aload 11)) 
                                      (164 (aconst_null)) 
                                      (165 (astore 11)) 
                                      (167 (aload 8)) 
                                      (169 (aconst_null)) 
                                      (170 (astore 8)) 
                                      (172 (getstatic (fieldCP "const__7" "clojure.pprint$map_passing_context" (class "clojure.lang.Var")))) 
                                      (175 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (178 (checkcast (class "clojure.lang.IFn"))) 
                                      (181 (aload 6)) 
                                      (183 (aload 10)) 
                                      (185 (aconst_null)) 
                                      (186 (astore 10)) 
                                      (188 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (193 (astore 6)) 
                                      (195 (astore 5)) 
                                      (197 (astore 4)) 
                                      (199 (goto 15)) ;;to TAG_3
                                      (202 (areturn)) ;;at TAG_2
                                      (endofcode 203))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$map_passing_context-class-table*
  (make-static-class-decls 
   *clojure.pprint$map_passing_context*))

(defconst *package-name-map* 
  ("clojure.pprint$map_passing_context" . "clojure"))

