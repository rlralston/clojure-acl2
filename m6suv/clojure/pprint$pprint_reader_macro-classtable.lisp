; pprint$pprint_reader_macro-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:56 CDT 2014.
;

(defconst *clojure.pprint$pprint_reader_macro*
 (make-class-def
      '(class "clojure.pprint$pprint_reader_macro"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.pprint")
                        (STRING  "reader-macros")
                        (STRING  "clojure.core")
                        (STRING  "first")
                        (STRING  "=")
                        (LONG 2)
                        (STRING  "count")
                        (STRING  "*out*")
                        (STRING  "write-out")
                        (STRING  "second"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 101)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.pprint"
                                      (2 (ldc 1))         ;;STRING:: "reader-macros"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$pprint_reader_macro" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.core"
                                      (15 (ldc 3))        ;;STRING:: "first"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$pprint_reader_macro" (class "clojure.lang.Var"))))
                                      (26 (ldc 2))        ;;STRING:: "clojure.core"
                                      (28 (ldc 4))        ;;STRING:: "="
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.pprint$pprint_reader_macro" (class "clojure.lang.Var"))))
                                      (39 (ldc2_w 5))     ;; LONG:: "2"
                                      (42 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (45 (putstatic (fieldCP "const__3" "clojure.pprint$pprint_reader_macro" (class "java.lang.Object"))))
                                      (48 (ldc 2))        ;;STRING:: "clojure.core"
                                      (50 (ldc 6))        ;;STRING:: "count"
                                      (52 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (55 (checkcast (class "clojure.lang.Var")))
                                      (58 (putstatic (fieldCP "const__4" "clojure.pprint$pprint_reader_macro" (class "clojure.lang.Var"))))
                                      (61 (ldc 2))        ;;STRING:: "clojure.core"
                                      (63 (ldc 7))        ;;STRING:: "*out*"
                                      (65 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (68 (checkcast (class "clojure.lang.Var")))
                                      (71 (putstatic (fieldCP "const__5" "clojure.pprint$pprint_reader_macro" (class "clojure.lang.Var"))))
                                      (74 (ldc 0))        ;;STRING:: "clojure.pprint"
                                      (76 (ldc 8))        ;;STRING:: "write-out"
                                      (78 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (81 (checkcast (class "clojure.lang.Var")))
                                      (84 (putstatic (fieldCP "const__6" "clojure.pprint$pprint_reader_macro" (class "clojure.lang.Var"))))
                                      (87 (ldc 2))        ;;STRING:: "clojure.core"
                                      (89 (ldc 9))        ;;STRING:: "second"
                                      (91 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (94 (checkcast (class "clojure.lang.Var")))
                                      (97 (putstatic (fieldCP "const__7" "clojure.pprint$pprint_reader_macro" (class "clojure.lang.Var"))))
                                      (100 (return))
                                      (endofcode 101))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 144)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$pprint_reader_macro" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (getstatic (fieldCP "const__1" "clojure.pprint$pprint_reader_macro" (class "clojure.lang.Var")))) 
                                      (12 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (15 (checkcast (class "clojure.lang.IFn"))) 
                                      (18 (aload_1)) 
                                      (19 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (24 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (29 (astore_2)) 
                                      (30 (aload_2)) 
                                      (31 (astore_3)) 
                                      (32 (aload_3)) 
                                      (33 (dup)) 
                                      (34 (ifnull 69)) ;;to TAG_0
                                      (37 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (40 (if_acmpeq 70)) ;;to TAG_1
                                      (43 (ldc2_w 5)) ;; LONG:: "2"
                                      (46 (aload_1)) 
                                      (47 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (50 (i2l)) 
                                      (51 (invokestatic (methodCP "equiv" "clojure.lang.Util" (long long) boolean))) 
                                      (54 (ifeq 63))  ;;to TAG_2
                                      (57 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (60 (goto 66)) ;;to TAG_3
                                      (63 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_2
                                      (66 (goto 73)) ;;to TAG_4;;at TAG_3
                                      (69 (pop)) ;;at TAG_0
                                      (70 (aload_3)) ;;at TAG_1
                                      (71 (aconst_null)) 
                                      (72 (astore_3)) 
                                      (73 (dup)) ;;at TAG_4
                                      (74 (ifnull 141)) ;;to TAG_5
                                      (77 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (80 (if_acmpeq 142)) ;;to TAG_6
                                      (83 (getstatic (fieldCP "const__5" "clojure.pprint$pprint_reader_macro" (class "clojure.lang.Var")))) 
                                      (86 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (89 (checkcast (class "java.io.Writer"))) 
                                      (92 (aload_2)) 
                                      (93 (aconst_null)) 
                                      (94 (astore_2)) 
                                      (95 (checkcast (class "java.lang.String"))) 
                                      (98 (invokevirtual (methodCP "write" "java.io.Writer" ((class "java.lang.String")) void))) 
                                      (101 (aconst_null)) 
                                      (102 (pop)) 
                                      (103 (getstatic (fieldCP "const__6" "clojure.pprint$pprint_reader_macro" (class "clojure.lang.Var")))) 
                                      (106 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (109 (checkcast (class "clojure.lang.IFn"))) 
                                      (112 (getstatic (fieldCP "const__7" "clojure.pprint$pprint_reader_macro" (class "clojure.lang.Var")))) 
                                      (115 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (118 (checkcast (class "clojure.lang.IFn"))) 
                                      (121 (aload_1)) 
                                      (122 (aconst_null)) 
                                      (123 (astore_1)) 
                                      (124 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (129 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (134 (pop)) 
                                      (135 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (138 (goto 143)) ;;to TAG_7
                                      (141 (pop)) ;;at TAG_5
                                      (142 (aconst_null)) ;;at TAG_6
                                      (143 (areturn)) ;;at TAG_7
                                      (endofcode 144))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$pprint_reader_macro-class-table*
  (make-static-class-decls 
   *clojure.pprint$pprint_reader_macro*))

(defconst *package-name-map* 
  ("clojure.pprint$pprint_reader_macro" . "clojure"))

