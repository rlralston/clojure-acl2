; core$make_hierarchy-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:44 CDT 2014.
;

(defconst *clojure.core$make_hierarchy*
 (make-class-def
      '(class "clojure.core$make_hierarchy"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "parents")
                        (STRING  "descendants")
                        (STRING  "ancestors"))
            (fields
                        (field "const__0" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 37)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (ldc 0))         ;;STRING:: "parents"
                                      (3 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (6 (checkcast (class "clojure.lang.Keyword")))
                                      (9 (putstatic (fieldCP "const__0" "clojure.core$make_hierarchy" (class "clojure.lang.Keyword"))))
                                      (12 (aconst_null))
                                      (13 (ldc 1))        ;;STRING:: "descendants"
                                      (15 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (18 (checkcast (class "clojure.lang.Keyword")))
                                      (21 (putstatic (fieldCP "const__1" "clojure.core$make_hierarchy" (class "clojure.lang.Keyword"))))
                                      (24 (aconst_null))
                                      (25 (ldc 2))        ;;STRING:: "ancestors"
                                      (27 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (30 (checkcast (class "clojure.lang.Keyword")))
                                      (33 (putstatic (fieldCP "const__2" "clojure.core$make_hierarchy" (class "clojure.lang.Keyword"))))
                                      (36 (return))
                                      (endofcode 37))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 45)
                                   (parsedcode
                                      (0 (bipush 6))
                                      (2 (anewarray (class "java.lang.Object")))
                                      (5 (dup))
                                      (6 (iconst_0))
                                      (7 (getstatic (fieldCP "const__0" "clojure.core$make_hierarchy" (class "clojure.lang.Keyword"))))
                                      (10 (aastore))
                                      (11 (dup))
                                      (12 (iconst_1))
                                      (13 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentArrayMap" (class "clojure.lang.PersistentArrayMap"))))
                                      (16 (aastore))
                                      (17 (dup))
                                      (18 (iconst_2))
                                      (19 (getstatic (fieldCP "const__1" "clojure.core$make_hierarchy" (class "clojure.lang.Keyword"))))
                                      (22 (aastore))
                                      (23 (dup))
                                      (24 (iconst_3))
                                      (25 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentArrayMap" (class "clojure.lang.PersistentArrayMap"))))
                                      (28 (aastore))
                                      (29 (dup))
                                      (30 (iconst_4))
                                      (31 (getstatic (fieldCP "const__2" "clojure.core$make_hierarchy" (class "clojure.lang.Keyword"))))
                                      (34 (aastore))
                                      (35 (dup))
                                      (36 (iconst_5))
                                      (37 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentArrayMap" (class "clojure.lang.PersistentArrayMap"))))
                                      (40 (aastore))
                                      (41 (invokestatic
					(methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (44 (areturn))
                                      (endofcode 45))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$make_hierarchy-class-table*
  (make-static-class-decls 
   *clojure.core$make_hierarchy*))

(defconst *package-name-map* 
  ("clojure.core$make_hierarchy" . "clojure"))

