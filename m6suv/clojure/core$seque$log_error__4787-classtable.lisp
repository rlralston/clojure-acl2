; core$seque$log_error__4787-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:45 CDT 2014.
;

(defconst *clojure.core$seque$log_error__4787*
 (make-class-def
      '(class "clojure.core$seque$log_error__4787"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "offer"))
            (fields)
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 0) (max_locals . 0) (code_length . 1)
                                   (parsedcode
                                      (0 (return))
                                      (endofcode 1))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 3) (code_length . 41)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ldc 0)) ;;STRING:: "offer"
                                      (3 (iconst_1)) 
                                      (4 (anewarray (class "java.lang.Object"))) 
                                      (7 (dup)) 
                                      (8 (iconst_0)) 
                                      (9 (aload_1)) 
                                      (10 (aconst_null)) 
                                      (11 (astore_1)) 
                                      (12 (aastore)) 
                                      (13 (invokestatic (methodCP "invokeInstanceMethod" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (16 (dup)) 
                                      (17 (ifnull 36)) ;;to TAG_0
                                      (20 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (23 (if_acmpeq 37)) ;;to TAG_1
                                      (26 (aload_2)) 
                                      (27 (aconst_null)) 
                                      (28 (astore_2)) 
                                      (29 (checkcast (class "java.lang.Throwable"))) 
                                      (32 (athrow)) 
                                      (33 (goto 40))  ;;to TAG_2
                                      (36 (pop)) ;;at TAG_0
                                      (37 (aload_2)) ;;at TAG_1
                                      (38 (aconst_null)) 
                                      (39 (astore_2)) 
                                      (40 (areturn)) ;;at TAG_2
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$seque$log_error__4787-class-table*
  (make-static-class-decls 
   *clojure.core$seque$log_error__4787*))

(defconst *package-name-map* 
  ("clojure.core$seque$log_error__4787" . "clojure"))

