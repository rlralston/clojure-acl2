; inspector$list_model-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:49 CDT 2014.
;

(defconst *clojure.inspector$list_model*
 (make-class-def
      '(class "clojure.inspector$list_model"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "seq?")
                        (STRING  "seq")
                        (STRING  "get")
                        (STRING  "get-label")
                        (STRING  "get-value")
                        (STRING  "nrows")
                        (STRING  "init-proxy")
                        (STRING  "getValueAt")
                        (STRING  "getRowCount")
                        (STRING  "getColumnCount"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 89)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "seq?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.inspector$list_model" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "seq"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.inspector$list_model" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "get"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.inspector$list_model" (class "clojure.lang.Var"))))
                                      (39 (aconst_null))
                                      (40 (ldc 4))        ;;STRING:: "get-label"
                                      (42 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (45 (checkcast (class "clojure.lang.Keyword")))
                                      (48 (putstatic (fieldCP "const__3" "clojure.inspector$list_model" (class "clojure.lang.Keyword"))))
                                      (51 (aconst_null))
                                      (52 (ldc 5))        ;;STRING:: "get-value"
                                      (54 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (57 (checkcast (class "clojure.lang.Keyword")))
                                      (60 (putstatic (fieldCP "const__4" "clojure.inspector$list_model" (class "clojure.lang.Keyword"))))
                                      (63 (aconst_null))
                                      (64 (ldc 6))        ;;STRING:: "nrows"
                                      (66 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (69 (checkcast (class "clojure.lang.Keyword")))
                                      (72 (putstatic (fieldCP "const__5" "clojure.inspector$list_model" (class "clojure.lang.Keyword"))))
                                      (75 (ldc 0))        ;;STRING:: "clojure.core"
                                      (77 (ldc 7))        ;;STRING:: "init-proxy"
                                      (79 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (82 (checkcast (class "clojure.lang.Var")))
                                      (85 (putstatic (fieldCP "const__6" "clojure.inspector$list_model" (class "clojure.lang.Var"))))
                                      (88 (return))
                                      (endofcode 89))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 10) (max_locals . 8) (code_length . 189)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aconst_null)) 
                                      (2 (astore_1)) 
                                      (3 (astore_2)) 
                                      (4 (getstatic (fieldCP "const__0" "clojure.inspector$list_model" (class "clojure.lang.Var")))) 
                                      (7 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (10 (checkcast (class "clojure.lang.IFn"))) 
                                      (13 (aload_2)) 
                                      (14 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (19 (dup)) 
                                      (20 (ifnull 55)) ;;to TAG_0
                                      (23 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (26 (if_acmpeq 56)) ;;to TAG_1
                                      (29 (getstatic (fieldCP "const__1" "clojure.inspector$list_model" (class "clojure.lang.Var")))) 
                                      (32 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (35 (checkcast (class "clojure.lang.IFn"))) 
                                      (38 (aload_2)) 
                                      (39 (aconst_null)) 
                                      (40 (astore_2)) 
                                      (41 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (46 (checkcast (class "clojure.lang.ISeq"))) 
                                      (49 (invokestatic (methodCP "create" "clojure.lang.PersistentHashMap" ((class "clojure.lang.ISeq")) (class "clojure.lang.PersistentHashMap")))) 
                                      (52 (goto 59))  ;;to TAG_2
                                      (55 (pop)) ;;at TAG_0
                                      (56 (aload_2)) ;;at TAG_1
                                      (57 (aconst_null)) 
                                      (58 (astore_2)) 
                                      (59 (astore_3)) ;;at TAG_2
                                      (60 (aload_3)) 
                                      (61 (getstatic (fieldCP "const__3" "clojure.inspector$list_model" (class "clojure.lang.Keyword")))) 
                                      (64 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (67 (astore 4)) 
                                      (69 (aload_3)) 
                                      (70 (getstatic (fieldCP "const__4" "clojure.inspector$list_model" (class "clojure.lang.Keyword")))) 
                                      (73 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (76 (astore 5)) 
                                      (78 (aload_3)) 
                                      (79 (aconst_null)) 
                                      (80 (astore_3)) 
                                      (81 (getstatic (fieldCP "const__5" "clojure.inspector$list_model" (class "clojure.lang.Keyword")))) 
                                      (84 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (87 (astore 6)) 
                                      (89 (new (class "clojure.inspector.proxy$javax.swing.table.AbstractTableModel$0"))) 
                                      (92 (dup)) 
                                      (93 (invokespecial (methodCP "<init>" "clojure.inspector.proxy$javax.swing.table.AbstractTableModel$0" () void))) 
                                      (96 (astore 7)) 
                                      (98 (getstatic (fieldCP "const__6" "clojure.inspector$list_model" (class "clojure.lang.Var")))) 
                                      (101 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (104 (checkcast (class "clojure.lang.IFn"))) 
                                      (107 (aload 7)) 
                                      (109 (bipush 6)) 
                                      (111 (anewarray (class "java.lang.Object"))) 
                                      (114 (dup)) 
                                      (115 (iconst_0)) 
                                      (116 (ldc 8)) ;;STRING:: "getValueAt"
                                      (118 (aastore)) 
                                      (119 (dup)) 
                                      (120 (iconst_1)) 
                                      (121 (new (class "clojure.inspector$list_model$fn__6949"))) 
                                      (124 (dup)) 
                                      (125 (aload 5)) 
                                      (127 (aconst_null)) 
                                      (128 (astore 5)) 
                                      (130 (aload 4)) 
                                      (132 (aconst_null)) 
                                      (133 (astore 4)) 
                                      (135 (invokespecial (methodCP "<init>" "clojure.inspector$list_model$fn__6949" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (138 (aastore)) 
                                      (139 (dup)) 
                                      (140 (iconst_2)) 
                                      (141 (ldc 9)) ;;STRING:: "getRowCount"
                                      (143 (aastore)) 
                                      (144 (dup)) 
                                      (145 (iconst_3)) 
                                      (146 (new (class "clojure.inspector$list_model$fn__6951"))) 
                                      (149 (dup)) 
                                      (150 (aload 6)) 
                                      (152 (aconst_null)) 
                                      (153 (astore 6)) 
                                      (155 (invokespecial (methodCP "<init>" "clojure.inspector$list_model$fn__6951" ((class "java.lang.Object")) void))) 
                                      (158 (aastore)) 
                                      (159 (dup)) 
                                      (160 (iconst_4)) 
                                      (161 (ldc 10)) ;;STRING:: "getColumnCount"
                                      (163 (aastore)) 
                                      (164 (dup)) 
                                      (165 (iconst_5)) 
                                      (166 (new (class "clojure.inspector$list_model$fn__6953"))) 
                                      (169 (dup)) 
                                      (170 (invokespecial (methodCP "<init>" "clojure.inspector$list_model$fn__6953" () void))) 
                                      (173 (aastore)) 
                                      (174 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (177 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (182 (pop)) 
                                      (183 (aload 7)) 
                                      (185 (aconst_null)) 
                                      (186 (astore 7)) 
                                      (188 (areturn)) 
                                      (endofcode 189))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *inspector$list_model-class-table*
  (make-static-class-decls 
   *clojure.inspector$list_model*))

(defconst *package-name-map* 
  ("clojure.inspector$list_model" . "clojure"))

