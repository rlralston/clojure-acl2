; pprint$multi_defn-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:56 CDT 2014.
;

(defconst *clojure.pprint$multi_defn*
 (make-class-def
      '(class "clojure.pprint$multi_defn"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "seq")
                        (STRING  "string?")
                        (STRING  "clojure.pprint")
                        (STRING  "cached-compile")
                        (STRING  " ~_~{~w~^ ~_~}"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 40)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "seq"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$multi_defn" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "string?"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$multi_defn" (class "clojure.lang.Var"))))
                                      (26 (ldc 3))        ;;STRING:: "clojure.pprint"
                                      (28 (ldc 4))        ;;STRING:: "cached-compile"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.pprint$multi_defn" (class "clojure.lang.Var"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 105)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$multi_defn" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (dup)) 
                                      (16 (ifnull 102)) ;;to TAG_0
                                      (19 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (22 (if_acmpeq 103)) ;;to TAG_1
                                      (25 (ldc 5)) ;;STRING:: " ~_~{~w~^ ~_~}"
                                      (27 (astore_3)) 
                                      (28 (getstatic (fieldCP "const__1" "clojure.pprint$multi_defn" (class "clojure.lang.Var")))) 
                                      (31 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (34 (checkcast (class "clojure.lang.IFn"))) 
                                      (37 (aload_3)) 
                                      (38 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (43 (dup)) 
                                      (44 (ifnull 70))  ;;to TAG_2
                                      (47 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (50 (if_acmpeq 71)) ;;to TAG_3
                                      (53 (getstatic (fieldCP "const__2" "clojure.pprint$multi_defn" (class "clojure.lang.Var")))) 
                                      (56 (checkcast (class "clojure.lang.IFn"))) 
                                      (59 (aload_3)) 
                                      (60 (aconst_null)) 
                                      (61 (astore_3)) 
                                      (62 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (67 (goto 74)) ;;to TAG_4
                                      (70 (pop)) ;;at TAG_2
                                      (71 (aload_3)) ;;at TAG_3
                                      (72 (aconst_null)) 
                                      (73 (astore_3)) 
                                      (74 (astore 4)) ;;at TAG_4
                                      (76 (new (class "clojure.pprint$multi_defn$fn__8327"))) 
                                      (79 (dup)) 
                                      (80 (aload 4)) 
                                      (82 (aconst_null)) 
                                      (83 (astore 4)) 
                                      (85 (invokespecial (methodCP "<init>" "clojure.pprint$multi_defn$fn__8327" ((class "java.lang.Object")) void))) 
                                      (88 (checkcast (class "clojure.lang.IFn"))) 
                                      (91 (aload_1)) 
                                      (92 (aconst_null)) 
                                      (93 (astore_1)) 
                                      (94 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (99 (goto 104)) ;;to TAG_5
                                      (102 (pop)) ;;at TAG_0
                                      (103 (aconst_null)) ;;at TAG_1
                                      (104 (areturn)) ;;at TAG_5
                                      (endofcode 105))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$multi_defn-class-table*
  (make-static-class-decls 
   *clojure.pprint$multi_defn*))

(defconst *package-name-map* 
  ("clojure.pprint$multi_defn" . "clojure"))

