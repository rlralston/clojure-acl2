; core$underive-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:45 CDT 2014.
;

(defconst *clojure.core$underive*
 (make-class-def
      '(class "clojure.core$underive"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "alter-var-root")
                        (STRING  "global-hierarchy")
                        (STRING  "underive")
                        (STRING  "parents")
                        (STRING  "disj")
                        (STRING  "not-empty")
                        (STRING  "assoc")
                        (STRING  "dissoc")
                        (STRING  "flatten")
                        (STRING  "map")
                        (STRING  "seq")
                        (STRING  "contains?")
                        (STRING  "reduce1")
                        (STRING  "make-hierarchy")
                        (STRING  "partition")
                        (LONG 2))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__11" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__12" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__13" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__14" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__15" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "__site__0__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__0__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 0) (code_length . 224)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "alter-var-root"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "global-hierarchy"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "underive"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (39 (aconst_null))
                                      (40 (ldc 4))        ;;STRING:: "parents"
                                      (42 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (45 (checkcast (class "clojure.lang.Keyword")))
                                      (48 (putstatic (fieldCP "const__3" "clojure.core$underive" (class "clojure.lang.Keyword"))))
                                      (51 (ldc 0))        ;;STRING:: "clojure.core"
                                      (53 (ldc 5))        ;;STRING:: "disj"
                                      (55 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (58 (checkcast (class "clojure.lang.Var")))
                                      (61 (putstatic (fieldCP "const__4" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (64 (ldc 0))        ;;STRING:: "clojure.core"
                                      (66 (ldc 6))        ;;STRING:: "not-empty"
                                      (68 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (71 (checkcast (class "clojure.lang.Var")))
                                      (74 (putstatic (fieldCP "const__5" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (77 (ldc 0))        ;;STRING:: "clojure.core"
                                      (79 (ldc 7))        ;;STRING:: "assoc"
                                      (81 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (84 (checkcast (class "clojure.lang.Var")))
                                      (87 (putstatic (fieldCP "const__6" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (90 (ldc 0))        ;;STRING:: "clojure.core"
                                      (92 (ldc 8))        ;;STRING:: "dissoc"
                                      (94 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (97 (checkcast (class "clojure.lang.Var")))
                                      (100 (putstatic (fieldCP "const__7" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (103 (ldc 0))       ;;STRING:: "clojure.core"
                                      (105 (ldc 9))       ;;STRING:: "flatten"
                                      (107 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (110 (checkcast (class "clojure.lang.Var")))
                                      (113 (putstatic (fieldCP "const__8" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (116 (ldc 0))       ;;STRING:: "clojure.core"
                                      (118 (ldc 10))      ;;STRING:: "map"
                                      (120 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (123 (checkcast (class "clojure.lang.Var")))
                                      (126 (putstatic (fieldCP "const__9" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (129 (ldc 0))       ;;STRING:: "clojure.core"
                                      (131 (ldc 11))      ;;STRING:: "seq"
                                      (133 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (136 (checkcast (class "clojure.lang.Var")))
                                      (139 (putstatic (fieldCP "const__10" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (142 (ldc 0))       ;;STRING:: "clojure.core"
                                      (144 (ldc 12))      ;;STRING:: "contains?"
                                      (146 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (149 (checkcast (class "clojure.lang.Var")))
                                      (152 (putstatic (fieldCP "const__11" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (155 (ldc 0))       ;;STRING:: "clojure.core"
                                      (157 (ldc 13))      ;;STRING:: "reduce1"
                                      (159 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (162 (checkcast (class "clojure.lang.Var")))
                                      (165 (putstatic (fieldCP "const__12" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (168 (ldc 0))       ;;STRING:: "clojure.core"
                                      (170 (ldc 14))      ;;STRING:: "make-hierarchy"
                                      (172 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (175 (checkcast (class "clojure.lang.Var")))
                                      (178 (putstatic (fieldCP "const__13" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (181 (ldc 0))       ;;STRING:: "clojure.core"
                                      (183 (ldc 15))      ;;STRING:: "partition"
                                      (185 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (188 (checkcast (class "clojure.lang.Var")))
                                      (191 (putstatic (fieldCP "const__14" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (194 (ldc2_w 16))   ;; LONG:: "2"
                                      (197 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (200 (putstatic (fieldCP "const__15" "clojure.core$underive" (class "java.lang.Object"))))
                                      (203 (new (class "clojure.lang.KeywordLookupSite")))
                                      (206 (dup))
                                      (207 (aconst_null))
                                      (208 (ldc 4))       ;;STRING:: "parents"
                                      (210 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (213 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (216 (dup))
                                      (217 (putstatic (fieldCP "__site__0__" "clojure.core$underive" (class "clojure.lang.KeywordLookupSite"))))
                                      (220 (putstatic (fieldCP "__thunk__0__" "clojure.core$underive" (class "clojure.lang.ILookupThunk"))))
                                      (223 (return))
                                      (endofcode 224))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 8) (code_length . 334)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "__thunk__0__" "clojure.core$underive" (class "clojure.lang.ILookupThunk")))) 
                                      (3 (dup)) 
                                      (4 (aload_1)) 
                                      (5 (dup_x2)) 
                                      (6 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (11 (dup_x2)) 
                                      (12 (if_acmpeq 19)) ;;to TAG_0
                                      (15 (pop)) 
                                      (16 (goto 41))  ;;to TAG_1
                                      (19 (swap)) ;;at TAG_0
                                      (20 (pop)) 
                                      (21 (dup)) 
                                      (22 (getstatic (fieldCP "__site__0__" "clojure.core$underive" (class "clojure.lang.KeywordLookupSite")))) 
                                      (25 (swap)) 
                                      (26 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (31 (dup)) 
                                      (32 (putstatic (fieldCP "__thunk__0__" "clojure.core$underive" (class "clojure.lang.ILookupThunk")))) 
                                      (35 (swap)) 
                                      (36 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (41 (astore 4)) ;;at TAG_1
                                      (43 (aload 4)) 
                                      (45 (checkcast (class "clojure.lang.IFn"))) 
                                      (48 (aload_2)) 
                                      (49 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (54 (dup)) 
                                      (55 (ifnull 93)) ;;to TAG_2
                                      (58 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (61 (if_acmpeq 94)) ;;to TAG_3
                                      (64 (getstatic (fieldCP "const__4" "clojure.core$underive" (class "clojure.lang.Var")))) 
                                      (67 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (70 (checkcast (class "clojure.lang.IFn"))) 
                                      (73 (aload 4)) 
                                      (75 (checkcast (class "clojure.lang.IFn"))) 
                                      (78 (aload_2)) 
                                      (79 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (84 (aload_3)) 
                                      (85 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (90 (goto 97)) ;;to TAG_4
                                      (93 (pop)) ;;at TAG_2
                                      (94 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashSet" (class "clojure.lang.PersistentHashSet")))) ;;at TAG_3
                                      (97 (astore 5)) ;;at TAG_4
                                      (99 (getstatic (fieldCP "const__5" "clojure.core$underive" (class "clojure.lang.Var")))) 
                                      (102 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (105 (checkcast (class "clojure.lang.IFn"))) 
                                      (108 (aload 5)) 
                                      (110 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (115 (dup)) 
                                      (116 (ifnull 150)) ;;to TAG_5
                                      (119 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (122 (if_acmpeq 151)) ;;to TAG_6
                                      (125 (getstatic (fieldCP "const__6" "clojure.core$underive" (class "clojure.lang.Var")))) 
                                      (128 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (131 (checkcast (class "clojure.lang.IFn"))) 
                                      (134 (aload 4)) 
                                      (136 (aload_2)) 
                                      (137 (aload 5)) 
                                      (139 (aconst_null)) 
                                      (140 (astore 5)) 
                                      (142 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (147 (goto 168)) ;;to TAG_7
                                      (150 (pop)) ;;at TAG_5
                                      (151 (getstatic (fieldCP "const__7" "clojure.core$underive" (class "clojure.lang.Var")))) ;;at TAG_6
                                      (154 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (157 (checkcast (class "clojure.lang.IFn"))) 
                                      (160 (aload 4)) 
                                      (162 (aload_2)) 
                                      (163 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (168 (astore 6)) ;;at TAG_7
                                      (170 (getstatic (fieldCP "const__8" "clojure.core$underive" (class "clojure.lang.Var")))) 
                                      (173 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (176 (checkcast (class "clojure.lang.IFn"))) 
                                      (179 (getstatic (fieldCP "const__9" "clojure.core$underive" (class "clojure.lang.Var")))) 
                                      (182 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (185 (checkcast (class "clojure.lang.IFn"))) 
                                      (188 (new (class "clojure.core$underive$fn__4881"))) 
                                      (191 (dup)) 
                                      (192 (invokespecial (methodCP "<init>" "clojure.core$underive$fn__4881" () void))) 
                                      (195 (getstatic (fieldCP "const__10" "clojure.core$underive" (class "clojure.lang.Var")))) 
                                      (198 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (201 (checkcast (class "clojure.lang.IFn"))) 
                                      (204 (aload 6)) 
                                      (206 (aconst_null)) 
                                      (207 (astore 6)) 
                                      (209 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (214 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (219 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (224 (astore 7)) 
                                      (226 (getstatic (fieldCP "const__11" "clojure.core$underive" (class "clojure.lang.Var")))) 
                                      (229 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (232 (checkcast (class "clojure.lang.IFn"))) 
                                      (235 (aload 4)) 
                                      (237 (aconst_null)) 
                                      (238 (astore 4)) 
                                      (240 (checkcast (class "clojure.lang.IFn"))) 
                                      (243 (aload_2)) 
                                      (244 (aconst_null)) 
                                      (245 (astore_2)) 
                                      (246 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (251 (aload_3)) 
                                      (252 (aconst_null)) 
                                      (253 (astore_3)) 
                                      (254 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (259 (dup)) 
                                      (260 (ifnull 329)) ;;to TAG_8
                                      (263 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (266 (if_acmpeq 330)) ;;to TAG_9
                                      (269 (getstatic (fieldCP "const__12" "clojure.core$underive" (class "clojure.lang.Var")))) 
                                      (272 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (275 (checkcast (class "clojure.lang.IFn"))) 
                                      (278 (new (class "clojure.core$underive$fn__4883"))) 
                                      (281 (dup)) 
                                      (282 (invokespecial (methodCP "<init>" "clojure.core$underive$fn__4883" () void))) 
                                      (285 (getstatic (fieldCP "const__13" "clojure.core$underive" (class "clojure.lang.Var")))) 
                                      (288 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (291 (checkcast (class "clojure.lang.IFn"))) 
                                      (294 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (299 (getstatic (fieldCP "const__14" "clojure.core$underive" (class "clojure.lang.Var")))) 
                                      (302 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (305 (checkcast (class "clojure.lang.IFn"))) 
                                      (308 (getstatic (fieldCP "const__15" "clojure.core$underive" (class "java.lang.Object")))) 
                                      (311 (aload 7)) 
                                      (313 (aconst_null)) 
                                      (314 (astore 7)) 
                                      (316 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (321 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (326 (goto 333)) ;;to TAG_10
                                      (329 (pop)) ;;at TAG_8
                                      (330 (aload_1)) ;;at TAG_9
                                      (331 (aconst_null)) 
                                      (332 (astore_1)) 
                                      (333 (areturn)) ;;at TAG_10
                                      (endofcode 334))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 3) (code_length . 32)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (3 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (6 (checkcast (class "clojure.lang.IFn")))
                                      (9 (getstatic (fieldCP "const__1" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (12 (getstatic (fieldCP "const__2" "clojure.core$underive" (class "clojure.lang.Var"))))
                                      (15 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (18 (aload_1))
                                      (19 (aconst_null))
                                      (20 (astore_1))
                                      (21 (aload_2))
                                      (22 (aconst_null))
                                      (23 (astore_2))
                                      (24 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5))
                                      (29 (pop))
                                      (30 (aconst_null))
                                      (31 (areturn))
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "swapThunk"
                              (parameters int (class "clojure.lang.ILookupThunk"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 28)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (tableswitch (tableswitchinfo 27 (0 . 0) (20))))  ;;to TAG_0;;to TAG_1
                                      (20 (aload_2)) ;;at TAG_1
                                      (21 (putstatic (fieldCP "__thunk__0__" "clojure.core$underive" (class "clojure.lang.ILookupThunk")))) 
                                      (24 (goto 27))  ;;to TAG_0
                                      (27 (return)) ;;at TAG_0
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$underive-class-table*
  (make-static-class-decls 
   *clojure.core$underive*))

(defconst *package-name-map* 
  ("clojure.core$underive" . "clojure"))

