; core$load_data_reader_file-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:44 CDT 2014.
;

(defconst *clojure.core$load_data_reader_file*
 (make-class-def
      '(class "clojure.core$load_data_reader_file"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "push-thread-bindings")
                        (STRING  "hash-map")
                        (STRING  "*file*")
                        (STRING  "read")
                        (STRING  "not")
                        (STRING  "map?")
                        (STRING  "ex-info")
                        (STRING  "str")
                        (STRING  "url")
                        (STRING  "reduce")
                        (STRING  "pop-thread-bindings")
                        (STRING  "UTF-8")
                        (STRING  "Not a valid data-reader map"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 143)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "push-thread-bindings"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$load_data_reader_file" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "hash-map"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$load_data_reader_file" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "*file*"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$load_data_reader_file" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "read"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.core$load_data_reader_file" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "not"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.core$load_data_reader_file" (class "clojure.lang.Var"))))
                                      (65 (ldc 0))        ;;STRING:: "clojure.core"
                                      (67 (ldc 6))        ;;STRING:: "map?"
                                      (69 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (72 (checkcast (class "clojure.lang.Var")))
                                      (75 (putstatic (fieldCP "const__5" "clojure.core$load_data_reader_file" (class "clojure.lang.Var"))))
                                      (78 (ldc 0))        ;;STRING:: "clojure.core"
                                      (80 (ldc 7))        ;;STRING:: "ex-info"
                                      (82 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (85 (checkcast (class "clojure.lang.Var")))
                                      (88 (putstatic (fieldCP "const__6" "clojure.core$load_data_reader_file" (class "clojure.lang.Var"))))
                                      (91 (ldc 0))        ;;STRING:: "clojure.core"
                                      (93 (ldc 8))        ;;STRING:: "str"
                                      (95 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (98 (checkcast (class "clojure.lang.Var")))
                                      (101 (putstatic (fieldCP "const__7" "clojure.core$load_data_reader_file" (class "clojure.lang.Var"))))
                                      (104 (aconst_null))
                                      (105 (ldc 9))       ;;STRING:: "url"
                                      (107 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (110 (checkcast (class "clojure.lang.Keyword")))
                                      (113 (putstatic (fieldCP "const__8" "clojure.core$load_data_reader_file" (class "clojure.lang.Keyword"))))
                                      (116 (ldc 0))       ;;STRING:: "clojure.core"
                                      (118 (ldc 10))      ;;STRING:: "reduce"
                                      (120 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (123 (checkcast (class "clojure.lang.Var")))
                                      (126 (putstatic (fieldCP "const__9" "clojure.core$load_data_reader_file" (class "clojure.lang.Var"))))
                                      (129 (ldc 0))       ;;STRING:: "clojure.core"
                                      (131 (ldc 11))      ;;STRING:: "pop-thread-bindings"
                                      (133 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (136 (checkcast (class "clojure.lang.Var")))
                                      (139 (putstatic (fieldCP "const__10" "clojure.core$load_data_reader_file" (class "clojure.lang.Var"))))
                                      (142 (return))
                                      (endofcode 143))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 9) (code_length . 300)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (3 (dup)) 
                                      (4 (new (class "java.io.InputStreamReader"))) 
                                      (7 (dup)) 
                                      (8 (aload_2)) 
                                      (9 (checkcast (class "java.net.URL"))) 
                                      (12 (invokevirtual (methodCP "openStream" "java.net.URL" () (class "java.io.InputStream")))) 
                                      (15 (checkcast (class "java.io.InputStream"))) 
                                      (18 (ldc 12)) ;;STRING:: "UTF-8"
                                      (20 (checkcast (class "java.lang.String"))) 
                                      (23 (invokespecial (methodCP "<init>" "java.io.InputStreamReader" ((class "java.io.InputStream") (class "java.lang.String")) void))) 
                                      (26 (checkcast (class "java.io.Reader"))) 
                                      (29 (invokespecial (methodCP "<init>" "clojure.lang.LineNumberingPushbackReader" ((class "java.io.Reader")) void))) 
                                      (32 (astore_3)) 
                                      (33 (getstatic (fieldCP "const__0" "clojure.core$load_data_reader_file" (class "clojure.lang.Var")))) ;;at TAG_8
                                      (36 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (39 (checkcast (class "clojure.lang.IFn"))) 
                                      (42 (getstatic (fieldCP "const__1" "clojure.core$load_data_reader_file" (class "clojure.lang.Var")))) 
                                      (45 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (48 (checkcast (class "clojure.lang.IFn"))) 
                                      (51 (getstatic (fieldCP "const__2" "clojure.core$load_data_reader_file" (class "clojure.lang.Var")))) 
                                      (54 (aload_2)) 
                                      (55 (checkcast (class "java.net.URL"))) 
                                      (58 (invokevirtual (methodCP "getFile" "java.net.URL" () (class "java.lang.String")))) 
                                      (61 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (66 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (71 (pop)) 
                                      (72 (getstatic (fieldCP "const__3" "clojure.core$load_data_reader_file" (class "clojure.lang.Var")))) ;;at TAG_5
                                      (75 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (78 (checkcast (class "clojure.lang.IFn"))) 
                                      (81 (aload_3)) 
                                      (82 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (85 (aconst_null)) 
                                      (86 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (91 (astore 4)) 
                                      (93 (getstatic (fieldCP "const__4" "clojure.core$load_data_reader_file" (class "clojure.lang.Var")))) 
                                      (96 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (99 (checkcast (class "clojure.lang.IFn"))) 
                                      (102 (getstatic (fieldCP "const__5" "clojure.core$load_data_reader_file" (class "clojure.lang.Var")))) 
                                      (105 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (108 (checkcast (class "clojure.lang.IFn"))) 
                                      (111 (aload 4)) 
                                      (113 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (118 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (123 (dup)) 
                                      (124 (ifnull 187)) ;;to TAG_0
                                      (127 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (130 (if_acmpeq 188))  ;;to TAG_1
                                      (133 (getstatic (fieldCP "const__6" "clojure.core$load_data_reader_file" (class "clojure.lang.Var")))) 
                                      (136 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (139 (checkcast (class "clojure.lang.IFn"))) 
                                      (142 (getstatic (fieldCP "const__7" "clojure.core$load_data_reader_file" (class "clojure.lang.Var")))) 
                                      (145 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (148 (checkcast (class "clojure.lang.IFn"))) 
                                      (151 (ldc 13)) ;;STRING:: "Not a valid data-reader map"
                                      (153 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (158 (iconst_2)) 
                                      (159 (anewarray (class "java.lang.Object"))) 
                                      (162 (dup)) 
                                      (163 (iconst_0)) 
                                      (164 (getstatic (fieldCP "const__8" "clojure.core$load_data_reader_file" (class "clojure.lang.Keyword")))) 
                                      (167 (aastore)) 
                                      (168 (dup)) 
                                      (169 (iconst_1)) 
                                      (170 (aload_2)) 
                                      (171 (aastore)) 
                                      (172 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (175 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (180 (checkcast (class "java.lang.Throwable"))) 
                                      (183 (athrow)) 
                                      (184 (goto 190)) ;;to TAG_2
                                      (187 (pop)) ;;at TAG_0
                                      (188 (aconst_null)) ;;at TAG_1
                                      (189 (pop)) 
                                      (190 (getstatic (fieldCP "const__9" "clojure.core$load_data_reader_file" (class "clojure.lang.Var")))) ;;at TAG_2
                                      (193 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (196 (checkcast (class "clojure.lang.IFn"))) 
                                      (199 (new (class "clojure.core$load_data_reader_file$fn__6535"))) 
                                      (202 (dup)) 
                                      (203 (aload_2)) 
                                      (204 (aconst_null)) 
                                      (205 (astore_2)) 
                                      (206 (aload_1)) 
                                      (207 (invokespecial (methodCP "<init>" "clojure.core$load_data_reader_file$fn__6535" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (210 (aload_1)) 
                                      (211 (aconst_null)) 
                                      (212 (astore_1)) 
                                      (213 (aload 4)) 
                                      (215 (aconst_null)) 
                                      (216 (astore 4)) 
                                      (218 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (223 (astore 5)) 
                                      (225 (getstatic (fieldCP "const__10" "clojure.core$load_data_reader_file" (class "clojure.lang.Var")))) ;;at TAG_6
                                      (228 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (231 (checkcast (class "clojure.lang.IFn"))) 
                                      (234 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (239 (pop)) 
                                      (240 (goto 263)) ;;to TAG_3
                                      (243 (astore 6)) ;;at TAG_7
                                      (245 (getstatic (fieldCP "const__10" "clojure.core$load_data_reader_file" (class "clojure.lang.Var")))) 
                                      (248 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (251 (checkcast (class "clojure.lang.IFn"))) 
                                      (254 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (259 (pop)) 
                                      (260 (aload 6)) 
                                      (262 (athrow)) 
                                      (263 (aload 5)) ;;at TAG_3
                                      (265 (astore 7)) 
                                      (267 (aload_3)) ;;at TAG_9
                                      (268 (aconst_null)) 
                                      (269 (astore_3)) 
                                      (270 (checkcast (class "java.io.PushbackReader"))) 
                                      (273 (invokevirtual (methodCP "close" "java.io.PushbackReader" () void))) 
                                      (276 (aconst_null)) 
                                      (277 (pop)) 
                                      (278 (goto 297)) ;;to TAG_4
                                      (281 (astore 8)) ;;at TAG_10
                                      (283 (aload_3)) 
                                      (284 (aconst_null)) 
                                      (285 (astore_3)) 
                                      (286 (checkcast (class "java.io.PushbackReader"))) 
                                      (289 (invokevirtual (methodCP "close" "java.io.PushbackReader" () void))) 
                                      (292 (aconst_null)) 
                                      (293 (pop)) 
                                      (294 (aload 8)) 
                                      (296 (athrow)) 
                                      (297 (aload 7)) ;;at TAG_4
                                      (299 (areturn)) 
                                      (endofcode 300))
                                   (Exceptions 
                                     (handler 72 225  243 (class "java.lang.Throwable"))
                                     (handler 33 267  281 (class "java.lang.Throwable")))
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$load_data_reader_file-class-table*
  (make-static-class-decls 
   *clojure.core$load_data_reader_file*))

(defconst *package-name-map* 
  ("clojure.core$load_data_reader_file" . "clojure"))

