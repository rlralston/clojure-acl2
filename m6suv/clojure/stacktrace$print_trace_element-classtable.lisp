; stacktrace$print_trace_element-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:58 CDT 2014.
;

(defconst *clojure.stacktrace$print_trace_element*
 (make-class-def
      '(class "clojure.stacktrace$print_trace_element"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "re-matches")
                        (STRING  "^([A-Za-z0-9_.-]+)\\$(\\w+)__\\d+$")
                        (STRING  "str")
                        (STRING  "=")
                        (STRING  "apply")
                        (STRING  "printf")
                        (STRING  "rest")
                        (STRING  "getClassName")
                        (STRING  "getMethodName")
                        (STRING  "invoke")
                        (STRING  "%s/%s")
                        (STRING  "%s.%s")
                        (STRING  " (%s:%d)")
                        (STRING  "getFileName")
                        (STRING  "")
                        (STRING  "getLineNumber"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 87)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "re-matches"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "^([A-Za-z0-9_.-]+)\\$(\\w+)__\\d+$"
                                      (15 (invokestatic
					(methodCP "compile" "java.util.regex.Pattern" ((class "java.lang.String")) (class "java.util.regex.Pattern"))))
                                      (18 (putstatic (fieldCP "const__1" "clojure.stacktrace$print_trace_element" (class "java.lang.Object"))))
                                      (21 (ldc 0))        ;;STRING:: "clojure.core"
                                      (23 (ldc 3))        ;;STRING:: "str"
                                      (25 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (28 (checkcast (class "clojure.lang.Var")))
                                      (31 (putstatic (fieldCP "const__2" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var"))))
                                      (34 (ldc 0))        ;;STRING:: "clojure.core"
                                      (36 (ldc 4))        ;;STRING:: "="
                                      (38 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (41 (checkcast (class "clojure.lang.Var")))
                                      (44 (putstatic (fieldCP "const__3" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var"))))
                                      (47 (ldc 0))        ;;STRING:: "clojure.core"
                                      (49 (ldc 5))        ;;STRING:: "apply"
                                      (51 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (54 (checkcast (class "clojure.lang.Var")))
                                      (57 (putstatic (fieldCP "const__4" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var"))))
                                      (60 (ldc 0))        ;;STRING:: "clojure.core"
                                      (62 (ldc 6))        ;;STRING:: "printf"
                                      (64 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (67 (checkcast (class "clojure.lang.Var")))
                                      (70 (putstatic (fieldCP "const__5" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var"))))
                                      (73 (ldc 0))        ;;STRING:: "clojure.core"
                                      (75 (ldc 7))        ;;STRING:: "rest"
                                      (77 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (80 (checkcast (class "clojure.lang.Var")))
                                      (83 (putstatic (fieldCP "const__6" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var"))))
                                      (86 (return))
                                      (endofcode 87))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 6) (code_length . 222)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ldc 8)) ;;STRING:: "getClassName"
                                      (3 (invokestatic (methodCP "invokeNoArgInstanceMember" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String")) (class "java.lang.Object")))) 
                                      (6 (astore_2)) 
                                      (7 (aload_1)) 
                                      (8 (ldc 9)) ;;STRING:: "getMethodName"
                                      (10 (invokestatic (methodCP "invokeNoArgInstanceMember" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String")) (class "java.lang.Object")))) 
                                      (13 (astore_3)) 
                                      (14 (getstatic (fieldCP "const__0" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var")))) 
                                      (17 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (20 (checkcast (class "clojure.lang.IFn"))) 
                                      (23 (getstatic (fieldCP "const__1" "clojure.stacktrace$print_trace_element" (class "java.lang.Object")))) 
                                      (26 (getstatic (fieldCP "const__2" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var")))) 
                                      (29 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (32 (checkcast (class "clojure.lang.IFn"))) 
                                      (35 (aload_2)) 
                                      (36 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (41 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (46 (astore 4)) 
                                      (48 (aload 4)) 
                                      (50 (astore 5)) 
                                      (52 (aload 5)) 
                                      (54 (dup)) 
                                      (55 (ifnull 85)) ;;to TAG_0
                                      (58 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (61 (if_acmpeq 86))  ;;to TAG_1
                                      (64 (ldc 10)) ;;STRING:: "invoke"
                                      (66 (aload_3)) 
                                      (67 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (70 (ifeq 79)) ;;to TAG_2
                                      (73 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (76 (goto 82)) ;;to TAG_3
                                      (79 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_2
                                      (82 (goto 91)) ;;to TAG_4;;at TAG_3
                                      (85 (pop)) ;;at TAG_0
                                      (86 (aload 5)) ;;at TAG_1
                                      (88 (aconst_null)) 
                                      (89 (astore 5)) 
                                      (91 (dup)) ;;at TAG_4
                                      (92 (ifnull 146)) ;;to TAG_5
                                      (95 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (98 (if_acmpeq 147)) ;;to TAG_6
                                      (101 (getstatic (fieldCP "const__4" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var")))) 
                                      (104 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (107 (checkcast (class "clojure.lang.IFn"))) 
                                      (110 (getstatic (fieldCP "const__5" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var")))) 
                                      (113 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (116 (ldc 11)) ;;STRING:: "%s/%s"
                                      (118 (getstatic (fieldCP "const__6" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var")))) 
                                      (121 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (124 (checkcast (class "clojure.lang.IFn"))) 
                                      (127 (aload 4)) 
                                      (129 (aconst_null)) 
                                      (130 (astore 4)) 
                                      (132 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (137 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (142 (pop)) 
                                      (143 (goto 170)) ;;to TAG_7
                                      (146 (pop)) ;;at TAG_5
                                      (147 (getstatic (fieldCP "const__5" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var")))) ;;at TAG_6
                                      (150 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (153 (checkcast (class "clojure.lang.IFn"))) 
                                      (156 (ldc 12)) ;;STRING:: "%s.%s"
                                      (158 (aload_2)) 
                                      (159 (aconst_null)) 
                                      (160 (astore_2)) 
                                      (161 (aload_3)) 
                                      (162 (aconst_null)) 
                                      (163 (astore_3)) 
                                      (164 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (169 (pop)) 
                                      (170 (getstatic (fieldCP "const__5" "clojure.stacktrace$print_trace_element" (class "clojure.lang.Var")))) ;;at TAG_7
                                      (173 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (176 (checkcast (class "clojure.lang.IFn"))) 
                                      (179 (ldc 13)) ;;STRING:: " (%s:%d)"
                                      (181 (aload_1)) 
                                      (182 (ldc 14)) ;;STRING:: "getFileName"
                                      (184 (invokestatic (methodCP "invokeNoArgInstanceMember" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String")) (class "java.lang.Object")))) 
                                      (187 (astore_2)) 
                                      (188 (aload_2)) 
                                      (189 (dup)) 
                                      (190 (ifnull 205)) ;;to TAG_8
                                      (193 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (196 (if_acmpeq 206)) ;;to TAG_9
                                      (199 (aload_2)) 
                                      (200 (aconst_null)) 
                                      (201 (astore_2)) 
                                      (202 (goto 208)) ;;to TAG_10
                                      (205 (pop)) ;;at TAG_8
                                      (206 (ldc 15)) ;;at TAG_9;;STRING:: ""
                                      (208 (aload_1)) ;;at TAG_10
                                      (209 (aconst_null)) 
                                      (210 (astore_1)) 
                                      (211 (ldc 16)) ;;STRING:: "getLineNumber"
                                      (213 (invokestatic (methodCP "invokeNoArgInstanceMember" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String")) (class "java.lang.Object")))) 
                                      (216 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (221 (areturn)) 
                                      (endofcode 222))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *stacktrace$print_trace_element-class-table*
  (make-static-class-decls 
   *clojure.stacktrace$print_trace_element*))

(defconst *package-name-map* 
  ("clojure.stacktrace$print_trace_element" . "clojure"))

