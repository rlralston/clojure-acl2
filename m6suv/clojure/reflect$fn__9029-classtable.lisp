; reflect$fn__9029-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:57 CDT 2014.
;

(defconst *clojure.reflect$fn__9029*
 (make-class-def
      '(class "clojure.reflect$fn__9029"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.reflect")
                        (STRING  "typename"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "__cached_class__0" (class "java.lang.Class") (accessflags  *class*  *private* ) -1)
                        (field "__cached_proto_fn__0" (class "clojure.lang.AFunction") (accessflags  *class*  *private* ) -1)
                        (field "__cached_proto_impl__0" (class "clojure.lang.IFn") (accessflags  *class*  *private* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 14)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.reflect"
                                      (2 (ldc 1))         ;;STRING:: "typename"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.reflect$fn__9029" (class "clojure.lang.Var"))))
                                      (13 (return))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 57)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aconst_null)) 
                                      (2 (astore_1)) 
                                      (3 (checkcast (class "java.lang.Class"))) 
                                      (6 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (9 (dup)) 
                                      (10 (invokestatic (methodCP "classOf" "clojure.lang.Util" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "__cached_class__0" "clojure.reflect$fn__9029" (class "java.lang.Class")))) 
                                      (17 (if_acmpeq 36)) ;;to TAG_0
                                      (20 (dup)) 
                                      (21 (instanceof (class "clojure.reflect.TypeReference"))) 
                                      (24 (ifne 51)) ;;to TAG_1
                                      (27 (dup)) 
                                      (28 (invokestatic (methodCP "classOf" "clojure.lang.Util" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (31 (aload_0)) 
                                      (32 (swap)) 
                                      (33 (putfield (fieldCP "__cached_class__0" "clojure.reflect$fn__9029" (class "java.lang.Class")))) 
                                      (36 (getstatic (fieldCP "const__0" "clojure.reflect$fn__9029" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (39 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (42 (swap)) 
                                      (43 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (48 (goto 56))  ;;to TAG_2
                                      (51 (invokeinterface (methodCP "typename" "clojure.reflect.TypeReference" () (class "java.lang.Object")) 1)) ;;at TAG_1
                                      (56 (areturn)) ;;at TAG_2
                                      (endofcode 57))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *reflect$fn__9029-class-table*
  (make-static-class-decls 
   *clojure.reflect$fn__9029*))

(defconst *package-name-map* 
  ("clojure.reflect$fn__9029" . "clojure"))

