; test$are-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:58 CDT 2014.
;

(defconst *clojure.test$are*
 (make-class-def
      '(class "clojure.test$are"
            "clojure.lang.RestFn"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "empty?")
                        (STRING  "pos?")
                        (STRING  "count")
                        (STRING  "zero?")
                        (STRING  "mod")
                        (STRING  "seq")
                        (STRING  "concat")
                        (STRING  "list")
                        (STRING  "clojure.template")
                        (STRING  "do-template")
                        (STRING  "clojure.test")
                        (STRING  "is")
                        (STRING  "The number of args doesn\nt match are\ns argv."))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 131)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "empty?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.test$are" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "pos?"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.test$are" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "count"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.test$are" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "zero?"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.test$are" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "mod"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.test$are" (class "clojure.lang.Var"))))
                                      (65 (ldc 0))        ;;STRING:: "clojure.core"
                                      (67 (ldc 6))        ;;STRING:: "seq"
                                      (69 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (72 (checkcast (class "clojure.lang.Var")))
                                      (75 (putstatic (fieldCP "const__5" "clojure.test$are" (class "clojure.lang.Var"))))
                                      (78 (ldc 0))        ;;STRING:: "clojure.core"
                                      (80 (ldc 7))        ;;STRING:: "concat"
                                      (82 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (85 (checkcast (class "clojure.lang.Var")))
                                      (88 (putstatic (fieldCP "const__6" "clojure.test$are" (class "clojure.lang.Var"))))
                                      (91 (ldc 0))        ;;STRING:: "clojure.core"
                                      (93 (ldc 8))        ;;STRING:: "list"
                                      (95 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (98 (checkcast (class "clojure.lang.Var")))
                                      (101 (putstatic (fieldCP "const__7" "clojure.test$are" (class "clojure.lang.Var"))))
                                      (104 (ldc 9))       ;;STRING:: "clojure.template"
                                      (106 (ldc 10))      ;;STRING:: "do-template"
                                      (108 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (111 (checkcast (class "clojure.lang.AFn")))
                                      (114 (putstatic (fieldCP "const__8" "clojure.test$are" (class "clojure.lang.AFn"))))
                                      (117 (ldc 11))      ;;STRING:: "clojure.test"
                                      (119 (ldc 12))      ;;STRING:: "is"
                                      (121 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (124 (checkcast (class "clojure.lang.AFn")))
                                      (127 (putstatic (fieldCP "const__9" "clojure.test$are" (class "clojure.lang.AFn"))))
                                      (130 (return))
                                      (endofcode 131))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.RestFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doInvoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 11) (max_locals . 9) (code_length . 364)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.test$are" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_3)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (astore 6)) 
                                      (17 (aload 6)) 
                                      (19 (dup)) 
                                      (20 (ifnull 48)) ;;to TAG_0
                                      (23 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (26 (if_acmpeq 49))  ;;to TAG_1
                                      (29 (getstatic (fieldCP "const__0" "clojure.test$are" (class "clojure.lang.Var")))) 
                                      (32 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (35 (checkcast (class "clojure.lang.IFn"))) 
                                      (38 (aload 5)) 
                                      (40 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (45 (goto 54)) ;;to TAG_2
                                      (48 (pop)) ;;at TAG_0
                                      (49 (aload 6)) ;;at TAG_1
                                      (51 (aconst_null)) 
                                      (52 (astore 6)) 
                                      (54 (astore 6)) ;;at TAG_2
                                      (56 (aload 6)) 
                                      (58 (dup)) 
                                      (59 (ifnull 76)) ;;to TAG_3
                                      (62 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (65 (if_acmpeq 77)) ;;to TAG_4
                                      (68 (aload 6)) 
                                      (70 (aconst_null)) 
                                      (71 (astore 6)) 
                                      (73 (goto 188)) ;;to TAG_5
                                      (76 (pop)) ;;at TAG_3
                                      (77 (aload_3)) ;;at TAG_4
                                      (78 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (81 (i2l)) 
                                      (82 (invokestatic (methodCP "isPos" "clojure.lang.Numbers" (long) boolean))) 
                                      (85 (istore 7)) 
                                      (87 (iload 7)) 
                                      (89 (ifeq 174)) ;;to TAG_6
                                      (92 (aload 5)) 
                                      (94 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (97 (i2l)) 
                                      (98 (invokestatic (methodCP "isPos" "clojure.lang.Numbers" (long) boolean))) 
                                      (101 (istore 8)) 
                                      (103 (iload 8)) 
                                      (105 (ifeq 156)) ;;to TAG_7
                                      (108 (getstatic (fieldCP "const__4" "clojure.test$are" (class "clojure.lang.Var")))) 
                                      (111 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (114 (checkcast (class "clojure.lang.IFn"))) 
                                      (117 (aload 5)) 
                                      (119 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (122 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (125 (aload_3)) 
                                      (126 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (129 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (132 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (137 (invokestatic (methodCP "isZero" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (140 (ifeq 149)) ;;to TAG_8
                                      (143 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (146 (goto 152)) ;;to TAG_9
                                      (149 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_8
                                      (152 (goto 170)) ;;to TAG_10;;at TAG_9
                                      (155 (pop)) 
                                      (156 (iload 8)) ;;at TAG_7
                                      (158 (ifeq 167)) ;;to TAG_11
                                      (161 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (164 (goto 170)) ;;to TAG_10
                                      (167 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_11
                                      (170 (goto 188)) ;;to TAG_5;;at TAG_10
                                      (173 (pop)) 
                                      (174 (iload 7)) ;;at TAG_6
                                      (176 (ifeq 185)) ;;to TAG_12
                                      (179 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (182 (goto 188)) ;;to TAG_5
                                      (185 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_12
                                      (188 (dup)) ;;at TAG_5
                                      (189 (ifnull 346)) ;;to TAG_13
                                      (192 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (195 (if_acmpeq 347)) ;;to TAG_14
                                      (198 (getstatic (fieldCP "const__5" "clojure.test$are" (class "clojure.lang.Var")))) 
                                      (201 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (204 (checkcast (class "clojure.lang.IFn"))) 
                                      (207 (getstatic (fieldCP "const__6" "clojure.test$are" (class "clojure.lang.Var")))) 
                                      (210 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (213 (checkcast (class "clojure.lang.IFn"))) 
                                      (216 (getstatic (fieldCP "const__7" "clojure.test$are" (class "clojure.lang.Var")))) 
                                      (219 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (222 (checkcast (class "clojure.lang.IFn"))) 
                                      (225 (getstatic (fieldCP "const__8" "clojure.test$are" (class "clojure.lang.AFn")))) 
                                      (228 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (233 (getstatic (fieldCP "const__7" "clojure.test$are" (class "clojure.lang.Var")))) 
                                      (236 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (239 (checkcast (class "clojure.lang.IFn"))) 
                                      (242 (aload_3)) 
                                      (243 (aconst_null)) 
                                      (244 (astore_3)) 
                                      (245 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (250 (getstatic (fieldCP "const__7" "clojure.test$are" (class "clojure.lang.Var")))) 
                                      (253 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (256 (checkcast (class "clojure.lang.IFn"))) 
                                      (259 (getstatic (fieldCP "const__5" "clojure.test$are" (class "clojure.lang.Var")))) 
                                      (262 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (265 (checkcast (class "clojure.lang.IFn"))) 
                                      (268 (getstatic (fieldCP "const__6" "clojure.test$are" (class "clojure.lang.Var")))) 
                                      (271 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (274 (checkcast (class "clojure.lang.IFn"))) 
                                      (277 (getstatic (fieldCP "const__7" "clojure.test$are" (class "clojure.lang.Var")))) 
                                      (280 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (283 (checkcast (class "clojure.lang.IFn"))) 
                                      (286 (getstatic (fieldCP "const__9" "clojure.test$are" (class "clojure.lang.AFn")))) 
                                      (289 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (294 (getstatic (fieldCP "const__7" "clojure.test$are" (class "clojure.lang.Var")))) 
                                      (297 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (300 (checkcast (class "clojure.lang.IFn"))) 
                                      (303 (aload 4)) 
                                      (305 (aconst_null)) 
                                      (306 (astore 4)) 
                                      (308 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (313 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (318 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (323 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (328 (aload 5)) 
                                      (330 (aconst_null)) 
                                      (331 (astore 5)) 
                                      (333 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (338 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (343 (goto 363)) ;;to TAG_15
                                      (346 (pop)) ;;at TAG_13
                                      (347 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_14
                                      (350 (dup)) 
                                      (351 (ldc 13)) ;;STRING:: "The number of args doesn\nt match are\ns argv."
                                      (353 (checkcast (class "java.lang.String"))) 
                                      (356 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (359 (checkcast (class "java.lang.Throwable"))) 
                                      (362 (athrow)) 
                                      (363 (areturn)) ;;at TAG_15
                                      (endofcode 364))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getRequiredArity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_4))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *test$are-class-table*
  (make-static-class-decls 
   *clojure.test$are*))

(defconst *package-name-map* 
  ("clojure.test$are" . "clojure"))

