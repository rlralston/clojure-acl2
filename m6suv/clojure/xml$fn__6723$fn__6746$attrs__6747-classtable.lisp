; xml$fn__6723$fn__6746$attrs__6747-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:59 CDT 2014.
;

(defconst *clojure.xml$fn__6723$fn__6746$attrs__6747*
 (make-class-def
      '(class "clojure.xml$fn__6723$fn__6746$attrs__6747"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "neg?")
                        (STRING  "assoc")
                        (STRING  "symbol")
                        (STRING  "int")
                        (STRING  "dec"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "atts" (class "java.lang.Object") (accessflags  *class* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 66)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "neg?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.xml$fn__6723$fn__6746$attrs__6747" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "assoc"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.xml$fn__6723$fn__6746$attrs__6747" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "symbol"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.xml$fn__6723$fn__6746$attrs__6747" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "int"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.xml$fn__6723$fn__6746$attrs__6747" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "dec"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.xml$fn__6723$fn__6746$attrs__6747" (class "clojure.lang.Var"))))
                                      (65 (return))
                                      (endofcode 66))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "atts" "clojure.xml$fn__6723$fn__6746$attrs__6747" (class "java.lang.Object"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 98)
                                   (parsedcode
                                      (0 (aload_2)) ;;at TAG_2
                                      (1 (invokestatic (methodCP "isNeg" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 14)) ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (aconst_null)) 
                                      (9 (astore_1)) 
                                      (10 (goto 97)) ;;to TAG_1
                                      (13 (pop)) 
                                      (14 (getstatic (fieldCP "const__1" "clojure.xml$fn__6723$fn__6746$attrs__6747" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (17 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (20 (checkcast (class "clojure.lang.IFn"))) 
                                      (23 (aload_1)) 
                                      (24 (aconst_null)) 
                                      (25 (astore_1)) 
                                      (26 (getstatic (fieldCP "const__2" "clojure.xml$fn__6723$fn__6746$attrs__6747" (class "clojure.lang.Var")))) 
                                      (29 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (32 (checkcast (class "clojure.lang.IFn"))) 
                                      (35 (aload_0)) 
                                      (36 (getfield (fieldCP "atts" "clojure.xml$fn__6723$fn__6746$attrs__6747" (class "java.lang.Object")))) 
                                      (39 (checkcast (class "org.xml.sax.Attributes"))) 
                                      (42 (aload_2)) 
                                      (43 (checkcast (class "java.lang.Number"))) 
                                      (46 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (49 (invokeinterface (methodCP "getQName" "org.xml.sax.Attributes" (int) (class "java.lang.String")) 2)) 
                                      (54 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (59 (checkcast (class "clojure.lang.Symbol"))) 
                                      (62 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "clojure.lang.Symbol")) (class "clojure.lang.Keyword")))) 
                                      (65 (aload_0)) 
                                      (66 (getfield (fieldCP "atts" "clojure.xml$fn__6723$fn__6746$attrs__6747" (class "java.lang.Object")))) 
                                      (69 (checkcast (class "org.xml.sax.Attributes"))) 
                                      (72 (aload_2)) 
                                      (73 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (76 (invokeinterface (methodCP "getValue" "org.xml.sax.Attributes" (int) (class "java.lang.String")) 2)) 
                                      (81 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (86 (aload_2)) 
                                      (87 (aconst_null)) 
                                      (88 (astore_2)) 
                                      (89 (invokestatic (methodCP "dec" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (92 (astore_2)) 
                                      (93 (astore_1)) 
                                      (94 (goto 0))  ;;to TAG_2
                                      (97 (areturn)) ;;at TAG_1
                                      (endofcode 98))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *xml$fn__6723$fn__6746$attrs__6747-class-table*
  (make-static-class-decls 
   *clojure.xml$fn__6723$fn__6746$attrs__6747*))

(defconst *package-name-map* 
  ("clojure.xml$fn__6723$fn__6746$attrs__6747" . "clojure"))

