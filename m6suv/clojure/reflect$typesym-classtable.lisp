; reflect$typesym-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:57 CDT 2014.
;

(defconst *clojure.reflect$typesym*
 (make-class-def
      '(class "clojure.reflect$typesym"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "symbol")
                        (STRING  "clojure.string")
                        (STRING  "replace")
                        (STRING  "clojure.reflect")
                        (STRING  "typename")
                        (STRING  "[]")
                        (STRING  "<>"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "__cached_class__0" (class "java.lang.Class") (accessflags  *class*  *private* ) -1)
                        (field "__cached_proto_fn__0" (class "clojure.lang.AFunction") (accessflags  *class*  *private* ) -1)
                        (field "__cached_proto_impl__0" (class "clojure.lang.IFn") (accessflags  *class*  *private* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 40)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "symbol"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.reflect$typesym" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.string"
                                      (15 (ldc 3))        ;;STRING:: "replace"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.reflect$typesym" (class "clojure.lang.Var"))))
                                      (26 (ldc 4))        ;;STRING:: "clojure.reflect"
                                      (28 (ldc 5))        ;;STRING:: "typename"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.reflect$typesym" (class "clojure.lang.Var"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 83)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.reflect$typesym" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (getstatic (fieldCP "const__1" "clojure.reflect$typesym" (class "clojure.lang.Var")))) 
                                      (12 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (15 (checkcast (class "clojure.lang.IFn"))) 
                                      (18 (aload_1)) 
                                      (19 (aconst_null)) 
                                      (20 (astore_1)) 
                                      (21 (dup)) 
                                      (22 (invokestatic (methodCP "classOf" "clojure.lang.Util" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "__cached_class__0" "clojure.reflect$typesym" (class "java.lang.Class")))) 
                                      (29 (if_acmpeq 48)) ;;to TAG_0
                                      (32 (dup)) 
                                      (33 (instanceof (class "clojure.reflect.TypeReference"))) 
                                      (36 (ifne 63)) ;;to TAG_1
                                      (39 (dup)) 
                                      (40 (invokestatic (methodCP "classOf" "clojure.lang.Util" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (43 (aload_0)) 
                                      (44 (swap)) 
                                      (45 (putfield (fieldCP "__cached_class__0" "clojure.reflect$typesym" (class "java.lang.Class")))) 
                                      (48 (getstatic (fieldCP "const__2" "clojure.reflect$typesym" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (51 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (54 (swap)) 
                                      (55 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (60 (goto 68))  ;;to TAG_2
                                      (63 (invokeinterface (methodCP "typename" "clojure.reflect.TypeReference" () (class "java.lang.Object")) 1)) ;;at TAG_1
                                      (68 (ldc 6)) ;;at TAG_2;;STRING:: "[]"
                                      (70 (ldc 7)) ;;STRING:: "<>"
                                      (72 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (77 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (82 (areturn)) 
                                      (endofcode 83))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *reflect$typesym-class-table*
  (make-static-class-decls 
   *clojure.reflect$typesym*))

(defconst *package-name-map* 
  ("clojure.reflect$typesym" . "clojure"))

