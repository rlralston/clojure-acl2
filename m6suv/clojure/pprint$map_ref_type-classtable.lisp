; pprint$map_ref_type-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:56 CDT 2014.
;

(defconst *clojure.pprint$map_ref_type*
 (make-class-def
      '(class "clojure.pprint$map_ref_type"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "re-find")
                        (STRING  "^[^$]+\\$[^$]+")
                        (STRING  "clojure.pprint")
                        (STRING  "type-map"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 35)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "re-find"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$map_ref_type" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "^[^$]+\\$[^$]+"
                                      (15 (invokestatic
					(methodCP "compile" "java.util.regex.Pattern" ((class "java.lang.String")) (class "java.util.regex.Pattern"))))
                                      (18 (putstatic (fieldCP "const__1" "clojure.pprint$map_ref_type" (class "java.lang.Object"))))
                                      (21 (ldc 3))        ;;STRING:: "clojure.pprint"
                                      (23 (ldc 4))        ;;STRING:: "type-map"
                                      (25 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (28 (checkcast (class "clojure.lang.Var")))
                                      (31 (putstatic (fieldCP "const__2" "clojure.pprint$map_ref_type" (class "clojure.lang.Var"))))
                                      (34 (return))
                                      (endofcode 35))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 79)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$map_ref_type" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (getstatic (fieldCP "const__1" "clojure.pprint$map_ref_type" (class "java.lang.Object")))) 
                                      (12 (aload_1)) 
                                      (13 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (18 (astore_2)) 
                                      (19 (aload_2)) 
                                      (20 (dup)) 
                                      (21 (ifnull 54)) ;;to TAG_0
                                      (24 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (27 (if_acmpeq 55)) ;;to TAG_1
                                      (30 (aload_2)) 
                                      (31 (aconst_null)) 
                                      (32 (astore_2)) 
                                      (33 (astore_3)) 
                                      (34 (getstatic (fieldCP "const__2" "clojure.pprint$map_ref_type" (class "clojure.lang.Var")))) 
                                      (37 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (40 (checkcast (class "clojure.lang.IFn"))) 
                                      (43 (aload_3)) 
                                      (44 (aconst_null)) 
                                      (45 (astore_3)) 
                                      (46 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (51 (goto 56))  ;;to TAG_2
                                      (54 (pop)) ;;at TAG_0
                                      (55 (aconst_null)) ;;at TAG_1
                                      (56 (astore_2)) ;;at TAG_2
                                      (57 (aload_2)) 
                                      (58 (dup)) 
                                      (59 (ifnull 74)) ;;to TAG_3
                                      (62 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (65 (if_acmpeq 75)) ;;to TAG_4
                                      (68 (aload_2)) 
                                      (69 (aconst_null)) 
                                      (70 (astore_2)) 
                                      (71 (goto 78)) ;;to TAG_5
                                      (74 (pop)) ;;at TAG_3
                                      (75 (aload_1)) ;;at TAG_4
                                      (76 (aconst_null)) 
                                      (77 (astore_1)) 
                                      (78 (areturn)) ;;at TAG_5
                                      (endofcode 79))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$map_ref_type-class-table*
  (make-static-class-decls 
   *clojure.pprint$map_ref_type*))

(defconst *package-name-map* 
  ("clojure.pprint$map_ref_type" . "clojure"))

