; test$fn__7073-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:59 CDT 2014.
;

(defconst *clojure.test$fn__7073*
 (make-class-def
      '(class "clojure.test$fn__7073"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "push-thread-bindings")
                        (STRING  "hash-map")
                        (STRING  "*out*")
                        (STRING  "clojure.test")
                        (STRING  "*test-out*")
                        (STRING  "println")
                        (STRING  "ns-name")
                        (STRING  "ns")
                        (STRING  "pop-thread-bindings")
                        (STRING  "\nTesting"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "__site__0__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__0__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 0) (code_length . 124)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "push-thread-bindings"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.test$fn__7073" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "hash-map"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.test$fn__7073" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "*out*"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.test$fn__7073" (class "clojure.lang.Var"))))
                                      (39 (ldc 4))        ;;STRING:: "clojure.test"
                                      (41 (ldc 5))        ;;STRING:: "*test-out*"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.test$fn__7073" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 6))        ;;STRING:: "println"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.test$fn__7073" (class "clojure.lang.Var"))))
                                      (65 (ldc 0))        ;;STRING:: "clojure.core"
                                      (67 (ldc 7))        ;;STRING:: "ns-name"
                                      (69 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (72 (checkcast (class "clojure.lang.Var")))
                                      (75 (putstatic (fieldCP "const__5" "clojure.test$fn__7073" (class "clojure.lang.Var"))))
                                      (78 (aconst_null))
                                      (79 (ldc 8))        ;;STRING:: "ns"
                                      (81 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (84 (checkcast (class "clojure.lang.Keyword")))
                                      (87 (putstatic (fieldCP "const__6" "clojure.test$fn__7073" (class "clojure.lang.Keyword"))))
                                      (90 (ldc 0))        ;;STRING:: "clojure.core"
                                      (92 (ldc 9))        ;;STRING:: "pop-thread-bindings"
                                      (94 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (97 (checkcast (class "clojure.lang.Var")))
                                      (100 (putstatic (fieldCP "const__7" "clojure.test$fn__7073" (class "clojure.lang.Var"))))
                                      (103 (new (class "clojure.lang.KeywordLookupSite")))
                                      (106 (dup))
                                      (107 (aconst_null))
                                      (108 (ldc 8))       ;;STRING:: "ns"
                                      (110 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (113 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (116 (dup))
                                      (117 (putstatic (fieldCP "__site__0__" "clojure.test$fn__7073" (class "clojure.lang.KeywordLookupSite"))))
                                      (120 (putstatic (fieldCP "__thunk__0__" "clojure.test$fn__7073" (class "clojure.lang.ILookupThunk"))))
                                      (123 (return))
                                      (endofcode 124))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 4) (code_length . 150)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.test$fn__7073" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (getstatic (fieldCP "const__1" "clojure.test$fn__7073" (class "clojure.lang.Var")))) 
                                      (12 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (15 (checkcast (class "clojure.lang.IFn"))) 
                                      (18 (getstatic (fieldCP "const__2" "clojure.test$fn__7073" (class "clojure.lang.Var")))) 
                                      (21 (getstatic (fieldCP "const__3" "clojure.test$fn__7073" (class "clojure.lang.Var")))) 
                                      (24 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (27 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (32 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (37 (pop)) 
                                      (38 (getstatic (fieldCP "const__4" "clojure.test$fn__7073" (class "clojure.lang.Var")))) ;;at TAG_3
                                      (41 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (44 (checkcast (class "clojure.lang.IFn"))) 
                                      (47 (ldc 10)) ;;STRING:: "\nTesting"
                                      (49 (getstatic (fieldCP "const__5" "clojure.test$fn__7073" (class "clojure.lang.Var")))) 
                                      (52 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (55 (checkcast (class "clojure.lang.IFn"))) 
                                      (58 (getstatic (fieldCP "__thunk__0__" "clojure.test$fn__7073" (class "clojure.lang.ILookupThunk")))) 
                                      (61 (dup)) 
                                      (62 (aload_1)) 
                                      (63 (aconst_null)) 
                                      (64 (astore_1)) 
                                      (65 (dup_x2)) 
                                      (66 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (71 (dup_x2)) 
                                      (72 (if_acmpeq 79)) ;;to TAG_0
                                      (75 (pop)) 
                                      (76 (goto 101)) ;;to TAG_1
                                      (79 (swap)) ;;at TAG_0
                                      (80 (pop)) 
                                      (81 (dup)) 
                                      (82 (getstatic (fieldCP "__site__0__" "clojure.test$fn__7073" (class "clojure.lang.KeywordLookupSite")))) 
                                      (85 (swap)) 
                                      (86 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (91 (dup)) 
                                      (92 (putstatic (fieldCP "__thunk__0__" "clojure.test$fn__7073" (class "clojure.lang.ILookupThunk")))) 
                                      (95 (swap)) 
                                      (96 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (101 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_1
                                      (106 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (111 (astore_2)) 
                                      (112 (getstatic (fieldCP "const__7" "clojure.test$fn__7073" (class "clojure.lang.Var")))) ;;at TAG_4
                                      (115 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (118 (checkcast (class "clojure.lang.IFn"))) 
                                      (121 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (126 (pop)) 
                                      (127 (goto 148))  ;;to TAG_2
                                      (130 (astore_3)) ;;at TAG_5
                                      (131 (getstatic (fieldCP "const__7" "clojure.test$fn__7073" (class "clojure.lang.Var")))) 
                                      (134 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (137 (checkcast (class "clojure.lang.IFn"))) 
                                      (140 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (145 (pop)) 
                                      (146 (aload_3)) 
                                      (147 (athrow)) 
                                      (148 (aload_2)) ;;at TAG_2
                                      (149 (areturn)) 
                                      (endofcode 150))
                                   (Exceptions 
                                     (handler 38 112  130 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "swapThunk"
                              (parameters int (class "clojure.lang.ILookupThunk"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 28)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (tableswitch (tableswitchinfo 27 (0 . 0) (20))))  ;;to TAG_0;;to TAG_1
                                      (20 (aload_2)) ;;at TAG_1
                                      (21 (putstatic (fieldCP "__thunk__0__" "clojure.test$fn__7073" (class "clojure.lang.ILookupThunk")))) 
                                      (24 (goto 27))  ;;to TAG_0
                                      (27 (return)) ;;at TAG_0
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *test$fn__7073-class-table*
  (make-static-class-decls 
   *clojure.test$fn__7073*))

(defconst *package-name-map* 
  ("clojure.test$fn__7073" . "clojure"))

