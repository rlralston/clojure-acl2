; RT$4-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:53 CDT 2014.
;

(defconst *clojure.lang.RT$4*
 (make-class-def
      '(class "clojure.lang.RT$4"
            "java.lang.Object"
            (constant_pool)
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "run"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 50)
                                   (parsedcode
                                      (0 (iconst_2)) ;;at TAG_1
                                      (1 (anewarray (class "java.lang.Object"))) 
                                      (4 (dup)) 
                                      (5 (iconst_0)) 
                                      (6 (getstatic (fieldCP "USE_CONTEXT_CLASSLOADER" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (9 (aastore)) 
                                      (10 (dup)) 
                                      (11 (iconst_1)) 
                                      (12 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (15 (aastore)) 
                                      (16 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (19 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (22 (new (class "clojure.lang.DynamicClassLoader"))) 
                                      (25 (dup)) 
                                      (26 (invokestatic (methodCP "baseLoader" "clojure.lang.RT" () (class "java.lang.ClassLoader")))) 
                                      (29 (invokespecial (methodCP "<init>" "clojure.lang.DynamicClassLoader" ((class "java.lang.ClassLoader")) void))) 
                                      (32 (astore_1)) 
                                      (33 (jsr 44)) ;;to TAG_0
                                      (36 (aload_1)) ;;at TAG_2
                                      (37 (areturn)) 
                                      (38 (astore_2)) ;;at TAG_3
                                      (39 (jsr 44)) ;;to TAG_0
                                      (42 (aload_2)) ;;at TAG_4
                                      (43 (athrow)) 
                                      (44 (astore_3)) ;;at TAG_0
                                      (45 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (48 (ret 3)) 
                                      (endofcode 50))
                                   (Exceptions 
                                     (handler 0 36  38 (class "java.lang.Throwable"))
                                     (handler 38 42  38 (class "java.lang.Throwable")))
                                   (StackMap ))))
            (interfaces "java.security.PrivilegedAction")
            (accessflags  *class*  *final*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "EnclosingMethod")
              (attribute "InnerClasses")))))


(defconst *RT$4-class-table*
  (make-static-class-decls 
   *clojure.lang.RT$4*))

(defconst *package-name-map* 
  ("clojure.lang.RT$4" . "clojure.lang"))

