; Compiler$AssignExpr$Parser-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$AssignExpr$Parser*
 (make-class-def
      '(class "clojure.lang.Compiler$AssignExpr$Parser"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Malformed assignment, expecting (set! target val)")
                        (STRING  "Invalid assignment target"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 76)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (checkcast (class "clojure.lang.ISeq"))) 
                                      (4 (astore_3)) 
                                      (5 (aload_3)) 
                                      (6 (invokestatic (methodCP "length" "clojure.lang.RT" ((class "clojure.lang.ISeq")) int))) 
                                      (9 (iconst_3)) 
                                      (10 (if_icmpeq 23))  ;;to TAG_0
                                      (13 (new (class "java.lang.IllegalArgumentException"))) 
                                      (16 (dup)) 
                                      (17 (ldc 0)) ;;STRING:: "Malformed assignment, expecting (set! target val)"
                                      (19 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (22 (athrow)) 
                                      (23 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_0
                                      (26 (aload_3)) 
                                      (27 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (30 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (33 (astore 4)) 
                                      (35 (aload 4)) 
                                      (37 (instanceof (class "clojure.lang.Compiler$AssignableExpr"))) 
                                      (40 (ifne 53)) ;;to TAG_1
                                      (43 (new (class "java.lang.IllegalArgumentException"))) 
                                      (46 (dup)) 
                                      (47 (ldc 1)) ;;STRING:: "Invalid assignment target"
                                      (49 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (52 (athrow)) 
                                      (53 (new (class "clojure.lang.Compiler$AssignExpr"))) ;;at TAG_1
                                      (56 (dup)) 
                                      (57 (aload 4)) 
                                      (59 (checkcast (class "clojure.lang.Compiler$AssignableExpr"))) 
                                      (62 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (65 (aload_3)) 
                                      (66 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (69 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (72 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$AssignExpr" ((class "clojure.lang.Compiler$AssignableExpr") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (75 (areturn)) 
                                      (endofcode 76))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$IParser")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$AssignExpr$Parser-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$AssignExpr$Parser*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$AssignExpr$Parser" . "clojure.lang"))

