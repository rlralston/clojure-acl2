; Compiler$BodyExpr$Parser-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$BodyExpr$Parser*
 (make-class-def
      '(class "clojure.lang.Compiler$BodyExpr$Parser"
            "java.lang.Object"
            (constant_pool)
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 6) (code_length . 129)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (checkcast (class "clojure.lang.ISeq"))) 
                                      (4 (astore_3)) 
                                      (5 (aload_3)) 
                                      (6 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (9 (getstatic (fieldCP "DO" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (12 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (15 (ifeq 23)) ;;to TAG_0
                                      (18 (aload_3)) 
                                      (19 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (22 (astore_3)) 
                                      (23 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) ;;at TAG_0
                                      (26 (astore 4)) 
                                      (28 (aload_3)) ;;at TAG_5
                                      (29 (ifnull 101)) ;;to TAG_1
                                      (32 (aload_1)) 
                                      (33 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (36 (if_acmpeq 70))  ;;to TAG_2
                                      (39 (aload_1)) 
                                      (40 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (43 (if_acmpeq 55)) ;;to TAG_3
                                      (46 (aload_3)) 
                                      (47 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (52 (ifnull 70))  ;;to TAG_2
                                      (55 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_3
                                      (58 (aload_3)) 
                                      (59 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (64 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (67 (goto 80)) ;;to TAG_4
                                      (70 (aload_1)) ;;at TAG_2
                                      (71 (aload_3)) 
                                      (72 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (77 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (80 (astore 5)) ;;at TAG_4
                                      (82 (aload 4)) 
                                      (84 (aload 5)) 
                                      (86 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (89 (astore 4)) 
                                      (91 (aload_3)) 
                                      (92 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (97 (astore_3)) 
                                      (98 (goto 28)) ;;to TAG_5
                                      (101 (aload 4)) ;;at TAG_1
                                      (103 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (106 (ifne 119)) ;;to TAG_6
                                      (109 (aload 4)) 
                                      (111 (getstatic (fieldCP "NIL_EXPR" "clojure.lang.Compiler" (class "clojure.lang.Compiler$NilExpr")))) 
                                      (114 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (117 (astore 4)) 
                                      (119 (new (class "clojure.lang.Compiler$BodyExpr"))) ;;at TAG_6
                                      (122 (dup)) 
                                      (123 (aload 4)) 
                                      (125 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$BodyExpr" ((class "clojure.lang.PersistentVector")) void))) 
                                      (128 (areturn)) 
                                      (endofcode 129))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$IParser")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$BodyExpr$Parser-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$BodyExpr$Parser*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$BodyExpr$Parser" . "clojure.lang"))

