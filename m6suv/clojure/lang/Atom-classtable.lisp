; Atom-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Atom*
 (make-class-def
      '(class "clojure.lang.Atom"
            "clojure.lang.ARef"
            (constant_pool)
            (fields
                        (field "state" (class "java.util.concurrent.atomic.AtomicReference") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 17)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.ARef" () void)))
                                      (4 (aload_0))
                                      (5 (new (class "java.util.concurrent.atomic.AtomicReference")))
                                      (8 (dup))
                                      (9 (aload_1))
                                      (10 (invokespecial
					(methodCP "<init>" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object")) void)))
                                      (13 (putfield (fieldCP "state" "clojure.lang.Atom" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (16 (return))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object") (class "clojure.lang.IPersistentMap"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_2))
                                      (2 (invokespecial
					(methodCP "<init>" "clojure.lang.ARef" ((class "clojure.lang.IPersistentMap")) void)))
                                      (5 (aload_0))
                                      (6 (new (class "java.util.concurrent.atomic.AtomicReference")))
                                      (9 (dup))
                                      (10 (aload_1))
                                      (11 (invokespecial
					(methodCP "<init>" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object")) void)))
                                      (14 (putfield (fieldCP "state" "clojure.lang.Atom" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (17 (return))
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "deref"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "state" "clojure.lang.Atom" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (4 (invokevirtual
					(methodCP "get" "java.util.concurrent.atomic.AtomicReference" () (class "java.lang.Object"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "swap"
                              (parameters (class "clojure.lang.IFn"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 41)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_1
                                      (1 (invokevirtual (methodCP "deref" "clojure.lang.Atom" () (class "java.lang.Object")))) 
                                      (4 (astore_2)) 
                                      (5 (aload_1)) 
                                      (6 (aload_2)) 
                                      (7 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (12 (astore_3)) 
                                      (13 (aload_0)) 
                                      (14 (aload_3)) 
                                      (15 (invokevirtual (methodCP "validate" "clojure.lang.Atom" ((class "java.lang.Object")) void))) 
                                      (18 (aload_0)) 
                                      (19 (getfield (fieldCP "state" "clojure.lang.Atom" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (22 (aload_2)) 
                                      (23 (aload_3)) 
                                      (24 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (27 (ifeq 38))  ;;to TAG_0
                                      (30 (aload_0)) 
                                      (31 (aload_2)) 
                                      (32 (aload_3)) 
                                      (33 (invokevirtual (methodCP "notifyWatches" "clojure.lang.Atom" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (36 (aload_3)) 
                                      (37 (areturn)) 
                                      (38 (goto 0)) ;;to TAG_1;;at TAG_0
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap )))
                        (method "swap"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 47)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_1
                                      (1 (invokevirtual (methodCP "deref" "clojure.lang.Atom" () (class "java.lang.Object")))) 
                                      (4 (astore_3)) 
                                      (5 (aload_1)) 
                                      (6 (aload_3)) 
                                      (7 (aload_2)) 
                                      (8 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (13 (astore 4)) 
                                      (15 (aload_0)) 
                                      (16 (aload 4)) 
                                      (18 (invokevirtual (methodCP "validate" "clojure.lang.Atom" ((class "java.lang.Object")) void))) 
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "state" "clojure.lang.Atom" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (25 (aload_3)) 
                                      (26 (aload 4)) 
                                      (28 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (31 (ifeq 44))  ;;to TAG_0
                                      (34 (aload_0)) 
                                      (35 (aload_3)) 
                                      (36 (aload 4)) 
                                      (38 (invokevirtual (methodCP "notifyWatches" "clojure.lang.Atom" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (41 (aload 4)) 
                                      (43 (areturn)) 
                                      (44 (goto 0)) ;;to TAG_1;;at TAG_0
                                      (endofcode 47))
                                   (Exceptions )
                                   (StackMap )))
                        (method "swap"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 52)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_1
                                      (1 (invokevirtual (methodCP "deref" "clojure.lang.Atom" () (class "java.lang.Object")))) 
                                      (4 (astore 4)) 
                                      (6 (aload_1)) 
                                      (7 (aload 4)) 
                                      (9 (aload_2)) 
                                      (10 (aload_3)) 
                                      (11 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (16 (astore 5)) 
                                      (18 (aload_0)) 
                                      (19 (aload 5)) 
                                      (21 (invokevirtual (methodCP "validate" "clojure.lang.Atom" ((class "java.lang.Object")) void))) 
                                      (24 (aload_0)) 
                                      (25 (getfield (fieldCP "state" "clojure.lang.Atom" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (28 (aload 4)) 
                                      (30 (aload 5)) 
                                      (32 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (35 (ifeq 49))  ;;to TAG_0
                                      (38 (aload_0)) 
                                      (39 (aload 4)) 
                                      (41 (aload 5)) 
                                      (43 (invokevirtual (methodCP "notifyWatches" "clojure.lang.Atom" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (46 (aload 5)) 
                                      (48 (areturn)) 
                                      (49 (goto 0)) ;;to TAG_1;;at TAG_0
                                      (endofcode 52))
                                   (Exceptions )
                                   (StackMap )))
                        (method "swap"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.ISeq"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 7) (code_length . 57)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_1
                                      (1 (invokevirtual (methodCP "deref" "clojure.lang.Atom" () (class "java.lang.Object")))) 
                                      (4 (astore 5)) 
                                      (6 (aload_1)) 
                                      (7 (aload 5)) 
                                      (9 (aload_2)) 
                                      (10 (aload_3)) 
                                      (11 (aload 4)) 
                                      (13 (invokestatic (methodCP "listStar" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.ISeq")) (class "clojure.lang.ISeq")))) 
                                      (16 (invokeinterface (methodCP "applyTo" "clojure.lang.IFn" ((class "clojure.lang.ISeq")) (class "java.lang.Object")) 2)) 
                                      (21 (astore 6)) 
                                      (23 (aload_0)) 
                                      (24 (aload 6)) 
                                      (26 (invokevirtual (methodCP "validate" "clojure.lang.Atom" ((class "java.lang.Object")) void))) 
                                      (29 (aload_0)) 
                                      (30 (getfield (fieldCP "state" "clojure.lang.Atom" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (33 (aload 5)) 
                                      (35 (aload 6)) 
                                      (37 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (40 (ifeq 54))  ;;to TAG_0
                                      (43 (aload_0)) 
                                      (44 (aload 5)) 
                                      (46 (aload 6)) 
                                      (48 (invokevirtual (methodCP "notifyWatches" "clojure.lang.Atom" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (51 (aload 6)) 
                                      (53 (areturn)) 
                                      (54 (goto 0)) ;;to TAG_1;;at TAG_0
                                      (endofcode 57))
                                   (Exceptions )
                                   (StackMap )))
                        (method "compareAndSet"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_2)) 
                                      (2 (invokevirtual (methodCP "validate" "clojure.lang.Atom" ((class "java.lang.Object")) void))) 
                                      (5 (aload_0)) 
                                      (6 (getfield (fieldCP "state" "clojure.lang.Atom" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (9 (aload_1)) 
                                      (10 (aload_2)) 
                                      (11 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (14 (istore_3)) 
                                      (15 (iload_3)) 
                                      (16 (ifeq 25))  ;;to TAG_0
                                      (19 (aload_0)) 
                                      (20 (aload_1)) 
                                      (21 (aload_2)) 
                                      (22 (invokevirtual (methodCP "notifyWatches" "clojure.lang.Atom" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (25 (iload_3)) ;;at TAG_0
                                      (26 (ireturn)) 
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "reset"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 29)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "state" "clojure.lang.Atom" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (4 (invokevirtual
					(methodCP "get" "java.util.concurrent.atomic.AtomicReference" () (class "java.lang.Object"))))
                                      (7 (astore_2))
                                      (8 (aload_0))
                                      (9 (aload_1))
                                      (10 (invokevirtual
					(methodCP "validate" "clojure.lang.Atom" ((class "java.lang.Object")) void)))
                                      (13 (aload_0))
                                      (14 (getfield (fieldCP "state" "clojure.lang.Atom" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (17 (aload_1))
                                      (18 (invokevirtual
					(methodCP "set" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object")) void)))
                                      (21 (aload_0))
                                      (22 (aload_2))
                                      (23 (aload_1))
                                      (24 (invokevirtual
					(methodCP "notifyWatches" "clojure.lang.Atom" ((class "java.lang.Object") (class "java.lang.Object")) void)))
                                      (27 (aload_1))
                                      (28 (areturn))
                                      (endofcode 29))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))


(defconst *Atom-class-table*
  (make-static-class-decls 
   *clojure.lang.Atom*))

(defconst *package-name-map* 
  ("clojure.lang.Atom" . "clojure.lang"))

