; Ref$TVal-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.Ref$TVal*
 (make-class-def
      '(class "clojure.lang.Ref$TVal"
            "java.lang.Object"
            (constant_pool)
            (fields
                        (field "val" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "point" long (accessflags  *class* ) -1)
                        (field "msecs" long (accessflags  *class* ) -1)
                        (field "prior" (class "clojure.lang.Ref$TVal") (accessflags  *class* ) -1)
                        (field "next" (class "clojure.lang.Ref$TVal") (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.Object") long long (class "clojure.lang.Ref$TVal"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 3) (max_locals . 7) (code_length . 52)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "val" "clojure.lang.Ref$TVal" (class "java.lang.Object"))))
                                      (9 (aload_0))
                                      (10 (lload_2))
                                      (11 (putfield (fieldCP "point" "clojure.lang.Ref$TVal" long)))
                                      (14 (aload_0))
                                      (15 (lload 4))
                                      (17 (putfield (fieldCP "msecs" "clojure.lang.Ref$TVal" long)))
                                      (20 (aload_0))
                                      (21 (aload 6))
                                      (23 (putfield (fieldCP "prior" "clojure.lang.Ref$TVal" (class "clojure.lang.Ref$TVal"))))
                                      (26 (aload_0))
                                      (27 (aload 6))
                                      (29 (getfield (fieldCP "next" "clojure.lang.Ref$TVal" (class "clojure.lang.Ref$TVal"))))
                                      (32 (putfield (fieldCP "next" "clojure.lang.Ref$TVal" (class "clojure.lang.Ref$TVal"))))
                                      (35 (aload_0))
                                      (36 (getfield (fieldCP "prior" "clojure.lang.Ref$TVal" (class "clojure.lang.Ref$TVal"))))
                                      (39 (aload_0))
                                      (40 (putfield (fieldCP "next" "clojure.lang.Ref$TVal" (class "clojure.lang.Ref$TVal"))))
                                      (43 (aload_0))
                                      (44 (getfield (fieldCP "next" "clojure.lang.Ref$TVal" (class "clojure.lang.Ref$TVal"))))
                                      (47 (aload_0))
                                      (48 (putfield (fieldCP "prior" "clojure.lang.Ref$TVal" (class "clojure.lang.Ref$TVal"))))
                                      (51 (return))
                                      (endofcode 52))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object") long long)
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 3) (max_locals . 6) (code_length . 31)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "val" "clojure.lang.Ref$TVal" (class "java.lang.Object"))))
                                      (9 (aload_0))
                                      (10 (lload_2))
                                      (11 (putfield (fieldCP "point" "clojure.lang.Ref$TVal" long)))
                                      (14 (aload_0))
                                      (15 (lload 4))
                                      (17 (putfield (fieldCP "msecs" "clojure.lang.Ref$TVal" long)))
                                      (20 (aload_0))
                                      (21 (aload_0))
                                      (22 (putfield (fieldCP "next" "clojure.lang.Ref$TVal" (class "clojure.lang.Ref$TVal"))))
                                      (25 (aload_0))
                                      (26 (aload_0))
                                      (27 (putfield (fieldCP "prior" "clojure.lang.Ref$TVal" (class "clojure.lang.Ref$TVal"))))
                                      (30 (return))
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Ref$TVal-class-table*
  (make-static-class-decls 
   *clojure.lang.Ref$TVal*))

(defconst *package-name-map* 
  ("clojure.lang.Ref$TVal" . "clojure.lang"))

