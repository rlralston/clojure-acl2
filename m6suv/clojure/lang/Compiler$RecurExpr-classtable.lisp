; Compiler$RecurExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.Compiler$RecurExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$RecurExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Can\nt eval recur")
                        (STRING  "int intCast(long)")
                        (STRING  " recur arg for primitive local: ")
                        (STRING  " is not matching primitive, had: ")
                        (STRING  "Object")
                        (STRING  ", needed: "))
            (fields
                        (field "args" (class "clojure.lang.IPersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "loopLocals" (class "clojure.lang.IPersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "line" int (accessflags  *class*  *final* ) -1)
                        (field "column" int (accessflags  *class*  *final* ) -1)
                        (field "source" (class "java.lang.String") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentVector") (class "clojure.lang.IPersistentVector") int int (class "java.lang.String"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 6) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "loopLocals" "clojure.lang.Compiler$RecurExpr" (class "clojure.lang.IPersistentVector"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "args" "clojure.lang.Compiler$RecurExpr" (class "clojure.lang.IPersistentVector"))))
                                      (14 (aload_0))
                                      (15 (iload_3))
                                      (16 (putfield (fieldCP "line" "clojure.lang.Compiler$RecurExpr" int)))
                                      (19 (aload_0))
                                      (20 (iload 4))
                                      (22 (putfield (fieldCP "column" "clojure.lang.Compiler$RecurExpr" int)))
                                      (25 (aload_0))
                                      (26 (aload 5))
                                      (28 (putfield (fieldCP "source" "clojure.lang.Compiler$RecurExpr" (class "java.lang.String"))))
                                      (31 (return))
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (ldc 0))         ;;STRING:: "Can\nt eval recur"
                                      (6 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void)))
                                      (9 (athrow))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 10) (code_length . 529)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "LOOP_LABEL" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.asm.Label"))) 
                                      (9 (astore 4)) 
                                      (11 (aload 4)) 
                                      (13 (ifnonnull 24)) ;;to TAG_0
                                      (16 (new (class "java.lang.IllegalStateException"))) 
                                      (19 (dup)) 
                                      (20 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" () void))) 
                                      (23 (athrow)) 
                                      (24 (iconst_0)) ;;at TAG_0
                                      (25 (istore 5)) 
                                      (27 (iload 5)) ;;at TAG_13
                                      (29 (aload_0)) 
                                      (30 (getfield (fieldCP "loopLocals" "clojure.lang.Compiler$RecurExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (33 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (38 (if_icmpge 398)) ;;to TAG_1
                                      (41 (aload_0)) 
                                      (42 (getfield (fieldCP "loopLocals" "clojure.lang.Compiler$RecurExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (45 (iload 5)) 
                                      (47 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (52 (checkcast (class "clojure.lang.Compiler$LocalBinding"))) 
                                      (55 (astore 6)) 
                                      (57 (aload_0)) 
                                      (58 (getfield (fieldCP "args" "clojure.lang.Compiler$RecurExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (61 (iload 5)) 
                                      (63 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (68 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (71 (astore 7)) 
                                      (73 (aload 6)) 
                                      (75 (invokevirtual (methodCP "getPrimitiveType" "clojure.lang.Compiler$LocalBinding" () (class "java.lang.Class")))) 
                                      (78 (ifnull 380)) ;;to TAG_2
                                      (81 (aload 6)) 
                                      (83 (invokevirtual (methodCP "getPrimitiveType" "clojure.lang.Compiler$LocalBinding" () (class "java.lang.Class")))) 
                                      (86 (astore 8)) 
                                      (88 (aload 7)) ;;at TAG_21
                                      (90 (invokestatic (methodCP "maybePrimitiveType" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$Expr")) (class "java.lang.Class")))) 
                                      (93 (astore 9)) 
                                      (95 (aload 9)) 
                                      (97 (aload 8)) 
                                      (99 (if_acmpne 120)) ;;to TAG_3
                                      (102 (aload 7)) 
                                      (104 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (107 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (110 (aload_2)) 
                                      (111 (aload_3)) 
                                      (112 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (117 (goto 366)) ;;to TAG_4
                                      (120 (aload 8)) ;;at TAG_3
                                      (122 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (125 (if_acmpne 161)) ;;to TAG_5
                                      (128 (aload 9)) 
                                      (130 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (133 (if_acmpne 161)) ;;to TAG_5
                                      (136 (aload 7)) 
                                      (138 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (141 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (144 (aload_2)) 
                                      (145 (aload_3)) 
                                      (146 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (151 (aload_3)) 
                                      (152 (sipush 133)) 
                                      (155 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (158 (goto 366)) ;;to TAG_4
                                      (161 (aload 8)) ;;at TAG_5
                                      (163 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (166 (if_acmpne 202)) ;;to TAG_6
                                      (169 (aload 9)) 
                                      (171 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (174 (if_acmpne 202)) ;;to TAG_6
                                      (177 (aload 7)) 
                                      (179 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (182 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (185 (aload_2)) 
                                      (186 (aload_3)) 
                                      (187 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (192 (aload_3)) 
                                      (193 (sipush 141)) 
                                      (196 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (199 (goto 366)) ;;to TAG_4
                                      (202 (aload 8)) ;;at TAG_6
                                      (204 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (207 (if_acmpne 248)) ;;to TAG_7
                                      (210 (aload 9)) 
                                      (212 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (215 (if_acmpne 248)) ;;to TAG_7
                                      (218 (aload 7)) 
                                      (220 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (223 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (226 (aload_2)) 
                                      (227 (aload_3)) 
                                      (228 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (233 (aload_3)) 
                                      (234 (invokestatic (methodCP "access$200" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (237 (ldc 1)) ;;STRING:: "int intCast(long)"
                                      (239 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (242 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (245 (goto 366)) ;;to TAG_4
                                      (248 (aload 8)) ;;at TAG_7
                                      (250 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (253 (if_acmpne 289)) ;;to TAG_8
                                      (256 (aload 9)) 
                                      (258 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (261 (if_acmpne 289)) ;;to TAG_8
                                      (264 (aload 7)) 
                                      (266 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (269 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (272 (aload_2)) 
                                      (273 (aload_3)) 
                                      (274 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (279 (aload_3)) 
                                      (280 (sipush 144)) 
                                      (283 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (286 (goto 366)) ;;to TAG_4
                                      (289 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_8
                                      (292 (dup)) 
                                      (293 (new (class "java.lang.StringBuilder"))) 
                                      (296 (dup)) 
                                      (297 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (300 (ldc 2)) ;;STRING:: " recur arg for primitive local: "
                                      (302 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (305 (aload 6)) 
                                      (307 (getfield (fieldCP "name" "clojure.lang.Compiler$LocalBinding" (class "java.lang.String")))) 
                                      (310 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (313 (ldc 3)) ;;STRING:: " is not matching primitive, had: "
                                      (315 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (318 (aload 7)) 
                                      (320 (invokeinterface (methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1)) 
                                      (325 (ifeq 341)) ;;to TAG_9
                                      (328 (aload 7)) 
                                      (330 (invokeinterface (methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1)) 
                                      (335 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (338 (goto 343)) ;;to TAG_10
                                      (341 (ldc 4)) ;;at TAG_9;;STRING:: "Object"
                                      (343 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) ;;at TAG_10
                                      (346 (ldc 5)) ;;STRING:: ", needed: "
                                      (348 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (351 (aload 8)) 
                                      (353 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (356 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (359 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (362 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (365 (athrow)) 
                                      (366 (goto 377)) ;;to TAG_11;;at TAG_4
                                      (369 (astore 9)) ;;at TAG_22
                                      (371 (aload 9)) 
                                      (373 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (376 (athrow)) 
                                      (377 (goto 392)) ;;to TAG_12;;at TAG_11
                                      (380 (aload 7)) ;;at TAG_2
                                      (382 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (385 (aload_2)) 
                                      (386 (aload_3)) 
                                      (387 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (392 (iinc 5 1)) ;;at TAG_12
                                      (395 (goto 27))  ;;to TAG_13
                                      (398 (aload_0)) ;;at TAG_1
                                      (399 (getfield (fieldCP "loopLocals" "clojure.lang.Compiler$RecurExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (402 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (407 (iconst_1)) 
                                      (408 (isub)) 
                                      (409 (istore 5)) 
                                      (411 (iload 5)) ;;at TAG_20
                                      (413 (iflt 522)) ;;to TAG_14
                                      (416 (aload_0)) 
                                      (417 (getfield (fieldCP "loopLocals" "clojure.lang.Compiler$RecurExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (420 (iload 5)) 
                                      (422 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (427 (checkcast (class "clojure.lang.Compiler$LocalBinding"))) 
                                      (430 (astore 6)) 
                                      (432 (aload 6)) 
                                      (434 (invokevirtual (methodCP "getPrimitiveType" "clojure.lang.Compiler$LocalBinding" () (class "java.lang.Class")))) 
                                      (437 (astore 7)) 
                                      (439 (aload 6)) 
                                      (441 (getfield (fieldCP "isArg" "clojure.lang.Compiler$LocalBinding" boolean))) 
                                      (444 (ifeq 472)) ;;to TAG_15
                                      (447 (aload_3)) 
                                      (448 (aload 6)) 
                                      (450 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (453 (aload_2)) 
                                      (454 (getfield (fieldCP "isStatic" "clojure.lang.Compiler$ObjExpr" boolean))) 
                                      (457 (ifeq 464)) ;;to TAG_16
                                      (460 (iconst_0)) 
                                      (461 (goto 465)) ;;to TAG_17
                                      (464 (iconst_1)) ;;at TAG_16
                                      (465 (isub)) ;;at TAG_17
                                      (466 (invokevirtual (methodCP "storeArg" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (469 (goto 516)) ;;to TAG_18
                                      (472 (aload 7)) ;;at TAG_15
                                      (474 (ifnull 499)) ;;to TAG_19
                                      (477 (aload_3)) 
                                      (478 (aload 7)) 
                                      (480 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (483 (bipush 54)) 
                                      (485 (invokevirtual (methodCP "getOpcode" "clojure.asm.Type" (int) int))) 
                                      (488 (aload 6)) 
                                      (490 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (493 (invokevirtual (methodCP "visitVarInsn" "clojure.asm.commons.GeneratorAdapter" (int int) void))) 
                                      (496 (goto 516)) ;;to TAG_18
                                      (499 (aload_3)) ;;at TAG_19
                                      (500 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (503 (bipush 54)) 
                                      (505 (invokevirtual (methodCP "getOpcode" "clojure.asm.Type" (int) int))) 
                                      (508 (aload 6)) 
                                      (510 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (513 (invokevirtual (methodCP "visitVarInsn" "clojure.asm.commons.GeneratorAdapter" (int int) void))) 
                                      (516 (iinc 5 -1)) ;;at TAG_18
                                      (519 (goto 411)) ;;to TAG_20
                                      (522 (aload_3)) ;;at TAG_14
                                      (523 (aload 4)) 
                                      (525 (invokevirtual (methodCP "goTo" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (528 (return)) 
                                      (endofcode 529))
                                   (Exceptions 
                                     (handler 88 366  369 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "RECUR_CLASS" "clojure.lang.Compiler" (class "java.lang.Class"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "canEmitPrimitive"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitUnboxed"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (aload_3))
                                      (4 (invokevirtual
					(methodCP "emit" "clojure.lang.Compiler$RecurExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void)))
                                      (7 (return))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr" "clojure.lang.Compiler$MaybePrimitiveExpr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$RecurExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$RecurExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$RecurExpr" . "clojure.lang"))

