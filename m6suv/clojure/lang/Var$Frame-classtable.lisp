; Var$Frame-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:53 CDT 2014.
;

(defconst *clojure.lang.Var$Frame*
 (make-class-def
      '(class "clojure.lang.Var$Frame"
            "java.lang.Object"
            (constant_pool)
            (fields
                        (field "bindings" (class "clojure.lang.Associative") (accessflags  *class* ) -1)
                        (field "prev" (class "clojure.lang.Var$Frame") (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap"))))
                                      (4 (aconst_null))
                                      (5 (invokespecial
					(methodCP "<init>" "clojure.lang.Var$Frame" ((class "clojure.lang.Associative") (class "clojure.lang.Var$Frame")) void)))
                                      (8 (return))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.Associative") (class "clojure.lang.Var$Frame"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "bindings" "clojure.lang.Var$Frame" (class "clojure.lang.Associative"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "prev" "clojure.lang.Var$Frame" (class "clojure.lang.Var$Frame"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "clone"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *protected* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 18)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.Var$Frame")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "clojure.lang.Var$Frame" () void)))
                                      (7 (astore_1))
                                      (8 (aload_1))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "bindings" "clojure.lang.Var$Frame" (class "clojure.lang.Associative"))))
                                      (13 (putfield (fieldCP "bindings" "clojure.lang.Var$Frame" (class "clojure.lang.Associative"))))
                                      (16 (aload_1))
                                      (17 (areturn))
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Var$Frame-class-table*
  (make-static-class-decls 
   *clojure.lang.Var$Frame*))

(defconst *package-name-map* 
  ("clojure.lang.Var$Frame" . "clojure.lang"))

