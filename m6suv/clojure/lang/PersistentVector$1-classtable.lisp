; PersistentVector$1-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentVector$1*
 (make-class-def
      '(class "clojure.lang.PersistentVector$1"
            "java.lang.Object"
            (constant_pool)
            (fields
                        (field "i" int (accessflags  *class* ) -1)
                        (field "base" int (accessflags  *class* ) -1)
                        (field "array" (array (class "java.lang.Object")) (accessflags  *class* ) -1)
                        (field "val$start" int (accessflags  *class*  *final* ) -1)
                        (field "val$end" int (accessflags  *class*  *final* ) -1)
                        (field "this$0" (class "clojure.lang.PersistentVector") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.PersistentVector") int int)
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 77)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (putfield (fieldCP "this$0" "clojure.lang.PersistentVector$1" (class "clojure.lang.PersistentVector")))) 
                                      (5 (aload_0)) 
                                      (6 (iload_2)) 
                                      (7 (putfield (fieldCP "val$start" "clojure.lang.PersistentVector$1" int))) 
                                      (10 (aload_0)) 
                                      (11 (iload_3)) 
                                      (12 (putfield (fieldCP "val$end" "clojure.lang.PersistentVector$1" int))) 
                                      (15 (aload_0)) 
                                      (16 (invokespecial (methodCP "<init>" "java.lang.Object" () void))) 
                                      (19 (aload_0)) 
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "val$start" "clojure.lang.PersistentVector$1" int))) 
                                      (24 (putfield (fieldCP "i" "clojure.lang.PersistentVector$1" int))) 
                                      (27 (aload_0)) 
                                      (28 (aload_0)) 
                                      (29 (getfield (fieldCP "i" "clojure.lang.PersistentVector$1" int))) 
                                      (32 (aload_0)) 
                                      (33 (getfield (fieldCP "i" "clojure.lang.PersistentVector$1" int))) 
                                      (36 (bipush 32)) 
                                      (38 (irem)) 
                                      (39 (isub)) 
                                      (40 (putfield (fieldCP "base" "clojure.lang.PersistentVector$1" int))) 
                                      (43 (aload_0)) 
                                      (44 (aload_0)) 
                                      (45 (getfield (fieldCP "val$start" "clojure.lang.PersistentVector$1" int))) 
                                      (48 (aload_0)) 
                                      (49 (getfield (fieldCP "this$0" "clojure.lang.PersistentVector$1" (class "clojure.lang.PersistentVector")))) 
                                      (52 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (55 (if_icmpge 72))  ;;to TAG_0
                                      (58 (aload_0)) 
                                      (59 (getfield (fieldCP "this$0" "clojure.lang.PersistentVector$1" (class "clojure.lang.PersistentVector")))) 
                                      (62 (aload_0)) 
                                      (63 (getfield (fieldCP "i" "clojure.lang.PersistentVector$1" int))) 
                                      (66 (invokevirtual (methodCP "arrayFor" "clojure.lang.PersistentVector" (int) (array (class "java.lang.Object"))))) 
                                      (69 (goto 73)) ;;to TAG_1
                                      (72 (aconst_null)) ;;at TAG_0
                                      (73 (putfield (fieldCP "array" "clojure.lang.PersistentVector$1" (array (class "java.lang.Object"))))) ;;at TAG_1
                                      (76 (return)) 
                                      (endofcode 77))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasNext"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 17)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "i" "clojure.lang.PersistentVector$1" int))) 
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "val$end" "clojure.lang.PersistentVector$1" int))) 
                                      (8 (if_icmpge 15))  ;;to TAG_0
                                      (11 (iconst_1)) 
                                      (12 (goto 16)) ;;to TAG_1
                                      (15 (iconst_0)) ;;at TAG_0
                                      (16 (ireturn)) ;;at TAG_1
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "next"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 1) (code_length . 60)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "i" "clojure.lang.PersistentVector$1" int))) 
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "base" "clojure.lang.PersistentVector$1" int))) 
                                      (8 (isub)) 
                                      (9 (bipush 32)) 
                                      (11 (if_icmpne 40))  ;;to TAG_0
                                      (14 (aload_0)) 
                                      (15 (aload_0)) 
                                      (16 (getfield (fieldCP "this$0" "clojure.lang.PersistentVector$1" (class "clojure.lang.PersistentVector")))) 
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "i" "clojure.lang.PersistentVector$1" int))) 
                                      (23 (invokevirtual (methodCP "arrayFor" "clojure.lang.PersistentVector" (int) (array (class "java.lang.Object"))))) 
                                      (26 (putfield (fieldCP "array" "clojure.lang.PersistentVector$1" (array (class "java.lang.Object"))))) 
                                      (29 (aload_0)) 
                                      (30 (dup)) 
                                      (31 (getfield (fieldCP "base" "clojure.lang.PersistentVector$1" int))) 
                                      (34 (bipush 32)) 
                                      (36 (iadd)) 
                                      (37 (putfield (fieldCP "base" "clojure.lang.PersistentVector$1" int))) 
                                      (40 (aload_0)) ;;at TAG_0
                                      (41 (getfield (fieldCP "array" "clojure.lang.PersistentVector$1" (array (class "java.lang.Object"))))) 
                                      (44 (aload_0)) 
                                      (45 (dup)) 
                                      (46 (getfield (fieldCP "i" "clojure.lang.PersistentVector$1" int))) 
                                      (49 (dup_x1)) 
                                      (50 (iconst_1)) 
                                      (51 (iadd)) 
                                      (52 (putfield (fieldCP "i" "clojure.lang.PersistentVector$1" int))) 
                                      (55 (bipush 31)) 
                                      (57 (iand)) 
                                      (58 (aaload)) 
                                      (59 (areturn)) 
                                      (endofcode 60))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remove"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "java.util.Iterator")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "EnclosingMethod")
              (attribute "InnerClasses")))))


(defconst *PersistentVector$1-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentVector$1*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentVector$1" . "clojure.lang"))

