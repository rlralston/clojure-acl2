; TransactionalHashMap-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:53 CDT 2014.
;

(defconst *clojure.lang.TransactionalHashMap*
 (make-class-def
      '(class "clojure.lang.TransactionalHashMap"
            "java.util.AbstractMap"
            (constant_pool)
            (fields
                        (field "bins" (array (class "clojure.lang.Ref")) (accessflags  *class*  *final* ) -1))
            (methods
                        (method "mapAt"
                              (parameters int)
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref")))))
                                      (4 (iload_1))
                                      (5 (aaload))
                                      (6 (invokevirtual
					(methodCP "deref" "clojure.lang.Ref" () (class "java.lang.Object"))))
                                      (9 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (12 (areturn))
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "binFor"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *final* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 36)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokevirtual
					(methodCP "hashCode" "java.lang.Object" () int)))
                                      (4 (istore_2))
                                      (5 (iload_2))
                                      (6 (iload_2))
                                      (7 (bipush 20))
                                      (9 (iushr))
                                      (10 (iload_2))
                                      (11 (bipush 12))
                                      (13 (iushr))
                                      (14 (ixor))
                                      (15 (ixor))
                                      (16 (istore_2))
                                      (17 (iload_2))
                                      (18 (iload_2))
                                      (19 (bipush 7))
                                      (21 (iushr))
                                      (22 (iload_2))
                                      (23 (iconst_4))
                                      (24 (iushr))
                                      (25 (ixor))
                                      (26 (ixor))
                                      (27 (istore_2))
                                      (28 (iload_2))
                                      (29 (aload_0))
                                      (30 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref")))))
                                      (33 (arraylength))
                                      (34 (irem))
                                      (35 (ireturn))
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap )))
                        (method "entryAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.util.Map$Entry"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_0))
                                      (2 (aload_1))
                                      (3 (invokevirtual
					(methodCP "binFor" "clojure.lang.TransactionalHashMap" ((class "java.lang.Object")) int)))
                                      (6 (invokevirtual
					(methodCP "mapAt" "clojure.lang.TransactionalHashMap" (int) (class "clojure.lang.IPersistentMap"))))
                                      (9 (aload_1))
                                      (10 (invokeinterface
					(methodCP "entryAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 2))
                                      (15 (areturn))
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (sipush 421))
                                      (4 (invokespecial
					(methodCP "<init>" "clojure.lang.TransactionalHashMap" (int) void)))
                                      (7 (return))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters int)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 42)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "<init>" "java.util.AbstractMap" () void))) 
                                      (4 (aload_0)) 
                                      (5 (iload_1)) 
                                      (6 (anewarray (class "clojure.lang.Ref"))) 
                                      (9 (putfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref"))))) 
                                      (12 (iconst_0)) 
                                      (13 (istore_2)) 
                                      (14 (iload_2)) ;;at TAG_1
                                      (15 (iload_1)) 
                                      (16 (if_icmpge 41))  ;;to TAG_0
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref"))))) 
                                      (23 (iload_2)) 
                                      (24 (new (class "clojure.lang.Ref"))) 
                                      (27 (dup)) 
                                      (28 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (31 (invokespecial (methodCP "<init>" "clojure.lang.Ref" ((class "java.lang.Object")) void))) 
                                      (34 (aastore)) 
                                      (35 (iinc 2 1)) 
                                      (38 (goto 14)) ;;to TAG_1
                                      (41 (return)) ;;at TAG_0
                                      (endofcode 42))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.util.Map"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokeinterface
					(methodCP "size" "java.util.Map" () int) 1))
                                      (7 (invokespecial
					(methodCP "<init>" "clojure.lang.TransactionalHashMap" (int) void)))
                                      (10 (aload_0))
                                      (11 (aload_1))
                                      (12 (invokevirtual
					(methodCP "putAll" "clojure.lang.TransactionalHashMap" ((class "java.util.Map")) void)))
                                      (15 (return))
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "size"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 34)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_1)) 
                                      (2 (iconst_0)) 
                                      (3 (istore_2)) 
                                      (4 (iload_2)) ;;at TAG_1
                                      (5 (aload_0)) 
                                      (6 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref"))))) 
                                      (9 (arraylength)) 
                                      (10 (if_icmpge 32))  ;;to TAG_0
                                      (13 (iload_1)) 
                                      (14 (aload_0)) 
                                      (15 (iload_2)) 
                                      (16 (invokevirtual (methodCP "mapAt" "clojure.lang.TransactionalHashMap" (int) (class "clojure.lang.IPersistentMap")))) 
                                      (19 (invokeinterface (methodCP "count" "clojure.lang.IPersistentMap" () int) 1)) 
                                      (24 (iadd)) 
                                      (25 (istore_1)) 
                                      (26 (iinc 2 1)) 
                                      (29 (goto 4)) ;;to TAG_1
                                      (32 (iload_1)) ;;at TAG_0
                                      (33 (ireturn)) 
                                      (endofcode 34))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isEmpty"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "size" "clojure.lang.TransactionalHashMap" () int))) 
                                      (4 (ifne 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "containsKey"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokevirtual (methodCP "entryAt" "clojure.lang.TransactionalHashMap" ((class "java.lang.Object")) (class "java.util.Map$Entry")))) 
                                      (5 (ifnull 12))  ;;to TAG_0
                                      (8 (iconst_1)) 
                                      (9 (goto 13)) ;;to TAG_1
                                      (12 (iconst_0)) ;;at TAG_0
                                      (13 (ireturn)) ;;at TAG_1
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "get"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 19)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokevirtual (methodCP "entryAt" "clojure.lang.TransactionalHashMap" ((class "java.lang.Object")) (class "java.util.Map$Entry")))) 
                                      (5 (astore_2)) 
                                      (6 (aload_2)) 
                                      (7 (ifnull 17))  ;;to TAG_0
                                      (10 (aload_2)) 
                                      (11 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (16 (areturn)) 
                                      (17 (aconst_null)) ;;at TAG_0
                                      (18 (areturn)) 
                                      (endofcode 19))
                                   (Exceptions )
                                   (StackMap )))
                        (method "put"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 47)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref")))))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (invokevirtual
					(methodCP "binFor" "clojure.lang.TransactionalHashMap" ((class "java.lang.Object")) int)))
                                      (9 (aaload))
                                      (10 (astore_3))
                                      (11 (aload_3))
                                      (12 (invokevirtual
					(methodCP "deref" "clojure.lang.Ref" () (class "java.lang.Object"))))
                                      (15 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (18 (astore 4))
                                      (20 (aload 4))
                                      (22 (aload_1))
                                      (23 (invokeinterface
					(methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2))
                                      (28 (astore 5))
                                      (30 (aload_3))
                                      (31 (aload 4))
                                      (33 (aload_1))
                                      (34 (aload_2))
                                      (35 (invokeinterface
					(methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3))
                                      (40 (invokevirtual
					(methodCP "set" "clojure.lang.Ref" ((class "java.lang.Object")) (class "java.lang.Object"))))
                                      (43 (pop))
                                      (44 (aload 5))
                                      (46 (areturn))
                                      (endofcode 47))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remove"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 6) (code_length . 54)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref"))))) 
                                      (4 (aload_0)) 
                                      (5 (aload_1)) 
                                      (6 (invokevirtual (methodCP "binFor" "clojure.lang.TransactionalHashMap" ((class "java.lang.Object")) int))) 
                                      (9 (aaload)) 
                                      (10 (astore_2)) 
                                      (11 (aload_2)) 
                                      (12 (invokevirtual (methodCP "deref" "clojure.lang.Ref" () (class "java.lang.Object")))) 
                                      (15 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (18 (astore_3)) 
                                      (19 (aload_3)) 
                                      (20 (aload_1)) 
                                      (21 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (26 (astore 4)) 
                                      (28 (aload_2)) ;;at TAG_1
                                      (29 (aload_3)) 
                                      (30 (aload_1)) 
                                      (31 (invokeinterface (methodCP "without" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 2)) 
                                      (36 (invokevirtual (methodCP "set" "clojure.lang.Ref" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (39 (pop)) 
                                      (40 (goto 51)) ;;to TAG_0;;at TAG_2
                                      (43 (astore 5)) ;;at TAG_3
                                      (45 (aload 5)) 
                                      (47 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (50 (athrow)) 
                                      (51 (aload 4)) ;;at TAG_0
                                      (53 (areturn)) 
                                      (endofcode 54))
                                   (Exceptions 
                                     (handler 28 40  43 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "putAll"
                              (parameters (class "java.util.Map"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 52)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokeinterface (methodCP "entrySet" "java.util.Map" () (class "java.util.Set")) 1)) 
                                      (6 (invokeinterface (methodCP "iterator" "java.util.Set" () (class "java.util.Iterator")) 1)) 
                                      (11 (astore_2)) 
                                      (12 (aload_2)) ;;at TAG_1
                                      (13 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (18 (ifeq 51))  ;;to TAG_0
                                      (21 (aload_2)) 
                                      (22 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (27 (checkcast (class "java.util.Map$Entry"))) 
                                      (30 (astore_3)) 
                                      (31 (aload_0)) 
                                      (32 (aload_3)) 
                                      (33 (invokeinterface (methodCP "getKey" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (38 (aload_3)) 
                                      (39 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (44 (invokevirtual (methodCP "put" "clojure.lang.TransactionalHashMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (47 (pop)) 
                                      (48 (goto 12)) ;;to TAG_1
                                      (51 (return)) ;;at TAG_0
                                      (endofcode 52))
                                   (Exceptions )
                                   (StackMap )))
                        (method "clear"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 50)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_1)) 
                                      (2 (iload_1)) ;;at TAG_2
                                      (3 (aload_0)) 
                                      (4 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref"))))) 
                                      (7 (arraylength)) 
                                      (8 (if_icmpge 49)) ;;to TAG_0
                                      (11 (aload_0)) 
                                      (12 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref"))))) 
                                      (15 (iload_1)) 
                                      (16 (aaload)) 
                                      (17 (astore_2)) 
                                      (18 (aload_2)) 
                                      (19 (invokevirtual (methodCP "deref" "clojure.lang.Ref" () (class "java.lang.Object")))) 
                                      (22 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (25 (astore_3)) 
                                      (26 (aload_3)) 
                                      (27 (invokeinterface (methodCP "count" "clojure.lang.IPersistentMap" () int) 1)) 
                                      (32 (ifle 43)) ;;to TAG_1
                                      (35 (aload_2)) 
                                      (36 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (39 (invokevirtual (methodCP "set" "clojure.lang.Ref" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (42 (pop)) 
                                      (43 (iinc 1 1)) ;;at TAG_1
                                      (46 (goto 2))  ;;to TAG_2
                                      (49 (return)) ;;at TAG_0
                                      (endofcode 50))
                                   (Exceptions )
                                   (StackMap )))
                        (method "entrySet"
                              (parameters )
                              (returntype . (class "java.util.Set"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 67)
                                   (parsedcode
                                      (0 (new (class "java.util.ArrayList"))) 
                                      (3 (dup)) 
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref"))))) 
                                      (8 (arraylength)) 
                                      (9 (invokespecial (methodCP "<init>" "java.util.ArrayList" (int) void))) 
                                      (12 (astore_1)) 
                                      (13 (iconst_0)) 
                                      (14 (istore_2)) 
                                      (15 (iload_2)) ;;at TAG_2
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref"))))) 
                                      (20 (arraylength)) 
                                      (21 (if_icmpge 57)) ;;to TAG_0
                                      (24 (aload_0)) 
                                      (25 (iload_2)) 
                                      (26 (invokevirtual (methodCP "mapAt" "clojure.lang.TransactionalHashMap" (int) (class "clojure.lang.IPersistentMap")))) 
                                      (29 (astore_3)) 
                                      (30 (aload_3)) 
                                      (31 (invokeinterface (methodCP "count" "clojure.lang.IPersistentMap" () int) 1)) 
                                      (36 (ifle 51)) ;;to TAG_1
                                      (39 (aload_1)) 
                                      (40 (aload_3)) 
                                      (41 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (44 (checkcast (class "java.util.Collection"))) 
                                      (47 (invokevirtual (methodCP "addAll" "java.util.ArrayList" ((class "java.util.Collection")) boolean))) 
                                      (50 (pop)) 
                                      (51 (iinc 2 1)) ;;at TAG_1
                                      (54 (goto 15))  ;;to TAG_2
                                      (57 (new (class "clojure.lang.TransactionalHashMap$1"))) ;;at TAG_0
                                      (60 (dup)) 
                                      (61 (aload_0)) 
                                      (62 (aload_1)) 
                                      (63 (invokespecial (methodCP "<init>" "clojure.lang.TransactionalHashMap$1" ((class "clojure.lang.TransactionalHashMap") (class "java.util.ArrayList")) void))) 
                                      (66 (areturn)) 
                                      (endofcode 67))
                                   (Exceptions )
                                   (StackMap )))
                        (method "putIfAbsent"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 59)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref"))))) 
                                      (4 (aload_0)) 
                                      (5 (aload_1)) 
                                      (6 (invokevirtual (methodCP "binFor" "clojure.lang.TransactionalHashMap" ((class "java.lang.Object")) int))) 
                                      (9 (aaload)) 
                                      (10 (astore_3)) 
                                      (11 (aload_3)) 
                                      (12 (invokevirtual (methodCP "deref" "clojure.lang.Ref" () (class "java.lang.Object")))) 
                                      (15 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (18 (astore 4)) 
                                      (20 (aload 4)) 
                                      (22 (aload_1)) 
                                      (23 (invokeinterface (methodCP "entryAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 2)) 
                                      (28 (astore 5)) 
                                      (30 (aload 5)) 
                                      (32 (ifnonnull 51))  ;;to TAG_0
                                      (35 (aload_3)) 
                                      (36 (aload 4)) 
                                      (38 (aload_1)) 
                                      (39 (aload_2)) 
                                      (40 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (45 (invokevirtual (methodCP "set" "clojure.lang.Ref" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (48 (pop)) 
                                      (49 (aconst_null)) 
                                      (50 (areturn)) 
                                      (51 (aload 5)) ;;at TAG_0
                                      (53 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (58 (areturn)) 
                                      (endofcode 59))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remove"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 7) (code_length . 77)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref"))))) 
                                      (4 (aload_0)) 
                                      (5 (aload_1)) 
                                      (6 (invokevirtual (methodCP "binFor" "clojure.lang.TransactionalHashMap" ((class "java.lang.Object")) int))) 
                                      (9 (aaload)) 
                                      (10 (astore_3)) 
                                      (11 (aload_3)) 
                                      (12 (invokevirtual (methodCP "deref" "clojure.lang.Ref" () (class "java.lang.Object")))) 
                                      (15 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (18 (astore 4)) 
                                      (20 (aload 4)) 
                                      (22 (aload_1)) 
                                      (23 (invokeinterface (methodCP "entryAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 2)) 
                                      (28 (astore 5)) 
                                      (30 (aload 5)) 
                                      (32 (ifnull 75)) ;;to TAG_0
                                      (35 (aload 5)) 
                                      (37 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (42 (aload_2)) 
                                      (43 (invokevirtual (methodCP "equals" "java.lang.Object" ((class "java.lang.Object")) boolean))) 
                                      (46 (ifeq 75)) ;;to TAG_0
                                      (49 (aload_3)) ;;at TAG_2
                                      (50 (aload 4)) 
                                      (52 (aload_1)) 
                                      (53 (invokeinterface (methodCP "without" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 2)) 
                                      (58 (invokevirtual (methodCP "set" "clojure.lang.Ref" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (61 (pop)) 
                                      (62 (goto 73)) ;;to TAG_1;;at TAG_3
                                      (65 (astore 6)) ;;at TAG_4
                                      (67 (aload 6)) 
                                      (69 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (72 (athrow)) 
                                      (73 (iconst_1)) ;;at TAG_1
                                      (74 (ireturn)) 
                                      (75 (iconst_0)) ;;at TAG_0
                                      (76 (ireturn)) 
                                      (endofcode 77))
                                   (Exceptions 
                                     (handler 49 62  65 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "replace"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 7) (code_length . 70)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref"))))) 
                                      (4 (aload_0)) 
                                      (5 (aload_1)) 
                                      (6 (invokevirtual (methodCP "binFor" "clojure.lang.TransactionalHashMap" ((class "java.lang.Object")) int))) 
                                      (9 (aaload)) 
                                      (10 (astore 4)) 
                                      (12 (aload 4)) 
                                      (14 (invokevirtual (methodCP "deref" "clojure.lang.Ref" () (class "java.lang.Object")))) 
                                      (17 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (20 (astore 5)) 
                                      (22 (aload 5)) 
                                      (24 (aload_1)) 
                                      (25 (invokeinterface (methodCP "entryAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 2)) 
                                      (30 (astore 6)) 
                                      (32 (aload 6)) 
                                      (34 (ifnull 68))  ;;to TAG_0
                                      (37 (aload 6)) 
                                      (39 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (44 (aload_2)) 
                                      (45 (invokevirtual (methodCP "equals" "java.lang.Object" ((class "java.lang.Object")) boolean))) 
                                      (48 (ifeq 68))  ;;to TAG_0
                                      (51 (aload 4)) 
                                      (53 (aload 5)) 
                                      (55 (aload_1)) 
                                      (56 (aload_3)) 
                                      (57 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (62 (invokevirtual (methodCP "set" "clojure.lang.Ref" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (65 (pop)) 
                                      (66 (iconst_1)) 
                                      (67 (ireturn)) 
                                      (68 (iconst_0)) ;;at TAG_0
                                      (69 (ireturn)) 
                                      (endofcode 70))
                                   (Exceptions )
                                   (StackMap )))
                        (method "replace"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 59)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bins" "clojure.lang.TransactionalHashMap" (array (class "clojure.lang.Ref"))))) 
                                      (4 (aload_0)) 
                                      (5 (aload_1)) 
                                      (6 (invokevirtual (methodCP "binFor" "clojure.lang.TransactionalHashMap" ((class "java.lang.Object")) int))) 
                                      (9 (aaload)) 
                                      (10 (astore_3)) 
                                      (11 (aload_3)) 
                                      (12 (invokevirtual (methodCP "deref" "clojure.lang.Ref" () (class "java.lang.Object")))) 
                                      (15 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (18 (astore 4)) 
                                      (20 (aload 4)) 
                                      (22 (aload_1)) 
                                      (23 (invokeinterface (methodCP "entryAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 2)) 
                                      (28 (astore 5)) 
                                      (30 (aload 5)) 
                                      (32 (ifnull 57))  ;;to TAG_0
                                      (35 (aload_3)) 
                                      (36 (aload 4)) 
                                      (38 (aload_1)) 
                                      (39 (aload_2)) 
                                      (40 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (45 (invokevirtual (methodCP "set" "clojure.lang.Ref" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (48 (pop)) 
                                      (49 (aload 5)) 
                                      (51 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (56 (areturn)) 
                                      (57 (aconst_null)) ;;at TAG_0
                                      (58 (areturn)) 
                                      (endofcode 59))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "java.util.concurrent.ConcurrentMap")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "Signature")
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *TransactionalHashMap-class-table*
  (make-static-class-decls 
   *clojure.lang.TransactionalHashMap*))

(defconst *package-name-map* 
  ("clojure.lang.TransactionalHashMap" . "clojure.lang"))

