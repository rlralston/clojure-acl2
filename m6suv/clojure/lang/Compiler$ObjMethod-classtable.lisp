; Compiler$ObjMethod-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$ObjMethod*
 (make-class-def
      '(class "clojure.lang.Compiler$ObjMethod"
            "java.lang.Object"
            (constant_pool
                        (STRING  "int intCast(long)")
                        (STRING  "Mismatched primitive return, expected: ")
                        (STRING  ", had: ")
                        (STRING  "this")
                        (STRING  "Ljava/lang/Object;"))
            (fields
                        (field "parent" (class "clojure.lang.Compiler$ObjMethod") (accessflags  *class*  *final*  *public* ) -1)
                        (field "locals" (class "clojure.lang.IPersistentMap") (accessflags  *class* ) -1)
                        (field "indexlocals" (class "clojure.lang.IPersistentMap") (accessflags  *class* ) -1)
                        (field "body" (class "clojure.lang.Compiler$Expr") (accessflags  *class* ) -1)
                        (field "objx" (class "clojure.lang.Compiler$ObjExpr") (accessflags  *class* ) -1)
                        (field "argLocals" (class "clojure.lang.PersistentVector") (accessflags  *class* ) -1)
                        (field "maxLocal" int (accessflags  *class* ) -1)
                        (field "line" int (accessflags  *class* ) -1)
                        (field "column" int (accessflags  *class* ) -1)
                        (field "localsUsedInCatchFinally" (class "clojure.lang.PersistentHashSet") (accessflags  *class* ) -1)
                        (field "methodMeta" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *protected* ) -1))
            (methods
                        (method "locals"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "locals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.IPersistentMap"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "body"
                              (parameters )
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "body" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "objx"
                              (parameters )
                              (returntype . (class "clojure.lang.Compiler$ObjExpr"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "objx" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.Compiler$ObjExpr"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "argLocals"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentVector"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "argLocals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.PersistentVector"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "maxLocal"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "maxLocal" "clojure.lang.Compiler$ObjMethod" int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "line"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "line" "clojure.lang.Compiler$ObjMethod" int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "column"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "column" "clojure.lang.Compiler$ObjMethod" int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.lang.Compiler$ObjMethod"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 42)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aconst_null))
                                      (6 (putfield (fieldCP "locals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.IPersistentMap"))))
                                      (9 (aload_0))
                                      (10 (aconst_null))
                                      (11 (putfield (fieldCP "indexlocals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.IPersistentMap"))))
                                      (14 (aload_0))
                                      (15 (aconst_null))
                                      (16 (putfield (fieldCP "body" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.Compiler$Expr"))))
                                      (19 (aload_0))
                                      (20 (iconst_0))
                                      (21 (putfield (fieldCP "maxLocal" "clojure.lang.Compiler$ObjMethod" int)))
                                      (24 (aload_0))
                                      (25 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashSet" (class "clojure.lang.PersistentHashSet"))))
                                      (28 (putfield (fieldCP "localsUsedInCatchFinally" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.PersistentHashSet"))))
                                      (31 (aload_0))
                                      (32 (aload_2))
                                      (33 (putfield (fieldCP "parent" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.Compiler$ObjMethod"))))
                                      (36 (aload_0))
                                      (37 (aload_1))
                                      (38 (putfield (fieldCP "objx" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.Compiler$ObjExpr"))))
                                      (41 (return))
                                      (endofcode 42))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitBody"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class") (class "clojure.lang.Compiler$Expr"))
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 283)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (4 (astore 4)) 
                                      (6 (aload_2)) 
                                      (7 (invokestatic (methodCP "isPrimitive" "clojure.lang.Util" ((class "java.lang.Class")) boolean))) 
                                      (10 (ifeq 249)) ;;to TAG_0
                                      (13 (aload 4)) 
                                      (15 (invokeinterface (methodCP "canEmitPrimitive" "clojure.lang.Compiler$MaybePrimitiveExpr" () boolean) 1)) 
                                      (20 (ifeq 249)) ;;to TAG_0
                                      (23 (aload 4)) 
                                      (25 (invokestatic (methodCP "maybePrimitiveType" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$Expr")) (class "java.lang.Class")))) 
                                      (28 (astore 5)) 
                                      (30 (aload 5)) 
                                      (32 (aload_2)) 
                                      (33 (if_acmpne 51))  ;;to TAG_1
                                      (36 (aload 4)) 
                                      (38 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (41 (aload_0)) 
                                      (42 (aload_1)) 
                                      (43 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (48 (goto 246)) ;;to TAG_2
                                      (51 (aload_2)) ;;at TAG_1
                                      (52 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (55 (if_acmpne 88)) ;;to TAG_3
                                      (58 (aload 5)) 
                                      (60 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (63 (if_acmpne 88)) ;;to TAG_3
                                      (66 (aload 4)) 
                                      (68 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (71 (aload_0)) 
                                      (72 (aload_1)) 
                                      (73 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (78 (aload_1)) 
                                      (79 (sipush 133)) 
                                      (82 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (85 (goto 246)) ;;to TAG_2
                                      (88 (aload_2)) ;;at TAG_3
                                      (89 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (92 (if_acmpne 125)) ;;to TAG_4
                                      (95 (aload 5)) 
                                      (97 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (100 (if_acmpne 125)) ;;to TAG_4
                                      (103 (aload 4)) 
                                      (105 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (108 (aload_0)) 
                                      (109 (aload_1)) 
                                      (110 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (115 (aload_1)) 
                                      (116 (sipush 141)) 
                                      (119 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (122 (goto 246)) ;;to TAG_2
                                      (125 (aload_2)) ;;at TAG_4
                                      (126 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (129 (if_acmpne 167)) ;;to TAG_5
                                      (132 (aload 5)) 
                                      (134 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (137 (if_acmpne 167)) ;;to TAG_5
                                      (140 (aload 4)) 
                                      (142 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (145 (aload_0)) 
                                      (146 (aload_1)) 
                                      (147 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (152 (aload_1)) 
                                      (153 (invokestatic (methodCP "access$200" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (156 (ldc 0)) ;;STRING:: "int intCast(long)"
                                      (158 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (161 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (164 (goto 246)) ;;to TAG_2
                                      (167 (aload_2)) ;;at TAG_5
                                      (168 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (171 (if_acmpne 204)) ;;to TAG_6
                                      (174 (aload 5)) 
                                      (176 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (179 (if_acmpne 204)) ;;to TAG_6
                                      (182 (aload 4)) 
                                      (184 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (187 (aload_0)) 
                                      (188 (aload_1)) 
                                      (189 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (194 (aload_1)) 
                                      (195 (sipush 144)) 
                                      (198 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (201 (goto 246)) ;;to TAG_2
                                      (204 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_6
                                      (207 (dup)) 
                                      (208 (new (class "java.lang.StringBuilder"))) 
                                      (211 (dup)) 
                                      (212 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (215 (ldc 1)) ;;STRING:: "Mismatched primitive return, expected: "
                                      (217 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (220 (aload_2)) 
                                      (221 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (224 (ldc 2)) ;;STRING:: ", had: "
                                      (226 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (229 (aload 4)) 
                                      (231 (invokeinterface (methodCP "getJavaClass" "clojure.lang.Compiler$MaybePrimitiveExpr" () (class "java.lang.Class")) 1)) 
                                      (236 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (239 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (242 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (245 (athrow)) 
                                      (246 (goto 282)) ;;to TAG_7;;at TAG_2
                                      (249 (aload_3)) ;;at TAG_0
                                      (250 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (253 (aload_0)) 
                                      (254 (aload_1)) 
                                      (255 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (260 (aload_2)) 
                                      (261 (getstatic (fieldCP "TYPE" "java.lang.Void" (class "java.lang.Class")))) 
                                      (264 (if_acmpne 274)) ;;to TAG_8
                                      (267 (aload_1)) 
                                      (268 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (271 (goto 282)) ;;to TAG_7
                                      (274 (aload_1)) ;;at TAG_8
                                      (275 (aload_2)) 
                                      (276 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (279 (invokevirtual (methodCP "unbox" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (282 (return)) ;;at TAG_7
                                      (endofcode 283))
                                   (Exceptions )
                                   (StackMap )))
                        (method "numParams"
                              (parameters )
                              (returntype . int)
                              (accessflags  *abstract*  *class* )
                              (code))
                        (method "getMethodName"
                              (parameters )
                              (returntype . (class "java.lang.String"))
                              (accessflags  *abstract*  *class* )
                              (code))
                        (method "getReturnType"
                              (parameters )
                              (returntype . (class "clojure.asm.Type"))
                              (accessflags  *abstract*  *class* )
                              (code))
                        (method "getArgTypes"
                              (parameters )
                              (returntype . (array (class "clojure.asm.Type")))
                              (accessflags  *abstract*  *class* )
                              (code))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.ClassVisitor"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 11) (code_length . 219)
                                   (parsedcode
                                      (0 (new (class "clojure.asm.commons.Method"))) 
                                      (3 (dup)) 
                                      (4 (aload_0)) 
                                      (5 (invokevirtual (methodCP "getMethodName" "clojure.lang.Compiler$ObjMethod" () (class "java.lang.String")))) 
                                      (8 (aload_0)) 
                                      (9 (invokevirtual (methodCP "getReturnType" "clojure.lang.Compiler$ObjMethod" () (class "clojure.asm.Type")))) 
                                      (12 (aload_0)) 
                                      (13 (invokevirtual (methodCP "getArgTypes" "clojure.lang.Compiler$ObjMethod" () (array (class "clojure.asm.Type"))))) 
                                      (16 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (19 (astore_3)) 
                                      (20 (new (class "clojure.asm.commons.GeneratorAdapter"))) 
                                      (23 (dup)) 
                                      (24 (iconst_1)) 
                                      (25 (aload_3)) 
                                      (26 (aconst_null)) 
                                      (27 (invokestatic (methodCP "access$1500" "clojure.lang.Compiler" () (array (class "clojure.asm.Type"))))) 
                                      (30 (aload_2)) 
                                      (31 (invokespecial (methodCP "<init>" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.commons.Method") (class "java.lang.String") (array (class "clojure.asm.Type")) (class "clojure.asm.ClassVisitor")) void))) 
                                      (34 (astore 4)) 
                                      (36 (aload 4)) 
                                      (38 (invokevirtual (methodCP "visitCode" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (41 (aload 4)) 
                                      (43 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (46 (astore 5)) 
                                      (48 (aload 4)) 
                                      (50 (aload_0)) 
                                      (51 (getfield (fieldCP "line" "clojure.lang.Compiler$ObjMethod" int))) 
                                      (54 (aload 5)) 
                                      (56 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (59 (iconst_4)) ;;at TAG_4
                                      (60 (anewarray (class "java.lang.Object"))) 
                                      (63 (dup)) 
                                      (64 (iconst_0)) 
                                      (65 (getstatic (fieldCP "LOOP_LABEL" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (68 (aastore)) 
                                      (69 (dup)) 
                                      (70 (iconst_1)) 
                                      (71 (aload 5)) 
                                      (73 (aastore)) 
                                      (74 (dup)) 
                                      (75 (iconst_2)) 
                                      (76 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (79 (aastore)) 
                                      (80 (dup)) 
                                      (81 (iconst_3)) 
                                      (82 (aload_0)) 
                                      (83 (aastore)) 
                                      (84 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (87 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (90 (aload_0)) 
                                      (91 (getfield (fieldCP "body" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.Compiler$Expr")))) 
                                      (94 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (97 (aload_1)) 
                                      (98 (aload 4)) 
                                      (100 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (105 (aload 4)) 
                                      (107 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (110 (astore 6)) 
                                      (112 (aload 4)) 
                                      (114 (ldc 3)) ;;STRING:: "this"
                                      (116 (ldc 4)) ;;STRING:: "Ljava/lang/Object;"
                                      (118 (aconst_null)) 
                                      (119 (aload 5)) 
                                      (121 (aload 6)) 
                                      (123 (iconst_0)) 
                                      (124 (invokevirtual (methodCP "visitLocalVariable" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "clojure.asm.Label") (class "clojure.asm.Label") int) void))) 
                                      (127 (aload_0)) 
                                      (128 (getfield (fieldCP "argLocals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.PersistentVector")))) 
                                      (131 (invokevirtual (methodCP "seq" "clojure.lang.PersistentVector" () (class "clojure.lang.ISeq")))) 
                                      (134 (astore 7)) 
                                      (136 (aload 7)) ;;at TAG_1
                                      (138 (ifnull 187)) ;;to TAG_0
                                      (141 (aload 7)) 
                                      (143 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (148 (checkcast (class "clojure.lang.Compiler$LocalBinding"))) 
                                      (151 (astore 8)) 
                                      (153 (aload 4)) 
                                      (155 (aload 8)) 
                                      (157 (getfield (fieldCP "name" "clojure.lang.Compiler$LocalBinding" (class "java.lang.String")))) 
                                      (160 (ldc 4)) ;;STRING:: "Ljava/lang/Object;"
                                      (162 (aconst_null)) 
                                      (163 (aload 5)) 
                                      (165 (aload 6)) 
                                      (167 (aload 8)) 
                                      (169 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (172 (invokevirtual (methodCP "visitLocalVariable" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "clojure.asm.Label") (class "clojure.asm.Label") int) void))) 
                                      (175 (aload 7)) 
                                      (177 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (182 (astore 7)) 
                                      (184 (goto 136)) ;;to TAG_1
                                      (187 (jsr 201))  ;;to TAG_2;;at TAG_0
                                      (190 (goto 208)) ;;to TAG_3;;at TAG_5
                                      (193 (astore 9)) ;;at TAG_6
                                      (195 (jsr 201))  ;;to TAG_2
                                      (198 (aload 9)) ;;at TAG_7
                                      (200 (athrow)) 
                                      (201 (astore 10)) ;;at TAG_2
                                      (203 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (206 (ret 10)) 
                                      (208 (aload 4)) ;;at TAG_3
                                      (210 (invokevirtual (methodCP "returnValue" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (213 (aload 4)) 
                                      (215 (invokevirtual (methodCP "endMethod" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (218 (return)) 
                                      (endofcode 219))
                                   (Exceptions 
                                     (handler 59 190  193 (class "java.lang.Throwable"))
                                     (handler 193 198  193 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "emitClearLocals"
                              (parameters (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 0) (max_locals . 2) (code_length . 1)
                                   (parsedcode
                                      (0 (return))
                                      (endofcode 1))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitClearLocalsOld"
                              (parameters (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 155)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_2)) 
                                      (2 (iload_2)) ;;at TAG_2
                                      (3 (aload_0)) 
                                      (4 (getfield (fieldCP "argLocals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.PersistentVector")))) 
                                      (7 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (10 (if_icmpge 70)) ;;to TAG_0
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "argLocals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.PersistentVector")))) 
                                      (17 (iload_2)) 
                                      (18 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector" (int) (class "java.lang.Object")))) 
                                      (21 (checkcast (class "clojure.lang.Compiler$LocalBinding"))) 
                                      (24 (astore_3)) 
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "localsUsedInCatchFinally" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.PersistentHashSet")))) 
                                      (29 (aload_3)) 
                                      (30 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (33 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (36 (invokevirtual (methodCP "contains" "clojure.lang.PersistentHashSet" ((class "java.lang.Object")) boolean))) 
                                      (39 (ifne 64)) ;;to TAG_1
                                      (42 (aload_3)) 
                                      (43 (invokevirtual (methodCP "getPrimitiveType" "clojure.lang.Compiler$LocalBinding" () (class "java.lang.Class")))) 
                                      (46 (ifnonnull 64)) ;;to TAG_1
                                      (49 (aload_1)) 
                                      (50 (iconst_1)) 
                                      (51 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (54 (aload_1)) 
                                      (55 (aload_3)) 
                                      (56 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (59 (iconst_1)) 
                                      (60 (isub)) 
                                      (61 (invokevirtual (methodCP "storeArg" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (64 (iinc 2 1)) ;;at TAG_1
                                      (67 (goto 2))  ;;to TAG_2
                                      (70 (aload_0)) ;;at TAG_0
                                      (71 (invokevirtual (methodCP "numParams" "clojure.lang.Compiler$ObjMethod" () int))) 
                                      (74 (iconst_1)) 
                                      (75 (iadd)) 
                                      (76 (istore_2)) 
                                      (77 (iload_2)) ;;at TAG_6
                                      (78 (aload_0)) 
                                      (79 (getfield (fieldCP "maxLocal" "clojure.lang.Compiler$ObjMethod" int))) 
                                      (82 (iconst_1)) 
                                      (83 (iadd)) 
                                      (84 (if_icmpge 154)) ;;to TAG_3
                                      (87 (aload_0)) 
                                      (88 (getfield (fieldCP "localsUsedInCatchFinally" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.PersistentHashSet")))) 
                                      (91 (iload_2)) 
                                      (92 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (95 (invokevirtual (methodCP "contains" "clojure.lang.PersistentHashSet" ((class "java.lang.Object")) boolean))) 
                                      (98 (ifne 148)) ;;to TAG_4
                                      (101 (aload_0)) 
                                      (102 (getfield (fieldCP "indexlocals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.IPersistentMap")))) 
                                      (105 (iload_2)) 
                                      (106 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (109 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (112 (checkcast (class "clojure.lang.Compiler$LocalBinding"))) 
                                      (115 (astore_3)) 
                                      (116 (aload_3)) 
                                      (117 (ifnull 130)) ;;to TAG_5
                                      (120 (aload_3)) 
                                      (121 (getfield (fieldCP "init" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Compiler$Expr")))) 
                                      (124 (invokestatic (methodCP "maybePrimitiveType" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$Expr")) (class "java.lang.Class")))) 
                                      (127 (ifnonnull 148)) ;;to TAG_4
                                      (130 (aload_1)) ;;at TAG_5
                                      (131 (iconst_1)) 
                                      (132 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (135 (aload_1)) 
                                      (136 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (139 (bipush 54)) 
                                      (141 (invokevirtual (methodCP "getOpcode" "clojure.asm.Type" (int) int))) 
                                      (144 (iload_2)) 
                                      (145 (invokevirtual (methodCP "visitVarInsn" "clojure.asm.commons.GeneratorAdapter" (int int) void))) 
                                      (148 (iinc 2 1)) ;;at TAG_4
                                      (151 (goto 77)) ;;to TAG_6
                                      (154 (return)) ;;at TAG_3
                                      (endofcode 155))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *abstract*  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$ObjMethod-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$ObjMethod*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$ObjMethod" . "clojure.lang"))

