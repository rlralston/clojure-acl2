; Numbers$BigDecimalOps-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.Numbers$BigDecimalOps*
 (make-class-def
      '(class "clojure.lang.Numbers$BigDecimalOps"
            "clojure.lang.Numbers$OpsP"
            (constant_pool)
            (fields
                        (field "MATH_CONTEXT" (class "clojure.lang.Var") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.Numbers$OpsP" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "combine"
                              (parameters (class "clojure.lang.Numbers$Ops"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (aload_0))
                                      (2 (invokeinterface
					(methodCP "opsWith" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$BigDecimalOps")) (class "clojure.lang.Numbers$Ops")) 2))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$LongOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$DoubleOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "DOUBLE_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$DoubleOps"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$RatioOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$BigIntOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$BigDecimalOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isZero"
                              (parameters (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "java.math.BigDecimal"))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) 
                                      (6 (invokevirtual (methodCP "signum" "java.math.BigDecimal" () int))) 
                                      (9 (ifne 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isPos"
                              (parameters (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "java.math.BigDecimal"))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) 
                                      (6 (invokevirtual (methodCP "signum" "java.math.BigDecimal" () int))) 
                                      (9 (ifle 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isNeg"
                              (parameters (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "java.math.BigDecimal"))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) 
                                      (6 (invokevirtual (methodCP "signum" "java.math.BigDecimal" () int))) 
                                      (9 (ifge 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 41)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "MATH_CONTEXT" "clojure.lang.Numbers$BigDecimalOps" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.math.MathContext"))) 
                                      (9 (astore_3)) 
                                      (10 (aload_3)) 
                                      (11 (ifnonnull 28))  ;;to TAG_0
                                      (14 (aload_1)) 
                                      (15 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (18 (aload_2)) 
                                      (19 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (22 (invokevirtual (methodCP "add" "java.math.BigDecimal" ((class "java.math.BigDecimal")) (class "java.math.BigDecimal")))) 
                                      (25 (goto 40)) ;;to TAG_1
                                      (28 (aload_1)) ;;at TAG_0
                                      (29 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (32 (aload_2)) 
                                      (33 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (36 (aload_3)) 
                                      (37 (invokevirtual (methodCP "add" "java.math.BigDecimal" ((class "java.math.BigDecimal") (class "java.math.MathContext")) (class "java.math.BigDecimal")))) 
                                      (40 (areturn)) ;;at TAG_1
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 41)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "MATH_CONTEXT" "clojure.lang.Numbers$BigDecimalOps" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.math.MathContext"))) 
                                      (9 (astore_3)) 
                                      (10 (aload_3)) 
                                      (11 (ifnonnull 28))  ;;to TAG_0
                                      (14 (aload_1)) 
                                      (15 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (18 (aload_2)) 
                                      (19 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (22 (invokevirtual (methodCP "multiply" "java.math.BigDecimal" ((class "java.math.BigDecimal")) (class "java.math.BigDecimal")))) 
                                      (25 (goto 40)) ;;to TAG_1
                                      (28 (aload_1)) ;;at TAG_0
                                      (29 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (32 (aload_2)) 
                                      (33 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (36 (aload_3)) 
                                      (37 (invokevirtual (methodCP "multiply" "java.math.BigDecimal" ((class "java.math.BigDecimal") (class "java.math.MathContext")) (class "java.math.BigDecimal")))) 
                                      (40 (areturn)) ;;at TAG_1
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 41)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "MATH_CONTEXT" "clojure.lang.Numbers$BigDecimalOps" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.math.MathContext"))) 
                                      (9 (astore_3)) 
                                      (10 (aload_3)) 
                                      (11 (ifnonnull 28))  ;;to TAG_0
                                      (14 (aload_1)) 
                                      (15 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (18 (aload_2)) 
                                      (19 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (22 (invokevirtual (methodCP "divide" "java.math.BigDecimal" ((class "java.math.BigDecimal")) (class "java.math.BigDecimal")))) 
                                      (25 (goto 40)) ;;to TAG_1
                                      (28 (aload_1)) ;;at TAG_0
                                      (29 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (32 (aload_2)) 
                                      (33 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (36 (aload_3)) 
                                      (37 (invokevirtual (methodCP "divide" "java.math.BigDecimal" ((class "java.math.BigDecimal") (class "java.math.MathContext")) (class "java.math.BigDecimal")))) 
                                      (40 (areturn)) ;;at TAG_1
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 41)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "MATH_CONTEXT" "clojure.lang.Numbers$BigDecimalOps" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.math.MathContext"))) 
                                      (9 (astore_3)) 
                                      (10 (aload_3)) 
                                      (11 (ifnonnull 28))  ;;to TAG_0
                                      (14 (aload_1)) 
                                      (15 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (18 (aload_2)) 
                                      (19 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (22 (invokevirtual (methodCP "divideToIntegralValue" "java.math.BigDecimal" ((class "java.math.BigDecimal")) (class "java.math.BigDecimal")))) 
                                      (25 (goto 40)) ;;to TAG_1
                                      (28 (aload_1)) ;;at TAG_0
                                      (29 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (32 (aload_2)) 
                                      (33 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (36 (aload_3)) 
                                      (37 (invokevirtual (methodCP "divideToIntegralValue" "java.math.BigDecimal" ((class "java.math.BigDecimal") (class "java.math.MathContext")) (class "java.math.BigDecimal")))) 
                                      (40 (areturn)) ;;at TAG_1
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 41)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "MATH_CONTEXT" "clojure.lang.Numbers$BigDecimalOps" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.math.MathContext"))) 
                                      (9 (astore_3)) 
                                      (10 (aload_3)) 
                                      (11 (ifnonnull 28))  ;;to TAG_0
                                      (14 (aload_1)) 
                                      (15 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (18 (aload_2)) 
                                      (19 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (22 (invokevirtual (methodCP "remainder" "java.math.BigDecimal" ((class "java.math.BigDecimal")) (class "java.math.BigDecimal")))) 
                                      (25 (goto 40)) ;;to TAG_1
                                      (28 (aload_1)) ;;at TAG_0
                                      (29 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (32 (aload_2)) 
                                      (33 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (36 (aload_3)) 
                                      (37 (invokevirtual (methodCP "remainder" "java.math.BigDecimal" ((class "java.math.BigDecimal") (class "java.math.MathContext")) (class "java.math.BigDecimal")))) 
                                      (40 (areturn)) ;;at TAG_1
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokestatic
					(methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
					(methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal"))))
                                      (8 (invokevirtual
					(methodCP "equals" "java.math.BigDecimal" ((class "java.lang.Object")) boolean)))
                                      (11 (ireturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (4 (aload_2)) 
                                      (5 (invokestatic (methodCP "toBigDecimal" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigDecimal")))) 
                                      (8 (invokevirtual (methodCP "compareTo" "java.math.BigDecimal" ((class "java.math.BigDecimal")) int))) 
                                      (11 (ifge 18))  ;;to TAG_0
                                      (14 (iconst_1)) 
                                      (15 (goto 19)) ;;to TAG_1
                                      (18 (iconst_0)) ;;at TAG_0
                                      (19 (ireturn)) ;;at TAG_1
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "negate"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 33)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "MATH_CONTEXT" "clojure.lang.Numbers$BigDecimalOps" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.math.MathContext"))) 
                                      (9 (astore_2)) 
                                      (10 (aload_2)) 
                                      (11 (ifnonnull 24))  ;;to TAG_0
                                      (14 (aload_1)) 
                                      (15 (checkcast (class "java.math.BigDecimal"))) 
                                      (18 (invokevirtual (methodCP "negate" "java.math.BigDecimal" () (class "java.math.BigDecimal")))) 
                                      (21 (goto 32)) ;;to TAG_1
                                      (24 (aload_1)) ;;at TAG_0
                                      (25 (checkcast (class "java.math.BigDecimal"))) 
                                      (28 (aload_2)) 
                                      (29 (invokevirtual (methodCP "negate" "java.math.BigDecimal" ((class "java.math.MathContext")) (class "java.math.BigDecimal")))) 
                                      (32 (areturn)) ;;at TAG_1
                                      (endofcode 33))
                                   (Exceptions )
                                   (StackMap )))
                        (method "inc"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 38)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "MATH_CONTEXT" "clojure.lang.Numbers$BigDecimalOps" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.math.MathContext"))) 
                                      (9 (astore_2)) 
                                      (10 (aload_1)) 
                                      (11 (checkcast (class "java.math.BigDecimal"))) 
                                      (14 (astore_3)) 
                                      (15 (aload_2)) 
                                      (16 (ifnonnull 29))  ;;to TAG_0
                                      (19 (aload_3)) 
                                      (20 (getstatic (fieldCP "ONE" "java.math.BigDecimal" (class "java.math.BigDecimal")))) 
                                      (23 (invokevirtual (methodCP "add" "java.math.BigDecimal" ((class "java.math.BigDecimal")) (class "java.math.BigDecimal")))) 
                                      (26 (goto 37)) ;;to TAG_1
                                      (29 (aload_3)) ;;at TAG_0
                                      (30 (getstatic (fieldCP "ONE" "java.math.BigDecimal" (class "java.math.BigDecimal")))) 
                                      (33 (aload_2)) 
                                      (34 (invokevirtual (methodCP "add" "java.math.BigDecimal" ((class "java.math.BigDecimal") (class "java.math.MathContext")) (class "java.math.BigDecimal")))) 
                                      (37 (areturn)) ;;at TAG_1
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap )))
                        (method "dec"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 38)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "MATH_CONTEXT" "clojure.lang.Numbers$BigDecimalOps" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.math.MathContext"))) 
                                      (9 (astore_2)) 
                                      (10 (aload_1)) 
                                      (11 (checkcast (class "java.math.BigDecimal"))) 
                                      (14 (astore_3)) 
                                      (15 (aload_2)) 
                                      (16 (ifnonnull 29))  ;;to TAG_0
                                      (19 (aload_3)) 
                                      (20 (getstatic (fieldCP "ONE" "java.math.BigDecimal" (class "java.math.BigDecimal")))) 
                                      (23 (invokevirtual (methodCP "subtract" "java.math.BigDecimal" ((class "java.math.BigDecimal")) (class "java.math.BigDecimal")))) 
                                      (26 (goto 37)) ;;to TAG_1
                                      (29 (aload_3)) ;;at TAG_0
                                      (30 (getstatic (fieldCP "ONE" "java.math.BigDecimal" (class "java.math.BigDecimal")))) 
                                      (33 (aload_2)) 
                                      (34 (invokevirtual (methodCP "subtract" "java.math.BigDecimal" ((class "java.math.BigDecimal") (class "java.math.MathContext")) (class "java.math.BigDecimal")))) 
                                      (37 (areturn)) ;;at TAG_1
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 7)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "MATH_CONTEXT" "clojure.lang.RT" (class "clojure.lang.Var"))))
                                      (3 (putstatic (fieldCP "MATH_CONTEXT" "clojure.lang.Numbers$BigDecimalOps" (class "clojure.lang.Var"))))
                                      (6 (return))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Numbers$BigDecimalOps-class-table*
  (make-static-class-decls 
   *clojure.lang.Numbers$BigDecimalOps*))

(defconst *package-name-map* 
  ("clojure.lang.Numbers$BigDecimalOps" . "clojure.lang"))

