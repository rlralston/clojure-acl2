; Numbers$RatioOps-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.Numbers$RatioOps*
 (make-class-def
      '(class "clojure.lang.Numbers$RatioOps"
            "clojure.lang.Numbers$OpsP"
            (constant_pool
                        (LONG -1))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.Numbers$OpsP" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "combine"
                              (parameters (class "clojure.lang.Numbers$Ops"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (aload_0))
                                      (2 (invokeinterface
					(methodCP "opsWith" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$RatioOps")) (class "clojure.lang.Numbers$Ops")) 2))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$LongOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$DoubleOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "DOUBLE_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$DoubleOps"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$RatioOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$BigIntOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$BigDecimalOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "BIGDECIMAL_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigDecimalOps"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isZero"
                              (parameters (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "clojure.lang.Ratio"))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) 
                                      (6 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (9 (invokevirtual (methodCP "signum" "java.math.BigInteger" () int))) 
                                      (12 (ifne 19))  ;;to TAG_0
                                      (15 (iconst_1)) 
                                      (16 (goto 20)) ;;to TAG_1
                                      (19 (iconst_0)) ;;at TAG_0
                                      (20 (ireturn)) ;;at TAG_1
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isPos"
                              (parameters (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "clojure.lang.Ratio"))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) 
                                      (6 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (9 (invokevirtual (methodCP "signum" "java.math.BigInteger" () int))) 
                                      (12 (ifle 19))  ;;to TAG_0
                                      (15 (iconst_1)) 
                                      (16 (goto 20)) ;;to TAG_1
                                      (19 (iconst_0)) ;;at TAG_0
                                      (20 (ireturn)) ;;at TAG_1
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isNeg"
                              (parameters (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "clojure.lang.Ratio"))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) 
                                      (6 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (9 (invokevirtual (methodCP "signum" "java.math.BigInteger" () int))) 
                                      (12 (ifge 19))  ;;to TAG_0
                                      (15 (iconst_1)) 
                                      (16 (goto 20)) ;;to TAG_1
                                      (19 (iconst_0)) ;;at TAG_0
                                      (20 (ireturn)) ;;at TAG_1
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "normalizeRet"
                              (parameters (class "java.lang.Number") (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 64)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokestatic
					(methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio"))))
                                      (4 (astore_3))
                                      (5 (aload_2))
                                      (6 (invokestatic
					(methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio"))))
                                      (9 (astore 4))
                                      (11 (aload_0))
                                      (12 (aload 4))
                                      (14 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (17 (aload_3))
                                      (18 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (21 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (24 (aload_3))
                                      (25 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (28 (aload 4))
                                      (30 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (33 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (36 (invokevirtual
					(methodCP "add" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (39 (aload 4))
                                      (41 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (44 (aload_3))
                                      (45 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (48 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (51 (invokevirtual
					(methodCP "divide" "clojure.lang.Numbers$RatioOps" ((class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number"))))
                                      (54 (astore 5))
                                      (56 (aload 5))
                                      (58 (aload_1))
                                      (59 (aload_2))
                                      (60 (invokestatic
					(methodCP "normalizeRet" "clojure.lang.Numbers$RatioOps" ((class "java.lang.Number") (class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number"))))
                                      (63 (areturn))
                                      (endofcode 64))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 6) (code_length . 48)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokestatic
					(methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio"))))
                                      (4 (astore_3))
                                      (5 (aload_2))
                                      (6 (invokestatic
					(methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio"))))
                                      (9 (astore 4))
                                      (11 (aload 4))
                                      (13 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (16 (aload_3))
                                      (17 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (20 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (23 (aload 4))
                                      (25 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (28 (aload_3))
                                      (29 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (32 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (35 (invokestatic
					(methodCP "divide" "clojure.lang.Numbers" ((class "java.math.BigInteger") (class "java.math.BigInteger")) (class "java.lang.Number"))))
                                      (38 (astore 5))
                                      (40 (aload 5))
                                      (42 (aload_1))
                                      (43 (aload_2))
                                      (44 (invokestatic
					(methodCP "normalizeRet" "clojure.lang.Numbers$RatioOps" ((class "java.lang.Number") (class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number"))))
                                      (47 (areturn))
                                      (endofcode 48))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 6) (code_length . 48)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokestatic
					(methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio"))))
                                      (4 (astore_3))
                                      (5 (aload_2))
                                      (6 (invokestatic
					(methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio"))))
                                      (9 (astore 4))
                                      (11 (aload 4))
                                      (13 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (16 (aload_3))
                                      (17 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (20 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (23 (aload 4))
                                      (25 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (28 (aload_3))
                                      (29 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (32 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (35 (invokestatic
					(methodCP "divide" "clojure.lang.Numbers" ((class "java.math.BigInteger") (class "java.math.BigInteger")) (class "java.lang.Number"))))
                                      (38 (astore 5))
                                      (40 (aload 5))
                                      (42 (aload_1))
                                      (43 (aload_2))
                                      (44 (invokestatic
					(methodCP "normalizeRet" "clojure.lang.Numbers$RatioOps" ((class "java.lang.Number") (class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number"))))
                                      (47 (areturn))
                                      (endofcode 48))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 6) (code_length . 51)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokestatic
					(methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio"))))
                                      (4 (astore_3))
                                      (5 (aload_2))
                                      (6 (invokestatic
					(methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio"))))
                                      (9 (astore 4))
                                      (11 (aload_3))
                                      (12 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (15 (aload 4))
                                      (17 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (20 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (23 (aload_3))
                                      (24 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (27 (aload 4))
                                      (29 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (32 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (35 (invokevirtual
					(methodCP "divide" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (38 (astore 5))
                                      (40 (aload 5))
                                      (42 (invokestatic
					(methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt"))))
                                      (45 (aload_1))
                                      (46 (aload_2))
                                      (47 (invokestatic
					(methodCP "normalizeRet" "clojure.lang.Numbers$RatioOps" ((class "java.lang.Number") (class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number"))))
                                      (50 (areturn))
                                      (endofcode 51))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 7) (code_length . 60)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokestatic
					(methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio"))))
                                      (4 (astore_3))
                                      (5 (aload_2))
                                      (6 (invokestatic
					(methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio"))))
                                      (9 (astore 4))
                                      (11 (aload_3))
                                      (12 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (15 (aload 4))
                                      (17 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (20 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (23 (aload_3))
                                      (24 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (27 (aload 4))
                                      (29 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (32 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (35 (invokevirtual
					(methodCP "divide" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (38 (astore 5))
                                      (40 (aload_1))
                                      (41 (aload 5))
                                      (43 (aload_2))
                                      (44 (invokestatic
					(methodCP "multiply" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (47 (invokestatic
					(methodCP "minus" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (50 (astore 6))
                                      (52 (aload 6))
                                      (54 (aload_1))
                                      (55 (aload_2))
                                      (56 (invokestatic
					(methodCP "normalizeRet" "clojure.lang.Numbers$RatioOps" ((class "java.lang.Number") (class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number"))))
                                      (59 (areturn))
                                      (endofcode 60))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 47)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio")))) 
                                      (4 (astore_3)) 
                                      (5 (aload_2)) 
                                      (6 (invokestatic (methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio")))) 
                                      (9 (astore 4)) 
                                      (11 (aload_3)) 
                                      (12 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (15 (aload 4)) 
                                      (17 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (20 (invokevirtual (methodCP "equals" "java.math.BigInteger" ((class "java.lang.Object")) boolean))) 
                                      (23 (ifeq 45))  ;;to TAG_0
                                      (26 (aload_3)) 
                                      (27 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (30 (aload 4)) 
                                      (32 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (35 (invokevirtual (methodCP "equals" "java.math.BigInteger" ((class "java.lang.Object")) boolean))) 
                                      (38 (ifeq 45))  ;;to TAG_0
                                      (41 (iconst_1)) 
                                      (42 (goto 46)) ;;to TAG_1
                                      (45 (iconst_0)) ;;at TAG_0
                                      (46 (ireturn)) ;;at TAG_1
                                      (endofcode 47))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 39)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokestatic
					(methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio"))))
                                      (4 (astore_3))
                                      (5 (aload_2))
                                      (6 (invokestatic
					(methodCP "toRatio" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Ratio"))))
                                      (9 (astore 4))
                                      (11 (aload_3))
                                      (12 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (15 (aload 4))
                                      (17 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (20 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (23 (aload 4))
                                      (25 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (28 (aload_3))
                                      (29 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (32 (invokevirtual
					(methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (35 (invokestatic
					(methodCP "lt" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (38 (ireturn))
                                      (endofcode 39))
                                   (Exceptions )
                                   (StackMap )))
                        (method "negate"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 24)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (checkcast (class "clojure.lang.Ratio")))
                                      (4 (astore_2))
                                      (5 (new (class "clojure.lang.Ratio")))
                                      (8 (dup))
                                      (9 (aload_2))
                                      (10 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (13 (invokevirtual
					(methodCP "negate" "java.math.BigInteger" () (class "java.math.BigInteger"))))
                                      (16 (aload_2))
                                      (17 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (20 (invokespecial
					(methodCP "<init>" "clojure.lang.Ratio" ((class "java.math.BigInteger") (class "java.math.BigInteger")) void)))
                                      (23 (areturn))
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap )))
                        (method "inc"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (lconst_1))
                                      (2 (invokestatic
					(methodCP "add" "clojure.lang.Numbers" ((class "java.lang.Object") long) (class "java.lang.Number"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "dec"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (ldc2_w 0))      ;; LONG:: "-1"
                                      (4 (invokestatic
					(methodCP "add" "clojure.lang.Numbers" ((class "java.lang.Object") long) (class "java.lang.Number"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Numbers$RatioOps-class-table*
  (make-static-class-decls 
   *clojure.lang.Numbers$RatioOps*))

(defconst *package-name-map* 
  ("clojure.lang.Numbers$RatioOps" . "clojure.lang"))

