; PersistentHashMap$TransientHashMap-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentHashMap$TransientHashMap*
 (make-class-def
      '(class "clojure.lang.PersistentHashMap$TransientHashMap"
            "clojure.lang.ATransientMap"
            (constant_pool
                        (STRING  "Transient used by non-owner thread")
                        (STRING  "Transient used after persistent! call"))
            (fields
                        (field "edit" (class "java.util.concurrent.atomic.AtomicReference") (accessflags  *class* ) -1)
                        (field "root" (class "clojure.lang.PersistentHashMap$INode") (accessflags  *class* ) -1)
                        (field "count" int (accessflags  *class* ) -1)
                        (field "hasNull" boolean (accessflags  *class* ) -1)
                        (field "nullValue" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "leafFlag" (class "clojure.lang.Box") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.PersistentHashMap"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 31)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (new (class "java.util.concurrent.atomic.AtomicReference")))
                                      (4 (dup))
                                      (5 (invokestatic
					(methodCP "currentThread" "java.lang.Thread" () (class "java.lang.Thread"))))
                                      (8 (invokespecial
					(methodCP "<init>" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object")) void)))
                                      (11 (aload_1))
                                      (12 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode"))))
                                      (15 (aload_1))
                                      (16 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap" int)))
                                      (19 (aload_1))
                                      (20 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean)))
                                      (23 (aload_1))
                                      (24 (getfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap" (class "java.lang.Object"))))
                                      (27 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentHashMap$TransientHashMap" ((class "java.util.concurrent.atomic.AtomicReference") (class "clojure.lang.PersistentHashMap$INode") int boolean (class "java.lang.Object")) void)))
                                      (30 (return))
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") (class "clojure.lang.PersistentHashMap$INode") int boolean (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 44)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.ATransientMap" () void)))
                                      (4 (aload_0))
                                      (5 (new (class "clojure.lang.Box")))
                                      (8 (dup))
                                      (9 (aconst_null))
                                      (10 (invokespecial
					(methodCP "<init>" "clojure.lang.Box" ((class "java.lang.Object")) void)))
                                      (13 (putfield (fieldCP "leafFlag" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.Box"))))
                                      (16 (aload_0))
                                      (17 (aload_1))
                                      (18 (putfield (fieldCP "edit" "clojure.lang.PersistentHashMap$TransientHashMap" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (21 (aload_0))
                                      (22 (aload_2))
                                      (23 (putfield (fieldCP "root" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.PersistentHashMap$INode"))))
                                      (26 (aload_0))
                                      (27 (iload_3))
                                      (28 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap$TransientHashMap" int)))
                                      (31 (aload_0))
                                      (32 (iload 4))
                                      (34 (putfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap$TransientHashMap" boolean)))
                                      (37 (aload_0))
                                      (38 (aload 5))
                                      (40 (putfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap$TransientHashMap" (class "java.lang.Object"))))
                                      (43 (return))
                                      (endofcode 44))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doAssoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.ITransientMap"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 7) (max_locals . 4) (code_length . 122)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnonnull 41)) ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap$TransientHashMap" (class "java.lang.Object")))) 
                                      (8 (aload_2)) 
                                      (9 (if_acmpeq 17)) ;;to TAG_1
                                      (12 (aload_0)) 
                                      (13 (aload_2)) 
                                      (14 (putfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap$TransientHashMap" (class "java.lang.Object")))) 
                                      (17 (aload_0)) ;;at TAG_1
                                      (18 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap$TransientHashMap" boolean))) 
                                      (21 (ifne 39))  ;;to TAG_2
                                      (24 (aload_0)) 
                                      (25 (dup)) 
                                      (26 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$TransientHashMap" int))) 
                                      (29 (iconst_1)) 
                                      (30 (iadd)) 
                                      (31 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap$TransientHashMap" int))) 
                                      (34 (aload_0)) 
                                      (35 (iconst_1)) 
                                      (36 (putfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap$TransientHashMap" boolean))) 
                                      (39 (aload_0)) ;;at TAG_2
                                      (40 (areturn)) 
                                      (41 (aload_0)) ;;at TAG_0
                                      (42 (getfield (fieldCP "leafFlag" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.Box")))) 
                                      (45 (aconst_null)) 
                                      (46 (putfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (49 (aload_0)) 
                                      (50 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (53 (ifnonnull 62)) ;;to TAG_3
                                      (56 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap$BitmapIndexedNode" (class "clojure.lang.PersistentHashMap$BitmapIndexedNode")))) 
                                      (59 (goto 66)) ;;to TAG_4
                                      (62 (aload_0)) ;;at TAG_3
                                      (63 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (66 (aload_0)) ;;at TAG_4
                                      (67 (getfield (fieldCP "edit" "clojure.lang.PersistentHashMap$TransientHashMap" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (70 (iconst_0)) 
                                      (71 (aload_1)) 
                                      (72 (invokestatic (methodCP "hash" "clojure.lang.PersistentHashMap" ((class "java.lang.Object")) int))) 
                                      (75 (aload_1)) 
                                      (76 (aload_2)) 
                                      (77 (aload_0)) 
                                      (78 (getfield (fieldCP "leafFlag" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.Box")))) 
                                      (81 (invokeinterface (methodCP "assoc" "clojure.lang.PersistentHashMap$INode" ((class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")) 7)) 
                                      (86 (astore_3)) 
                                      (87 (aload_3)) 
                                      (88 (aload_0)) 
                                      (89 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (92 (if_acmpeq 100)) ;;to TAG_5
                                      (95 (aload_0)) 
                                      (96 (aload_3)) 
                                      (97 (putfield (fieldCP "root" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (100 (aload_0)) ;;at TAG_5
                                      (101 (getfield (fieldCP "leafFlag" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.Box")))) 
                                      (104 (getfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (107 (ifnull 120)) ;;to TAG_6
                                      (110 (aload_0)) 
                                      (111 (dup)) 
                                      (112 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$TransientHashMap" int))) 
                                      (115 (iconst_1)) 
                                      (116 (iadd)) 
                                      (117 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap$TransientHashMap" int))) 
                                      (120 (aload_0)) ;;at TAG_6
                                      (121 (areturn)) 
                                      (endofcode 122))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doWithout"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.ITransientMap"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 6) (max_locals . 3) (code_length . 111)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnonnull 35)) ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap$TransientHashMap" boolean))) 
                                      (8 (ifne 13)) ;;to TAG_1
                                      (11 (aload_0)) 
                                      (12 (areturn)) 
                                      (13 (aload_0)) ;;at TAG_1
                                      (14 (iconst_0)) 
                                      (15 (putfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap$TransientHashMap" boolean))) 
                                      (18 (aload_0)) 
                                      (19 (aconst_null)) 
                                      (20 (putfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap$TransientHashMap" (class "java.lang.Object")))) 
                                      (23 (aload_0)) 
                                      (24 (dup)) 
                                      (25 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$TransientHashMap" int))) 
                                      (28 (iconst_1)) 
                                      (29 (isub)) 
                                      (30 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap$TransientHashMap" int))) 
                                      (33 (aload_0)) 
                                      (34 (areturn)) 
                                      (35 (aload_0)) ;;at TAG_0
                                      (36 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (39 (ifnonnull 44))  ;;to TAG_2
                                      (42 (aload_0)) 
                                      (43 (areturn)) 
                                      (44 (aload_0)) ;;at TAG_2
                                      (45 (getfield (fieldCP "leafFlag" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.Box")))) 
                                      (48 (aconst_null)) 
                                      (49 (putfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (52 (aload_0)) 
                                      (53 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (56 (aload_0)) 
                                      (57 (getfield (fieldCP "edit" "clojure.lang.PersistentHashMap$TransientHashMap" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (60 (iconst_0)) 
                                      (61 (aload_1)) 
                                      (62 (invokestatic (methodCP "hash" "clojure.lang.PersistentHashMap" ((class "java.lang.Object")) int))) 
                                      (65 (aload_1)) 
                                      (66 (aload_0)) 
                                      (67 (getfield (fieldCP "leafFlag" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.Box")))) 
                                      (70 (invokeinterface (methodCP "without" "clojure.lang.PersistentHashMap$INode" ((class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")) 6)) 
                                      (75 (astore_2)) 
                                      (76 (aload_2)) 
                                      (77 (aload_0)) 
                                      (78 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (81 (if_acmpeq 89)) ;;to TAG_3
                                      (84 (aload_0)) 
                                      (85 (aload_2)) 
                                      (86 (putfield (fieldCP "root" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (89 (aload_0)) ;;at TAG_3
                                      (90 (getfield (fieldCP "leafFlag" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.Box")))) 
                                      (93 (getfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (96 (ifnull 109)) ;;to TAG_4
                                      (99 (aload_0)) 
                                      (100 (dup)) 
                                      (101 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$TransientHashMap" int))) 
                                      (104 (iconst_1)) 
                                      (105 (isub)) 
                                      (106 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap$TransientHashMap" int))) 
                                      (109 (aload_0)) ;;at TAG_4
                                      (110 (areturn)) 
                                      (endofcode 111))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doPersistent"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 6) (max_locals . 1) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "edit" "clojure.lang.PersistentHashMap$TransientHashMap" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (4 (aconst_null))
                                      (5 (invokevirtual
					(methodCP "set" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object")) void)))
                                      (8 (new (class "clojure.lang.PersistentHashMap")))
                                      (11 (dup))
                                      (12 (aload_0))
                                      (13 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$TransientHashMap" int)))
                                      (16 (aload_0))
                                      (17 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.PersistentHashMap$INode"))))
                                      (20 (aload_0))
                                      (21 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap$TransientHashMap" boolean)))
                                      (24 (aload_0))
                                      (25 (getfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap$TransientHashMap" (class "java.lang.Object"))))
                                      (28 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentHashMap" (int (class "clojure.lang.PersistentHashMap$INode") boolean (class "java.lang.Object")) void)))
                                      (31 (areturn))
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doValAt"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 44)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnonnull 18)) ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap$TransientHashMap" boolean))) 
                                      (8 (ifeq 16)) ;;to TAG_1
                                      (11 (aload_0)) 
                                      (12 (getfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap$TransientHashMap" (class "java.lang.Object")))) 
                                      (15 (areturn)) 
                                      (16 (aload_2)) ;;at TAG_1
                                      (17 (areturn)) 
                                      (18 (aload_0)) ;;at TAG_0
                                      (19 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (22 (ifnonnull 27))  ;;to TAG_2
                                      (25 (aload_2)) 
                                      (26 (areturn)) 
                                      (27 (aload_0)) ;;at TAG_2
                                      (28 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap$TransientHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (31 (iconst_0)) 
                                      (32 (aload_1)) 
                                      (33 (invokestatic (methodCP "hash" "clojure.lang.PersistentHashMap" ((class "java.lang.Object")) int))) 
                                      (36 (aload_1)) 
                                      (37 (aload_2)) 
                                      (38 (invokeinterface (methodCP "find" "clojure.lang.PersistentHashMap$INode" (int int (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (43 (areturn)) 
                                      (endofcode 44))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doCount"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$TransientHashMap" int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "ensureEditable"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 43)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "edit" "clojure.lang.PersistentHashMap$TransientHashMap" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (4 (invokevirtual (methodCP "get" "java.util.concurrent.atomic.AtomicReference" () (class "java.lang.Object")))) 
                                      (7 (checkcast (class "java.lang.Thread"))) 
                                      (10 (astore_1)) 
                                      (11 (aload_1)) 
                                      (12 (invokestatic (methodCP "currentThread" "java.lang.Thread" () (class "java.lang.Thread")))) 
                                      (15 (if_acmpne 19))  ;;to TAG_0
                                      (18 (return)) 
                                      (19 (aload_1)) ;;at TAG_0
                                      (20 (ifnull 33)) ;;to TAG_1
                                      (23 (new (class "java.lang.IllegalAccessError"))) 
                                      (26 (dup)) 
                                      (27 (ldc 0)) ;;STRING:: "Transient used by non-owner thread"
                                      (29 (invokespecial (methodCP "<init>" "java.lang.IllegalAccessError" ((class "java.lang.String")) void))) 
                                      (32 (athrow)) 
                                      (33 (new (class "java.lang.IllegalAccessError"))) ;;at TAG_1
                                      (36 (dup)) 
                                      (37 (ldc 1)) ;;STRING:: "Transient used after persistent! call"
                                      (39 (invokespecial (methodCP "<init>" "java.lang.IllegalAccessError" ((class "java.lang.String")) void))) 
                                      (42 (athrow)) 
                                      (endofcode 43))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentHashMap$TransientHashMap-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentHashMap$TransientHashMap*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentHashMap$TransientHashMap" . "clojure.lang"))

