; Compiler$NewInstanceMethod-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$NewInstanceMethod*
 (make-class-def
      '(class "clojure.lang.Compiler$NewInstanceMethod"
            "clojure.lang.Compiler$ObjMethod"
            (constant_pool
                        (STRING  "Must supply at least one argument for \nthis\n in: ")
                        (STRING  "params must be Symbols")
                        (STRING  "Must hint overloaded method: ")
                        (STRING  "Can\nt find matching overloaded method: ")
                        (STRING  "Mismatched return type: ")
                        (STRING  ", expected: ")
                        (STRING  ", had: ")
                        (STRING  "Can\nt find matching method: ")
                        (STRING  ", leave off hints for auto match.")
                        (STRING  "Can\nt define method not in interfaces: ")
                        (STRING  "this")
                        (STRING  "dummy_this_dlskjsdfower"))
            (fields
                        (field "name" (class "java.lang.String") (accessflags  *class* ) -1)
                        (field "argTypes" (array (class "clojure.asm.Type")) (accessflags  *class* ) -1)
                        (field "retType" (class "clojure.asm.Type") (accessflags  *class* ) -1)
                        (field "retClass" (class "java.lang.Class") (accessflags  *class* ) -1)
                        (field "exclasses" (array (class "java.lang.Class")) (accessflags  *class* ) -1)
                        (field "dummyThis" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "parms" (class "clojure.lang.IPersistentVector") (accessflags  *class*  *private* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.lang.Compiler$ObjMethod"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokespecial
					(methodCP "<init>" "clojure.lang.Compiler$ObjMethod" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.lang.Compiler$ObjMethod")) void)))
                                      (6 (return))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "numParams"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "argLocals" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.PersistentVector"))))
                                      (4 (invokevirtual
					(methodCP "count" "clojure.lang.PersistentVector" () int)))
                                      (7 (ireturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getMethodName"
                              (parameters )
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "name" "clojure.lang.Compiler$NewInstanceMethod" (class "java.lang.String"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getReturnType"
                              (parameters )
                              (returntype . (class "clojure.asm.Type"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "retType" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.asm.Type"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getArgTypes"
                              (parameters )
                              (returntype . (array (class "clojure.asm.Type")))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "argTypes" "clojure.lang.Compiler$NewInstanceMethod" (array (class "clojure.asm.Type")))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "msig"
                              (parameters (class "java.lang.String") (array (class "java.lang.Class")))
                              (returntype . (class "clojure.lang.IPersistentVector"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 19)
                                   (parsedcode
                                      (0 (iconst_2))
                                      (1 (anewarray (class "java.lang.Object")))
                                      (4 (dup))
                                      (5 (iconst_0))
                                      (6 (aload_0))
                                      (7 (aastore))
                                      (8 (dup))
                                      (9 (iconst_1))
                                      (10 (aload_1))
                                      (11 (invokestatic
					(methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq"))))
                                      (14 (aastore))
                                      (15 (invokestatic
					(methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector"))))
                                      (18 (areturn))
                                      (endofcode 19))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.lang.ISeq") (class "clojure.lang.Symbol") (class "java.util.Map"))
                              (returntype . (class "clojure.lang.Compiler$NewInstanceMethod"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 22) (code_length . 1167)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.Compiler$NewInstanceMethod"))) 
                                      (3 (dup)) 
                                      (4 (aload_0)) 
                                      (5 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (8 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (11 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (14 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$NewInstanceMethod" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.lang.Compiler$ObjMethod")) void))) 
                                      (17 (astore 4)) 
                                      (19 (aload_1)) 
                                      (20 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (23 (checkcast (class "clojure.lang.Symbol"))) 
                                      (26 (astore 5)) 
                                      (28 (aconst_null)) 
                                      (29 (aload 5)) 
                                      (31 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (34 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (37 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (40 (aload 5)) 
                                      (42 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (45 (invokevirtual (methodCP "withMeta" "clojure.lang.Symbol" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")))) 
                                      (48 (checkcast (class "clojure.lang.Symbol"))) 
                                      (51 (astore 6)) 
                                      (53 (aload_1)) 
                                      (54 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (57 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (60 (astore 7)) 
                                      (62 (aload 7)) 
                                      (64 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (69 (ifne 100)) ;;to TAG_0
                                      (72 (new (class "java.lang.IllegalArgumentException"))) 
                                      (75 (dup)) 
                                      (76 (new (class "java.lang.StringBuilder"))) 
                                      (79 (dup)) 
                                      (80 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (83 (ldc 0)) ;;STRING:: "Must supply at least one argument for \nthis\n in: "
                                      (85 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (88 (aload 5)) 
                                      (90 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (93 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (96 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (99 (athrow)) 
                                      (100 (aload 7)) ;;at TAG_0
                                      (102 (iconst_0)) 
                                      (103 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (108 (checkcast (class "clojure.lang.Symbol"))) 
                                      (111 (astore 8)) 
                                      (113 (aload 7)) 
                                      (115 (iconst_1)) 
                                      (116 (aload 7)) 
                                      (118 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (123 (invokestatic (methodCP "subvec" "clojure.lang.RT" ((class "clojure.lang.IPersistentVector") int int) (class "clojure.lang.IPersistentVector")))) 
                                      (126 (astore 7)) 
                                      (128 (aload_1)) 
                                      (129 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (132 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (135 (astore 9)) 
                                      (137 (aload 4)) ;;at TAG_26
                                      (139 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (142 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (145 (checkcast (class "java.lang.Integer"))) 
                                      (148 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (151 (putfield (fieldCP "line" "clojure.lang.Compiler$NewInstanceMethod" int))) 
                                      (154 (aload 4)) 
                                      (156 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (159 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (162 (checkcast (class "java.lang.Integer"))) 
                                      (165 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (168 (putfield (fieldCP "column" "clojure.lang.Compiler$NewInstanceMethod" int))) 
                                      (171 (new (class "clojure.lang.Compiler$PathNode"))) 
                                      (174 (dup)) 
                                      (175 (getstatic (fieldCP "PATH" "clojure.lang.Compiler$PATHTYPE" (class "clojure.lang.Compiler$PATHTYPE")))) 
                                      (178 (getstatic (fieldCP "CLEAR_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (181 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (184 (checkcast (class "clojure.lang.Compiler$PathNode"))) 
                                      (187 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$PathNode" ((class "clojure.lang.Compiler$PATHTYPE") (class "clojure.lang.Compiler$PathNode")) void))) 
                                      (190 (astore 10)) 
                                      (192 (bipush 14)) 
                                      (194 (anewarray (class "java.lang.Object"))) 
                                      (197 (dup)) 
                                      (198 (iconst_0)) 
                                      (199 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (202 (aastore)) 
                                      (203 (dup)) 
                                      (204 (iconst_1)) 
                                      (205 (aload 4)) 
                                      (207 (aastore)) 
                                      (208 (dup)) 
                                      (209 (iconst_2)) 
                                      (210 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (213 (aastore)) 
                                      (214 (dup)) 
                                      (215 (iconst_3)) 
                                      (216 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (219 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (222 (aastore)) 
                                      (223 (dup)) 
                                      (224 (iconst_4)) 
                                      (225 (getstatic (fieldCP "LOOP_LOCALS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (228 (aastore)) 
                                      (229 (dup)) 
                                      (230 (iconst_5)) 
                                      (231 (aconst_null)) 
                                      (232 (aastore)) 
                                      (233 (dup)) 
                                      (234 (bipush 6)) 
                                      (236 (getstatic (fieldCP "NEXT_LOCAL_NUM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (239 (aastore)) 
                                      (240 (dup)) 
                                      (241 (bipush 7)) 
                                      (243 (iconst_0)) 
                                      (244 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (247 (aastore)) 
                                      (248 (dup)) 
                                      (249 (bipush 8)) 
                                      (251 (getstatic (fieldCP "CLEAR_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (254 (aastore)) 
                                      (255 (dup)) 
                                      (256 (bipush 9)) 
                                      (258 (aload 10)) 
                                      (260 (aastore)) 
                                      (261 (dup)) 
                                      (262 (bipush 10)) 
                                      (264 (getstatic (fieldCP "CLEAR_ROOT" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (267 (aastore)) 
                                      (268 (dup)) 
                                      (269 (bipush 11)) 
                                      (271 (aload 10)) 
                                      (273 (aastore)) 
                                      (274 (dup)) 
                                      (275 (bipush 12)) 
                                      (277 (getstatic (fieldCP "CLEAR_SITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (280 (aastore)) 
                                      (281 (dup)) 
                                      (282 (bipush 13)) 
                                      (284 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (287 (aastore)) 
                                      (288 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (291 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (294 (aload 8)) 
                                      (296 (ifnull 322)) ;;to TAG_1
                                      (299 (aload 8)) 
                                      (301 (ifnonnull 310)) ;;to TAG_2
                                      (304 (getstatic (fieldCP "dummyThis" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.Symbol")))) 
                                      (307 (goto 312)) ;;to TAG_3
                                      (310 (aload 8)) ;;at TAG_2
                                      (312 (aload_2)) ;;at TAG_3
                                      (313 (aconst_null)) 
                                      (314 (iconst_0)) 
                                      (315 (invokestatic (methodCP "access$900" "clojure.lang.Compiler" ((class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") boolean) (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (318 (pop)) 
                                      (319 (goto 326)) ;;to TAG_4
                                      (322 (invokestatic (methodCP "access$800" "clojure.lang.Compiler" () int))) ;;at TAG_1
                                      (325 (pop)) 
                                      (326 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) ;;at TAG_4
                                      (329 (astore 11)) 
                                      (331 (aload 4)) 
                                      (333 (aload 6)) 
                                      (335 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (338 (invokestatic (methodCP "tagClass" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (341 (putfield (fieldCP "retClass" "clojure.lang.Compiler$NewInstanceMethod" (class "java.lang.Class")))) 
                                      (344 (aload 4)) 
                                      (346 (aload 7)) 
                                      (348 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (353 (anewarray (class "clojure.asm.Type"))) 
                                      (356 (putfield (fieldCP "argTypes" "clojure.lang.Compiler$NewInstanceMethod" (array (class "clojure.asm.Type"))))) 
                                      (359 (aload 6)) 
                                      (361 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (364 (ifnull 371)) ;;to TAG_5
                                      (367 (iconst_1)) 
                                      (368 (goto 372)) ;;to TAG_6
                                      (371 (iconst_0)) ;;at TAG_5
                                      (372 (istore 12)) ;;at TAG_6
                                      (374 (aload 7)) 
                                      (376 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (381 (anewarray (class "java.lang.Class"))) 
                                      (384 (astore 13)) 
                                      (386 (aload 7)) 
                                      (388 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (393 (anewarray (class "clojure.lang.Symbol"))) 
                                      (396 (astore 14)) 
                                      (398 (iconst_0)) 
                                      (399 (istore 15)) 
                                      (401 (iload 15)) ;;at TAG_11
                                      (403 (aload 7)) 
                                      (405 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (410 (if_icmpge 512)) ;;to TAG_7
                                      (413 (aload 7)) 
                                      (415 (iload 15)) 
                                      (417 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (422 (instanceof (class "clojure.lang.Symbol"))) 
                                      (425 (ifne 438)) ;;to TAG_8
                                      (428 (new (class "java.lang.IllegalArgumentException"))) 
                                      (431 (dup)) 
                                      (432 (ldc 1)) ;;STRING:: "params must be Symbols"
                                      (434 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (437 (athrow)) 
                                      (438 (aload 7)) ;;at TAG_8
                                      (440 (iload 15)) 
                                      (442 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (447 (checkcast (class "clojure.lang.Symbol"))) 
                                      (450 (astore 16)) 
                                      (452 (aload 16)) 
                                      (454 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (457 (astore 17)) 
                                      (459 (aload 17)) 
                                      (461 (ifnull 467)) ;;to TAG_9
                                      (464 (iconst_1)) 
                                      (465 (istore 12)) 
                                      (467 (aload 16)) ;;at TAG_9
                                      (469 (invokevirtual (methodCP "getNamespace" "clojure.lang.Symbol" () (class "java.lang.String")))) 
                                      (472 (ifnull 485)) ;;to TAG_10
                                      (475 (aload 16)) 
                                      (477 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (480 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (483 (astore 16)) 
                                      (485 (aload 17)) ;;at TAG_10
                                      (487 (invokestatic (methodCP "tagClass" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (490 (astore 18)) 
                                      (492 (aload 13)) 
                                      (494 (iload 15)) 
                                      (496 (aload 18)) 
                                      (498 (aastore)) 
                                      (499 (aload 14)) 
                                      (501 (iload 15)) 
                                      (503 (aload 16)) 
                                      (505 (aastore)) 
                                      (506 (iinc 15 1)) 
                                      (509 (goto 401)) ;;to TAG_11
                                      (512 (aload 6)) ;;at TAG_7
                                      (514 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (517 (aload 7)) 
                                      (519 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (524 (aload_3)) 
                                      (525 (invokestatic (methodCP "findMethodsWithNameAndArity" "clojure.lang.Compiler$NewInstanceMethod" ((class "java.lang.String") int (class "java.util.Map")) (class "java.util.Map")))) 
                                      (528 (astore 15)) 
                                      (530 (aload 6)) 
                                      (532 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (535 (aload 13)) 
                                      (537 (invokestatic (methodCP "msig" "clojure.lang.Compiler$NewInstanceMethod" ((class "java.lang.String") (array (class "java.lang.Class"))) (class "clojure.lang.IPersistentVector")))) 
                                      (540 (astore 16)) 
                                      (542 (aconst_null)) 
                                      (543 (astore 17)) 
                                      (545 (aload 15)) 
                                      (547 (invokeinterface (methodCP "size" "java.util.Map" () int) 1)) 
                                      (552 (ifle 906)) ;;to TAG_12
                                      (555 (aload 15)) 
                                      (557 (invokeinterface (methodCP "size" "java.util.Map" () int) 1)) 
                                      (562 (iconst_1)) 
                                      (563 (if_icmple 728))  ;;to TAG_13
                                      (566 (iload 12)) 
                                      (568 (ifne 602)) ;;to TAG_14
                                      (571 (new (class "java.lang.IllegalArgumentException"))) 
                                      (574 (dup)) 
                                      (575 (new (class "java.lang.StringBuilder"))) 
                                      (578 (dup)) 
                                      (579 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (582 (ldc 2)) ;;STRING:: "Must hint overloaded method: "
                                      (584 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (587 (aload 6)) 
                                      (589 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (592 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (595 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (598 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (601 (athrow)) 
                                      (602 (aload 15)) ;;at TAG_14
                                      (604 (aload 16)) 
                                      (606 (invokeinterface (methodCP "get" "java.util.Map" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (611 (checkcast (class "java.lang.reflect.Method"))) 
                                      (614 (astore 17)) 
                                      (616 (aload 17)) 
                                      (618 (ifnonnull 652)) ;;to TAG_15
                                      (621 (new (class "java.lang.IllegalArgumentException"))) 
                                      (624 (dup)) 
                                      (625 (new (class "java.lang.StringBuilder"))) 
                                      (628 (dup)) 
                                      (629 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (632 (ldc 3)) ;;STRING:: "Can\nt find matching overloaded method: "
                                      (634 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (637 (aload 6)) 
                                      (639 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (642 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (645 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (648 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (651 (athrow)) 
                                      (652 (aload 17)) ;;at TAG_15
                                      (654 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (657 (aload 4)) 
                                      (659 (getfield (fieldCP "retClass" "clojure.lang.Compiler$NewInstanceMethod" (class "java.lang.Class")))) 
                                      (662 (if_acmpeq 937)) ;;to TAG_16
                                      (665 (new (class "java.lang.IllegalArgumentException"))) 
                                      (668 (dup)) 
                                      (669 (new (class "java.lang.StringBuilder"))) 
                                      (672 (dup)) 
                                      (673 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (676 (ldc 4)) ;;STRING:: "Mismatched return type: "
                                      (678 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (681 (aload 6)) 
                                      (683 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (686 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (689 (ldc 5)) ;;STRING:: ", expected: "
                                      (691 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (694 (aload 17)) 
                                      (696 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (699 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (702 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (705 (ldc 6)) ;;STRING:: ", had: "
                                      (707 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (710 (aload 4)) 
                                      (712 (getfield (fieldCP "retClass" "clojure.lang.Compiler$NewInstanceMethod" (class "java.lang.Class")))) 
                                      (715 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (718 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (721 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (724 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (727 (athrow)) 
                                      (728 (iload 12)) ;;at TAG_13
                                      (730 (ifeq 864)) ;;to TAG_17
                                      (733 (aload 15)) 
                                      (735 (aload 16)) 
                                      (737 (invokeinterface (methodCP "get" "java.util.Map" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (742 (checkcast (class "java.lang.reflect.Method"))) 
                                      (745 (astore 17)) 
                                      (747 (aload 17)) 
                                      (749 (ifnonnull 788)) ;;to TAG_18
                                      (752 (new (class "java.lang.IllegalArgumentException"))) 
                                      (755 (dup)) 
                                      (756 (new (class "java.lang.StringBuilder"))) 
                                      (759 (dup)) 
                                      (760 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (763 (ldc 7)) ;;STRING:: "Can\nt find matching method: "
                                      (765 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (768 (aload 6)) 
                                      (770 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (773 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (776 (ldc 8)) ;;STRING:: ", leave off hints for auto match."
                                      (778 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (781 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (784 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (787 (athrow)) 
                                      (788 (aload 17)) ;;at TAG_18
                                      (790 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (793 (aload 4)) 
                                      (795 (getfield (fieldCP "retClass" "clojure.lang.Compiler$NewInstanceMethod" (class "java.lang.Class")))) 
                                      (798 (if_acmpeq 937)) ;;to TAG_16
                                      (801 (new (class "java.lang.IllegalArgumentException"))) 
                                      (804 (dup)) 
                                      (805 (new (class "java.lang.StringBuilder"))) 
                                      (808 (dup)) 
                                      (809 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (812 (ldc 4)) ;;STRING:: "Mismatched return type: "
                                      (814 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (817 (aload 6)) 
                                      (819 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (822 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (825 (ldc 5)) ;;STRING:: ", expected: "
                                      (827 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (830 (aload 17)) 
                                      (832 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (835 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (838 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (841 (ldc 6)) ;;STRING:: ", had: "
                                      (843 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (846 (aload 4)) 
                                      (848 (getfield (fieldCP "retClass" "clojure.lang.Compiler$NewInstanceMethod" (class "java.lang.Class")))) 
                                      (851 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (854 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (857 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (860 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (863 (athrow)) 
                                      (864 (aload 15)) ;;at TAG_17
                                      (866 (invokeinterface (methodCP "values" "java.util.Map" () (class "java.util.Collection")) 1)) 
                                      (871 (invokeinterface (methodCP "iterator" "java.util.Collection" () (class "java.util.Iterator")) 1)) 
                                      (876 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (881 (checkcast (class "java.lang.reflect.Method"))) 
                                      (884 (astore 17)) 
                                      (886 (aload 4)) 
                                      (888 (aload 17)) 
                                      (890 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (893 (putfield (fieldCP "retClass" "clojure.lang.Compiler$NewInstanceMethod" (class "java.lang.Class")))) 
                                      (896 (aload 17)) 
                                      (898 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Method" () (array (class "java.lang.Class"))))) 
                                      (901 (astore 13)) 
                                      (903 (goto 937)) ;;to TAG_16
                                      (906 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_12
                                      (909 (dup)) 
                                      (910 (new (class "java.lang.StringBuilder"))) 
                                      (913 (dup)) 
                                      (914 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (917 (ldc 9)) ;;STRING:: "Can\nt define method not in interfaces: "
                                      (919 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (922 (aload 6)) 
                                      (924 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (927 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (930 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (933 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (936 (athrow)) 
                                      (937 (aload 4)) ;;at TAG_16
                                      (939 (aload 4)) 
                                      (941 (getfield (fieldCP "retClass" "clojure.lang.Compiler$NewInstanceMethod" (class "java.lang.Class")))) 
                                      (944 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (947 (putfield (fieldCP "retType" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.asm.Type")))) 
                                      (950 (aload 4)) 
                                      (952 (aload 17)) 
                                      (954 (invokevirtual (methodCP "getExceptionTypes" "java.lang.reflect.Method" () (array (class "java.lang.Class"))))) 
                                      (957 (putfield (fieldCP "exclasses" "clojure.lang.Compiler$NewInstanceMethod" (array (class "java.lang.Class"))))) 
                                      (960 (iconst_0)) 
                                      (961 (istore 18)) 
                                      (963 (iload 18)) ;;at TAG_20
                                      (965 (aload 7)) 
                                      (967 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (972 (if_icmpge 1032)) ;;to TAG_19
                                      (975 (aload 14)) 
                                      (977 (iload 18)) 
                                      (979 (aaload)) 
                                      (980 (aconst_null)) 
                                      (981 (new (class "clojure.lang.Compiler$MethodParamExpr"))) 
                                      (984 (dup)) 
                                      (985 (aload 13)) 
                                      (987 (iload 18)) 
                                      (989 (aaload)) 
                                      (990 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$MethodParamExpr" ((class "java.lang.Class")) void))) 
                                      (993 (iconst_1)) 
                                      (994 (invokestatic (methodCP "access$900" "clojure.lang.Compiler" ((class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") boolean) (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (997 (astore 19)) 
                                      (999 (aload 11)) 
                                      (1001 (iload 18)) 
                                      (1003 (aload 19)) 
                                      (1005 (invokevirtual (methodCP "assocN" "clojure.lang.PersistentVector" (int (class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (1008 (astore 11)) 
                                      (1010 (aload 4)) 
                                      (1012 (getfield (fieldCP "argTypes" "clojure.lang.Compiler$NewInstanceMethod" (array (class "clojure.asm.Type"))))) 
                                      (1015 (iload 18)) 
                                      (1017 (aload 13)) 
                                      (1019 (iload 18)) 
                                      (1021 (aaload)) 
                                      (1022 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (1025 (aastore)) 
                                      (1026 (iinc 18 1)) 
                                      (1029 (goto 963)) ;;to TAG_20
                                      (1032 (iconst_0)) ;;at TAG_19
                                      (1033 (istore 18)) 
                                      (1035 (iload 18)) ;;at TAG_24
                                      (1037 (aload 7)) 
                                      (1039 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (1044 (if_icmpge 1079)) ;;to TAG_21
                                      (1047 (aload 13)) 
                                      (1049 (iload 18)) 
                                      (1051 (aaload)) 
                                      (1052 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (1055 (if_acmpeq 1069)) ;;to TAG_22
                                      (1058 (aload 13)) 
                                      (1060 (iload 18)) 
                                      (1062 (aaload)) 
                                      (1063 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (1066 (if_acmpne 1073)) ;;to TAG_23
                                      (1069 (invokestatic (methodCP "access$800" "clojure.lang.Compiler" () int))) ;;at TAG_22
                                      (1072 (pop)) 
                                      (1073 (iinc 18 1)) ;;at TAG_23
                                      (1076 (goto 1035)) ;;to TAG_24
                                      (1079 (getstatic (fieldCP "LOOP_LOCALS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_21
                                      (1082 (aload 11)) 
                                      (1084 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (1087 (pop)) 
                                      (1088 (aload 4)) 
                                      (1090 (aload 6)) 
                                      (1092 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (1095 (putfield (fieldCP "name" "clojure.lang.Compiler$NewInstanceMethod" (class "java.lang.String")))) 
                                      (1098 (aload 4)) 
                                      (1100 (aload 6)) 
                                      (1102 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (1105 (putfield (fieldCP "methodMeta" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.IPersistentMap")))) 
                                      (1108 (aload 4)) 
                                      (1110 (aload 7)) 
                                      (1112 (putfield (fieldCP "parms" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.IPersistentVector")))) 
                                      (1115 (aload 4)) 
                                      (1117 (aload 11)) 
                                      (1119 (putfield (fieldCP "argLocals" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.PersistentVector")))) 
                                      (1122 (aload 4)) 
                                      (1124 (new (class "clojure.lang.Compiler$BodyExpr$Parser"))) 
                                      (1127 (dup)) 
                                      (1128 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$BodyExpr$Parser" () void))) 
                                      (1131 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (1134 (aload 9)) 
                                      (1136 (invokevirtual (methodCP "parse" "clojure.lang.Compiler$BodyExpr$Parser" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (1139 (putfield (fieldCP "body" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.Compiler$Expr")))) 
                                      (1142 (aload 4)) 
                                      (1144 (astore 18)) 
                                      (1146 (jsr 1160)) ;;to TAG_25
                                      (1149 (aload 18)) ;;at TAG_27
                                      (1151 (areturn)) 
                                      (1152 (astore 20)) ;;at TAG_28
                                      (1154 (jsr 1160)) ;;to TAG_25
                                      (1157 (aload 20)) ;;at TAG_29
                                      (1159 (athrow)) 
                                      (1160 (astore 21)) ;;at TAG_25
                                      (1162 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (1165 (ret 21)) 
                                      (endofcode 1167))
                                   (Exceptions 
                                     (handler 137 1149  1152 (class "java.lang.Throwable"))
                                     (handler 1152 1157  1152 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "findMethodsWithNameAndArity"
                              (parameters (class "java.lang.String") int (class "java.util.Map"))
                              (returntype . (class "java.util.Map"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 8) (code_length . 107)
                                   (parsedcode
                                      (0 (new (class "java.util.HashMap"))) 
                                      (3 (dup)) 
                                      (4 (invokespecial (methodCP "<init>" "java.util.HashMap" () void))) 
                                      (7 (astore_3)) 
                                      (8 (aload_2)) 
                                      (9 (invokeinterface (methodCP "entrySet" "java.util.Map" () (class "java.util.Set")) 1)) 
                                      (14 (invokeinterface (methodCP "iterator" "java.util.Set" () (class "java.util.Iterator")) 1)) 
                                      (19 (astore 4)) 
                                      (21 (aload 4)) ;;at TAG_2
                                      (23 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (28 (ifeq 105)) ;;to TAG_0
                                      (31 (aload 4)) 
                                      (33 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (38 (astore 5)) 
                                      (40 (aload 5)) 
                                      (42 (checkcast (class "java.util.Map$Entry"))) 
                                      (45 (astore 6)) 
                                      (47 (aload 6)) 
                                      (49 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (54 (checkcast (class "java.lang.reflect.Method"))) 
                                      (57 (astore 7)) 
                                      (59 (aload_0)) 
                                      (60 (aload 7)) 
                                      (62 (invokevirtual (methodCP "getName" "java.lang.reflect.Method" () (class "java.lang.String")))) 
                                      (65 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (68 (ifeq 102)) ;;to TAG_1
                                      (71 (aload 7)) 
                                      (73 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Method" () (array (class "java.lang.Class"))))) 
                                      (76 (arraylength)) 
                                      (77 (iload_1)) 
                                      (78 (if_icmpne 102)) ;;to TAG_1
                                      (81 (aload_3)) 
                                      (82 (aload 6)) 
                                      (84 (invokeinterface (methodCP "getKey" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (89 (aload 6)) 
                                      (91 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (96 (invokeinterface (methodCP "put" "java.util.Map" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (101 (pop)) 
                                      (102 (goto 21))  ;;to TAG_2;;at TAG_1
                                      (105 (aload_3)) ;;at TAG_0
                                      (106 (areturn)) 
                                      (endofcode 107))
                                   (Exceptions )
                                   (StackMap )))
                        (method "findMethodsWithName"
                              (parameters (class "java.lang.String") (class "java.util.Map"))
                              (returntype . (class "java.util.Map"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 7) (code_length . 94)
                                   (parsedcode
                                      (0 (new (class "java.util.HashMap"))) 
                                      (3 (dup)) 
                                      (4 (invokespecial (methodCP "<init>" "java.util.HashMap" () void))) 
                                      (7 (astore_2)) 
                                      (8 (aload_1)) 
                                      (9 (invokeinterface (methodCP "entrySet" "java.util.Map" () (class "java.util.Set")) 1)) 
                                      (14 (invokeinterface (methodCP "iterator" "java.util.Set" () (class "java.util.Iterator")) 1)) 
                                      (19 (astore_3)) 
                                      (20 (aload_3)) ;;at TAG_2
                                      (21 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (26 (ifeq 92)) ;;to TAG_0
                                      (29 (aload_3)) 
                                      (30 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (35 (astore 4)) 
                                      (37 (aload 4)) 
                                      (39 (checkcast (class "java.util.Map$Entry"))) 
                                      (42 (astore 5)) 
                                      (44 (aload 5)) 
                                      (46 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (51 (checkcast (class "java.lang.reflect.Method"))) 
                                      (54 (astore 6)) 
                                      (56 (aload_0)) 
                                      (57 (aload 6)) 
                                      (59 (invokevirtual (methodCP "getName" "java.lang.reflect.Method" () (class "java.lang.String")))) 
                                      (62 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (65 (ifeq 89)) ;;to TAG_1
                                      (68 (aload_2)) 
                                      (69 (aload 5)) 
                                      (71 (invokeinterface (methodCP "getKey" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (76 (aload 5)) 
                                      (78 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (83 (invokeinterface (methodCP "put" "java.util.Map" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (88 (pop)) 
                                      (89 (goto 20))  ;;to TAG_2;;at TAG_1
                                      (92 (aload_2)) ;;at TAG_0
                                      (93 (areturn)) 
                                      (endofcode 94))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.ClassVisitor"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 12) (code_length . 358)
                                   (parsedcode
                                      (0 (new (class "clojure.asm.commons.Method"))) 
                                      (3 (dup)) 
                                      (4 (aload_0)) 
                                      (5 (invokevirtual (methodCP "getMethodName" "clojure.lang.Compiler$NewInstanceMethod" () (class "java.lang.String")))) 
                                      (8 (aload_0)) 
                                      (9 (invokevirtual (methodCP "getReturnType" "clojure.lang.Compiler$NewInstanceMethod" () (class "clojure.asm.Type")))) 
                                      (12 (aload_0)) 
                                      (13 (invokevirtual (methodCP "getArgTypes" "clojure.lang.Compiler$NewInstanceMethod" () (array (class "clojure.asm.Type"))))) 
                                      (16 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (19 (astore_3)) 
                                      (20 (aconst_null)) 
                                      (21 (astore 4)) 
                                      (23 (aload_0)) 
                                      (24 (getfield (fieldCP "exclasses" "clojure.lang.Compiler$NewInstanceMethod" (array (class "java.lang.Class"))))) 
                                      (27 (arraylength)) 
                                      (28 (ifle 75)) ;;to TAG_0
                                      (31 (aload_0)) 
                                      (32 (getfield (fieldCP "exclasses" "clojure.lang.Compiler$NewInstanceMethod" (array (class "java.lang.Class"))))) 
                                      (35 (arraylength)) 
                                      (36 (anewarray (class "clojure.asm.Type"))) 
                                      (39 (astore 4)) 
                                      (41 (iconst_0)) 
                                      (42 (istore 5)) 
                                      (44 (iload 5)) ;;at TAG_1
                                      (46 (aload_0)) 
                                      (47 (getfield (fieldCP "exclasses" "clojure.lang.Compiler$NewInstanceMethod" (array (class "java.lang.Class"))))) 
                                      (50 (arraylength)) 
                                      (51 (if_icmpge 75)) ;;to TAG_0
                                      (54 (aload 4)) 
                                      (56 (iload 5)) 
                                      (58 (aload_0)) 
                                      (59 (getfield (fieldCP "exclasses" "clojure.lang.Compiler$NewInstanceMethod" (array (class "java.lang.Class"))))) 
                                      (62 (iload 5)) 
                                      (64 (aaload)) 
                                      (65 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (68 (aastore)) 
                                      (69 (iinc 5 1)) 
                                      (72 (goto 44))  ;;to TAG_1
                                      (75 (new (class "clojure.asm.commons.GeneratorAdapter"))) ;;at TAG_0
                                      (78 (dup)) 
                                      (79 (iconst_1)) 
                                      (80 (aload_3)) 
                                      (81 (aconst_null)) 
                                      (82 (aload 4)) 
                                      (84 (aload_2)) 
                                      (85 (invokespecial (methodCP "<init>" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.commons.Method") (class "java.lang.String") (array (class "clojure.asm.Type")) (class "clojure.asm.ClassVisitor")) void))) 
                                      (88 (astore 5)) 
                                      (90 (aload 5)) 
                                      (92 (aload_0)) 
                                      (93 (getfield (fieldCP "methodMeta" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.IPersistentMap")))) 
                                      (96 (invokestatic (methodCP "addAnnotation" "clojure.lang.Compiler" ((class "java.lang.Object") (class "clojure.lang.IPersistentMap")) void))) 
                                      (99 (iconst_0)) 
                                      (100 (istore 6)) 
                                      (102 (iload 6)) ;;at TAG_3
                                      (104 (aload_0)) 
                                      (105 (getfield (fieldCP "parms" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.IPersistentVector")))) 
                                      (108 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (113 (if_icmpge 147)) ;;to TAG_2
                                      (116 (aload_0)) 
                                      (117 (getfield (fieldCP "parms" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.IPersistentVector")))) 
                                      (120 (iload 6)) 
                                      (122 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (127 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (130 (astore 7)) 
                                      (132 (aload 5)) 
                                      (134 (aload 7)) 
                                      (136 (iload 6)) 
                                      (138 (invokestatic (methodCP "addParameterAnnotation" "clojure.lang.Compiler" ((class "java.lang.Object") (class "clojure.lang.IPersistentMap") int) void))) 
                                      (141 (iinc 6 1)) 
                                      (144 (goto 102)) ;;to TAG_3
                                      (147 (aload 5)) ;;at TAG_2
                                      (149 (invokevirtual (methodCP "visitCode" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (152 (aload 5)) 
                                      (154 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (157 (astore 6)) 
                                      (159 (aload 5)) 
                                      (161 (aload_0)) 
                                      (162 (getfield (fieldCP "line" "clojure.lang.Compiler$NewInstanceMethod" int))) 
                                      (165 (aload 6)) 
                                      (167 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (170 (iconst_4)) ;;at TAG_8
                                      (171 (anewarray (class "java.lang.Object"))) 
                                      (174 (dup)) 
                                      (175 (iconst_0)) 
                                      (176 (getstatic (fieldCP "LOOP_LABEL" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (179 (aastore)) 
                                      (180 (dup)) 
                                      (181 (iconst_1)) 
                                      (182 (aload 6)) 
                                      (184 (aastore)) 
                                      (185 (dup)) 
                                      (186 (iconst_2)) 
                                      (187 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (190 (aastore)) 
                                      (191 (dup)) 
                                      (192 (iconst_3)) 
                                      (193 (aload_0)) 
                                      (194 (aastore)) 
                                      (195 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (198 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (201 (aload_0)) 
                                      (202 (getfield (fieldCP "objx" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.Compiler$ObjExpr")))) 
                                      (205 (aload 5)) 
                                      (207 (aload_0)) 
                                      (208 (getfield (fieldCP "retClass" "clojure.lang.Compiler$NewInstanceMethod" (class "java.lang.Class")))) 
                                      (211 (aload_0)) 
                                      (212 (getfield (fieldCP "body" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.Compiler$Expr")))) 
                                      (215 (invokestatic (methodCP "emitBody" "clojure.lang.Compiler$NewInstanceMethod" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (218 (aload 5)) 
                                      (220 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (223 (astore 7)) 
                                      (225 (aload 5)) 
                                      (227 (ldc 10)) ;;STRING:: "this"
                                      (229 (aload_1)) 
                                      (230 (getfield (fieldCP "objtype" "clojure.lang.Compiler$ObjExpr" (class "clojure.asm.Type")))) 
                                      (233 (invokevirtual (methodCP "getDescriptor" "clojure.asm.Type" () (class "java.lang.String")))) 
                                      (236 (aconst_null)) 
                                      (237 (aload 6)) 
                                      (239 (aload 7)) 
                                      (241 (iconst_0)) 
                                      (242 (invokevirtual (methodCP "visitLocalVariable" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "clojure.asm.Label") (class "clojure.asm.Label") int) void))) 
                                      (245 (aload_0)) 
                                      (246 (getfield (fieldCP "argLocals" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.PersistentVector")))) 
                                      (249 (invokevirtual (methodCP "seq" "clojure.lang.PersistentVector" () (class "clojure.lang.ISeq")))) 
                                      (252 (astore 8)) 
                                      (254 (aload 8)) ;;at TAG_5
                                      (256 (ifnull 318)) ;;to TAG_4
                                      (259 (aload 8)) 
                                      (261 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (266 (checkcast (class "clojure.lang.Compiler$LocalBinding"))) 
                                      (269 (astore 9)) 
                                      (271 (aload 5)) 
                                      (273 (aload 9)) 
                                      (275 (getfield (fieldCP "name" "clojure.lang.Compiler$LocalBinding" (class "java.lang.String")))) 
                                      (278 (aload_0)) 
                                      (279 (getfield (fieldCP "argTypes" "clojure.lang.Compiler$NewInstanceMethod" (array (class "clojure.asm.Type"))))) 
                                      (282 (aload 9)) 
                                      (284 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (287 (iconst_1)) 
                                      (288 (isub)) 
                                      (289 (aaload)) 
                                      (290 (invokevirtual (methodCP "getDescriptor" "clojure.asm.Type" () (class "java.lang.String")))) 
                                      (293 (aconst_null)) 
                                      (294 (aload 6)) 
                                      (296 (aload 7)) 
                                      (298 (aload 9)) 
                                      (300 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (303 (invokevirtual (methodCP "visitLocalVariable" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "clojure.asm.Label") (class "clojure.asm.Label") int) void))) 
                                      (306 (aload 8)) 
                                      (308 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (313 (astore 8)) 
                                      (315 (goto 254)) ;;to TAG_5
                                      (318 (jsr 340)) ;;to TAG_6;;at TAG_4
                                      (321 (goto 347)) ;;to TAG_7;;at TAG_10
                                      (324 (astore 7)) ;;at TAG_9
                                      (326 (aload 7)) 
                                      (328 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (331 (athrow)) 
                                      (332 (astore 10)) ;;at TAG_11
                                      (334 (jsr 340)) ;;to TAG_6
                                      (337 (aload 10)) ;;at TAG_12
                                      (339 (athrow)) 
                                      (340 (astore 11)) ;;at TAG_6
                                      (342 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (345 (ret 11)) 
                                      (347 (aload 5)) ;;at TAG_7
                                      (349 (invokevirtual (methodCP "returnValue" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (352 (aload 5)) 
                                      (354 (invokevirtual (methodCP "endMethod" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (357 (return)) 
                                      (endofcode 358))
                                   (Exceptions 
                                     (handler 170 318  324 (class "java.lang.Exception"))
                                     (handler 170 321  332 (class "java.lang.Throwable"))
                                     (handler 324 337  332 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 10)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (ldc 11))        ;;STRING:: "dummy_this_dlskjsdfower"
                                      (3 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (6 (putstatic (fieldCP "dummyThis" "clojure.lang.Compiler$NewInstanceMethod" (class "clojure.lang.Symbol"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$NewInstanceMethod-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$NewInstanceMethod*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$NewInstanceMethod" . "clojure.lang"))

