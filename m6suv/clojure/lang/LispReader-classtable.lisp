; LispReader-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.LispReader*
 (make-class-def
      '(class "clojure.lang.LispReader"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Reading disallowed - *read-eval* bound to :unknown")
                        (STRING  "EOF while reading")
                        (STRING  "Invalid number: ")
                        (STRING  "Invalid unicode character: \\")
                        (STRING  "Invalid digit: ")
                        (STRING  "Invalid character length: ")
                        (STRING  ", should be: ")
                        (STRING  "nil")
                        (STRING  "true")
                        (STRING  "false")
                        (STRING  "/")
                        (STRING  "clojure.core//")
                        (STRING  "Invalid token: ")
                        (STRING  ":/")
                        (STRING  ":")
                        (STRING  "::")
                        (STRING  "-")
                        (STRING  "+")
                        (STRING  "rest")
                        (STRING  "p")
                        (STRING  "__")
                        (STRING  "#")
                        (STRING  "arg literal not in #()")
                        (STRING  "EOF while reading, starting at line ")
                        (STRING  "quote")
                        (STRING  "var")
                        (STRING  "clojure.core")
                        (STRING  "unquote")
                        (STRING  "unquote-splicing")
                        (STRING  "concat")
                        (STRING  "seq")
                        (STRING  "list")
                        (STRING  "apply")
                        (STRING  "hash-map")
                        (STRING  "hash-set")
                        (STRING  "vector")
                        (STRING  "with-meta")
                        (STRING  "meta")
                        (STRING  "deref")
                        (STRING  "unknown")
                        (STRING  "[:]?([\\D&&[^/]].*/)?([\\D&&[^/]][^/]*)")
                        (STRING  "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?")
                        (STRING  "([-+]?[0-9]+)/([0-9]+)")
                        (STRING  "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?"))
            (fields
                        (field "QUOTE" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "THE_VAR" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "UNQUOTE" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "UNQUOTE_SPLICING" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "CONCAT" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "SEQ" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "LIST" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "APPLY" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "HASHMAP" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "HASHSET" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "VECTOR" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "WITH_META" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "META" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "DEREF" (class "clojure.lang.Symbol") (accessflags  *class*  *static* ) -1)
                        (field "UNKNOWN" (class "clojure.lang.Keyword") (accessflags  *class*  *static* ) -1)
                        (field "macros" (array (class "clojure.lang.IFn")) (accessflags  *class*  *static* ) -1)
                        (field "dispatchMacros" (array (class "clojure.lang.IFn")) (accessflags  *class*  *static* ) -1)
                        (field "symbolPat" (class "java.util.regex.Pattern") (accessflags  *class*  *static* ) -1)
                        (field "intPat" (class "java.util.regex.Pattern") (accessflags  *class*  *static* ) -1)
                        (field "ratioPat" (class "java.util.regex.Pattern") (accessflags  *class*  *static* ) -1)
                        (field "floatPat" (class "java.util.regex.Pattern") (accessflags  *class*  *static* ) -1)
                        (field "SLASH" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "CLOJURE_SLASH" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "GENSYM_ENV" (class "clojure.lang.Var") (accessflags  *class*  *static* ) -1)
                        (field "ARG_ENV" (class "clojure.lang.Var") (accessflags  *class*  *static* ) -1)
                        (field "ctorReader" (class "clojure.lang.IFn") (accessflags  *class*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isWhitespace"
                              (parameters int)
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 19)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (invokestatic (methodCP "isWhitespace" "java.lang.Character" (int) boolean))) 
                                      (4 (ifne 13)) ;;to TAG_0
                                      (7 (iload_0)) 
                                      (8 (bipush 44)) 
                                      (10 (if_icmpne 17)) ;;to TAG_1
                                      (13 (iconst_1)) ;;at TAG_0
                                      (14 (goto 18))  ;;to TAG_2
                                      (17 (iconst_0)) ;;at TAG_1
                                      (18 (ireturn)) ;;at TAG_2
                                      (endofcode 19))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unread"
                              (parameters (class "java.io.PushbackReader") int)
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 20)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (iconst_m1)) 
                                      (2 (if_icmpeq 19)) ;;to TAG_0
                                      (5 (aload_0)) ;;at TAG_1
                                      (6 (iload_1)) 
                                      (7 (invokevirtual (methodCP "unread" "java.io.PushbackReader" (int) void))) 
                                      (10 (goto 19)) ;;to TAG_0;;at TAG_2
                                      (13 (astore_2)) ;;at TAG_3
                                      (14 (aload_2)) 
                                      (15 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (18 (athrow)) 
                                      (19 (return)) ;;at TAG_0
                                      (endofcode 20))
                                   (Exceptions 
                                     (handler 5 10  13 (class "java.io.IOException")))
                                   (StackMap )))
                        (method "read1"
                              (parameters (class "java.io.Reader"))
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_0
                                      (1 (invokevirtual (methodCP "read" "java.io.Reader" () int))) 
                                      (4 (ireturn)) ;;at TAG_1
                                      (5 (astore_1)) ;;at TAG_2
                                      (6 (aload_1)) 
                                      (7 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (10 (athrow)) 
                                      (endofcode 11))
                                   (Exceptions 
                                     (handler 0 4  5 (class "java.io.IOException")))
                                   (StackMap )))
                        (method "read"
                              (parameters (class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 8) (code_length . 263)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "READEVAL" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (getstatic (fieldCP "UNKNOWN" "clojure.lang.LispReader" (class "clojure.lang.Keyword")))) 
                                      (9 (if_acmpne 18)) ;;to TAG_0
                                      (12 (ldc 0)) ;;STRING:: "Reading disallowed - *read-eval* bound to :unknown"
                                      (14 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (17 (athrow)) 
                                      (18 (aload_0)) ;;at TAG_0
                                      (19 (invokestatic (methodCP "read1" "clojure.lang.LispReader" ((class "java.io.Reader")) int))) 
                                      (22 (istore 4)) 
                                      (24 (iload 4)) ;;at TAG_2
                                      (26 (invokestatic (methodCP "isWhitespace" "clojure.lang.LispReader" (int) boolean))) 
                                      (29 (ifeq 41)) ;;to TAG_1
                                      (32 (aload_0)) 
                                      (33 (invokestatic (methodCP "read1" "clojure.lang.LispReader" ((class "java.io.Reader")) int))) 
                                      (36 (istore 4)) 
                                      (38 (goto 24)) ;;to TAG_2
                                      (41 (iload 4)) ;;at TAG_1
                                      (43 (iconst_m1)) 
                                      (44 (if_icmpne 59)) ;;to TAG_3
                                      (47 (iload_1)) 
                                      (48 (ifeq 57)) ;;to TAG_4
                                      (51 (ldc 1)) ;;STRING:: "EOF while reading"
                                      (53 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (56 (athrow)) 
                                      (57 (aload_2)) ;;at TAG_4
                                      (58 (areturn)) ;;at TAG_17
                                      (59 (iload 4)) ;;at TAG_3
                                      (61 (invokestatic (methodCP "isDigit" "java.lang.Character" (int) boolean))) 
                                      (64 (ifeq 87))  ;;to TAG_5
                                      (67 (aload_0)) 
                                      (68 (iload 4)) 
                                      (70 (i2c)) 
                                      (71 (invokestatic (methodCP "readNumber" "clojure.lang.LispReader" ((class "java.io.PushbackReader") char) (class "java.lang.Object")))) 
                                      (74 (astore 5)) 
                                      (76 (invokestatic (methodCP "suppressRead" "clojure.lang.RT" () boolean))) 
                                      (79 (ifeq 84)) ;;to TAG_6
                                      (82 (aconst_null)) 
                                      (83 (areturn)) ;;at TAG_19
                                      (84 (aload 5)) ;;at TAG_6
                                      (86 (areturn)) ;;at TAG_20
                                      (87 (iload 4)) ;;at TAG_5
                                      (89 (invokestatic (methodCP "getMacro" "clojure.lang.LispReader" (int) (class "clojure.lang.IFn")))) 
                                      (92 (astore 5)) 
                                      (94 (aload 5)) 
                                      (96 (ifnull 135)) ;;to TAG_7
                                      (99 (aload 5)) 
                                      (101 (aload_0)) 
                                      (102 (iload 4)) 
                                      (104 (i2c)) 
                                      (105 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (108 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (113 (astore 6)) 
                                      (115 (invokestatic (methodCP "suppressRead" "clojure.lang.RT" () boolean))) 
                                      (118 (ifeq 123)) ;;to TAG_8
                                      (121 (aconst_null)) 
                                      (122 (areturn)) ;;at TAG_21
                                      (123 (aload 6)) ;;at TAG_8
                                      (125 (aload_0)) 
                                      (126 (if_acmpne 132)) ;;to TAG_9
                                      (129 (goto 18)) ;;to TAG_0
                                      (132 (aload 6)) ;;at TAG_9
                                      (134 (areturn)) ;;at TAG_22
                                      (135 (iload 4)) ;;at TAG_7
                                      (137 (bipush 43)) 
                                      (139 (if_icmpeq 149)) ;;to TAG_10
                                      (142 (iload 4)) 
                                      (144 (bipush 45)) 
                                      (146 (if_icmpne 195)) ;;to TAG_11
                                      (149 (aload_0)) ;;at TAG_10
                                      (150 (invokestatic (methodCP "read1" "clojure.lang.LispReader" ((class "java.io.Reader")) int))) 
                                      (153 (istore 6)) 
                                      (155 (iload 6)) 
                                      (157 (invokestatic (methodCP "isDigit" "java.lang.Character" (int) boolean))) 
                                      (160 (ifeq 189)) ;;to TAG_12
                                      (163 (aload_0)) 
                                      (164 (iload 6)) 
                                      (166 (invokestatic (methodCP "unread" "clojure.lang.LispReader" ((class "java.io.PushbackReader") int) void))) 
                                      (169 (aload_0)) 
                                      (170 (iload 4)) 
                                      (172 (i2c)) 
                                      (173 (invokestatic (methodCP "readNumber" "clojure.lang.LispReader" ((class "java.io.PushbackReader") char) (class "java.lang.Object")))) 
                                      (176 (astore 7)) 
                                      (178 (invokestatic (methodCP "suppressRead" "clojure.lang.RT" () boolean))) 
                                      (181 (ifeq 186)) ;;to TAG_13
                                      (184 (aconst_null)) 
                                      (185 (areturn)) ;;at TAG_23
                                      (186 (aload 7)) ;;at TAG_13
                                      (188 (areturn)) ;;at TAG_24
                                      (189 (aload_0)) ;;at TAG_12
                                      (190 (iload 6)) 
                                      (192 (invokestatic (methodCP "unread" "clojure.lang.LispReader" ((class "java.io.PushbackReader") int) void))) 
                                      (195 (aload_0)) ;;at TAG_11
                                      (196 (iload 4)) 
                                      (198 (i2c)) 
                                      (199 (invokestatic (methodCP "readToken" "clojure.lang.LispReader" ((class "java.io.PushbackReader") char) (class "java.lang.String")))) 
                                      (202 (astore 6)) 
                                      (204 (invokestatic (methodCP "suppressRead" "clojure.lang.RT" () boolean))) 
                                      (207 (ifeq 212)) ;;to TAG_14
                                      (210 (aconst_null)) 
                                      (211 (areturn)) ;;at TAG_25
                                      (212 (aload 6)) ;;at TAG_14
                                      (214 (invokestatic (methodCP "interpretToken" "clojure.lang.LispReader" ((class "java.lang.String")) (class "java.lang.Object")))) 
                                      (217 (areturn)) ;;at TAG_26
                                      (218 (astore 4)) ;;at TAG_18
                                      (220 (iload_3)) 
                                      (221 (ifne 231)) ;;to TAG_15
                                      (224 (aload_0)) 
                                      (225 (instanceof (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (228 (ifne 237)) ;;to TAG_16
                                      (231 (aload 4)) ;;at TAG_15
                                      (233 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (236 (athrow)) 
                                      (237 (aload_0)) ;;at TAG_16
                                      (238 (checkcast (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (241 (astore 5)) 
                                      (243 (new (class "clojure.lang.LispReader$ReaderException"))) 
                                      (246 (dup)) 
                                      (247 (aload 5)) 
                                      (249 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (252 (aload 5)) 
                                      (254 (invokevirtual (methodCP "getColumnNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (257 (aload 4)) 
                                      (259 (invokespecial (methodCP "<init>" "clojure.lang.LispReader$ReaderException" (int int (class "java.lang.Throwable")) void))) 
                                      (262 (athrow)) 
                                      (endofcode 263))
                                   (Exceptions 
                                     (handler 18 58  218 (class "java.lang.Exception"))
                                     (handler 59 83  218 (class "java.lang.Exception"))
                                     (handler 84 86  218 (class "java.lang.Exception"))
                                     (handler 87 122  218 (class "java.lang.Exception"))
                                     (handler 123 134  218 (class "java.lang.Exception"))
                                     (handler 135 185  218 (class "java.lang.Exception"))
                                     (handler 186 188  218 (class "java.lang.Exception"))
                                     (handler 189 211  218 (class "java.lang.Exception"))
                                     (handler 212 217  218 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "readToken"
                              (parameters (class "java.io.PushbackReader") char)
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 58)
                                   (parsedcode
                                      (0 (new (class "java.lang.StringBuilder"))) 
                                      (3 (dup)) 
                                      (4 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (7 (astore_2)) 
                                      (8 (aload_2)) 
                                      (9 (iload_1)) 
                                      (10 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (13 (pop)) 
                                      (14 (aload_0)) ;;at TAG_2
                                      (15 (invokestatic (methodCP "read1" "clojure.lang.LispReader" ((class "java.io.Reader")) int))) 
                                      (18 (istore_3)) 
                                      (19 (iload_3)) 
                                      (20 (iconst_m1)) 
                                      (21 (if_icmpeq 38)) ;;to TAG_0
                                      (24 (iload_3)) 
                                      (25 (invokestatic (methodCP "isWhitespace" "clojure.lang.LispReader" (int) boolean))) 
                                      (28 (ifne 38)) ;;to TAG_0
                                      (31 (iload_3)) 
                                      (32 (invokestatic (methodCP "isTerminatingMacro" "clojure.lang.LispReader" (int) boolean))) 
                                      (35 (ifeq 48)) ;;to TAG_1
                                      (38 (aload_0)) ;;at TAG_0
                                      (39 (iload_3)) 
                                      (40 (invokestatic (methodCP "unread" "clojure.lang.LispReader" ((class "java.io.PushbackReader") int) void))) 
                                      (43 (aload_2)) 
                                      (44 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (47 (areturn)) 
                                      (48 (aload_2)) ;;at TAG_1
                                      (49 (iload_3)) 
                                      (50 (i2c)) 
                                      (51 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (54 (pop)) 
                                      (55 (goto 14))  ;;to TAG_2
                                      (endofcode 58))
                                   (Exceptions )
                                   (StackMap )))
                        (method "readNumber"
                              (parameters (class "java.io.PushbackReader") char)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 102)
                                   (parsedcode
                                      (0 (new (class "java.lang.StringBuilder"))) 
                                      (3 (dup)) 
                                      (4 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (7 (astore_2)) 
                                      (8 (aload_2)) 
                                      (9 (iload_1)) 
                                      (10 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (13 (pop)) 
                                      (14 (aload_0)) ;;at TAG_3
                                      (15 (invokestatic (methodCP "read1" "clojure.lang.LispReader" ((class "java.io.Reader")) int))) 
                                      (18 (istore_3)) 
                                      (19 (iload_3)) 
                                      (20 (iconst_m1)) 
                                      (21 (if_icmpeq 38)) ;;to TAG_0
                                      (24 (iload_3)) 
                                      (25 (invokestatic (methodCP "isWhitespace" "clojure.lang.LispReader" (int) boolean))) 
                                      (28 (ifne 38)) ;;to TAG_0
                                      (31 (iload_3)) 
                                      (32 (invokestatic (methodCP "isMacro" "clojure.lang.LispReader" (int) boolean))) 
                                      (35 (ifeq 46)) ;;to TAG_1
                                      (38 (aload_0)) ;;at TAG_0
                                      (39 (iload_3)) 
                                      (40 (invokestatic (methodCP "unread" "clojure.lang.LispReader" ((class "java.io.PushbackReader") int) void))) 
                                      (43 (goto 56))  ;;to TAG_2
                                      (46 (aload_2)) ;;at TAG_1
                                      (47 (iload_3)) 
                                      (48 (i2c)) 
                                      (49 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (52 (pop)) 
                                      (53 (goto 14)) ;;to TAG_3
                                      (56 (aload_2)) ;;at TAG_2
                                      (57 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (60 (astore_3)) 
                                      (61 (aload_3)) 
                                      (62 (invokestatic (methodCP "matchNumber" "clojure.lang.LispReader" ((class "java.lang.String")) (class "java.lang.Object")))) 
                                      (65 (astore 4)) 
                                      (67 (aload 4)) 
                                      (69 (ifnonnull 99)) ;;to TAG_4
                                      (72 (new (class "java.lang.NumberFormatException"))) 
                                      (75 (dup)) 
                                      (76 (new (class "java.lang.StringBuilder"))) 
                                      (79 (dup)) 
                                      (80 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (83 (ldc 2)) ;;STRING:: "Invalid number: "
                                      (85 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (88 (aload_3)) 
                                      (89 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (92 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (95 (invokespecial (methodCP "<init>" "java.lang.NumberFormatException" ((class "java.lang.String")) void))) 
                                      (98 (athrow)) 
                                      (99 (aload 4)) ;;at TAG_4
                                      (101 (areturn)) 
                                      (endofcode 102))
                                   (Exceptions )
                                   (StackMap )))
                        (method "readUnicodeChar"
                              (parameters (class "java.lang.String") int int int)
                              (returntype . int)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 7) (code_length . 120)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "length" "java.lang.String" () int))) 
                                      (4 (iload_1)) 
                                      (5 (iload_2)) 
                                      (6 (iadd)) 
                                      (7 (if_icmpeq 37)) ;;to TAG_0
                                      (10 (new (class "java.lang.IllegalArgumentException"))) 
                                      (13 (dup)) 
                                      (14 (new (class "java.lang.StringBuilder"))) 
                                      (17 (dup)) 
                                      (18 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (21 (ldc 3)) ;;STRING:: "Invalid unicode character: \\"
                                      (23 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (26 (aload_0)) 
                                      (27 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (30 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (33 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (36 (athrow)) 
                                      (37 (iconst_0)) ;;at TAG_0
                                      (38 (istore 4)) 
                                      (40 (iload_1)) 
                                      (41 (istore 5)) 
                                      (43 (iload 5)) ;;at TAG_3
                                      (45 (iload_1)) 
                                      (46 (iload_2)) 
                                      (47 (iadd)) 
                                      (48 (if_icmpge 116)) ;;to TAG_1
                                      (51 (aload_0)) 
                                      (52 (iload 5)) 
                                      (54 (invokevirtual (methodCP "charAt" "java.lang.String" (int) char))) 
                                      (57 (iload_3)) 
                                      (58 (invokestatic (methodCP "digit" "java.lang.Character" (char int) int))) 
                                      (61 (istore 6)) 
                                      (63 (iload 6)) 
                                      (65 (iconst_m1)) 
                                      (66 (if_icmpne 101))  ;;to TAG_2
                                      (69 (new (class "java.lang.IllegalArgumentException"))) 
                                      (72 (dup)) 
                                      (73 (new (class "java.lang.StringBuilder"))) 
                                      (76 (dup)) 
                                      (77 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (80 (ldc 4)) ;;STRING:: "Invalid digit: "
                                      (82 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (85 (aload_0)) 
                                      (86 (iload 5)) 
                                      (88 (invokevirtual (methodCP "charAt" "java.lang.String" (int) char))) 
                                      (91 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (94 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (97 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (100 (athrow)) 
                                      (101 (iload 4)) ;;at TAG_2
                                      (103 (iload_3)) 
                                      (104 (imul)) 
                                      (105 (iload 6)) 
                                      (107 (iadd)) 
                                      (108 (istore 4)) 
                                      (110 (iinc 5 1)) 
                                      (113 (goto 43)) ;;to TAG_3
                                      (116 (iload 4)) ;;at TAG_1
                                      (118 (i2c)) 
                                      (119 (ireturn)) 
                                      (endofcode 120))
                                   (Exceptions )
                                   (StackMap )))
                        (method "readUnicodeChar"
                              (parameters (class "java.io.PushbackReader") int int int boolean)
                              (returntype . int)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 9) (code_length . 196)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (iload_2)) 
                                      (2 (invokestatic (methodCP "digit" "java.lang.Character" (int int) int))) 
                                      (5 (istore 5)) 
                                      (7 (iload 5)) 
                                      (9 (iconst_m1)) 
                                      (10 (if_icmpne 41)) ;;to TAG_0
                                      (13 (new (class "java.lang.IllegalArgumentException"))) 
                                      (16 (dup)) 
                                      (17 (new (class "java.lang.StringBuilder"))) 
                                      (20 (dup)) 
                                      (21 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (24 (ldc 4)) ;;STRING:: "Invalid digit: "
                                      (26 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (29 (iload_1)) 
                                      (30 (i2c)) 
                                      (31 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (34 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (37 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (40 (athrow)) 
                                      (41 (iconst_1)) ;;at TAG_0
                                      (42 (istore 6)) 
                                      (44 (iload 6)) ;;at TAG_5
                                      (46 (iload_3)) 
                                      (47 (if_icmpge 145)) ;;to TAG_1
                                      (50 (aload_0)) 
                                      (51 (invokestatic (methodCP "read1" "clojure.lang.LispReader" ((class "java.io.Reader")) int))) 
                                      (54 (istore 7)) 
                                      (56 (iload 7)) 
                                      (58 (iconst_m1)) 
                                      (59 (if_icmpeq 78))  ;;to TAG_2
                                      (62 (iload 7)) 
                                      (64 (invokestatic (methodCP "isWhitespace" "clojure.lang.LispReader" (int) boolean))) 
                                      (67 (ifne 78))  ;;to TAG_2
                                      (70 (iload 7)) 
                                      (72 (invokestatic (methodCP "isMacro" "clojure.lang.LispReader" (int) boolean))) 
                                      (75 (ifeq 87)) ;;to TAG_3
                                      (78 (aload_0)) ;;at TAG_2
                                      (79 (iload 7)) 
                                      (81 (invokestatic (methodCP "unread" "clojure.lang.LispReader" ((class "java.io.PushbackReader") int) void))) 
                                      (84 (goto 145)) ;;to TAG_1
                                      (87 (iload 7)) ;;at TAG_3
                                      (89 (iload_2)) 
                                      (90 (invokestatic (methodCP "digit" "java.lang.Character" (int int) int))) 
                                      (93 (istore 8)) 
                                      (95 (iload 8)) 
                                      (97 (iconst_m1)) 
                                      (98 (if_icmpne 130)) ;;to TAG_4
                                      (101 (new (class "java.lang.IllegalArgumentException"))) 
                                      (104 (dup)) 
                                      (105 (new (class "java.lang.StringBuilder"))) 
                                      (108 (dup)) 
                                      (109 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (112 (ldc 4)) ;;STRING:: "Invalid digit: "
                                      (114 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (117 (iload 7)) 
                                      (119 (i2c)) 
                                      (120 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (123 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (126 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (129 (athrow)) 
                                      (130 (iload 5)) ;;at TAG_4
                                      (132 (iload_2)) 
                                      (133 (imul)) 
                                      (134 (iload 8)) 
                                      (136 (iadd)) 
                                      (137 (istore 5)) 
                                      (139 (iinc 6 1)) 
                                      (142 (goto 44)) ;;to TAG_5
                                      (145 (iload 6)) ;;at TAG_1
                                      (147 (iload_3)) 
                                      (148 (if_icmpeq 193)) ;;to TAG_6
                                      (151 (iload 4)) 
                                      (153 (ifeq 193)) ;;to TAG_6
                                      (156 (new (class "java.lang.IllegalArgumentException"))) 
                                      (159 (dup)) 
                                      (160 (new (class "java.lang.StringBuilder"))) 
                                      (163 (dup)) 
                                      (164 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (167 (ldc 5)) ;;STRING:: "Invalid character length: "
                                      (169 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (172 (iload 6)) 
                                      (174 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (177 (ldc 6)) ;;STRING:: ", should be: "
                                      (179 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (182 (iload_3)) 
                                      (183 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (186 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (189 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (192 (athrow)) 
                                      (193 (iload 5)) ;;at TAG_6
                                      (195 (ireturn)) 
                                      (endofcode 196))
                                   (Exceptions )
                                   (StackMap )))
                        (method "interpretToken"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 99)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ldc 7)) ;;STRING:: "nil"
                                      (3 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (6 (ifeq 11)) ;;to TAG_0
                                      (9 (aconst_null)) 
                                      (10 (areturn)) 
                                      (11 (aload_0)) ;;at TAG_0
                                      (12 (ldc 8)) ;;STRING:: "true"
                                      (14 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (17 (ifeq 24)) ;;to TAG_1
                                      (20 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (23 (areturn)) 
                                      (24 (aload_0)) ;;at TAG_1
                                      (25 (ldc 9)) ;;STRING:: "false"
                                      (27 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (30 (ifeq 37))  ;;to TAG_2
                                      (33 (getstatic (fieldCP "F" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (36 (areturn)) 
                                      (37 (aload_0)) ;;at TAG_2
                                      (38 (ldc 10)) ;;STRING:: "/"
                                      (40 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (43 (ifeq 50)) ;;to TAG_3
                                      (46 (getstatic (fieldCP "SLASH" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (49 (areturn)) 
                                      (50 (aload_0)) ;;at TAG_3
                                      (51 (ldc 11)) ;;STRING:: "clojure.core//"
                                      (53 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (56 (ifeq 63)) ;;to TAG_4
                                      (59 (getstatic (fieldCP "CLOJURE_SLASH" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (62 (areturn)) 
                                      (63 (aconst_null)) ;;at TAG_4
                                      (64 (astore_1)) 
                                      (65 (aload_0)) 
                                      (66 (invokestatic (methodCP "matchSymbol" "clojure.lang.LispReader" ((class "java.lang.String")) (class "java.lang.Object")))) 
                                      (69 (astore_1)) 
                                      (70 (aload_1)) 
                                      (71 (ifnull 76)) ;;to TAG_5
                                      (74 (aload_1)) 
                                      (75 (areturn)) 
                                      (76 (new (class "java.lang.StringBuilder"))) ;;at TAG_5
                                      (79 (dup)) 
                                      (80 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (83 (ldc 12)) ;;STRING:: "Invalid token: "
                                      (85 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (88 (aload_0)) 
                                      (89 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (92 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (95 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (98 (athrow)) 
                                      (endofcode 99))
                                   (Exceptions )
                                   (StackMap )))
                        (method "matchSymbol"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 7) (code_length . 187)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "symbolPat" "clojure.lang.LispReader" (class "java.util.regex.Pattern")))) 
                                      (3 (aload_0)) 
                                      (4 (invokevirtual (methodCP "matcher" "java.util.regex.Pattern" ((class "java.lang.CharSequence")) (class "java.util.regex.Matcher")))) 
                                      (7 (astore_1)) 
                                      (8 (aload_1)) 
                                      (9 (invokevirtual (methodCP "matches" "java.util.regex.Matcher" () boolean))) 
                                      (12 (ifeq 185)) ;;to TAG_0
                                      (15 (aload_1)) 
                                      (16 (invokevirtual (methodCP "groupCount" "java.util.regex.Matcher" () int))) 
                                      (19 (istore_2)) 
                                      (20 (aload_1)) 
                                      (21 (iconst_1)) 
                                      (22 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (25 (astore_3)) 
                                      (26 (aload_1)) 
                                      (27 (iconst_2)) 
                                      (28 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (31 (astore 4)) 
                                      (33 (aload_3)) 
                                      (34 (ifnull 46))  ;;to TAG_1
                                      (37 (aload_3)) 
                                      (38 (ldc 13)) ;;STRING:: ":/"
                                      (40 (invokevirtual (methodCP "endsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (43 (ifne 67)) ;;to TAG_2
                                      (46 (aload 4)) ;;at TAG_1
                                      (48 (ldc 14)) ;;STRING:: ":"
                                      (50 (invokevirtual (methodCP "endsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (53 (ifne 67)) ;;to TAG_2
                                      (56 (aload_0)) 
                                      (57 (ldc 15)) ;;STRING:: "::"
                                      (59 (iconst_1)) 
                                      (60 (invokevirtual (methodCP "indexOf" "java.lang.String" ((class "java.lang.String") int) int))) 
                                      (63 (iconst_m1)) 
                                      (64 (if_icmpeq 69)) ;;to TAG_3
                                      (67 (aconst_null)) ;;at TAG_2
                                      (68 (areturn)) 
                                      (69 (aload_0)) ;;at TAG_3
                                      (70 (ldc 15)) ;;STRING:: "::"
                                      (72 (invokevirtual (methodCP "startsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (75 (ifeq 135)) ;;to TAG_4
                                      (78 (aload_0)) 
                                      (79 (iconst_2)) 
                                      (80 (invokevirtual (methodCP "substring" "java.lang.String" (int) (class "java.lang.String")))) 
                                      (83 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (86 (astore 5)) 
                                      (88 (aload 5)) 
                                      (90 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (93 (ifnull 106)) ;;to TAG_5
                                      (96 (aload 5)) 
                                      (98 (invokestatic (methodCP "namespaceFor" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (101 (astore 6)) 
                                      (103 (goto 111)) ;;to TAG_6
                                      (106 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) ;;at TAG_5
                                      (109 (astore 6)) 
                                      (111 (aload 6)) ;;at TAG_6
                                      (113 (ifnull 133)) ;;to TAG_7
                                      (116 (aload 6)) 
                                      (118 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (121 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (124 (aload 5)) 
                                      (126 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (129 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (132 (areturn)) 
                                      (133 (aconst_null)) ;;at TAG_7
                                      (134 (areturn)) 
                                      (135 (aload_0)) ;;at TAG_4
                                      (136 (iconst_0)) 
                                      (137 (invokevirtual (methodCP "charAt" "java.lang.String" (int) char))) 
                                      (140 (bipush 58)) 
                                      (142 (if_icmpne 149)) ;;to TAG_8
                                      (145 (iconst_1)) 
                                      (146 (goto 150)) ;;to TAG_9
                                      (149 (iconst_0)) ;;at TAG_8
                                      (150 (istore 5)) ;;at TAG_9
                                      (152 (aload_0)) 
                                      (153 (iload 5)) 
                                      (155 (ifeq 162)) ;;to TAG_10
                                      (158 (iconst_1)) 
                                      (159 (goto 163)) ;;to TAG_11
                                      (162 (iconst_0)) ;;at TAG_10
                                      (163 (invokevirtual (methodCP "substring" "java.lang.String" (int) (class "java.lang.String")))) ;;at TAG_11
                                      (166 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (169 (astore 6)) 
                                      (171 (iload 5)) 
                                      (173 (ifeq 182)) ;;to TAG_12
                                      (176 (aload 6)) 
                                      (178 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "clojure.lang.Symbol")) (class "clojure.lang.Keyword")))) 
                                      (181 (areturn)) 
                                      (182 (aload 6)) ;;at TAG_12
                                      (184 (areturn)) 
                                      (185 (aconst_null)) ;;at TAG_0
                                      (186 (areturn)) 
                                      (endofcode 187))
                                   (Exceptions )
                                   (StackMap )))
                        (method "matchNumber"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 6) (code_length . 318)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "intPat" "clojure.lang.LispReader" (class "java.util.regex.Pattern")))) 
                                      (3 (aload_0)) 
                                      (4 (invokevirtual (methodCP "matcher" "java.util.regex.Pattern" ((class "java.lang.CharSequence")) (class "java.util.regex.Matcher")))) 
                                      (7 (astore_1)) 
                                      (8 (aload_1)) 
                                      (9 (invokevirtual (methodCP "matches" "java.util.regex.Matcher" () boolean))) 
                                      (12 (ifeq 200)) ;;to TAG_0
                                      (15 (aload_1)) 
                                      (16 (iconst_2)) 
                                      (17 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (20 (ifnull 41))  ;;to TAG_1
                                      (23 (aload_1)) 
                                      (24 (bipush 8)) 
                                      (26 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (29 (ifnull 36)) ;;to TAG_2
                                      (32 (getstatic (fieldCP "ZERO" "clojure.lang.BigInt" (class "clojure.lang.BigInt")))) 
                                      (35 (areturn)) 
                                      (36 (lconst_0)) ;;at TAG_2
                                      (37 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (40 (areturn)) 
                                      (41 (aload_1)) ;;at TAG_1
                                      (42 (iconst_1)) 
                                      (43 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (46 (ldc 16)) ;;STRING:: "-"
                                      (48 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (51 (istore_2)) 
                                      (52 (bipush 10)) 
                                      (54 (istore 4)) 
                                      (56 (aload_1)) 
                                      (57 (iconst_3)) 
                                      (58 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (61 (dup)) 
                                      (62 (astore_3)) 
                                      (63 (ifnull 73)) ;;to TAG_3
                                      (66 (bipush 10)) 
                                      (68 (istore 4)) 
                                      (70 (goto 129)) ;;to TAG_4
                                      (73 (aload_1)) ;;at TAG_3
                                      (74 (iconst_4)) 
                                      (75 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (78 (dup)) 
                                      (79 (astore_3)) 
                                      (80 (ifnull 90)) ;;to TAG_5
                                      (83 (bipush 16)) 
                                      (85 (istore 4)) 
                                      (87 (goto 129)) ;;to TAG_4
                                      (90 (aload_1)) ;;at TAG_5
                                      (91 (iconst_5)) 
                                      (92 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (95 (dup)) 
                                      (96 (astore_3)) 
                                      (97 (ifnull 107)) ;;to TAG_6
                                      (100 (bipush 8)) 
                                      (102 (istore 4)) 
                                      (104 (goto 129)) ;;to TAG_4
                                      (107 (aload_1)) ;;at TAG_6
                                      (108 (bipush 7)) 
                                      (110 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (113 (dup)) 
                                      (114 (astore_3)) 
                                      (115 (ifnull 129)) ;;to TAG_4
                                      (118 (aload_1)) 
                                      (119 (bipush 6)) 
                                      (121 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (124 (invokestatic (methodCP "parseInt" "java.lang.Integer" ((class "java.lang.String")) int))) 
                                      (127 (istore 4)) 
                                      (129 (aload_3)) ;;at TAG_4
                                      (130 (ifnonnull 135)) ;;to TAG_7
                                      (133 (aconst_null)) 
                                      (134 (areturn)) 
                                      (135 (new (class "java.math.BigInteger"))) ;;at TAG_7
                                      (138 (dup)) 
                                      (139 (aload_3)) 
                                      (140 (iload 4)) 
                                      (142 (invokespecial (methodCP "<init>" "java.math.BigInteger" ((class "java.lang.String") int) void))) 
                                      (145 (astore 5)) 
                                      (147 (iload_2)) 
                                      (148 (ifeq 158)) ;;to TAG_8
                                      (151 (aload 5)) 
                                      (153 (invokevirtual (methodCP "negate" "java.math.BigInteger" () (class "java.math.BigInteger")))) 
                                      (156 (astore 5)) 
                                      (158 (aload_1)) ;;at TAG_8
                                      (159 (bipush 8)) 
                                      (161 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (164 (ifnull 173)) ;;to TAG_9
                                      (167 (aload 5)) 
                                      (169 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (172 (areturn)) 
                                      (173 (aload 5)) ;;at TAG_9
                                      (175 (invokevirtual (methodCP "bitLength" "java.math.BigInteger" () int))) 
                                      (178 (bipush 64)) 
                                      (180 (if_icmpge 194)) ;;to TAG_10
                                      (183 (aload 5)) 
                                      (185 (invokevirtual (methodCP "longValue" "java.math.BigInteger" () long))) 
                                      (188 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (191 (goto 199)) ;;to TAG_11
                                      (194 (aload 5)) ;;at TAG_10
                                      (196 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (199 (areturn)) ;;at TAG_11
                                      (200 (getstatic (fieldCP "floatPat" "clojure.lang.LispReader" (class "java.util.regex.Pattern")))) ;;at TAG_0
                                      (203 (aload_0)) 
                                      (204 (invokevirtual (methodCP "matcher" "java.util.regex.Pattern" ((class "java.lang.CharSequence")) (class "java.util.regex.Matcher")))) 
                                      (207 (astore_1)) 
                                      (208 (aload_1)) 
                                      (209 (invokevirtual (methodCP "matches" "java.util.regex.Matcher" () boolean))) 
                                      (212 (ifeq 244)) ;;to TAG_12
                                      (215 (aload_1)) 
                                      (216 (iconst_4)) 
                                      (217 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (220 (ifnull 236)) ;;to TAG_13
                                      (223 (new (class "java.math.BigDecimal"))) 
                                      (226 (dup)) 
                                      (227 (aload_1)) 
                                      (228 (iconst_1)) 
                                      (229 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (232 (invokespecial (methodCP "<init>" "java.math.BigDecimal" ((class "java.lang.String")) void))) 
                                      (235 (areturn)) 
                                      (236 (aload_0)) ;;at TAG_13
                                      (237 (invokestatic (methodCP "parseDouble" "java.lang.Double" ((class "java.lang.String")) double))) 
                                      (240 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (243 (areturn)) 
                                      (244 (getstatic (fieldCP "ratioPat" "clojure.lang.LispReader" (class "java.util.regex.Pattern")))) ;;at TAG_12
                                      (247 (aload_0)) 
                                      (248 (invokevirtual (methodCP "matcher" "java.util.regex.Pattern" ((class "java.lang.CharSequence")) (class "java.util.regex.Matcher")))) 
                                      (251 (astore_1)) 
                                      (252 (aload_1)) 
                                      (253 (invokevirtual (methodCP "matches" "java.util.regex.Matcher" () boolean))) 
                                      (256 (ifeq 316)) ;;to TAG_14
                                      (259 (aload_1)) 
                                      (260 (iconst_1)) 
                                      (261 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (264 (astore_2)) 
                                      (265 (aload_2)) 
                                      (266 (ldc 17)) ;;STRING:: "+"
                                      (268 (invokevirtual (methodCP "startsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (271 (ifeq 280)) ;;to TAG_15
                                      (274 (aload_2)) 
                                      (275 (iconst_1)) 
                                      (276 (invokevirtual (methodCP "substring" "java.lang.String" (int) (class "java.lang.String")))) 
                                      (279 (astore_2)) 
                                      (280 (new (class "java.math.BigInteger"))) ;;at TAG_15
                                      (283 (dup)) 
                                      (284 (aload_2)) 
                                      (285 (invokespecial (methodCP "<init>" "java.math.BigInteger" ((class "java.lang.String")) void))) 
                                      (288 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (291 (invokestatic (methodCP "reduceBigInt" "clojure.lang.Numbers" ((class "clojure.lang.BigInt")) (class "java.lang.Number")))) 
                                      (294 (new (class "java.math.BigInteger"))) 
                                      (297 (dup)) 
                                      (298 (aload_1)) 
                                      (299 (iconst_2)) 
                                      (300 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (303 (invokespecial (methodCP "<init>" "java.math.BigInteger" ((class "java.lang.String")) void))) 
                                      (306 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (309 (invokestatic (methodCP "reduceBigInt" "clojure.lang.Numbers" ((class "clojure.lang.BigInt")) (class "java.lang.Number")))) 
                                      (312 (invokestatic (methodCP "divide" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (315 (areturn)) 
                                      (316 (aconst_null)) ;;at TAG_14
                                      (317 (areturn)) 
                                      (endofcode 318))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getMacro"
                              (parameters int)
                              (returntype . (class "clojure.lang.IFn"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 16)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn"))))) 
                                      (4 (arraylength)) 
                                      (5 (if_icmpge 14))  ;;to TAG_0
                                      (8 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn"))))) 
                                      (11 (iload_0)) 
                                      (12 (aaload)) 
                                      (13 (areturn)) 
                                      (14 (aconst_null)) ;;at TAG_0
                                      (15 (areturn)) 
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isMacro"
                              (parameters int)
                              (returntype . boolean)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn"))))) 
                                      (4 (arraylength)) 
                                      (5 (if_icmpge 20))  ;;to TAG_0
                                      (8 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn"))))) 
                                      (11 (iload_0)) 
                                      (12 (aaload)) 
                                      (13 (ifnull 20))  ;;to TAG_0
                                      (16 (iconst_1)) 
                                      (17 (goto 21)) ;;to TAG_1
                                      (20 (iconst_0)) ;;at TAG_0
                                      (21 (ireturn)) ;;at TAG_1
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isTerminatingMacro"
                              (parameters int)
                              (returntype . boolean)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 31)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (bipush 35)) 
                                      (3 (if_icmpeq 29))  ;;to TAG_0
                                      (6 (iload_0)) 
                                      (7 (bipush 39)) 
                                      (9 (if_icmpeq 29))  ;;to TAG_0
                                      (12 (iload_0)) 
                                      (13 (bipush 37)) 
                                      (15 (if_icmpeq 29))  ;;to TAG_0
                                      (18 (iload_0)) 
                                      (19 (invokestatic (methodCP "isMacro" "clojure.lang.LispReader" (int) boolean))) 
                                      (22 (ifeq 29))  ;;to TAG_0
                                      (25 (iconst_1)) 
                                      (26 (goto 30)) ;;to TAG_1
                                      (29 (iconst_0)) ;;at TAG_0
                                      (30 (ireturn)) ;;at TAG_1
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap )))
                        (method "garg"
                              (parameters int)
                              (returntype . (class "clojure.lang.Symbol"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 63)
                                   (parsedcode
                                      (0 (aconst_null)) 
                                      (1 (new (class "java.lang.StringBuilder"))) 
                                      (4 (dup)) 
                                      (5 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (8 (iload_0)) 
                                      (9 (iconst_m1)) 
                                      (10 (if_icmpne 18))  ;;to TAG_0
                                      (13 (ldc 18)) ;;STRING:: "rest"
                                      (15 (goto 37)) ;;to TAG_1
                                      (18 (new (class "java.lang.StringBuilder"))) ;;at TAG_0
                                      (21 (dup)) 
                                      (22 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (25 (ldc 19)) ;;STRING:: "p"
                                      (27 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (30 (iload_0)) 
                                      (31 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (34 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (37 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) ;;at TAG_1
                                      (40 (ldc 20)) ;;STRING:: "__"
                                      (42 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (45 (invokestatic (methodCP "nextID" "clojure.lang.RT" () int))) 
                                      (48 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (51 (ldc 21)) ;;STRING:: "#"
                                      (53 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (56 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (59 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (62 (areturn)) 
                                      (endofcode 63))
                                   (Exceptions )
                                   (StackMap )))
                        (method "registerArg"
                              (parameters int)
                              (returntype . (class "clojure.lang.Symbol"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 63)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "ARG_ENV" "clojure.lang.LispReader" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.PersistentTreeMap"))) 
                                      (9 (astore_1)) 
                                      (10 (aload_1)) 
                                      (11 (ifnonnull 24))  ;;to TAG_0
                                      (14 (new (class "java.lang.IllegalStateException"))) 
                                      (17 (dup)) 
                                      (18 (ldc 22)) ;;STRING:: "arg literal not in #()"
                                      (20 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (23 (athrow)) 
                                      (24 (aload_1)) ;;at TAG_0
                                      (25 (iload_0)) 
                                      (26 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (29 (invokevirtual (methodCP "valAt" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (32 (checkcast (class "clojure.lang.Symbol"))) 
                                      (35 (astore_2)) 
                                      (36 (aload_2)) 
                                      (37 (ifnonnull 61)) ;;to TAG_1
                                      (40 (iload_0)) 
                                      (41 (invokestatic (methodCP "garg" "clojure.lang.LispReader" (int) (class "clojure.lang.Symbol")))) 
                                      (44 (astore_2)) 
                                      (45 (getstatic (fieldCP "ARG_ENV" "clojure.lang.LispReader" (class "clojure.lang.Var")))) 
                                      (48 (aload_1)) 
                                      (49 (iload_0)) 
                                      (50 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (53 (aload_2)) 
                                      (54 (invokevirtual (methodCP "assoc" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.PersistentTreeMap")))) 
                                      (57 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (60 (pop)) 
                                      (61 (aload_2)) ;;at TAG_1
                                      (62 (areturn)) 
                                      (endofcode 63))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isUnquoteSplicing"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "clojure.lang.ISeq"))) 
                                      (4 (ifeq 24))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (11 (getstatic (fieldCP "UNQUOTE_SPLICING" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (14 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (17 (ifeq 24))  ;;to TAG_0
                                      (20 (iconst_1)) 
                                      (21 (goto 25)) ;;to TAG_1
                                      (24 (iconst_0)) ;;at TAG_0
                                      (25 (ireturn)) ;;at TAG_1
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isUnquote"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "clojure.lang.ISeq"))) 
                                      (4 (ifeq 24))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (11 (getstatic (fieldCP "UNQUOTE" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (14 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (17 (ifeq 24))  ;;to TAG_0
                                      (20 (iconst_1)) 
                                      (21 (goto 25)) ;;to TAG_1
                                      (24 (iconst_0)) ;;at TAG_0
                                      (25 (ireturn)) ;;at TAG_1
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "readDelimitedList"
                              (parameters char (class "java.io.PushbackReader") boolean)
                              (returntype . (class "java.util.List"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 8) (code_length . 179)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (instanceof (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (4 (ifeq 17)) ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (checkcast (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (11 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (14 (goto 18))  ;;to TAG_1
                                      (17 (iconst_m1)) ;;at TAG_0
                                      (18 (istore_3)) ;;at TAG_1
                                      (19 (new (class "java.util.ArrayList"))) 
                                      (22 (dup)) 
                                      (23 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (26 (astore 4)) 
                                      (28 (aload_1)) ;;at TAG_11
                                      (29 (invokestatic (methodCP "read1" "clojure.lang.LispReader" ((class "java.io.Reader")) int))) 
                                      (32 (istore 5)) 
                                      (34 (iload 5)) ;;at TAG_3
                                      (36 (invokestatic (methodCP "isWhitespace" "clojure.lang.LispReader" (int) boolean))) 
                                      (39 (ifeq 51)) ;;to TAG_2
                                      (42 (aload_1)) 
                                      (43 (invokestatic (methodCP "read1" "clojure.lang.LispReader" ((class "java.io.Reader")) int))) 
                                      (46 (istore 5)) 
                                      (48 (goto 34)) ;;to TAG_3
                                      (51 (iload 5)) ;;at TAG_2
                                      (53 (iconst_m1)) 
                                      (54 (if_icmpne 90)) ;;to TAG_4
                                      (57 (iload_3)) 
                                      (58 (ifge 67)) ;;to TAG_5
                                      (61 (ldc 1)) ;;STRING:: "EOF while reading"
                                      (63 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (66 (athrow)) 
                                      (67 (new (class "java.lang.StringBuilder"))) ;;at TAG_5
                                      (70 (dup)) 
                                      (71 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (74 (ldc 23)) ;;STRING:: "EOF while reading, starting at line "
                                      (76 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (79 (iload_3)) 
                                      (80 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (83 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (86 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (89 (athrow)) 
                                      (90 (iload 5)) ;;at TAG_4
                                      (92 (iload_0)) 
                                      (93 (if_icmpne 99)) ;;to TAG_6
                                      (96 (goto 176)) ;;to TAG_7
                                      (99 (iload 5)) ;;at TAG_6
                                      (101 (invokestatic (methodCP "getMacro" "clojure.lang.LispReader" (int) (class "clojure.lang.IFn")))) 
                                      (104 (astore 6)) 
                                      (106 (aload 6)) 
                                      (108 (ifnull 144)) ;;to TAG_8
                                      (111 (aload 6)) 
                                      (113 (aload_1)) 
                                      (114 (iload 5)) 
                                      (116 (i2c)) 
                                      (117 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (120 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (125 (astore 7)) 
                                      (127 (aload 7)) 
                                      (129 (aload_1)) 
                                      (130 (if_acmpeq 141)) ;;to TAG_9
                                      (133 (aload 4)) 
                                      (135 (aload 7)) 
                                      (137 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (140 (pop)) 
                                      (141 (goto 173)) ;;to TAG_10;;at TAG_9
                                      (144 (aload_1)) ;;at TAG_8
                                      (145 (iload 5)) 
                                      (147 (invokestatic (methodCP "unread" "clojure.lang.LispReader" ((class "java.io.PushbackReader") int) void))) 
                                      (150 (aload_1)) 
                                      (151 (iconst_1)) 
                                      (152 (aconst_null)) 
                                      (153 (iload_2)) 
                                      (154 (invokestatic (methodCP "read" "clojure.lang.LispReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (157 (astore 7)) 
                                      (159 (aload 7)) 
                                      (161 (aload_1)) 
                                      (162 (if_acmpeq 173)) ;;to TAG_10
                                      (165 (aload 4)) 
                                      (167 (aload 7)) 
                                      (169 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (172 (pop)) 
                                      (173 (goto 28)) ;;to TAG_11;;at TAG_10
                                      (176 (aload 4)) ;;at TAG_7
                                      (178 (areturn)) 
                                      (endofcode 179))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$000"
                              (parameters (class "java.io.PushbackReader") int int int boolean)
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (iload_2))
                                      (3 (iload_3))
                                      (4 (iload 4))
                                      (6 (invokestatic
					(methodCP "readUnicodeChar" "clojure.lang.LispReader" ((class "java.io.PushbackReader") int int int boolean) int)))
                                      (9 (ireturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$100"
                              (parameters (class "java.io.PushbackReader") char)
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (invokestatic
					(methodCP "readToken" "clojure.lang.LispReader" ((class "java.io.PushbackReader") char) (class "java.lang.String"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$200"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
					(methodCP "interpretToken" "clojure.lang.LispReader" ((class "java.lang.String")) (class "java.lang.Object"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$300"
                              (parameters int)
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (invokestatic
					(methodCP "isTerminatingMacro" "clojure.lang.LispReader" (int) boolean)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$400"
                              (parameters (class "java.lang.String") int int int)
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (iload_2))
                                      (3 (iload_3))
                                      (4 (invokestatic
					(methodCP "readUnicodeChar" "clojure.lang.LispReader" ((class "java.lang.String") int int int) int)))
                                      (7 (ireturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 0) (code_length . 575)
                                   (parsedcode
                                      (0 (ldc 24))        ;;STRING:: "quote"
                                      (2 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (5 (putstatic (fieldCP "QUOTE" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (8 (ldc 25))        ;;STRING:: "var"
                                      (10 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (13 (putstatic (fieldCP "THE_VAR" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (16 (ldc 26))       ;;STRING:: "clojure.core"
                                      (18 (ldc 27))       ;;STRING:: "unquote"
                                      (20 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (23 (putstatic (fieldCP "UNQUOTE" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (26 (ldc 26))       ;;STRING:: "clojure.core"
                                      (28 (ldc 28))       ;;STRING:: "unquote-splicing"
                                      (30 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (33 (putstatic (fieldCP "UNQUOTE_SPLICING" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (36 (ldc 26))       ;;STRING:: "clojure.core"
                                      (38 (ldc 29))       ;;STRING:: "concat"
                                      (40 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (43 (putstatic (fieldCP "CONCAT" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (46 (ldc 26))       ;;STRING:: "clojure.core"
                                      (48 (ldc 30))       ;;STRING:: "seq"
                                      (50 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (53 (putstatic (fieldCP "SEQ" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (56 (ldc 26))       ;;STRING:: "clojure.core"
                                      (58 (ldc 31))       ;;STRING:: "list"
                                      (60 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (63 (putstatic (fieldCP "LIST" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (66 (ldc 26))       ;;STRING:: "clojure.core"
                                      (68 (ldc 32))       ;;STRING:: "apply"
                                      (70 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (73 (putstatic (fieldCP "APPLY" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (76 (ldc 26))       ;;STRING:: "clojure.core"
                                      (78 (ldc 33))       ;;STRING:: "hash-map"
                                      (80 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (83 (putstatic (fieldCP "HASHMAP" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (86 (ldc 26))       ;;STRING:: "clojure.core"
                                      (88 (ldc 34))       ;;STRING:: "hash-set"
                                      (90 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (93 (putstatic (fieldCP "HASHSET" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (96 (ldc 26))       ;;STRING:: "clojure.core"
                                      (98 (ldc 35))       ;;STRING:: "vector"
                                      (100 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (103 (putstatic (fieldCP "VECTOR" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (106 (ldc 26))      ;;STRING:: "clojure.core"
                                      (108 (ldc 36))      ;;STRING:: "with-meta"
                                      (110 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (113 (putstatic (fieldCP "WITH_META" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (116 (ldc 26))      ;;STRING:: "clojure.core"
                                      (118 (ldc 37))      ;;STRING:: "meta"
                                      (120 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (123 (putstatic (fieldCP "META" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (126 (ldc 26))      ;;STRING:: "clojure.core"
                                      (128 (ldc 38))      ;;STRING:: "deref"
                                      (130 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (133 (putstatic (fieldCP "DEREF" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (136 (aconst_null))
                                      (137 (ldc 39))      ;;STRING:: "unknown"
                                      (139 (invokestatic
					(methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (142 (putstatic (fieldCP "UNKNOWN" "clojure.lang.LispReader" (class "clojure.lang.Keyword"))))
                                      (145 (sipush 256))
                                      (148 (anewarray (class "clojure.lang.IFn")))
                                      (151 (putstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (154 (sipush 256))
                                      (157 (anewarray (class "clojure.lang.IFn")))
                                      (160 (putstatic (fieldCP "dispatchMacros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (163 (ldc 40))      ;;STRING:: "[:]?([\\D&&[^/]].*/)?([\\D&&[^/]][^/]*)"
                                      (165 (invokestatic
					(methodCP "compile" "java.util.regex.Pattern" ((class "java.lang.String")) (class "java.util.regex.Pattern"))))
                                      (168 (putstatic (fieldCP "symbolPat" "clojure.lang.LispReader" (class "java.util.regex.Pattern"))))
                                      (171 (ldc 41))      ;;STRING:: "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?"
                                      (173 (invokestatic
					(methodCP "compile" "java.util.regex.Pattern" ((class "java.lang.String")) (class "java.util.regex.Pattern"))))
                                      (176 (putstatic (fieldCP "intPat" "clojure.lang.LispReader" (class "java.util.regex.Pattern"))))
                                      (179 (ldc 42))      ;;STRING:: "([-+]?[0-9]+)/([0-9]+)"
                                      (181 (invokestatic
					(methodCP "compile" "java.util.regex.Pattern" ((class "java.lang.String")) (class "java.util.regex.Pattern"))))
                                      (184 (putstatic (fieldCP "ratioPat" "clojure.lang.LispReader" (class "java.util.regex.Pattern"))))
                                      (187 (ldc 43))      ;;STRING:: "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?"
                                      (189 (invokestatic
					(methodCP "compile" "java.util.regex.Pattern" ((class "java.lang.String")) (class "java.util.regex.Pattern"))))
                                      (192 (putstatic (fieldCP "floatPat" "clojure.lang.LispReader" (class "java.util.regex.Pattern"))))
                                      (195 (ldc 10))      ;;STRING:: "/"
                                      (197 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (200 (putstatic (fieldCP "SLASH" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (203 (ldc 26))      ;;STRING:: "clojure.core"
                                      (205 (ldc 10))      ;;STRING:: "/"
                                      (207 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (210 (putstatic (fieldCP "CLOJURE_SLASH" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (213 (aconst_null))
                                      (214 (invokestatic
					(methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var"))))
                                      (217 (invokevirtual
					(methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var"))))
                                      (220 (putstatic (fieldCP "GENSYM_ENV" "clojure.lang.LispReader" (class "clojure.lang.Var"))))
                                      (223 (aconst_null))
                                      (224 (invokestatic
					(methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var"))))
                                      (227 (invokevirtual
					(methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var"))))
                                      (230 (putstatic (fieldCP "ARG_ENV" "clojure.lang.LispReader" (class "clojure.lang.Var"))))
                                      (233 (new (class "clojure.lang.LispReader$CtorReader")))
                                      (236 (dup))
                                      (237 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$CtorReader" () void)))
                                      (240 (putstatic (fieldCP "ctorReader" "clojure.lang.LispReader" (class "clojure.lang.IFn"))))
                                      (243 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (246 (bipush 34))
                                      (248 (new (class "clojure.lang.LispReader$StringReader")))
                                      (251 (dup))
                                      (252 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$StringReader" () void)))
                                      (255 (aastore))
                                      (256 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (259 (bipush 59))
                                      (261 (new (class "clojure.lang.LispReader$CommentReader")))
                                      (264 (dup))
                                      (265 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$CommentReader" () void)))
                                      (268 (aastore))
                                      (269 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (272 (bipush 39))
                                      (274 (new (class "clojure.lang.LispReader$WrappingReader")))
                                      (277 (dup))
                                      (278 (getstatic (fieldCP "QUOTE" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (281 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$WrappingReader" ((class "clojure.lang.Symbol")) void)))
                                      (284 (aastore))
                                      (285 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (288 (bipush 64))
                                      (290 (new (class "clojure.lang.LispReader$WrappingReader")))
                                      (293 (dup))
                                      (294 (getstatic (fieldCP "DEREF" "clojure.lang.LispReader" (class "clojure.lang.Symbol"))))
                                      (297 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$WrappingReader" ((class "clojure.lang.Symbol")) void)))
                                      (300 (aastore))
                                      (301 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (304 (bipush 94))
                                      (306 (new (class "clojure.lang.LispReader$MetaReader")))
                                      (309 (dup))
                                      (310 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$MetaReader" () void)))
                                      (313 (aastore))
                                      (314 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (317 (bipush 96))
                                      (319 (new (class "clojure.lang.LispReader$SyntaxQuoteReader")))
                                      (322 (dup))
                                      (323 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$SyntaxQuoteReader" () void)))
                                      (326 (aastore))
                                      (327 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (330 (bipush 126))
                                      (332 (new (class "clojure.lang.LispReader$UnquoteReader")))
                                      (335 (dup))
                                      (336 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$UnquoteReader" () void)))
                                      (339 (aastore))
                                      (340 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (343 (bipush 40))
                                      (345 (new (class "clojure.lang.LispReader$ListReader")))
                                      (348 (dup))
                                      (349 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$ListReader" () void)))
                                      (352 (aastore))
                                      (353 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (356 (bipush 41))
                                      (358 (new (class "clojure.lang.LispReader$UnmatchedDelimiterReader")))
                                      (361 (dup))
                                      (362 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$UnmatchedDelimiterReader" () void)))
                                      (365 (aastore))
                                      (366 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (369 (bipush 91))
                                      (371 (new (class "clojure.lang.LispReader$VectorReader")))
                                      (374 (dup))
                                      (375 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$VectorReader" () void)))
                                      (378 (aastore))
                                      (379 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (382 (bipush 93))
                                      (384 (new (class "clojure.lang.LispReader$UnmatchedDelimiterReader")))
                                      (387 (dup))
                                      (388 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$UnmatchedDelimiterReader" () void)))
                                      (391 (aastore))
                                      (392 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (395 (bipush 123))
                                      (397 (new (class "clojure.lang.LispReader$MapReader")))
                                      (400 (dup))
                                      (401 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$MapReader" () void)))
                                      (404 (aastore))
                                      (405 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (408 (bipush 125))
                                      (410 (new (class "clojure.lang.LispReader$UnmatchedDelimiterReader")))
                                      (413 (dup))
                                      (414 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$UnmatchedDelimiterReader" () void)))
                                      (417 (aastore))
                                      (418 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (421 (bipush 92))
                                      (423 (new (class "clojure.lang.LispReader$CharacterReader")))
                                      (426 (dup))
                                      (427 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$CharacterReader" () void)))
                                      (430 (aastore))
                                      (431 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (434 (bipush 37))
                                      (436 (new (class "clojure.lang.LispReader$ArgReader")))
                                      (439 (dup))
                                      (440 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$ArgReader" () void)))
                                      (443 (aastore))
                                      (444 (getstatic (fieldCP "macros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (447 (bipush 35))
                                      (449 (new (class "clojure.lang.LispReader$DispatchReader")))
                                      (452 (dup))
                                      (453 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$DispatchReader" () void)))
                                      (456 (aastore))
                                      (457 (getstatic (fieldCP "dispatchMacros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (460 (bipush 94))
                                      (462 (new (class "clojure.lang.LispReader$MetaReader")))
                                      (465 (dup))
                                      (466 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$MetaReader" () void)))
                                      (469 (aastore))
                                      (470 (getstatic (fieldCP "dispatchMacros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (473 (bipush 39))
                                      (475 (new (class "clojure.lang.LispReader$VarReader")))
                                      (478 (dup))
                                      (479 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$VarReader" () void)))
                                      (482 (aastore))
                                      (483 (getstatic (fieldCP "dispatchMacros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (486 (bipush 34))
                                      (488 (new (class "clojure.lang.LispReader$RegexReader")))
                                      (491 (dup))
                                      (492 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$RegexReader" () void)))
                                      (495 (aastore))
                                      (496 (getstatic (fieldCP "dispatchMacros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (499 (bipush 40))
                                      (501 (new (class "clojure.lang.LispReader$FnReader")))
                                      (504 (dup))
                                      (505 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$FnReader" () void)))
                                      (508 (aastore))
                                      (509 (getstatic (fieldCP "dispatchMacros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (512 (bipush 123))
                                      (514 (new (class "clojure.lang.LispReader$SetReader")))
                                      (517 (dup))
                                      (518 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$SetReader" () void)))
                                      (521 (aastore))
                                      (522 (getstatic (fieldCP "dispatchMacros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (525 (bipush 61))
                                      (527 (new (class "clojure.lang.LispReader$EvalReader")))
                                      (530 (dup))
                                      (531 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$EvalReader" () void)))
                                      (534 (aastore))
                                      (535 (getstatic (fieldCP "dispatchMacros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (538 (bipush 33))
                                      (540 (new (class "clojure.lang.LispReader$CommentReader")))
                                      (543 (dup))
                                      (544 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$CommentReader" () void)))
                                      (547 (aastore))
                                      (548 (getstatic (fieldCP "dispatchMacros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (551 (bipush 60))
                                      (553 (new (class "clojure.lang.LispReader$UnreadableReader")))
                                      (556 (dup))
                                      (557 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$UnreadableReader" () void)))
                                      (560 (aastore))
                                      (561 (getstatic (fieldCP "dispatchMacros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn")))))
                                      (564 (bipush 95))
                                      (566 (new (class "clojure.lang.LispReader$DiscardReader")))
                                      (569 (dup))
                                      (570 (invokespecial
					(methodCP "<init>" "clojure.lang.LispReader$DiscardReader" () void)))
                                      (573 (aastore))
                                      (574 (return))
                                      (endofcode 575))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *LispReader-class-table*
  (make-static-class-decls 
   *clojure.lang.LispReader*))

(defconst *package-name-map* 
  ("clojure.lang.LispReader" . "clojure.lang"))

