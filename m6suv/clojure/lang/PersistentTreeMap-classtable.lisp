; PersistentTreeMap-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentTreeMap*
 (make-class-def
      '(class "clojure.lang.PersistentTreeMap"
            "clojure.lang.APersistentMap"
            (constant_pool
                        (STRING  "No value supplied for key: %s")
                        (STRING  "Key already present")
                        (STRING  "Invariant violation"))
            (fields
                        (field "comp" (class "java.util.Comparator") (accessflags  *class*  *final*  *public* ) -1)
                        (field "tree" (class "clojure.lang.PersistentTreeMap$Node") (accessflags  *class*  *final*  *public* ) -1)
                        (field "_count" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "_meta" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *final* ) -1)
                        (field "EMPTY" (class "clojure.lang.PersistentTreeMap") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "create"
                              (parameters (class "java.util.Map"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 64)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap")))) 
                                      (3 (astore_1)) 
                                      (4 (aload_0)) 
                                      (5 (invokeinterface (methodCP "entrySet" "java.util.Map" () (class "java.util.Set")) 1)) 
                                      (10 (invokeinterface (methodCP "iterator" "java.util.Set" () (class "java.util.Iterator")) 1)) 
                                      (15 (astore_2)) 
                                      (16 (aload_2)) ;;at TAG_1
                                      (17 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (22 (ifeq 62))  ;;to TAG_0
                                      (25 (aload_2)) 
                                      (26 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (31 (astore_3)) 
                                      (32 (aload_3)) 
                                      (33 (checkcast (class "java.util.Map$Entry"))) 
                                      (36 (astore 4)) 
                                      (38 (aload_1)) 
                                      (39 (aload 4)) 
                                      (41 (invokeinterface (methodCP "getKey" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (46 (aload 4)) 
                                      (48 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (53 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (58 (astore_1)) 
                                      (59 (goto 16)) ;;to TAG_1
                                      (62 (aload_1)) ;;at TAG_0
                                      (63 (areturn)) 
                                      (endofcode 64))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getstatic (fieldCP "DEFAULT_COMPARATOR" "clojure.lang.RT" (class "java.util.Comparator"))))
                                      (4 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap" ((class "java.util.Comparator")) void)))
                                      (7 (return))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.PersistentTreeMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 21)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentTreeMap")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "comp" "clojure.lang.PersistentTreeMap" (class "java.util.Comparator"))))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (13 (aload_0))
                                      (14 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int)))
                                      (17 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.IPersistentMap") (class "java.util.Comparator") (class "clojure.lang.PersistentTreeMap$Node") int) void)))
                                      (20 (areturn))
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.util.Comparator"))
                              (returntype . void)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aconst_null))
                                      (2 (aload_1))
                                      (3 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.IPersistentMap") (class "java.util.Comparator")) void)))
                                      (6 (return))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (class "java.util.Comparator"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 25)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentMap" () void)))
                                      (4 (aload_0))
                                      (5 (aload_2))
                                      (6 (putfield (fieldCP "comp" "clojure.lang.PersistentTreeMap" (class "java.util.Comparator"))))
                                      (9 (aload_0))
                                      (10 (aload_1))
                                      (11 (putfield (fieldCP "_meta" "clojure.lang.PersistentTreeMap" (class "clojure.lang.IPersistentMap"))))
                                      (14 (aload_0))
                                      (15 (aconst_null))
                                      (16 (putfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (19 (aload_0))
                                      (20 (iconst_0))
                                      (21 (putfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int)))
                                      (24 (return))
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (class "java.util.Comparator") (class "clojure.lang.PersistentTreeMap$Node") int)
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentMap" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "_meta" "clojure.lang.PersistentTreeMap" (class "clojure.lang.IPersistentMap"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "comp" "clojure.lang.PersistentTreeMap" (class "java.util.Comparator"))))
                                      (14 (aload_0))
                                      (15 (aload_3))
                                      (16 (putfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (19 (aload_0))
                                      (20 (iload 4))
                                      (22 (putfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int)))
                                      (25 (return))
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (class "clojure.lang.ISeq"))
                              (returntype . (class "clojure.lang.PersistentTreeMap"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 2) (code_length . 80)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap")))) 
                                      (3 (astore_1)) 
                                      (4 (aload_0)) ;;at TAG_2
                                      (5 (ifnull 75)) ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (14 (ifnonnull 43)) ;;to TAG_1
                                      (17 (new (class "java.lang.IllegalArgumentException"))) 
                                      (20 (dup)) 
                                      (21 (ldc 0)) ;;STRING:: "No value supplied for key: %s"
                                      (23 (iconst_1)) 
                                      (24 (anewarray (class "java.lang.Object"))) 
                                      (27 (dup)) 
                                      (28 (iconst_0)) 
                                      (29 (aload_0)) 
                                      (30 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (35 (aastore)) 
                                      (36 (invokestatic (methodCP "format" "java.lang.String" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.String")))) 
                                      (39 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (42 (athrow)) 
                                      (43 (aload_1)) ;;at TAG_1
                                      (44 (aload_0)) 
                                      (45 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (50 (aload_0)) 
                                      (51 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (54 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (59 (astore_1)) 
                                      (60 (aload_0)) 
                                      (61 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (66 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (71 (astore_0)) 
                                      (72 (goto 4))  ;;to TAG_2
                                      (75 (aload_1)) ;;at TAG_0
                                      (76 (checkcast (class "clojure.lang.PersistentTreeMap"))) 
                                      (79 (areturn)) 
                                      (endofcode 80))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (class "java.util.Comparator") (class "clojure.lang.ISeq"))
                              (returntype . (class "clojure.lang.PersistentTreeMap"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 3) (code_length . 85)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentTreeMap"))) 
                                      (3 (dup)) 
                                      (4 (aload_0)) 
                                      (5 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap" ((class "java.util.Comparator")) void))) 
                                      (8 (astore_2)) 
                                      (9 (aload_1)) ;;at TAG_2
                                      (10 (ifnull 80)) ;;to TAG_0
                                      (13 (aload_1)) 
                                      (14 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (19 (ifnonnull 48)) ;;to TAG_1
                                      (22 (new (class "java.lang.IllegalArgumentException"))) 
                                      (25 (dup)) 
                                      (26 (ldc 0)) ;;STRING:: "No value supplied for key: %s"
                                      (28 (iconst_1)) 
                                      (29 (anewarray (class "java.lang.Object"))) 
                                      (32 (dup)) 
                                      (33 (iconst_0)) 
                                      (34 (aload_1)) 
                                      (35 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (40 (aastore)) 
                                      (41 (invokestatic (methodCP "format" "java.lang.String" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.String")))) 
                                      (44 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (47 (athrow)) 
                                      (48 (aload_2)) ;;at TAG_1
                                      (49 (aload_1)) 
                                      (50 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (55 (aload_1)) 
                                      (56 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (59 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (64 (astore_2)) 
                                      (65 (aload_1)) 
                                      (66 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (71 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (76 (astore_1)) 
                                      (77 (goto 9))  ;;to TAG_2
                                      (80 (aload_2)) ;;at TAG_0
                                      (81 (checkcast (class "clojure.lang.PersistentTreeMap"))) 
                                      (84 (areturn)) 
                                      (endofcode 85))
                                   (Exceptions )
                                   (StackMap )))
                        (method "containsKey"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokevirtual (methodCP "entryAt" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (5 (ifnull 12))  ;;to TAG_0
                                      (8 (iconst_1)) 
                                      (9 (goto 13)) ;;to TAG_1
                                      (12 (iconst_0)) ;;at TAG_0
                                      (13 (ireturn)) ;;at TAG_1
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assocEx"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentTreeMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 5) (code_length . 60)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.Box"))) 
                                      (3 (dup)) 
                                      (4 (aconst_null)) 
                                      (5 (invokespecial (methodCP "<init>" "clojure.lang.Box" ((class "java.lang.Object")) void))) 
                                      (8 (astore_3)) 
                                      (9 (aload_0)) 
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (14 (aload_1)) 
                                      (15 (aload_2)) 
                                      (16 (aload_3)) 
                                      (17 (invokevirtual (methodCP "add" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (20 (astore 4)) 
                                      (22 (aload 4)) 
                                      (24 (ifnonnull 33))  ;;to TAG_0
                                      (27 (ldc 1)) ;;STRING:: "Key already present"
                                      (29 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (32 (athrow)) 
                                      (33 (new (class "clojure.lang.PersistentTreeMap"))) ;;at TAG_0
                                      (36 (dup)) 
                                      (37 (aload_0)) 
                                      (38 (getfield (fieldCP "comp" "clojure.lang.PersistentTreeMap" (class "java.util.Comparator")))) 
                                      (41 (aload 4)) 
                                      (43 (invokevirtual (methodCP "blacken" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (46 (aload_0)) 
                                      (47 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int))) 
                                      (50 (iconst_1)) 
                                      (51 (iadd)) 
                                      (52 (aload_0)) 
                                      (53 (invokevirtual (methodCP "meta" "clojure.lang.PersistentTreeMap" () (class "clojure.lang.IPersistentMap")))) 
                                      (56 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap" ((class "java.util.Comparator") (class "clojure.lang.PersistentTreeMap$Node") int (class "clojure.lang.IPersistentMap")) void))) 
                                      (59 (areturn)) 
                                      (endofcode 60))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentTreeMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 6) (code_length . 104)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.Box"))) 
                                      (3 (dup)) 
                                      (4 (aconst_null)) 
                                      (5 (invokespecial (methodCP "<init>" "clojure.lang.Box" ((class "java.lang.Object")) void))) 
                                      (8 (astore_3)) 
                                      (9 (aload_0)) 
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (14 (aload_1)) 
                                      (15 (aload_2)) 
                                      (16 (aload_3)) 
                                      (17 (invokevirtual (methodCP "add" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (20 (astore 4)) 
                                      (22 (aload 4)) 
                                      (24 (ifnonnull 77))  ;;to TAG_0
                                      (27 (aload_3)) 
                                      (28 (getfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (31 (checkcast (class "clojure.lang.PersistentTreeMap$Node"))) 
                                      (34 (astore 5)) 
                                      (36 (aload 5)) 
                                      (38 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (41 (aload_2)) 
                                      (42 (if_acmpne 47)) ;;to TAG_1
                                      (45 (aload_0)) 
                                      (46 (areturn)) 
                                      (47 (new (class "clojure.lang.PersistentTreeMap"))) ;;at TAG_1
                                      (50 (dup)) 
                                      (51 (aload_0)) 
                                      (52 (getfield (fieldCP "comp" "clojure.lang.PersistentTreeMap" (class "java.util.Comparator")))) 
                                      (55 (aload_0)) 
                                      (56 (aload_0)) 
                                      (57 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (60 (aload_1)) 
                                      (61 (aload_2)) 
                                      (62 (invokevirtual (methodCP "replace" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (65 (aload_0)) 
                                      (66 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int))) 
                                      (69 (aload_0)) 
                                      (70 (invokevirtual (methodCP "meta" "clojure.lang.PersistentTreeMap" () (class "clojure.lang.IPersistentMap")))) 
                                      (73 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap" ((class "java.util.Comparator") (class "clojure.lang.PersistentTreeMap$Node") int (class "clojure.lang.IPersistentMap")) void))) 
                                      (76 (areturn)) 
                                      (77 (new (class "clojure.lang.PersistentTreeMap"))) ;;at TAG_0
                                      (80 (dup)) 
                                      (81 (aload_0)) 
                                      (82 (getfield (fieldCP "comp" "clojure.lang.PersistentTreeMap" (class "java.util.Comparator")))) 
                                      (85 (aload 4)) 
                                      (87 (invokevirtual (methodCP "blacken" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (90 (aload_0)) 
                                      (91 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int))) 
                                      (94 (iconst_1)) 
                                      (95 (iadd)) 
                                      (96 (aload_0)) 
                                      (97 (invokevirtual (methodCP "meta" "clojure.lang.PersistentTreeMap" () (class "clojure.lang.IPersistentMap")))) 
                                      (100 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap" ((class "java.util.Comparator") (class "clojure.lang.PersistentTreeMap$Node") int (class "clojure.lang.IPersistentMap")) void))) 
                                      (103 (areturn)) 
                                      (endofcode 104))
                                   (Exceptions )
                                   (StackMap )))
                        (method "without"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentTreeMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 75)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.Box"))) 
                                      (3 (dup)) 
                                      (4 (aconst_null)) 
                                      (5 (invokespecial (methodCP "<init>" "clojure.lang.Box" ((class "java.lang.Object")) void))) 
                                      (8 (astore_2)) 
                                      (9 (aload_0)) 
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (14 (aload_1)) 
                                      (15 (aload_2)) 
                                      (16 (invokevirtual (methodCP "remove" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (19 (astore_3)) 
                                      (20 (aload_3)) 
                                      (21 (ifnonnull 49))  ;;to TAG_0
                                      (24 (aload_2)) 
                                      (25 (getfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (28 (ifnonnull 33)) ;;to TAG_1
                                      (31 (aload_0)) 
                                      (32 (areturn)) 
                                      (33 (new (class "clojure.lang.PersistentTreeMap"))) ;;at TAG_1
                                      (36 (dup)) 
                                      (37 (aload_0)) 
                                      (38 (invokevirtual (methodCP "meta" "clojure.lang.PersistentTreeMap" () (class "clojure.lang.IPersistentMap")))) 
                                      (41 (aload_0)) 
                                      (42 (getfield (fieldCP "comp" "clojure.lang.PersistentTreeMap" (class "java.util.Comparator")))) 
                                      (45 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.IPersistentMap") (class "java.util.Comparator")) void))) 
                                      (48 (areturn)) 
                                      (49 (new (class "clojure.lang.PersistentTreeMap"))) ;;at TAG_0
                                      (52 (dup)) 
                                      (53 (aload_0)) 
                                      (54 (getfield (fieldCP "comp" "clojure.lang.PersistentTreeMap" (class "java.util.Comparator")))) 
                                      (57 (aload_3)) 
                                      (58 (invokevirtual (methodCP "blacken" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (61 (aload_0)) 
                                      (62 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int))) 
                                      (65 (iconst_1)) 
                                      (66 (isub)) 
                                      (67 (aload_0)) 
                                      (68 (invokevirtual (methodCP "meta" "clojure.lang.PersistentTreeMap" () (class "clojure.lang.IPersistentMap")))) 
                                      (71 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap" ((class "java.util.Comparator") (class "clojure.lang.PersistentTreeMap$Node") int (class "clojure.lang.IPersistentMap")) void))) 
                                      (74 (areturn)) 
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap )))
                        (method "seq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int))) 
                                      (4 (ifle 20))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (11 (iconst_1)) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int))) 
                                      (16 (invokestatic (methodCP "create" "clojure.lang.PersistentTreeMap$Seq" ((class "clojure.lang.PersistentTreeMap$Node") boolean int) (class "clojure.lang.PersistentTreeMap$Seq")))) 
                                      (19 (areturn)) 
                                      (20 (aconst_null)) ;;at TAG_0
                                      (21 (areturn)) 
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "empty"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 16)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentTreeMap")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (invokevirtual
					(methodCP "meta" "clojure.lang.PersistentTreeMap" () (class "clojure.lang.IPersistentMap"))))
                                      (8 (aload_0))
                                      (9 (getfield (fieldCP "comp" "clojure.lang.PersistentTreeMap" (class "java.util.Comparator"))))
                                      (12 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.IPersistentMap") (class "java.util.Comparator")) void)))
                                      (15 (areturn))
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "rseq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int))) 
                                      (4 (ifle 20))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (11 (iconst_0)) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int))) 
                                      (16 (invokestatic (methodCP "create" "clojure.lang.PersistentTreeMap$Seq" ((class "clojure.lang.PersistentTreeMap$Node") boolean int) (class "clojure.lang.PersistentTreeMap$Seq")))) 
                                      (19 (areturn)) 
                                      (20 (aconst_null)) ;;at TAG_0
                                      (21 (areturn)) 
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "comparator"
                              (parameters )
                              (returntype . (class "java.util.Comparator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "comp" "clojure.lang.PersistentTreeMap" (class "java.util.Comparator"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "entryKey"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (checkcast (class "clojure.lang.IMapEntry")))
                                      (4 (invokeinterface
					(methodCP "key" "clojure.lang.IMapEntry" () (class "java.lang.Object")) 1))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "seq"
                              (parameters boolean)
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int))) 
                                      (4 (ifle 20))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (11 (iload_1)) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int))) 
                                      (16 (invokestatic (methodCP "create" "clojure.lang.PersistentTreeMap$Seq" ((class "clojure.lang.PersistentTreeMap$Node") boolean int) (class "clojure.lang.PersistentTreeMap$Seq")))) 
                                      (19 (areturn)) 
                                      (20 (aconst_null)) ;;at TAG_0
                                      (21 (areturn)) 
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "seqFrom"
                              (parameters (class "java.lang.Object") boolean)
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 138)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int))) 
                                      (4 (ifle 136)) ;;to TAG_0
                                      (7 (aconst_null)) 
                                      (8 (astore_3)) 
                                      (9 (aload_0)) 
                                      (10 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (13 (astore 4)) 
                                      (15 (aload 4)) ;;at TAG_7
                                      (17 (ifnull 122)) ;;to TAG_1
                                      (20 (aload_0)) 
                                      (21 (aload_1)) 
                                      (22 (aload 4)) 
                                      (24 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (27 (invokevirtual (methodCP "doCompare" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object")) int))) 
                                      (30 (istore 5)) 
                                      (32 (iload 5)) 
                                      (34 (ifne 54))  ;;to TAG_2
                                      (37 (aload 4)) 
                                      (39 (aload_3)) 
                                      (40 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (43 (astore_3)) 
                                      (44 (new (class "clojure.lang.PersistentTreeMap$Seq"))) 
                                      (47 (dup)) 
                                      (48 (aload_3)) 
                                      (49 (iload_2)) 
                                      (50 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$Seq" ((class "clojure.lang.ISeq") boolean) void))) 
                                      (53 (areturn)) 
                                      (54 (iload_2)) ;;at TAG_2
                                      (55 (ifeq 90)) ;;to TAG_3
                                      (58 (iload 5)) 
                                      (60 (ifge 80)) ;;to TAG_4
                                      (63 (aload 4)) 
                                      (65 (aload_3)) 
                                      (66 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (69 (astore_3)) 
                                      (70 (aload 4)) 
                                      (72 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (75 (astore 4)) 
                                      (77 (goto 119)) ;;to TAG_5
                                      (80 (aload 4)) ;;at TAG_4
                                      (82 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (85 (astore 4)) 
                                      (87 (goto 119)) ;;to TAG_5
                                      (90 (iload 5)) ;;at TAG_3
                                      (92 (ifle 112)) ;;to TAG_6
                                      (95 (aload 4)) 
                                      (97 (aload_3)) 
                                      (98 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (101 (astore_3)) 
                                      (102 (aload 4)) 
                                      (104 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (107 (astore 4)) 
                                      (109 (goto 119)) ;;to TAG_5
                                      (112 (aload 4)) ;;at TAG_6
                                      (114 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (117 (astore 4)) 
                                      (119 (goto 15)) ;;to TAG_7;;at TAG_5
                                      (122 (aload_3)) ;;at TAG_1
                                      (123 (ifnull 136)) ;;to TAG_0
                                      (126 (new (class "clojure.lang.PersistentTreeMap$Seq"))) 
                                      (129 (dup)) 
                                      (130 (aload_3)) 
                                      (131 (iload_2)) 
                                      (132 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$Seq" ((class "clojure.lang.ISeq") boolean) void))) 
                                      (135 (areturn)) 
                                      (136 (aconst_null)) ;;at TAG_0
                                      (137 (areturn)) 
                                      (endofcode 138))
                                   (Exceptions )
                                   (StackMap )))
                        (method "iterator"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentTreeMap$NodeIterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 13)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentTreeMap$NodeIterator")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (8 (iconst_1))
                                      (9 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap$NodeIterator" ((class "clojure.lang.PersistentTreeMap$Node") boolean) void)))
                                      (12 (areturn))
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "kvreduce"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 36)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (4 (ifnull 17))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (11 (aload_1)) 
                                      (12 (aload_2)) 
                                      (13 (invokevirtual (methodCP "kvreduce" "clojure.lang.PersistentTreeMap$Node" ((class "clojure.lang.IFn") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (16 (astore_2)) 
                                      (17 (aload_2)) ;;at TAG_0
                                      (18 (invokestatic (methodCP "isReduced" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (21 (ifeq 34)) ;;to TAG_1
                                      (24 (aload_2)) 
                                      (25 (checkcast (class "clojure.lang.IDeref"))) 
                                      (28 (invokeinterface (methodCP "deref" "clojure.lang.IDeref" () (class "java.lang.Object")) 1)) 
                                      (33 (astore_2)) 
                                      (34 (aload_2)) ;;at TAG_1
                                      (35 (areturn)) 
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap )))
                        (method "reverseIterator"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentTreeMap$NodeIterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 13)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentTreeMap$NodeIterator")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (8 (iconst_0))
                                      (9 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap$NodeIterator" ((class "clojure.lang.PersistentTreeMap$Node") boolean) void)))
                                      (12 (areturn))
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "keys"
                              (parameters )
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_0))
                                      (2 (invokevirtual
					(methodCP "iterator" "clojure.lang.PersistentTreeMap" () (class "clojure.lang.PersistentTreeMap$NodeIterator"))))
                                      (5 (invokevirtual
					(methodCP "keys" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$NodeIterator")) (class "java.util.Iterator"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "vals"
                              (parameters )
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_0))
                                      (2 (invokevirtual
					(methodCP "iterator" "clojure.lang.PersistentTreeMap" () (class "clojure.lang.PersistentTreeMap$NodeIterator"))))
                                      (5 (invokevirtual
					(methodCP "vals" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$NodeIterator")) (class "java.util.Iterator"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "keys"
                              (parameters (class "clojure.lang.PersistentTreeMap$NodeIterator"))
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 9)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentTreeMap$KeyIterator")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap$KeyIterator" ((class "clojure.lang.PersistentTreeMap$NodeIterator")) void)))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "vals"
                              (parameters (class "clojure.lang.PersistentTreeMap$NodeIterator"))
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 9)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentTreeMap$ValIterator")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap$ValIterator" ((class "clojure.lang.PersistentTreeMap$NodeIterator")) void)))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minKey"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "min" "clojure.lang.PersistentTreeMap" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (4 (astore_1)) 
                                      (5 (aload_1)) 
                                      (6 (ifnull 16))  ;;to TAG_0
                                      (9 (aload_1)) 
                                      (10 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (aconst_null)) ;;at TAG_0
                                      (17 (areturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "min"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (4 (astore_1)) 
                                      (5 (aload_1)) 
                                      (6 (ifnull 24))  ;;to TAG_0
                                      (9 (aload_1)) ;;at TAG_1
                                      (10 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (13 (ifnull 24))  ;;to TAG_0
                                      (16 (aload_1)) 
                                      (17 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (20 (astore_1)) 
                                      (21 (goto 9)) ;;to TAG_1
                                      (24 (aload_1)) ;;at TAG_0
                                      (25 (areturn)) 
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "maxKey"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "max" "clojure.lang.PersistentTreeMap" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (4 (astore_1)) 
                                      (5 (aload_1)) 
                                      (6 (ifnull 16))  ;;to TAG_0
                                      (9 (aload_1)) 
                                      (10 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (aconst_null)) ;;at TAG_0
                                      (17 (areturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "max"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (4 (astore_1)) 
                                      (5 (aload_1)) 
                                      (6 (ifnull 24))  ;;to TAG_0
                                      (9 (aload_1)) ;;at TAG_1
                                      (10 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (13 (ifnull 24))  ;;to TAG_0
                                      (16 (aload_1)) 
                                      (17 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (20 (astore_1)) 
                                      (21 (goto 9)) ;;to TAG_1
                                      (24 (aload_1)) ;;at TAG_0
                                      (25 (areturn)) 
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "depth"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_0))
                                      (2 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (5 (invokevirtual
					(methodCP "depth" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node")) int)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "depth"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . int)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 28)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnonnull 6))  ;;to TAG_0
                                      (4 (iconst_0)) 
                                      (5 (ireturn)) 
                                      (6 (iconst_1)) ;;at TAG_0
                                      (7 (aload_0)) 
                                      (8 (aload_1)) 
                                      (9 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (12 (invokevirtual (methodCP "depth" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node")) int))) 
                                      (15 (aload_0)) 
                                      (16 (aload_1)) 
                                      (17 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (20 (invokevirtual (methodCP "depth" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node")) int))) 
                                      (23 (invokestatic (methodCP "max" "java.lang.Math" (int int) int))) 
                                      (26 (iadd)) 
                                      (27 (ireturn)) 
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valAt"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 19)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokevirtual (methodCP "entryAt" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (5 (astore_3)) 
                                      (6 (aload_3)) 
                                      (7 (ifnull 17))  ;;to TAG_0
                                      (10 (aload_3)) 
                                      (11 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (14 (goto 18)) ;;to TAG_1
                                      (17 (aload_2)) ;;at TAG_0
                                      (18 (areturn)) ;;at TAG_1
                                      (endofcode 19))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aconst_null))
                                      (3 (invokevirtual
					(methodCP "valAt" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "capacity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "entryAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 47)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) ;;at TAG_4
                                      (6 (ifnull 45)) ;;to TAG_0
                                      (9 (aload_0)) 
                                      (10 (aload_1)) 
                                      (11 (aload_2)) 
                                      (12 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (15 (invokevirtual (methodCP "doCompare" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object")) int))) 
                                      (18 (istore_3)) 
                                      (19 (iload_3)) 
                                      (20 (ifne 25)) ;;to TAG_1
                                      (23 (aload_2)) 
                                      (24 (areturn)) 
                                      (25 (iload_3)) ;;at TAG_1
                                      (26 (ifge 37))  ;;to TAG_2
                                      (29 (aload_2)) 
                                      (30 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (33 (astore_2)) 
                                      (34 (goto 42)) ;;to TAG_3
                                      (37 (aload_2)) ;;at TAG_2
                                      (38 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (41 (astore_2)) 
                                      (42 (goto 5)) ;;to TAG_4;;at TAG_3
                                      (45 (aload_2)) ;;at TAG_0
                                      (46 (areturn)) 
                                      (endofcode 47))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doCompare"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "comp" "clojure.lang.PersistentTreeMap" (class "java.util.Comparator"))))
                                      (4 (aload_1))
                                      (5 (aload_2))
                                      (6 (invokeinterface
					(methodCP "compare" "java.util.Comparator" ((class "java.lang.Object") (class "java.lang.Object")) int) 3))
                                      (11 (ireturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 5) (max_locals . 7) (code_length . 111)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnonnull 27)) ;;to TAG_0
                                      (4 (aload_3)) 
                                      (5 (ifnonnull 17)) ;;to TAG_1
                                      (8 (new (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (11 (dup)) 
                                      (12 (aload_2)) 
                                      (13 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$Red" ((class "java.lang.Object")) void))) 
                                      (16 (areturn)) 
                                      (17 (new (class "clojure.lang.PersistentTreeMap$RedVal"))) ;;at TAG_1
                                      (20 (dup)) 
                                      (21 (aload_2)) 
                                      (22 (aload_3)) 
                                      (23 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$RedVal" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (26 (areturn)) 
                                      (27 (aload_0)) ;;at TAG_0
                                      (28 (aload_2)) 
                                      (29 (aload_1)) 
                                      (30 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (33 (invokevirtual (methodCP "doCompare" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object")) int))) 
                                      (36 (istore 5)) 
                                      (38 (iload 5)) 
                                      (40 (ifne 51))  ;;to TAG_2
                                      (43 (aload 4)) 
                                      (45 (aload_1)) 
                                      (46 (putfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (49 (aconst_null)) 
                                      (50 (areturn)) 
                                      (51 (iload 5)) ;;at TAG_2
                                      (53 (ifge 71)) ;;to TAG_3
                                      (56 (aload_0)) 
                                      (57 (aload_1)) 
                                      (58 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (61 (aload_2)) 
                                      (62 (aload_3)) 
                                      (63 (aload 4)) 
                                      (65 (invokevirtual (methodCP "add" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (68 (goto 83)) ;;to TAG_4
                                      (71 (aload_0)) ;;at TAG_3
                                      (72 (aload_1)) 
                                      (73 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (76 (aload_2)) 
                                      (77 (aload_3)) 
                                      (78 (aload 4)) 
                                      (80 (invokevirtual (methodCP "add" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (83 (astore 6)) ;;at TAG_4
                                      (85 (aload 6)) 
                                      (87 (ifnonnull 92)) ;;to TAG_5
                                      (90 (aconst_null)) 
                                      (91 (areturn)) 
                                      (92 (iload 5)) ;;at TAG_5
                                      (94 (ifge 104)) ;;to TAG_6
                                      (97 (aload_1)) 
                                      (98 (aload 6)) 
                                      (100 (invokevirtual (methodCP "addLeft" "clojure.lang.PersistentTreeMap$Node" ((class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (103 (areturn)) 
                                      (104 (aload_1)) ;;at TAG_6
                                      (105 (aload 6)) 
                                      (107 (invokevirtual (methodCP "addRight" "clojure.lang.PersistentTreeMap$Node" ((class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (110 (areturn)) 
                                      (endofcode 111))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remove"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "clojure.lang.Box"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 180)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnonnull 6)) ;;to TAG_0
                                      (4 (aconst_null)) 
                                      (5 (areturn)) 
                                      (6 (aload_0)) ;;at TAG_0
                                      (7 (aload_2)) 
                                      (8 (aload_1)) 
                                      (9 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (12 (invokevirtual (methodCP "doCompare" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object")) int))) 
                                      (15 (istore 4)) 
                                      (17 (iload 4)) 
                                      (19 (ifne 39)) ;;to TAG_1
                                      (22 (aload_3)) 
                                      (23 (aload_1)) 
                                      (24 (putfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (27 (aload_1)) 
                                      (28 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (31 (aload_1)) 
                                      (32 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (35 (invokestatic (methodCP "append" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (38 (areturn)) 
                                      (39 (iload 4)) ;;at TAG_1
                                      (41 (ifge 57))  ;;to TAG_2
                                      (44 (aload_0)) 
                                      (45 (aload_1)) 
                                      (46 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (49 (aload_2)) 
                                      (50 (aload_3)) 
                                      (51 (invokevirtual (methodCP "remove" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (54 (goto 67)) ;;to TAG_3
                                      (57 (aload_0)) ;;at TAG_2
                                      (58 (aload_1)) 
                                      (59 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (62 (aload_2)) 
                                      (63 (aload_3)) 
                                      (64 (invokevirtual (methodCP "remove" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (67 (astore 5)) ;;at TAG_3
                                      (69 (aload 5)) 
                                      (71 (ifnonnull 83)) ;;to TAG_4
                                      (74 (aload_3)) 
                                      (75 (getfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (78 (ifnonnull 83)) ;;to TAG_4
                                      (81 (aconst_null)) 
                                      (82 (areturn)) 
                                      (83 (iload 4)) ;;at TAG_4
                                      (85 (ifge 134)) ;;to TAG_5
                                      (88 (aload_1)) 
                                      (89 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (92 (instanceof (class "clojure.lang.PersistentTreeMap$Black"))) 
                                      (95 (ifeq 116)) ;;to TAG_6
                                      (98 (aload_1)) 
                                      (99 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (102 (aload_1)) 
                                      (103 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (106 (aload 5)) 
                                      (108 (aload_1)) 
                                      (109 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (112 (invokestatic (methodCP "balanceLeftDel" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (115 (areturn)) 
                                      (116 (aload_1)) ;;at TAG_6
                                      (117 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (120 (aload_1)) 
                                      (121 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (124 (aload 5)) 
                                      (126 (aload_1)) 
                                      (127 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (130 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (133 (areturn)) 
                                      (134 (aload_1)) ;;at TAG_5
                                      (135 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (138 (instanceof (class "clojure.lang.PersistentTreeMap$Black"))) 
                                      (141 (ifeq 162)) ;;to TAG_7
                                      (144 (aload_1)) 
                                      (145 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (148 (aload_1)) 
                                      (149 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (152 (aload_1)) 
                                      (153 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (156 (aload 5)) 
                                      (158 (invokestatic (methodCP "balanceRightDel" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (161 (areturn)) 
                                      (162 (aload_1)) ;;at TAG_7
                                      (163 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (166 (aload_1)) 
                                      (167 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (170 (aload_1)) 
                                      (171 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (174 (aload 5)) 
                                      (176 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (179 (areturn)) 
                                      (endofcode 180))
                                   (Exceptions )
                                   (StackMap )))
                        (method "append"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 3) (code_length . 283)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnonnull 6)) ;;to TAG_0
                                      (4 (aload_1)) 
                                      (5 (areturn)) 
                                      (6 (aload_1)) ;;at TAG_0
                                      (7 (ifnonnull 12)) ;;to TAG_1
                                      (10 (aload_0)) 
                                      (11 (areturn)) 
                                      (12 (aload_0)) ;;at TAG_1
                                      (13 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (16 (ifeq 151))  ;;to TAG_2
                                      (19 (aload_1)) 
                                      (20 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (23 (ifeq 127)) ;;to TAG_3
                                      (26 (aload_0)) 
                                      (27 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (30 (aload_1)) 
                                      (31 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (34 (invokestatic (methodCP "append" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (37 (astore_2)) 
                                      (38 (aload_2)) 
                                      (39 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (42 (ifeq 95)) ;;to TAG_4
                                      (45 (aload_2)) 
                                      (46 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (49 (aload_2)) 
                                      (50 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (53 (aload_0)) 
                                      (54 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (57 (aload_0)) 
                                      (58 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (61 (aload_0)) 
                                      (62 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (65 (aload_2)) 
                                      (66 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (69 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (72 (aload_1)) 
                                      (73 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (76 (aload_1)) 
                                      (77 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (80 (aload_2)) 
                                      (81 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (84 (aload_1)) 
                                      (85 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (88 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (91 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (94 (areturn)) 
                                      (95 (aload_0)) ;;at TAG_4
                                      (96 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (99 (aload_0)) 
                                      (100 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (103 (aload_0)) 
                                      (104 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (107 (aload_1)) 
                                      (108 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (111 (aload_1)) 
                                      (112 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (115 (aload_2)) 
                                      (116 (aload_1)) 
                                      (117 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (120 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (123 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (126 (areturn)) 
                                      (127 (aload_0)) ;;at TAG_3
                                      (128 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (131 (aload_0)) 
                                      (132 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (135 (aload_0)) 
                                      (136 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (139 (aload_0)) 
                                      (140 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (143 (aload_1)) 
                                      (144 (invokestatic (methodCP "append" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (147 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (150 (areturn)) 
                                      (151 (aload_1)) ;;at TAG_2
                                      (152 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (155 (ifeq 182)) ;;to TAG_5
                                      (158 (aload_1)) 
                                      (159 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (162 (aload_1)) 
                                      (163 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (166 (aload_0)) 
                                      (167 (aload_1)) 
                                      (168 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (171 (invokestatic (methodCP "append" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (174 (aload_1)) 
                                      (175 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (178 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (181 (areturn)) 
                                      (182 (aload_0)) ;;at TAG_5
                                      (183 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (186 (aload_1)) 
                                      (187 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (190 (invokestatic (methodCP "append" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (193 (astore_2)) 
                                      (194 (aload_2)) 
                                      (195 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (198 (ifeq 251)) ;;to TAG_6
                                      (201 (aload_2)) 
                                      (202 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (205 (aload_2)) 
                                      (206 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (209 (aload_0)) 
                                      (210 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (213 (aload_0)) 
                                      (214 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (217 (aload_0)) 
                                      (218 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (221 (aload_2)) 
                                      (222 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (225 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (228 (aload_1)) 
                                      (229 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (232 (aload_1)) 
                                      (233 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (236 (aload_2)) 
                                      (237 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (240 (aload_1)) 
                                      (241 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (244 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (247 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (250 (areturn)) 
                                      (251 (aload_0)) ;;at TAG_6
                                      (252 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (255 (aload_0)) 
                                      (256 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (259 (aload_0)) 
                                      (260 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (263 (aload_1)) 
                                      (264 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (267 (aload_1)) 
                                      (268 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (271 (aload_2)) 
                                      (272 (aload_1)) 
                                      (273 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (276 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (279 (invokestatic (methodCP "balanceLeftDel" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (282 (areturn)) 
                                      (endofcode 283))
                                   (Exceptions )
                                   (StackMap )))
                        (method "balanceLeftDel"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 4) (code_length . 119)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (4 (ifeq 18)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (aload_1)) 
                                      (9 (aload_2)) 
                                      (10 (invokevirtual (methodCP "blacken" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (13 (aload_3)) 
                                      (14 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (17 (areturn)) 
                                      (18 (aload_3)) ;;at TAG_0
                                      (19 (instanceof (class "clojure.lang.PersistentTreeMap$Black"))) 
                                      (22 (ifeq 36)) ;;to TAG_1
                                      (25 (aload_0)) 
                                      (26 (aload_1)) 
                                      (27 (aload_2)) 
                                      (28 (aload_3)) 
                                      (29 (invokevirtual (methodCP "redden" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (32 (invokestatic (methodCP "rightBalance" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (35 (areturn)) 
                                      (36 (aload_3)) ;;at TAG_1
                                      (37 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (40 (ifeq 109))  ;;to TAG_2
                                      (43 (aload_3)) 
                                      (44 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (47 (instanceof (class "clojure.lang.PersistentTreeMap$Black"))) 
                                      (50 (ifeq 109))  ;;to TAG_2
                                      (53 (aload_3)) 
                                      (54 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (57 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (60 (aload_3)) 
                                      (61 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (64 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (67 (aload_0)) 
                                      (68 (aload_1)) 
                                      (69 (aload_2)) 
                                      (70 (aload_3)) 
                                      (71 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (74 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (77 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (80 (aload_3)) 
                                      (81 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (84 (aload_3)) 
                                      (85 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (88 (aload_3)) 
                                      (89 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (92 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (95 (aload_3)) 
                                      (96 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (99 (invokevirtual (methodCP "redden" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (102 (invokestatic (methodCP "rightBalance" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (105 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (108 (areturn)) 
                                      (109 (new (class "java.lang.UnsupportedOperationException"))) ;;at TAG_2
                                      (112 (dup)) 
                                      (113 (ldc 2)) ;;STRING:: "Invariant violation"
                                      (115 (invokespecial (methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void))) 
                                      (118 (athrow)) 
                                      (endofcode 119))
                                   (Exceptions )
                                   (StackMap )))
                        (method "balanceRightDel"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 4) (code_length . 119)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (4 (ifeq 18)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (aload_1)) 
                                      (9 (aload_2)) 
                                      (10 (aload_3)) 
                                      (11 (invokevirtual (methodCP "blacken" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (14 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (17 (areturn)) 
                                      (18 (aload_2)) ;;at TAG_0
                                      (19 (instanceof (class "clojure.lang.PersistentTreeMap$Black"))) 
                                      (22 (ifeq 36)) ;;to TAG_1
                                      (25 (aload_0)) 
                                      (26 (aload_1)) 
                                      (27 (aload_2)) 
                                      (28 (invokevirtual (methodCP "redden" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (31 (aload_3)) 
                                      (32 (invokestatic (methodCP "leftBalance" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (35 (areturn)) 
                                      (36 (aload_2)) ;;at TAG_1
                                      (37 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (40 (ifeq 109))  ;;to TAG_2
                                      (43 (aload_2)) 
                                      (44 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (47 (instanceof (class "clojure.lang.PersistentTreeMap$Black"))) 
                                      (50 (ifeq 109))  ;;to TAG_2
                                      (53 (aload_2)) 
                                      (54 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (57 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (60 (aload_2)) 
                                      (61 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (64 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (67 (aload_2)) 
                                      (68 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (71 (aload_2)) 
                                      (72 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (75 (aload_2)) 
                                      (76 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (79 (invokevirtual (methodCP "redden" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (82 (aload_2)) 
                                      (83 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (86 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (89 (invokestatic (methodCP "leftBalance" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (92 (aload_0)) 
                                      (93 (aload_1)) 
                                      (94 (aload_2)) 
                                      (95 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (98 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (101 (aload_3)) 
                                      (102 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (105 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (108 (areturn)) 
                                      (109 (new (class "java.lang.UnsupportedOperationException"))) ;;at TAG_2
                                      (112 (dup)) 
                                      (113 (ldc 2)) ;;STRING:: "Invariant violation"
                                      (115 (invokespecial (methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void))) 
                                      (118 (athrow)) 
                                      (endofcode 119))
                                   (Exceptions )
                                   (StackMap )))
                        (method "leftBalance"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 4) (code_length . 124)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (4 (ifeq 46))  ;;to TAG_0
                                      (7 (aload_2)) 
                                      (8 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (11 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (14 (ifeq 46))  ;;to TAG_0
                                      (17 (aload_2)) 
                                      (18 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (21 (aload_2)) 
                                      (22 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (25 (aload_2)) 
                                      (26 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (29 (invokevirtual (methodCP "blacken" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (32 (aload_0)) 
                                      (33 (aload_1)) 
                                      (34 (aload_2)) 
                                      (35 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (38 (aload_3)) 
                                      (39 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (42 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (45 (areturn)) 
                                      (46 (aload_2)) ;;at TAG_0
                                      (47 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (50 (ifeq 116)) ;;to TAG_1
                                      (53 (aload_2)) 
                                      (54 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (57 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (60 (ifeq 116)) ;;to TAG_1
                                      (63 (aload_2)) 
                                      (64 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (67 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (70 (aload_2)) 
                                      (71 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (74 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (77 (aload_2)) 
                                      (78 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (81 (aload_2)) 
                                      (82 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (85 (aload_2)) 
                                      (86 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (89 (aload_2)) 
                                      (90 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (93 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (96 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (99 (aload_0)) 
                                      (100 (aload_1)) 
                                      (101 (aload_2)) 
                                      (102 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (105 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (108 (aload_3)) 
                                      (109 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (112 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (115 (areturn)) 
                                      (116 (aload_0)) ;;at TAG_1
                                      (117 (aload_1)) 
                                      (118 (aload_2)) 
                                      (119 (aload_3)) 
                                      (120 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (123 (areturn)) 
                                      (endofcode 124))
                                   (Exceptions )
                                   (StackMap )))
                        (method "rightBalance"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 4) (code_length . 124)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (4 (ifeq 46))  ;;to TAG_0
                                      (7 (aload_3)) 
                                      (8 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (11 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (14 (ifeq 46))  ;;to TAG_0
                                      (17 (aload_3)) 
                                      (18 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (21 (aload_3)) 
                                      (22 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (25 (aload_0)) 
                                      (26 (aload_1)) 
                                      (27 (aload_2)) 
                                      (28 (aload_3)) 
                                      (29 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (32 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (35 (aload_3)) 
                                      (36 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (39 (invokevirtual (methodCP "blacken" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (42 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (45 (areturn)) 
                                      (46 (aload_3)) ;;at TAG_0
                                      (47 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (50 (ifeq 116)) ;;to TAG_1
                                      (53 (aload_3)) 
                                      (54 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (57 (instanceof (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (60 (ifeq 116)) ;;to TAG_1
                                      (63 (aload_3)) 
                                      (64 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (67 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (70 (aload_3)) 
                                      (71 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (74 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (77 (aload_0)) 
                                      (78 (aload_1)) 
                                      (79 (aload_2)) 
                                      (80 (aload_3)) 
                                      (81 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (84 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (87 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (90 (aload_3)) 
                                      (91 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (94 (aload_3)) 
                                      (95 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (98 (aload_3)) 
                                      (99 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (102 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (105 (aload_3)) 
                                      (106 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (109 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (112 (invokestatic (methodCP "red" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Red")))) 
                                      (115 (areturn)) 
                                      (116 (aload_0)) ;;at TAG_1
                                      (117 (aload_1)) 
                                      (118 (aload_2)) 
                                      (119 (aload_3)) 
                                      (120 (invokestatic (methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black")))) 
                                      (123 (areturn)) 
                                      (endofcode 124))
                                   (Exceptions )
                                   (StackMap )))
                        (method "replace"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 8) (max_locals . 5) (code_length . 77)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_2)) 
                                      (2 (aload_1)) 
                                      (3 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (6 (invokevirtual (methodCP "doCompare" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object")) int))) 
                                      (9 (istore 4)) 
                                      (11 (aload_1)) 
                                      (12 (aload_1)) 
                                      (13 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object")))) 
                                      (16 (iload 4)) 
                                      (18 (ifne 25)) ;;to TAG_0
                                      (21 (aload_3)) 
                                      (22 (goto 29)) ;;to TAG_1
                                      (25 (aload_1)) ;;at TAG_0
                                      (26 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (29 (iload 4)) ;;at TAG_1
                                      (31 (ifge 47))  ;;to TAG_2
                                      (34 (aload_0)) 
                                      (35 (aload_1)) 
                                      (36 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (39 (aload_2)) 
                                      (40 (aload_3)) 
                                      (41 (invokevirtual (methodCP "replace" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (44 (goto 51)) ;;to TAG_3
                                      (47 (aload_1)) ;;at TAG_2
                                      (48 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (51 (iload 4)) ;;at TAG_3
                                      (53 (ifle 69)) ;;to TAG_4
                                      (56 (aload_0)) 
                                      (57 (aload_1)) 
                                      (58 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (61 (aload_2)) 
                                      (62 (aload_3)) 
                                      (63 (invokevirtual (methodCP "replace" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.PersistentTreeMap$Node") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (66 (goto 73)) ;;to TAG_5
                                      (69 (aload_1)) ;;at TAG_4
                                      (70 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (73 (invokevirtual (methodCP "replace" "clojure.lang.PersistentTreeMap$Node" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Node")))) ;;at TAG_5
                                      (76 (areturn)) 
                                      (endofcode 77))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.util.Comparator") (class "clojure.lang.PersistentTreeMap$Node") int (class "clojure.lang.IPersistentMap"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentMap" () void)))
                                      (4 (aload_0))
                                      (5 (aload 4))
                                      (7 (putfield (fieldCP "_meta" "clojure.lang.PersistentTreeMap" (class "clojure.lang.IPersistentMap"))))
                                      (10 (aload_0))
                                      (11 (aload_1))
                                      (12 (putfield (fieldCP "comp" "clojure.lang.PersistentTreeMap" (class "java.util.Comparator"))))
                                      (15 (aload_0))
                                      (16 (aload_2))
                                      (17 (putfield (fieldCP "tree" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (20 (aload_0))
                                      (21 (iload_3))
                                      (22 (putfield (fieldCP "_count" "clojure.lang.PersistentTreeMap" int)))
                                      (25 (return))
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "red"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Red"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 58)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (ifnonnull 31)) ;;to TAG_0
                                      (4 (aload_3)) 
                                      (5 (ifnonnull 31)) ;;to TAG_0
                                      (8 (aload_1)) 
                                      (9 (ifnonnull 21)) ;;to TAG_1
                                      (12 (new (class "clojure.lang.PersistentTreeMap$Red"))) 
                                      (15 (dup)) 
                                      (16 (aload_0)) 
                                      (17 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$Red" ((class "java.lang.Object")) void))) 
                                      (20 (areturn)) 
                                      (21 (new (class "clojure.lang.PersistentTreeMap$RedVal"))) ;;at TAG_1
                                      (24 (dup)) 
                                      (25 (aload_0)) 
                                      (26 (aload_1)) 
                                      (27 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$RedVal" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (30 (areturn)) 
                                      (31 (aload_1)) ;;at TAG_0
                                      (32 (ifnonnull 46))  ;;to TAG_2
                                      (35 (new (class "clojure.lang.PersistentTreeMap$RedBranch"))) 
                                      (38 (dup)) 
                                      (39 (aload_0)) 
                                      (40 (aload_2)) 
                                      (41 (aload_3)) 
                                      (42 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$RedBranch" ((class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) void))) 
                                      (45 (areturn)) 
                                      (46 (new (class "clojure.lang.PersistentTreeMap$RedBranchVal"))) ;;at TAG_2
                                      (49 (dup)) 
                                      (50 (aload_0)) 
                                      (51 (aload_1)) 
                                      (52 (aload_2)) 
                                      (53 (aload_3)) 
                                      (54 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$RedBranchVal" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) void))) 
                                      (57 (areturn)) 
                                      (endofcode 58))
                                   (Exceptions )
                                   (StackMap )))
                        (method "black"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Black"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 58)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (ifnonnull 31)) ;;to TAG_0
                                      (4 (aload_3)) 
                                      (5 (ifnonnull 31)) ;;to TAG_0
                                      (8 (aload_1)) 
                                      (9 (ifnonnull 21)) ;;to TAG_1
                                      (12 (new (class "clojure.lang.PersistentTreeMap$Black"))) 
                                      (15 (dup)) 
                                      (16 (aload_0)) 
                                      (17 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$Black" ((class "java.lang.Object")) void))) 
                                      (20 (areturn)) 
                                      (21 (new (class "clojure.lang.PersistentTreeMap$BlackVal"))) ;;at TAG_1
                                      (24 (dup)) 
                                      (25 (aload_0)) 
                                      (26 (aload_1)) 
                                      (27 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$BlackVal" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (30 (areturn)) 
                                      (31 (aload_1)) ;;at TAG_0
                                      (32 (ifnonnull 46))  ;;to TAG_2
                                      (35 (new (class "clojure.lang.PersistentTreeMap$BlackBranch"))) 
                                      (38 (dup)) 
                                      (39 (aload_0)) 
                                      (40 (aload_2)) 
                                      (41 (aload_3)) 
                                      (42 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$BlackBranch" ((class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) void))) 
                                      (45 (areturn)) 
                                      (46 (new (class "clojure.lang.PersistentTreeMap$BlackBranchVal"))) ;;at TAG_2
                                      (49 (dup)) 
                                      (50 (aload_0)) 
                                      (51 (aload_1)) 
                                      (52 (aload_2)) 
                                      (53 (aload_3)) 
                                      (54 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$BlackBranchVal" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) void))) 
                                      (57 (areturn)) 
                                      (endofcode 58))
                                   (Exceptions )
                                   (StackMap )))
                        (method "meta"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "_meta" "clojure.lang.PersistentTreeMap" (class "clojure.lang.IPersistentMap"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "without"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "without" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object")) (class "clojure.lang.PersistentTreeMap"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assocEx"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokevirtual
					(methodCP "assocEx" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.PersistentTreeMap"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokevirtual
					(methodCP "assoc" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.PersistentTreeMap"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "iterator"
                              (parameters )
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "iterator" "clojure.lang.PersistentTreeMap" () (class "clojure.lang.PersistentTreeMap$NodeIterator"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Associative"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokevirtual
					(methodCP "assoc" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.PersistentTreeMap"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "entryAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IMapEntry"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "entryAt" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object")) (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentTreeMap" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentTreeMap"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 11)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentTreeMap")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap" () void)))
                                      (7 (putstatic (fieldCP "EMPTY" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap"))))
                                      (10 (return))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IObj" "clojure.lang.Reversible" "clojure.lang.Sorted")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentTreeMap-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentTreeMap*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentTreeMap" . "clojure.lang"))

