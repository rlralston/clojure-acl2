; Agent-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Agent*
 (make-class-def
      '(class "clojure.lang.Agent"
            "clojure.lang.ARef"
            (constant_pool
                        (STRING  "Agent does not need a restart")
                        (STRING  "Agent is failed, needs restart")
                        (STRING  "continue")
                        (STRING  "fail")
                        (STRING  "clojure-agent-send-pool-%d")
                        (STRING  "clojure-agent-send-off-pool-%d"))
            (fields
                        (field "CONTINUE" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "FAIL" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "state" (class "java.lang.Object") (accessflags  *class*  *volatile* ) -1)
                        (field "aq" (class "java.util.concurrent.atomic.AtomicReference") (accessflags  *class* ) -1)
                        (field "errorMode" (class "clojure.lang.Keyword") (accessflags  *class*  *volatile* ) -1)
                        (field "errorHandler" (class "clojure.lang.IFn") (accessflags  *class*  *volatile* ) -1)
                        (field "sendThreadPoolCounter" (class "java.util.concurrent.atomic.AtomicLong") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "sendOffThreadPoolCounter" (class "java.util.concurrent.atomic.AtomicLong") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "pooledExecutor" (class "java.util.concurrent.ExecutorService") (accessflags  *class*  *public*  *static*  *volatile* ) -1)
                        (field "soloExecutor" (class "java.util.concurrent.ExecutorService") (accessflags  *class*  *public*  *static*  *volatile* ) -1)
                        (field "nested" (class "java.lang.ThreadLocal") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "createThreadFactory"
                              (parameters (class "java.lang.String") (class "java.util.concurrent.atomic.AtomicLong"))
                              (returntype . (class "java.util.concurrent.ThreadFactory"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.Agent$1")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (invokespecial
					(methodCP "<init>" "clojure.lang.Agent$1" ((class "java.lang.String") (class "java.util.concurrent.atomic.AtomicLong")) void)))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shutdown"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 17)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "soloExecutor" "clojure.lang.Agent" (class "java.util.concurrent.ExecutorService"))))
                                      (3 (invokeinterface
					(methodCP "shutdown" "java.util.concurrent.ExecutorService" () void) 1))
                                      (8 (getstatic (fieldCP "pooledExecutor" "clojure.lang.Agent" (class "java.util.concurrent.ExecutorService"))))
                                      (11 (invokeinterface
					(methodCP "shutdown" "java.util.concurrent.ExecutorService" () void) 1))
                                      (16 (return))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aconst_null))
                                      (3 (invokespecial
					(methodCP "<init>" "clojure.lang.Agent" ((class "java.lang.Object") (class "clojure.lang.IPersistentMap")) void)))
                                      (6 (return))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object") (class "clojure.lang.IPersistentMap"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 38)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_2))
                                      (2 (invokespecial
					(methodCP "<init>" "clojure.lang.ARef" ((class "clojure.lang.IPersistentMap")) void)))
                                      (5 (aload_0))
                                      (6 (new (class "java.util.concurrent.atomic.AtomicReference")))
                                      (9 (dup))
                                      (10 (getstatic (fieldCP "EMPTY" "clojure.lang.Agent$ActionQueue" (class "clojure.lang.Agent$ActionQueue"))))
                                      (13 (invokespecial
					(methodCP "<init>" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object")) void)))
                                      (16 (putfield (fieldCP "aq" "clojure.lang.Agent" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (19 (aload_0))
                                      (20 (getstatic (fieldCP "CONTINUE" "clojure.lang.Agent" (class "clojure.lang.Keyword"))))
                                      (23 (putfield (fieldCP "errorMode" "clojure.lang.Agent" (class "clojure.lang.Keyword"))))
                                      (26 (aload_0))
                                      (27 (aconst_null))
                                      (28 (putfield (fieldCP "errorHandler" "clojure.lang.Agent" (class "clojure.lang.IFn"))))
                                      (31 (aload_0))
                                      (32 (aload_1))
                                      (33 (invokevirtual
					(methodCP "setState" "clojure.lang.Agent" ((class "java.lang.Object")) boolean)))
                                      (36 (pop))
                                      (37 (return))
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap )))
                        (method "setState"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokevirtual (methodCP "validate" "clojure.lang.Agent" ((class "java.lang.Object")) void))) 
                                      (5 (aload_0)) 
                                      (6 (getfield (fieldCP "state" "clojure.lang.Agent" (class "java.lang.Object")))) 
                                      (9 (aload_1)) 
                                      (10 (if_acmpeq 17))  ;;to TAG_0
                                      (13 (iconst_1)) 
                                      (14 (goto 18)) ;;to TAG_1
                                      (17 (iconst_0)) ;;at TAG_0
                                      (18 (istore_2)) ;;at TAG_1
                                      (19 (aload_0)) 
                                      (20 (aload_1)) 
                                      (21 (putfield (fieldCP "state" "clojure.lang.Agent" (class "java.lang.Object")))) 
                                      (24 (iload_2)) 
                                      (25 (ireturn)) 
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "deref"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "state" "clojure.lang.Agent" (class "java.lang.Object"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getError"
                              (parameters )
                              (returntype . (class "java.lang.Throwable"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "aq" "clojure.lang.Agent" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (4 (invokevirtual
					(methodCP "get" "java.util.concurrent.atomic.AtomicReference" () (class "java.lang.Object"))))
                                      (7 (checkcast (class "clojure.lang.Agent$ActionQueue")))
                                      (10 (getfield (fieldCP "error" "clojure.lang.Agent$ActionQueue" (class "java.lang.Throwable"))))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "setErrorMode"
                              (parameters (class "clojure.lang.Keyword"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (putfield (fieldCP "errorMode" "clojure.lang.Agent" (class "clojure.lang.Keyword"))))
                                      (5 (return))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getErrorMode"
                              (parameters )
                              (returntype . (class "clojure.lang.Keyword"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "errorMode" "clojure.lang.Agent" (class "clojure.lang.Keyword"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "setErrorHandler"
                              (parameters (class "clojure.lang.IFn"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (putfield (fieldCP "errorHandler" "clojure.lang.Agent" (class "clojure.lang.IFn"))))
                                      (5 (return))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getErrorHandler"
                              (parameters )
                              (returntype . (class "clojure.lang.IFn"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "errorHandler" "clojure.lang.Agent" (class "clojure.lang.IFn"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "restart"
                              (parameters (class "java.lang.Object") boolean)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *super*  *synchronized* )
                              (code
                                   (max_stack . 6) (max_locals . 5) (code_length . 118)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "getError" "clojure.lang.Agent" () (class "java.lang.Throwable")))) 
                                      (4 (ifnonnull 13)) ;;to TAG_0
                                      (7 (ldc 0)) ;;STRING:: "Agent does not need a restart"
                                      (9 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (12 (athrow)) 
                                      (13 (aload_0)) ;;at TAG_0
                                      (14 (aload_1)) 
                                      (15 (invokevirtual (methodCP "validate" "clojure.lang.Agent" ((class "java.lang.Object")) void))) 
                                      (18 (aload_0)) 
                                      (19 (aload_1)) 
                                      (20 (putfield (fieldCP "state" "clojure.lang.Agent" (class "java.lang.Object")))) 
                                      (23 (iload_2)) 
                                      (24 (ifeq 40)) ;;to TAG_1
                                      (27 (aload_0)) 
                                      (28 (getfield (fieldCP "aq" "clojure.lang.Agent" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (31 (getstatic (fieldCP "EMPTY" "clojure.lang.Agent$ActionQueue" (class "clojure.lang.Agent$ActionQueue")))) 
                                      (34 (invokevirtual (methodCP "set" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object")) void))) 
                                      (37 (goto 116))  ;;to TAG_2
                                      (40 (iconst_0)) ;;at TAG_1
                                      (41 (istore_3)) 
                                      (42 (aconst_null)) 
                                      (43 (astore 4)) 
                                      (45 (iload_3)) ;;at TAG_4
                                      (46 (ifne 87)) ;;to TAG_3
                                      (49 (aload_0)) 
                                      (50 (getfield (fieldCP "aq" "clojure.lang.Agent" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (53 (invokevirtual (methodCP "get" "java.util.concurrent.atomic.AtomicReference" () (class "java.lang.Object")))) 
                                      (56 (checkcast (class "clojure.lang.Agent$ActionQueue"))) 
                                      (59 (astore 4)) 
                                      (61 (aload_0)) 
                                      (62 (getfield (fieldCP "aq" "clojure.lang.Agent" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (65 (aload 4)) 
                                      (67 (new (class "clojure.lang.Agent$ActionQueue"))) 
                                      (70 (dup)) 
                                      (71 (aload 4)) 
                                      (73 (getfield (fieldCP "q" "clojure.lang.Agent$ActionQueue" (class "clojure.lang.IPersistentStack")))) 
                                      (76 (aconst_null)) 
                                      (77 (invokespecial (methodCP "<init>" "clojure.lang.Agent$ActionQueue" ((class "clojure.lang.IPersistentStack") (class "java.lang.Throwable")) void))) 
                                      (80 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (83 (istore_3)) 
                                      (84 (goto 45)) ;;to TAG_4
                                      (87 (aload 4)) ;;at TAG_3
                                      (89 (getfield (fieldCP "q" "clojure.lang.Agent$ActionQueue" (class "clojure.lang.IPersistentStack")))) 
                                      (92 (invokeinterface (methodCP "count" "clojure.lang.IPersistentStack" () int) 1)) 
                                      (97 (ifle 116))  ;;to TAG_2
                                      (100 (aload 4)) 
                                      (102 (getfield (fieldCP "q" "clojure.lang.Agent$ActionQueue" (class "clojure.lang.IPersistentStack")))) 
                                      (105 (invokeinterface (methodCP "peek" "clojure.lang.IPersistentStack" () (class "java.lang.Object")) 1)) 
                                      (110 (checkcast (class "clojure.lang.Agent$Action"))) 
                                      (113 (invokevirtual (methodCP "execute" "clojure.lang.Agent$Action" () void))) 
                                      (116 (aload_1)) ;;at TAG_2
                                      (117 (areturn)) 
                                      (endofcode 118))
                                   (Exceptions )
                                   (StackMap )))
                        (method "dispatch"
                              (parameters (class "clojure.lang.IFn") (class "clojure.lang.ISeq") (class "java.util.concurrent.Executor"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 6) (code_length . 39)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "getError" "clojure.lang.Agent" () (class "java.lang.Throwable")))) 
                                      (4 (astore 4)) 
                                      (6 (aload 4)) 
                                      (8 (ifnull 19))  ;;to TAG_0
                                      (11 (ldc 1)) ;;STRING:: "Agent is failed, needs restart"
                                      (13 (aload 4)) 
                                      (15 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String") (class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (18 (athrow)) 
                                      (19 (new (class "clojure.lang.Agent$Action"))) ;;at TAG_0
                                      (22 (dup)) 
                                      (23 (aload_0)) 
                                      (24 (aload_1)) 
                                      (25 (aload_2)) 
                                      (26 (aload_3)) 
                                      (27 (invokespecial (methodCP "<init>" "clojure.lang.Agent$Action" ((class "clojure.lang.Agent") (class "clojure.lang.IFn") (class "clojure.lang.ISeq") (class "java.util.concurrent.Executor")) void))) 
                                      (30 (astore 5)) 
                                      (32 (aload 5)) 
                                      (34 (invokestatic (methodCP "dispatchAction" "clojure.lang.Agent" ((class "clojure.lang.Agent$Action")) void))) 
                                      (37 (aload_0)) 
                                      (38 (areturn)) 
                                      (endofcode 39))
                                   (Exceptions )
                                   (StackMap )))
                        (method "dispatchAction"
                              (parameters (class "clojure.lang.Agent$Action"))
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 58)
                                   (parsedcode
                                      (0 (invokestatic (methodCP "getRunning" "clojure.lang.LockingTransaction" () (class "clojure.lang.LockingTransaction")))) 
                                      (3 (astore_1)) 
                                      (4 (aload_1)) 
                                      (5 (ifnull 16)) ;;to TAG_0
                                      (8 (aload_1)) 
                                      (9 (aload_0)) 
                                      (10 (invokevirtual (methodCP "enqueue" "clojure.lang.LockingTransaction" ((class "clojure.lang.Agent$Action")) void))) 
                                      (13 (goto 57)) ;;to TAG_1
                                      (16 (getstatic (fieldCP "nested" "clojure.lang.Agent" (class "java.lang.ThreadLocal")))) ;;at TAG_0
                                      (19 (invokevirtual (methodCP "get" "java.lang.ThreadLocal" () (class "java.lang.Object")))) 
                                      (22 (ifnull 49))  ;;to TAG_2
                                      (25 (getstatic (fieldCP "nested" "clojure.lang.Agent" (class "java.lang.ThreadLocal")))) 
                                      (28 (getstatic (fieldCP "nested" "clojure.lang.Agent" (class "java.lang.ThreadLocal")))) 
                                      (31 (invokevirtual (methodCP "get" "java.lang.ThreadLocal" () (class "java.lang.Object")))) 
                                      (34 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (37 (aload_0)) 
                                      (38 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 2)) 
                                      (43 (invokevirtual (methodCP "set" "java.lang.ThreadLocal" ((class "java.lang.Object")) void))) 
                                      (46 (goto 57)) ;;to TAG_1
                                      (49 (aload_0)) ;;at TAG_2
                                      (50 (getfield (fieldCP "agent" "clojure.lang.Agent$Action" (class "clojure.lang.Agent")))) 
                                      (53 (aload_0)) 
                                      (54 (invokevirtual (methodCP "enqueue" "clojure.lang.Agent" ((class "clojure.lang.Agent$Action")) void))) 
                                      (57 (return)) ;;at TAG_1
                                      (endofcode 58))
                                   (Exceptions )
                                   (StackMap )))
                        (method "enqueue"
                              (parameters (class "clojure.lang.Agent$Action"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 79)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_2)) 
                                      (2 (aconst_null)) 
                                      (3 (astore_3)) 
                                      (4 (iload_2)) ;;at TAG_1
                                      (5 (ifne 55)) ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (getfield (fieldCP "aq" "clojure.lang.Agent" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (12 (invokevirtual (methodCP "get" "java.util.concurrent.atomic.AtomicReference" () (class "java.lang.Object")))) 
                                      (15 (checkcast (class "clojure.lang.Agent$ActionQueue"))) 
                                      (18 (astore_3)) 
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "aq" "clojure.lang.Agent" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (23 (aload_3)) 
                                      (24 (new (class "clojure.lang.Agent$ActionQueue"))) 
                                      (27 (dup)) 
                                      (28 (aload_3)) 
                                      (29 (getfield (fieldCP "q" "clojure.lang.Agent$ActionQueue" (class "clojure.lang.IPersistentStack")))) 
                                      (32 (aload_1)) 
                                      (33 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentStack" ((class "java.lang.Object")) (class "clojure.lang.IPersistentCollection")) 2)) 
                                      (38 (checkcast (class "clojure.lang.IPersistentStack"))) 
                                      (41 (aload_3)) 
                                      (42 (getfield (fieldCP "error" "clojure.lang.Agent$ActionQueue" (class "java.lang.Throwable")))) 
                                      (45 (invokespecial (methodCP "<init>" "clojure.lang.Agent$ActionQueue" ((class "clojure.lang.IPersistentStack") (class "java.lang.Throwable")) void))) 
                                      (48 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (51 (istore_2)) 
                                      (52 (goto 4)) ;;to TAG_1
                                      (55 (aload_3)) ;;at TAG_0
                                      (56 (getfield (fieldCP "q" "clojure.lang.Agent$ActionQueue" (class "clojure.lang.IPersistentStack")))) 
                                      (59 (invokeinterface (methodCP "count" "clojure.lang.IPersistentStack" () int) 1)) 
                                      (64 (ifne 78))  ;;to TAG_2
                                      (67 (aload_3)) 
                                      (68 (getfield (fieldCP "error" "clojure.lang.Agent$ActionQueue" (class "java.lang.Throwable")))) 
                                      (71 (ifnonnull 78))  ;;to TAG_2
                                      (74 (aload_1)) 
                                      (75 (invokevirtual (methodCP "execute" "clojure.lang.Agent$Action" () void))) 
                                      (78 (return)) ;;at TAG_2
                                      (endofcode 79))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getQueueCount"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 19)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "aq" "clojure.lang.Agent" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (4 (invokevirtual
					(methodCP "get" "java.util.concurrent.atomic.AtomicReference" () (class "java.lang.Object"))))
                                      (7 (checkcast (class "clojure.lang.Agent$ActionQueue")))
                                      (10 (getfield (fieldCP "q" "clojure.lang.Agent$ActionQueue" (class "clojure.lang.IPersistentStack"))))
                                      (13 (invokeinterface
					(methodCP "count" "clojure.lang.IPersistentStack" () int) 1))
                                      (18 (ireturn))
                                      (endofcode 19))
                                   (Exceptions )
                                   (StackMap )))
                        (method "releasePendingSends"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 72)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "nested" "clojure.lang.Agent" (class "java.lang.ThreadLocal")))) 
                                      (3 (invokevirtual (methodCP "get" "java.lang.ThreadLocal" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (9 (astore_0)) 
                                      (10 (aload_0)) 
                                      (11 (ifnonnull 16)) ;;to TAG_0
                                      (14 (iconst_0)) 
                                      (15 (ireturn)) 
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (istore_1)) 
                                      (18 (iload_1)) ;;at TAG_2
                                      (19 (aload_0)) 
                                      (20 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (25 (if_icmpge 56)) ;;to TAG_1
                                      (28 (aload_0)) 
                                      (29 (iload_1)) 
                                      (30 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (33 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentVector" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (38 (checkcast (class "clojure.lang.Agent$Action"))) 
                                      (41 (astore_2)) 
                                      (42 (aload_2)) 
                                      (43 (getfield (fieldCP "agent" "clojure.lang.Agent$Action" (class "clojure.lang.Agent")))) 
                                      (46 (aload_2)) 
                                      (47 (invokevirtual (methodCP "enqueue" "clojure.lang.Agent" ((class "clojure.lang.Agent$Action")) void))) 
                                      (50 (iinc 1 1)) 
                                      (53 (goto 18))  ;;to TAG_2
                                      (56 (getstatic (fieldCP "nested" "clojure.lang.Agent" (class "java.lang.ThreadLocal")))) ;;at TAG_1
                                      (59 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (62 (invokevirtual (methodCP "set" "java.lang.ThreadLocal" ((class "java.lang.Object")) void))) 
                                      (65 (aload_0)) 
                                      (66 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (71 (ireturn)) 
                                      (endofcode 72))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 0) (code_length . 87)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (ldc 2))         ;;STRING:: "continue"
                                      (3 (invokestatic
					(methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (6 (putstatic (fieldCP "CONTINUE" "clojure.lang.Agent" (class "clojure.lang.Keyword"))))
                                      (9 (aconst_null))
                                      (10 (ldc 3))        ;;STRING:: "fail"
                                      (12 (invokestatic
					(methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (15 (putstatic (fieldCP "FAIL" "clojure.lang.Agent" (class "clojure.lang.Keyword"))))
                                      (18 (new (class "java.util.concurrent.atomic.AtomicLong")))
                                      (21 (dup))
                                      (22 (lconst_0))
                                      (23 (invokespecial
					(methodCP "<init>" "java.util.concurrent.atomic.AtomicLong" (long) void)))
                                      (26 (putstatic (fieldCP "sendThreadPoolCounter" "clojure.lang.Agent" (class "java.util.concurrent.atomic.AtomicLong"))))
                                      (29 (new (class "java.util.concurrent.atomic.AtomicLong")))
                                      (32 (dup))
                                      (33 (lconst_0))
                                      (34 (invokespecial
					(methodCP "<init>" "java.util.concurrent.atomic.AtomicLong" (long) void)))
                                      (37 (putstatic (fieldCP "sendOffThreadPoolCounter" "clojure.lang.Agent" (class "java.util.concurrent.atomic.AtomicLong"))))
                                      (40 (iconst_2))
                                      (41 (invokestatic
					(methodCP "getRuntime" "java.lang.Runtime" () (class "java.lang.Runtime"))))
                                      (44 (invokevirtual
					(methodCP "availableProcessors" "java.lang.Runtime" () int)))
                                      (47 (iadd))
                                      (48 (ldc 4))        ;;STRING:: "clojure-agent-send-pool-%d"
                                      (50 (getstatic (fieldCP "sendThreadPoolCounter" "clojure.lang.Agent" (class "java.util.concurrent.atomic.AtomicLong"))))
                                      (53 (invokestatic
					(methodCP "createThreadFactory" "clojure.lang.Agent" ((class "java.lang.String") (class "java.util.concurrent.atomic.AtomicLong")) (class "java.util.concurrent.ThreadFactory"))))
                                      (56 (invokestatic
					(methodCP "newFixedThreadPool" "java.util.concurrent.Executors" (int (class "java.util.concurrent.ThreadFactory")) (class "java.util.concurrent.ExecutorService"))))
                                      (59 (putstatic (fieldCP "pooledExecutor" "clojure.lang.Agent" (class "java.util.concurrent.ExecutorService"))))
                                      (62 (ldc 5))        ;;STRING:: "clojure-agent-send-off-pool-%d"
                                      (64 (getstatic (fieldCP "sendOffThreadPoolCounter" "clojure.lang.Agent" (class "java.util.concurrent.atomic.AtomicLong"))))
                                      (67 (invokestatic
					(methodCP "createThreadFactory" "clojure.lang.Agent" ((class "java.lang.String") (class "java.util.concurrent.atomic.AtomicLong")) (class "java.util.concurrent.ThreadFactory"))))
                                      (70 (invokestatic
					(methodCP "newCachedThreadPool" "java.util.concurrent.Executors" ((class "java.util.concurrent.ThreadFactory")) (class "java.util.concurrent.ExecutorService"))))
                                      (73 (putstatic (fieldCP "soloExecutor" "clojure.lang.Agent" (class "java.util.concurrent.ExecutorService"))))
                                      (76 (new (class "java.lang.ThreadLocal")))
                                      (79 (dup))
                                      (80 (invokespecial
					(methodCP "<init>" "java.lang.ThreadLocal" () void)))
                                      (83 (putstatic (fieldCP "nested" "clojure.lang.Agent" (class "java.lang.ThreadLocal"))))
                                      (86 (return))
                                      (endofcode 87))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Agent-class-table*
  (make-static-class-decls 
   *clojure.lang.Agent*))

(defconst *package-name-map* 
  ("clojure.lang.Agent" . "clojure.lang"))

