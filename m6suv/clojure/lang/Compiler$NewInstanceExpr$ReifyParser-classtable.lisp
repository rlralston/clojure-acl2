; Compiler$NewInstanceExpr$ReifyParser-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$NewInstanceExpr$ReifyParser*
 (make-class-def
      '(class "clojure.lang.Compiler$NewInstanceExpr$ReifyParser"
            "java.lang.Object"
            (constant_pool
                        (STRING  "$")
                        (STRING  "reify__")
                        (STRING  "clojure.lang.IObj"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 11) (code_length . 241)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (checkcast (class "clojure.lang.ISeq"))) 
                                      (4 (astore_3)) 
                                      (5 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (8 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (11 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (14 (astore 4)) 
                                      (16 (aload 4)) 
                                      (18 (ifnull 53)) ;;to TAG_0
                                      (21 (new (class "java.lang.StringBuilder"))) 
                                      (24 (dup)) 
                                      (25 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (28 (aload 4)) 
                                      (30 (getfield (fieldCP "objx" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.Compiler$ObjExpr")))) 
                                      (33 (getfield (fieldCP "name" "clojure.lang.Compiler$ObjExpr" (class "java.lang.String")))) 
                                      (36 (invokestatic (methodCP "trimGenID" "clojure.lang.Compiler$ObjExpr" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (39 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (42 (ldc 0)) ;;STRING:: "$"
                                      (44 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (47 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (50 (goto 83)) ;;to TAG_1
                                      (53 (new (class "java.lang.StringBuilder"))) ;;at TAG_0
                                      (56 (dup)) 
                                      (57 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (60 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) 
                                      (63 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (66 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (69 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (72 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (75 (ldc 0)) ;;STRING:: "$"
                                      (77 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (80 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (83 (astore 5)) ;;at TAG_1
                                      (85 (new (class "java.lang.StringBuilder"))) 
                                      (88 (dup)) 
                                      (89 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (92 (ldc 1)) ;;STRING:: "reify__"
                                      (94 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (97 (invokestatic (methodCP "nextID" "clojure.lang.RT" () int))) 
                                      (100 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (103 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (106 (astore 6)) 
                                      (108 (new (class "java.lang.StringBuilder"))) 
                                      (111 (dup)) 
                                      (112 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (115 (aload 5)) 
                                      (117 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (120 (aload 6)) 
                                      (122 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (125 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (128 (astore 7)) 
                                      (130 (aload_3)) 
                                      (131 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (134 (astore 8)) 
                                      (136 (aload 8)) 
                                      (138 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (141 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (144 (ldc 2)) ;;STRING:: "clojure.lang.IObj"
                                      (146 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (149 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 2)) 
                                      (154 (astore 9)) 
                                      (156 (aload 8)) 
                                      (158 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (161 (astore 8)) 
                                      (163 (aload 9)) 
                                      (165 (aconst_null)) 
                                      (166 (aconst_null)) 
                                      (167 (aload 7)) 
                                      (169 (aload 7)) 
                                      (171 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (174 (aconst_null)) 
                                      (175 (aload 8)) 
                                      (177 (aload_2)) 
                                      (178 (invokestatic (methodCP "build" "clojure.lang.Compiler$NewInstanceExpr" ((class "clojure.lang.IPersistentVector") (class "clojure.lang.IPersistentVector") (class "clojure.lang.Symbol") (class "java.lang.String") (class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.ISeq") (class "java.lang.Object")) (class "clojure.lang.Compiler$ObjExpr")))) 
                                      (181 (astore 10)) 
                                      (183 (aload_2)) 
                                      (184 (instanceof (class "clojure.lang.IObj"))) 
                                      (187 (ifeq 238))  ;;to TAG_2
                                      (190 (aload_2)) 
                                      (191 (checkcast (class "clojure.lang.IObj"))) 
                                      (194 (invokeinterface (methodCP "meta" "clojure.lang.IObj" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (199 (ifnull 238))  ;;to TAG_2
                                      (202 (new (class "clojure.lang.Compiler$MetaExpr"))) 
                                      (205 (dup)) 
                                      (206 (aload 10)) 
                                      (208 (aload_1)) 
                                      (209 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (212 (if_acmpne 219)) ;;to TAG_3
                                      (215 (aload_1)) 
                                      (216 (goto 222)) ;;to TAG_4
                                      (219 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_3
                                      (222 (aload_2)) ;;at TAG_4
                                      (223 (checkcast (class "clojure.lang.IObj"))) 
                                      (226 (invokeinterface (methodCP "meta" "clojure.lang.IObj" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (231 (invokestatic (methodCP "parse" "clojure.lang.Compiler$MapExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.IPersistentMap")) (class "clojure.lang.Compiler$Expr")))) 
                                      (234 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$MetaExpr" ((class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (237 (areturn)) 
                                      (238 (aload 10)) ;;at TAG_2
                                      (240 (areturn)) 
                                      (endofcode 241))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$IParser")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$NewInstanceExpr$ReifyParser-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$NewInstanceExpr$ReifyParser*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$NewInstanceExpr$ReifyParser" . "clojure.lang"))

