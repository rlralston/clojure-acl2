; LockingTransaction$Info-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.LockingTransaction$Info*
 (make-class-def
      '(class "clojure.lang.LockingTransaction$Info"
            "java.lang.Object"
            (constant_pool)
            (fields
                        (field "status" (class "java.util.concurrent.atomic.AtomicInteger") (accessflags  *class*  *final* ) -1)
                        (field "startPoint" long (accessflags  *class*  *final* ) -1)
                        (field "latch" (class "java.util.concurrent.CountDownLatch") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters int long)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 34)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (new (class "java.util.concurrent.atomic.AtomicInteger")))
                                      (8 (dup))
                                      (9 (iload_1))
                                      (10 (invokespecial
					(methodCP "<init>" "java.util.concurrent.atomic.AtomicInteger" (int) void)))
                                      (13 (putfield (fieldCP "status" "clojure.lang.LockingTransaction$Info" (class "java.util.concurrent.atomic.AtomicInteger"))))
                                      (16 (aload_0))
                                      (17 (lload_2))
                                      (18 (putfield (fieldCP "startPoint" "clojure.lang.LockingTransaction$Info" long)))
                                      (21 (aload_0))
                                      (22 (new (class "java.util.concurrent.CountDownLatch")))
                                      (25 (dup))
                                      (26 (iconst_1))
                                      (27 (invokespecial
					(methodCP "<init>" "java.util.concurrent.CountDownLatch" (int) void)))
                                      (30 (putfield (fieldCP "latch" "clojure.lang.LockingTransaction$Info" (class "java.util.concurrent.CountDownLatch"))))
                                      (33 (return))
                                      (endofcode 34))
                                   (Exceptions )
                                   (StackMap )))
                        (method "running"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 23)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "status" "clojure.lang.LockingTransaction$Info" (class "java.util.concurrent.atomic.AtomicInteger")))) 
                                      (4 (invokevirtual (methodCP "get" "java.util.concurrent.atomic.AtomicInteger" () int))) 
                                      (7 (istore_1)) 
                                      (8 (iload_1)) 
                                      (9 (ifeq 17)) ;;to TAG_0
                                      (12 (iload_1)) 
                                      (13 (iconst_1)) 
                                      (14 (if_icmpne 21)) ;;to TAG_1
                                      (17 (iconst_1)) ;;at TAG_0
                                      (18 (goto 22))  ;;to TAG_2
                                      (21 (iconst_0)) ;;at TAG_1
                                      (22 (ireturn)) ;;at TAG_2
                                      (endofcode 23))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *LockingTransaction$Info-class-table*
  (make-static-class-decls 
   *clojure.lang.LockingTransaction$Info*))

(defconst *package-name-map* 
  ("clojure.lang.LockingTransaction$Info" . "clojure.lang"))

