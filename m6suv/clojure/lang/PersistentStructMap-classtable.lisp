; PersistentStructMap-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentStructMap*
 (make-class-def
      '(class "clojure.lang.PersistentStructMap"
            "clojure.lang.APersistentMap"
            (constant_pool
                        (STRING  "Must supply keys")
                        (STRING  "No value supplied for key: %s")
                        (STRING  "Too many arguments to struct constructor")
                        (STRING  "Not a key of struct")
                        (STRING  "Key already present")
                        (STRING  "Can\nt remove struct key"))
            (fields
                        (field "def" (class "clojure.lang.PersistentStructMap$Def") (accessflags  *class*  *final* ) -1)
                        (field "vals" (array (class "java.lang.Object")) (accessflags  *class*  *final* ) -1)
                        (field "ext" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *final* ) -1)
                        (field "_meta" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "createSlotMap"
                              (parameters (class "clojure.lang.ISeq"))
                              (returntype . (class "clojure.lang.PersistentStructMap$Def"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 87)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnonnull 14)) ;;to TAG_0
                                      (4 (new (class "java.lang.IllegalArgumentException"))) 
                                      (7 (dup)) 
                                      (8 (ldc 0)) ;;STRING:: "Must supply keys"
                                      (10 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (13 (athrow)) 
                                      (14 (aload_0)) ;;at TAG_0
                                      (15 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (18 (istore_1)) 
                                      (19 (iconst_2)) 
                                      (20 (iload_1)) 
                                      (21 (imul)) 
                                      (22 (anewarray (class "java.lang.Object"))) 
                                      (25 (astore_2)) 
                                      (26 (iconst_0)) 
                                      (27 (istore_3)) 
                                      (28 (aload_0)) 
                                      (29 (astore 4)) 
                                      (31 (aload 4)) ;;at TAG_2
                                      (33 (ifnull 74)) ;;to TAG_1
                                      (36 (aload_2)) 
                                      (37 (iconst_2)) 
                                      (38 (iload_3)) 
                                      (39 (imul)) 
                                      (40 (aload 4)) 
                                      (42 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (47 (aastore)) 
                                      (48 (aload_2)) 
                                      (49 (iconst_2)) 
                                      (50 (iload_3)) 
                                      (51 (imul)) 
                                      (52 (iconst_1)) 
                                      (53 (iadd)) 
                                      (54 (iload_3)) 
                                      (55 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (58 (aastore)) 
                                      (59 (aload 4)) 
                                      (61 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (66 (astore 4)) 
                                      (68 (iinc 3 1)) 
                                      (71 (goto 31))  ;;to TAG_2
                                      (74 (new (class "clojure.lang.PersistentStructMap$Def"))) ;;at TAG_1
                                      (77 (dup)) 
                                      (78 (aload_0)) 
                                      (79 (aload_2)) 
                                      (80 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (83 (invokespecial (methodCP "<init>" "clojure.lang.PersistentStructMap$Def" ((class "clojure.lang.ISeq") (class "clojure.lang.IPersistentMap")) void))) 
                                      (86 (areturn)) 
                                      (endofcode 87))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (class "clojure.lang.PersistentStructMap$Def") (class "clojure.lang.ISeq"))
                              (returntype . (class "clojure.lang.PersistentStructMap"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 7) (code_length . 146)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "keyslots" "clojure.lang.PersistentStructMap$Def" (class "clojure.lang.IPersistentMap")))) 
                                      (4 (invokeinterface (methodCP "count" "clojure.lang.IPersistentMap" () int) 1)) 
                                      (9 (anewarray (class "java.lang.Object"))) 
                                      (12 (astore_2)) 
                                      (13 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (16 (astore_3)) 
                                      (17 (aload_1)) ;;at TAG_4
                                      (18 (ifnull 134)) ;;to TAG_0
                                      (21 (aload_1)) 
                                      (22 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (27 (ifnonnull 56)) ;;to TAG_1
                                      (30 (new (class "java.lang.IllegalArgumentException"))) 
                                      (33 (dup)) 
                                      (34 (ldc 1)) ;;STRING:: "No value supplied for key: %s"
                                      (36 (iconst_1)) 
                                      (37 (anewarray (class "java.lang.Object"))) 
                                      (40 (dup)) 
                                      (41 (iconst_0)) 
                                      (42 (aload_1)) 
                                      (43 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (48 (aastore)) 
                                      (49 (invokestatic (methodCP "format" "java.lang.String" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.String")))) 
                                      (52 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (55 (athrow)) 
                                      (56 (aload_1)) ;;at TAG_1
                                      (57 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (62 (astore 4)) 
                                      (64 (aload_1)) 
                                      (65 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (68 (astore 5)) 
                                      (70 (aload_0)) 
                                      (71 (getfield (fieldCP "keyslots" "clojure.lang.PersistentStructMap$Def" (class "clojure.lang.IPersistentMap")))) 
                                      (74 (aload 4)) 
                                      (76 (invokeinterface (methodCP "entryAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 2)) 
                                      (81 (astore 6)) 
                                      (83 (aload 6)) 
                                      (85 (ifnull 108))  ;;to TAG_2
                                      (88 (aload_2)) 
                                      (89 (aload 6)) 
                                      (91 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (96 (checkcast (class "java.lang.Integer"))) 
                                      (99 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (102 (aload 5)) 
                                      (104 (aastore)) 
                                      (105 (goto 119)) ;;to TAG_3
                                      (108 (aload_3)) ;;at TAG_2
                                      (109 (aload 4)) 
                                      (111 (aload 5)) 
                                      (113 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (118 (astore_3)) 
                                      (119 (aload_1)) ;;at TAG_3
                                      (120 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (125 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (130 (astore_1)) 
                                      (131 (goto 17)) ;;to TAG_4
                                      (134 (new (class "clojure.lang.PersistentStructMap"))) ;;at TAG_0
                                      (137 (dup)) 
                                      (138 (aconst_null)) 
                                      (139 (aload_0)) 
                                      (140 (aload_2)) 
                                      (141 (aload_3)) 
                                      (142 (invokespecial (methodCP "<init>" "clojure.lang.PersistentStructMap" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.PersistentStructMap$Def") (array (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) void))) 
                                      (145 (areturn)) 
                                      (endofcode 146))
                                   (Exceptions )
                                   (StackMap )))
                        (method "construct"
                              (parameters (class "clojure.lang.PersistentStructMap$Def") (class "clojure.lang.ISeq"))
                              (returntype . (class "clojure.lang.PersistentStructMap"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 5) (code_length . 80)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "keyslots" "clojure.lang.PersistentStructMap$Def" (class "clojure.lang.IPersistentMap")))) 
                                      (4 (invokeinterface (methodCP "count" "clojure.lang.IPersistentMap" () int) 1)) 
                                      (9 (anewarray (class "java.lang.Object"))) 
                                      (12 (astore_2)) 
                                      (13 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (16 (astore_3)) 
                                      (17 (iconst_0)) 
                                      (18 (istore 4)) 
                                      (20 (iload 4)) ;;at TAG_1
                                      (22 (aload_2)) 
                                      (23 (arraylength)) 
                                      (24 (if_icmpge 54)) ;;to TAG_0
                                      (27 (aload_1)) 
                                      (28 (ifnull 54)) ;;to TAG_0
                                      (31 (aload_2)) 
                                      (32 (iload 4)) 
                                      (34 (aload_1)) 
                                      (35 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (40 (aastore)) 
                                      (41 (aload_1)) 
                                      (42 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (47 (astore_1)) 
                                      (48 (iinc 4 1)) 
                                      (51 (goto 20)) ;;to TAG_1
                                      (54 (aload_1)) ;;at TAG_0
                                      (55 (ifnull 68))  ;;to TAG_2
                                      (58 (new (class "java.lang.IllegalArgumentException"))) 
                                      (61 (dup)) 
                                      (62 (ldc 2)) ;;STRING:: "Too many arguments to struct constructor"
                                      (64 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (67 (athrow)) 
                                      (68 (new (class "clojure.lang.PersistentStructMap"))) ;;at TAG_2
                                      (71 (dup)) 
                                      (72 (aconst_null)) 
                                      (73 (aload_0)) 
                                      (74 (aload_2)) 
                                      (75 (aload_3)) 
                                      (76 (invokespecial (methodCP "<init>" "clojure.lang.PersistentStructMap" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.PersistentStructMap$Def") (array (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) void))) 
                                      (79 (areturn)) 
                                      (endofcode 80))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getAccessor"
                              (parameters (class "clojure.lang.PersistentStructMap$Def") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IFn"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 48)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "keyslots" "clojure.lang.PersistentStructMap$Def" (class "clojure.lang.IPersistentMap")))) 
                                      (4 (aload_1)) 
                                      (5 (invokeinterface (methodCP "entryAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 2)) 
                                      (10 (astore_2)) 
                                      (11 (aload_2)) 
                                      (12 (ifnull 38))  ;;to TAG_0
                                      (15 (aload_2)) 
                                      (16 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (21 (checkcast (class "java.lang.Integer"))) 
                                      (24 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (27 (istore_3)) 
                                      (28 (new (class "clojure.lang.PersistentStructMap$1"))) 
                                      (31 (dup)) 
                                      (32 (aload_0)) 
                                      (33 (iload_3)) 
                                      (34 (invokespecial (methodCP "<init>" "clojure.lang.PersistentStructMap$1" ((class "clojure.lang.PersistentStructMap$Def") int) void))) 
                                      (37 (areturn)) 
                                      (38 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_0
                                      (41 (dup)) 
                                      (42 (ldc 3)) ;;STRING:: "Not a key of struct"
                                      (44 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (47 (athrow)) 
                                      (endofcode 48))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (class "clojure.lang.PersistentStructMap$Def") (array (class "java.lang.Object")) (class "clojure.lang.IPersistentMap"))
                              (returntype . void)
                              (accessflags  *class*  *protected* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentMap" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "_meta" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap"))))
                                      (9 (aload_0))
                                      (10 (aload 4))
                                      (12 (putfield (fieldCP "ext" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap"))))
                                      (15 (aload_0))
                                      (16 (aload_2))
                                      (17 (putfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def"))))
                                      (20 (aload_0))
                                      (21 (aload_3))
                                      (22 (putfield (fieldCP "vals" "clojure.lang.PersistentStructMap" (array (class "java.lang.Object")))))
                                      (25 (return))
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "makeNew"
                              (parameters (class "clojure.lang.IPersistentMap") (class "clojure.lang.PersistentStructMap$Def") (array (class "java.lang.Object")) (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.PersistentStructMap"))
                              (accessflags  *class*  *protected* )
                              (code
                                   (max_stack . 6) (max_locals . 5) (code_length . 13)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentStructMap")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (aload_2))
                                      (6 (aload_3))
                                      (7 (aload 4))
                                      (9 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentStructMap" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.PersistentStructMap$Def") (array (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) void)))
                                      (12 (areturn))
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 28)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "_meta" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (5 (if_acmpne 10))  ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (areturn)) 
                                      (10 (aload_0)) ;;at TAG_0
                                      (11 (aload_1)) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def")))) 
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "vals" "clojure.lang.PersistentStructMap" (array (class "java.lang.Object"))))) 
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "ext" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (24 (invokevirtual (methodCP "makeNew" "clojure.lang.PersistentStructMap" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.PersistentStructMap$Def") (array (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentStructMap")))) 
                                      (27 (areturn)) 
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap )))
                        (method "meta"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "_meta" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "containsKey"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 35)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def")))) 
                                      (4 (getfield (fieldCP "keyslots" "clojure.lang.PersistentStructMap$Def" (class "clojure.lang.IPersistentMap")))) 
                                      (7 (aload_1)) 
                                      (8 (invokeinterface (methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (13 (ifne 29)) ;;to TAG_0
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "ext" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (20 (aload_1)) 
                                      (21 (invokeinterface (methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (26 (ifeq 33)) ;;to TAG_1
                                      (29 (iconst_1)) ;;at TAG_0
                                      (30 (goto 34))  ;;to TAG_2
                                      (33 (iconst_0)) ;;at TAG_1
                                      (34 (ireturn)) ;;at TAG_2
                                      (endofcode 35))
                                   (Exceptions )
                                   (StackMap )))
                        (method "entryAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IMapEntry"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 60)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def")))) 
                                      (4 (getfield (fieldCP "keyslots" "clojure.lang.PersistentStructMap$Def" (class "clojure.lang.IPersistentMap")))) 
                                      (7 (aload_1)) 
                                      (8 (invokeinterface (methodCP "entryAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 2)) 
                                      (13 (astore_2)) 
                                      (14 (aload_2)) 
                                      (15 (ifnull 49))  ;;to TAG_0
                                      (18 (new (class "clojure.lang.MapEntry"))) 
                                      (21 (dup)) 
                                      (22 (aload_2)) 
                                      (23 (invokeinterface (methodCP "getKey" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (28 (aload_0)) 
                                      (29 (getfield (fieldCP "vals" "clojure.lang.PersistentStructMap" (array (class "java.lang.Object"))))) 
                                      (32 (aload_2)) 
                                      (33 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (38 (checkcast (class "java.lang.Integer"))) 
                                      (41 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (44 (aaload)) 
                                      (45 (invokespecial (methodCP "<init>" "clojure.lang.MapEntry" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (48 (areturn)) 
                                      (49 (aload_0)) ;;at TAG_0
                                      (50 (getfield (fieldCP "ext" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (53 (aload_1)) 
                                      (54 (invokeinterface (methodCP "entryAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 2)) 
                                      (59 (areturn)) 
                                      (endofcode 60))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 6) (code_length . 97)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def")))) 
                                      (4 (getfield (fieldCP "keyslots" "clojure.lang.PersistentStructMap$Def" (class "clojure.lang.IPersistentMap")))) 
                                      (7 (aload_1)) 
                                      (8 (invokeinterface (methodCP "entryAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 2)) 
                                      (13 (astore_3)) 
                                      (14 (aload_3)) 
                                      (15 (ifnull 69))  ;;to TAG_0
                                      (18 (aload_3)) 
                                      (19 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (24 (checkcast (class "java.lang.Integer"))) 
                                      (27 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (30 (istore 4)) 
                                      (32 (aload_0)) 
                                      (33 (getfield (fieldCP "vals" "clojure.lang.PersistentStructMap" (array (class "java.lang.Object"))))) 
                                      (36 (invokevirtual (methodCP "clone" "java.lang.Object[]" () (class "java.lang.Object")))) 
                                      (39 (checkcast (array (class "java.lang.Object")))) 
                                      (42 (astore 5)) 
                                      (44 (aload 5)) 
                                      (46 (iload 4)) 
                                      (48 (aload_2)) 
                                      (49 (aastore)) 
                                      (50 (aload_0)) 
                                      (51 (aload_0)) 
                                      (52 (getfield (fieldCP "_meta" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (55 (aload_0)) 
                                      (56 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def")))) 
                                      (59 (aload 5)) 
                                      (61 (aload_0)) 
                                      (62 (getfield (fieldCP "ext" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (65 (invokevirtual (methodCP "makeNew" "clojure.lang.PersistentStructMap" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.PersistentStructMap$Def") (array (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentStructMap")))) 
                                      (68 (areturn)) 
                                      (69 (aload_0)) ;;at TAG_0
                                      (70 (aload_0)) 
                                      (71 (getfield (fieldCP "_meta" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (74 (aload_0)) 
                                      (75 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def")))) 
                                      (78 (aload_0)) 
                                      (79 (getfield (fieldCP "vals" "clojure.lang.PersistentStructMap" (array (class "java.lang.Object"))))) 
                                      (82 (aload_0)) 
                                      (83 (getfield (fieldCP "ext" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (86 (aload_1)) 
                                      (87 (aload_2)) 
                                      (88 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (93 (invokevirtual (methodCP "makeNew" "clojure.lang.PersistentStructMap" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.PersistentStructMap$Def") (array (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentStructMap")))) 
                                      (96 (areturn)) 
                                      (endofcode 97))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 42)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def")))) 
                                      (4 (getfield (fieldCP "keyslots" "clojure.lang.PersistentStructMap$Def" (class "clojure.lang.IPersistentMap")))) 
                                      (7 (aload_1)) 
                                      (8 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (13 (checkcast (class "java.lang.Integer"))) 
                                      (16 (astore_2)) 
                                      (17 (aload_2)) 
                                      (18 (ifnull 31))  ;;to TAG_0
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "vals" "clojure.lang.PersistentStructMap" (array (class "java.lang.Object"))))) 
                                      (25 (aload_2)) 
                                      (26 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (29 (aaload)) 
                                      (30 (areturn)) 
                                      (31 (aload_0)) ;;at TAG_0
                                      (32 (getfield (fieldCP "ext" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (35 (aload_1)) 
                                      (36 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (41 (areturn)) 
                                      (endofcode 42))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valAt"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 43)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def")))) 
                                      (4 (getfield (fieldCP "keyslots" "clojure.lang.PersistentStructMap$Def" (class "clojure.lang.IPersistentMap")))) 
                                      (7 (aload_1)) 
                                      (8 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (13 (checkcast (class "java.lang.Integer"))) 
                                      (16 (astore_3)) 
                                      (17 (aload_3)) 
                                      (18 (ifnull 31))  ;;to TAG_0
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "vals" "clojure.lang.PersistentStructMap" (array (class "java.lang.Object"))))) 
                                      (25 (aload_3)) 
                                      (26 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (29 (aaload)) 
                                      (30 (areturn)) 
                                      (31 (aload_0)) ;;at TAG_0
                                      (32 (getfield (fieldCP "ext" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (35 (aload_1)) 
                                      (36 (aload_2)) 
                                      (37 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (42 (areturn)) 
                                      (endofcode 43))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assocEx"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokevirtual (methodCP "containsKey" "clojure.lang.PersistentStructMap" ((class "java.lang.Object")) boolean))) 
                                      (5 (ifeq 14))  ;;to TAG_0
                                      (8 (ldc 4)) ;;STRING:: "Key already present"
                                      (10 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (13 (athrow)) 
                                      (14 (aload_0)) ;;at TAG_0
                                      (15 (aload_1)) 
                                      (16 (aload_2)) 
                                      (17 (invokevirtual (methodCP "assoc" "clojure.lang.PersistentStructMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (20 (areturn)) 
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "without"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 63)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def")))) 
                                      (4 (getfield (fieldCP "keyslots" "clojure.lang.PersistentStructMap$Def" (class "clojure.lang.IPersistentMap")))) 
                                      (7 (aload_1)) 
                                      (8 (invokeinterface (methodCP "entryAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 2)) 
                                      (13 (astore_2)) 
                                      (14 (aload_2)) 
                                      (15 (ifnull 24))  ;;to TAG_0
                                      (18 (ldc 5)) ;;STRING:: "Can\nt remove struct key"
                                      (20 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (23 (athrow)) 
                                      (24 (aload_0)) ;;at TAG_0
                                      (25 (getfield (fieldCP "ext" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (28 (aload_1)) 
                                      (29 (invokeinterface (methodCP "without" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 2)) 
                                      (34 (astore_3)) 
                                      (35 (aload_3)) 
                                      (36 (aload_0)) 
                                      (37 (getfield (fieldCP "ext" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (40 (if_acmpne 45)) ;;to TAG_1
                                      (43 (aload_0)) 
                                      (44 (areturn)) 
                                      (45 (aload_0)) ;;at TAG_1
                                      (46 (aload_0)) 
                                      (47 (getfield (fieldCP "_meta" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap")))) 
                                      (50 (aload_0)) 
                                      (51 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def")))) 
                                      (54 (aload_0)) 
                                      (55 (getfield (fieldCP "vals" "clojure.lang.PersistentStructMap" (array (class "java.lang.Object"))))) 
                                      (58 (aload_3)) 
                                      (59 (invokevirtual (methodCP "makeNew" "clojure.lang.PersistentStructMap" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.PersistentStructMap$Def") (array (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentStructMap")))) 
                                      (62 (areturn)) 
                                      (endofcode 63))
                                   (Exceptions )
                                   (StackMap )))
                        (method "iterator"
                              (parameters )
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 12)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.SeqIterator")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (invokevirtual
					(methodCP "seq" "clojure.lang.PersistentStructMap" () (class "clojure.lang.ISeq"))))
                                      (8 (invokespecial
					(methodCP "<init>" "clojure.lang.SeqIterator" ((class "clojure.lang.ISeq")) void)))
                                      (11 (areturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "vals" "clojure.lang.PersistentStructMap" (array (class "java.lang.Object")))))
                                      (4 (arraylength))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "ext" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap"))))
                                      (9 (invokestatic
					(methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int)))
                                      (12 (iadd))
                                      (13 (ireturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "seq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 1) (code_length . 25)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentStructMap$Seq")))
                                      (3 (dup))
                                      (4 (aconst_null))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def"))))
                                      (9 (getfield (fieldCP "keys" "clojure.lang.PersistentStructMap$Def" (class "clojure.lang.ISeq"))))
                                      (12 (aload_0))
                                      (13 (getfield (fieldCP "vals" "clojure.lang.PersistentStructMap" (array (class "java.lang.Object")))))
                                      (16 (iconst_0))
                                      (17 (aload_0))
                                      (18 (getfield (fieldCP "ext" "clojure.lang.PersistentStructMap" (class "clojure.lang.IPersistentMap"))))
                                      (21 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentStructMap$Seq" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.ISeq") (array (class "java.lang.Object")) int (class "clojure.lang.IPersistentMap")) void)))
                                      (24 (areturn))
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "empty"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def"))))
                                      (4 (aconst_null))
                                      (5 (invokestatic
					(methodCP "construct" "clojure.lang.PersistentStructMap" ((class "clojure.lang.PersistentStructMap$Def") (class "clojure.lang.ISeq")) (class "clojure.lang.PersistentStructMap"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Associative"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokevirtual
					(methodCP "assoc" "clojure.lang.PersistentStructMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IObj")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentStructMap-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentStructMap*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentStructMap" . "clojure.lang"))

