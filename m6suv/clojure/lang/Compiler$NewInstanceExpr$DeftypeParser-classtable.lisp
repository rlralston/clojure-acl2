; Compiler$NewInstanceExpr$DeftypeParser-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$NewInstanceExpr$DeftypeParser*
 (make-class-def
      '(class "clojure.lang.Compiler$NewInstanceExpr$DeftypeParser"
            "java.lang.Object"
            (constant_pool)
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 9) (code_length . 164)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (checkcast (class "clojure.lang.ISeq"))) 
                                      (4 (astore_3)) 
                                      (5 (aload_3)) 
                                      (6 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (9 (astore_3)) 
                                      (10 (aload_3)) 
                                      (11 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (16 (checkcast (class "clojure.lang.Symbol"))) 
                                      (19 (invokevirtual (methodCP "toString" "clojure.lang.Symbol" () (class "java.lang.String")))) 
                                      (22 (astore 4)) 
                                      (24 (aload_3)) 
                                      (25 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (30 (astore_3)) 
                                      (31 (aload_3)) 
                                      (32 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (37 (checkcast (class "clojure.lang.Symbol"))) 
                                      (40 (astore 5)) 
                                      (42 (aload_3)) 
                                      (43 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (48 (astore_3)) 
                                      (49 (aload_3)) 
                                      (50 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (55 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (58 (astore 6)) 
                                      (60 (aload_3)) 
                                      (61 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (66 (astore_3)) 
                                      (67 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (70 (astore 7)) 
                                      (72 (aload_3)) ;;at TAG_1
                                      (73 (ifnull 122))  ;;to TAG_0
                                      (76 (aload_3)) 
                                      (77 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (82 (instanceof (class "clojure.lang.Keyword"))) 
                                      (85 (ifeq 122))  ;;to TAG_0
                                      (88 (aload 7)) 
                                      (90 (aload_3)) 
                                      (91 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (96 (aload_3)) 
                                      (97 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (100 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (105 (astore 7)) 
                                      (107 (aload_3)) 
                                      (108 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (113 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (118 (astore_3)) 
                                      (119 (goto 72)) ;;to TAG_1
                                      (122 (aload 7)) ;;at TAG_0
                                      (124 (getstatic (fieldCP "implementsKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (127 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (130 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (133 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (136 (aload 6)) 
                                      (138 (aconst_null)) 
                                      (139 (aload 4)) 
                                      (141 (aload 5)) 
                                      (143 (aload 7)) 
                                      (145 (getstatic (fieldCP "TAG_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (148 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (151 (checkcast (class "clojure.lang.Symbol"))) 
                                      (154 (aload_3)) 
                                      (155 (aload_2)) 
                                      (156 (invokestatic (methodCP "build" "clojure.lang.Compiler$NewInstanceExpr" ((class "clojure.lang.IPersistentVector") (class "clojure.lang.IPersistentVector") (class "clojure.lang.Symbol") (class "java.lang.String") (class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.ISeq") (class "java.lang.Object")) (class "clojure.lang.Compiler$ObjExpr")))) 
                                      (159 (astore 8)) 
                                      (161 (aload 8)) 
                                      (163 (areturn)) 
                                      (endofcode 164))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$IParser")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$NewInstanceExpr$DeftypeParser-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$NewInstanceExpr$DeftypeParser*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$NewInstanceExpr$DeftypeParser" . "clojure.lang"))

