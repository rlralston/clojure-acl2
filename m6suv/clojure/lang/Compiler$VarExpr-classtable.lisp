; Compiler$VarExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.Compiler$VarExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$VarExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Object get()")
                        (STRING  "Object set(Object)"))
            (fields
                        (field "var" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public* ) -1)
                        (field "tag" (class "java.lang.Object") (accessflags  *class*  *final*  *public* ) -1)
                        (field "getMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "setMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.Var") (class "clojure.lang.Symbol"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "<init>" "java.lang.Object" () void))) 
                                      (4 (aload_0)) 
                                      (5 (aload_1)) 
                                      (6 (putfield (fieldCP "var" "clojure.lang.Compiler$VarExpr" (class "clojure.lang.Var")))) 
                                      (9 (aload_0)) 
                                      (10 (aload_2)) 
                                      (11 (ifnull 18))  ;;to TAG_0
                                      (14 (aload_2)) 
                                      (15 (goto 22)) ;;to TAG_1
                                      (18 (aload_1)) ;;at TAG_0
                                      (19 (invokevirtual (methodCP "getTag" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (22 (putfield (fieldCP "tag" "clojure.lang.Compiler$VarExpr" (class "java.lang.Object")))) ;;at TAG_1
                                      (25 (return)) 
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "var" "clojure.lang.Compiler$VarExpr" (class "clojure.lang.Var"))))
                                      (4 (invokevirtual
					(methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (aload_3)) 
                                      (2 (aload_0)) 
                                      (3 (getfield (fieldCP "var" "clojure.lang.Compiler$VarExpr" (class "clojure.lang.Var")))) 
                                      (6 (invokevirtual (methodCP "emitVarValue" "clojure.lang.Compiler$ObjExpr" ((class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Var")) void))) 
                                      (9 (aload_1)) 
                                      (10 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (13 (if_acmpne 20))  ;;to TAG_0
                                      (16 (aload_3)) 
                                      (17 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (20 (return)) ;;at TAG_0
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tag" "clojure.lang.Compiler$VarExpr" (class "java.lang.Object")))) 
                                      (4 (ifnull 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "tag" "clojure.lang.Compiler$VarExpr" (class "java.lang.Object"))))
                                      (4 (invokestatic
					(methodCP "tagToClass" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object")) (class "java.lang.Class"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "evalAssign"
                              (parameters (class "clojure.lang.Compiler$Expr"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "var" "clojure.lang.Compiler$VarExpr" (class "clojure.lang.Var"))))
                                      (4 (aload_1))
                                      (5 (invokeinterface
					(methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1))
                                      (10 (invokevirtual
					(methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object"))))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitAssign"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 43)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (aload_3)) 
                                      (2 (aload_0)) 
                                      (3 (getfield (fieldCP "var" "clojure.lang.Compiler$VarExpr" (class "clojure.lang.Var")))) 
                                      (6 (invokevirtual (methodCP "emitVar" "clojure.lang.Compiler$ObjExpr" ((class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Var")) void))) 
                                      (9 (aload 4)) 
                                      (11 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (14 (aload_2)) 
                                      (15 (aload_3)) 
                                      (16 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (21 (aload_3)) 
                                      (22 (invokestatic (methodCP "access$000" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (25 (getstatic (fieldCP "setMethod" "clojure.lang.Compiler$VarExpr" (class "clojure.asm.commons.Method")))) 
                                      (28 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (31 (aload_1)) 
                                      (32 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (35 (if_acmpne 42))  ;;to TAG_0
                                      (38 (aload_3)) 
                                      (39 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (42 (return)) ;;at TAG_0
                                      (endofcode 43))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 17)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "Object get()"
                                      (2 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (5 (putstatic (fieldCP "getMethod" "clojure.lang.Compiler$VarExpr" (class "clojure.asm.commons.Method"))))
                                      (8 (ldc 1))         ;;STRING:: "Object set(Object)"
                                      (10 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (13 (putstatic (fieldCP "setMethod" "clojure.lang.Compiler$VarExpr" (class "clojure.asm.commons.Method"))))
                                      (16 (return))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr" "clojure.lang.Compiler$AssignableExpr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$VarExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$VarExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$VarExpr" . "clojure.lang"))

