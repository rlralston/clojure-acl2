; Compiler$ListExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$ListExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$ListExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "clojure.lang.ISeq arrayToList(Object[])"))
            (fields
                        (field "args" (class "clojure.lang.IPersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "arrayToListMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentVector"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "args" "clojure.lang.Compiler$ListExpr" (class "clojure.lang.IPersistentVector"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 57)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (3 (astore_1)) 
                                      (4 (iconst_0)) 
                                      (5 (istore_2)) 
                                      (6 (iload_2)) ;;at TAG_1
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "args" "clojure.lang.Compiler$ListExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (11 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (16 (if_icmpge 50))  ;;to TAG_0
                                      (19 (aload_1)) 
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "args" "clojure.lang.Compiler$ListExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (24 (iload_2)) 
                                      (25 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (30 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (33 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (38 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 2)) 
                                      (43 (astore_1)) 
                                      (44 (iinc 2 1)) 
                                      (47 (goto 6)) ;;to TAG_1
                                      (50 (aload_1)) ;;at TAG_0
                                      (51 (invokeinterface (methodCP "seq" "clojure.lang.IPersistentVector" () (class "clojure.lang.ISeq")) 1)) 
                                      (56 (areturn)) 
                                      (endofcode 57))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 31)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "args" "clojure.lang.Compiler$ListExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (4 (aload_2)) 
                                      (5 (aload_3)) 
                                      (6 (invokestatic (methodCP "emitArgsAsArray" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.IPersistentVector") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (9 (aload_3)) 
                                      (10 (invokestatic (methodCP "access$200" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (13 (getstatic (fieldCP "arrayToListMethod" "clojure.lang.Compiler$ListExpr" (class "clojure.asm.commons.Method")))) 
                                      (16 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (19 (aload_1)) 
                                      (20 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (23 (if_acmpne 30))  ;;to TAG_0
                                      (26 (aload_3)) 
                                      (27 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (30 (return)) ;;at TAG_0
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 4)
                                   (parsedcode
                                      (0 (ldc_w ))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 9)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.lang.ISeq arrayToList(Object[])"
                                      (2 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (5 (putstatic (fieldCP "arrayToListMethod" "clojure.lang.Compiler$ListExpr" (class "clojure.asm.commons.Method"))))
                                      (8 (return))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$ListExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$ListExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$ListExpr" . "clojure.lang"))

