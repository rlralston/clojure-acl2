; LazilyPersistentVector-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.LazilyPersistentVector*
 (make-class-def
      '(class "clojure.lang.LazilyPersistentVector"
            "java.lang.Object"
            (constant_pool)
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "createOwning"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (class "clojure.lang.IPersistentVector"))
                              (accessflags  *class*  *public*  *static*  *transient* )
                              (code
                                   (max_stack . 6) (max_locals . 1) (code_length . 36)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (arraylength)) 
                                      (2 (ifne 9))  ;;to TAG_0
                                      (5 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (8 (areturn)) 
                                      (9 (aload_0)) ;;at TAG_0
                                      (10 (arraylength)) 
                                      (11 (bipush 32)) 
                                      (13 (if_icmpgt 31)) ;;to TAG_1
                                      (16 (new (class "clojure.lang.PersistentVector"))) 
                                      (19 (dup)) 
                                      (20 (aload_0)) 
                                      (21 (arraylength)) 
                                      (22 (iconst_5)) 
                                      (23 (getstatic (fieldCP "EMPTY_NODE" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (26 (aload_0)) 
                                      (27 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector" (int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object"))) void))) 
                                      (30 (areturn)) 
                                      (31 (aload_0)) ;;at TAG_1
                                      (32 (invokestatic (methodCP "create" "clojure.lang.PersistentVector" ((array (class "java.lang.Object"))) (class "clojure.lang.PersistentVector")))) 
                                      (35 (areturn)) 
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (class "java.util.Collection"))
                              (returntype . (class "clojure.lang.IPersistentVector"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 36)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "clojure.lang.ISeq"))) 
                                      (4 (ifne 28))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (invokeinterface (methodCP "size" "java.util.Collection" () int) 1)) 
                                      (13 (bipush 32)) 
                                      (15 (if_icmpgt 28))  ;;to TAG_0
                                      (18 (aload_0)) 
                                      (19 (invokeinterface (methodCP "toArray" "java.util.Collection" () (array (class "java.lang.Object"))) 1)) 
                                      (24 (invokestatic (methodCP "createOwning" "clojure.lang.LazilyPersistentVector" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (27 (areturn)) 
                                      (28 (aload_0)) ;;at TAG_0
                                      (29 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (32 (invokestatic (methodCP "create" "clojure.lang.PersistentVector" ((class "clojure.lang.ISeq")) (class "clojure.lang.PersistentVector")))) 
                                      (35 (areturn)) 
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *LazilyPersistentVector-class-table*
  (make-static-class-decls 
   *clojure.lang.LazilyPersistentVector*))

(defconst *package-name-map* 
  ("clojure.lang.LazilyPersistentVector" . "clojure.lang"))

