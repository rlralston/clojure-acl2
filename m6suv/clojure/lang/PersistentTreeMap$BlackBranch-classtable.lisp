; PersistentTreeMap$BlackBranch-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentTreeMap$BlackBranch*
 (make-class-def
      '(class "clojure.lang.PersistentTreeMap$BlackBranch"
            "clojure.lang.PersistentTreeMap$Black"
            (constant_pool)
            (fields
                        (field "left" (class "clojure.lang.PersistentTreeMap$Node") (accessflags  *class*  *final* ) -1)
                        (field "right" (class "clojure.lang.PersistentTreeMap$Node") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap$Black" ((class "java.lang.Object")) void)))
                                      (5 (aload_0))
                                      (6 (aload_2))
                                      (7 (putfield (fieldCP "left" "clojure.lang.PersistentTreeMap$BlackBranch" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (10 (aload_0))
                                      (11 (aload_3))
                                      (12 (putfield (fieldCP "right" "clojure.lang.PersistentTreeMap$BlackBranch" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (15 (return))
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "left"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "left" "clojure.lang.PersistentTreeMap$BlackBranch" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "right"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "right" "clojure.lang.PersistentTreeMap$BlackBranch" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "redden"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 5) (max_locals . 1) (code_length . 20)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentTreeMap$RedBranch")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$BlackBranch" (class "java.lang.Object"))))
                                      (8 (aload_0))
                                      (9 (getfield (fieldCP "left" "clojure.lang.PersistentTreeMap$BlackBranch" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (12 (aload_0))
                                      (13 (getfield (fieldCP "right" "clojure.lang.PersistentTreeMap$BlackBranch" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (16 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap$RedBranch" ((class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) void)))
                                      (19 (areturn))
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentTreeMap$BlackBranch-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentTreeMap$BlackBranch*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentTreeMap$BlackBranch" . "clojure.lang"))

