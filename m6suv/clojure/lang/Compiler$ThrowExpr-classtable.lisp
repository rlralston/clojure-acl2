; Compiler$ThrowExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.Compiler$ThrowExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$ThrowExpr"
            "clojure.lang.Compiler$UntypedExpr"
            (constant_pool
                        (STRING  "Can\nt eval throw"))
            (fields
                        (field "excExpr" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.Compiler$Expr"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.Compiler$UntypedExpr" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "excExpr" "clojure.lang.Compiler$ThrowExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 6)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "Can\nt eval throw"
                                      (2 (invokestatic
					(methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException"))))
                                      (5 (athrow))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "excExpr" "clojure.lang.Compiler$ThrowExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C"))))
                                      (7 (aload_2))
                                      (8 (aload_3))
                                      (9 (invokeinterface
					(methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4))
                                      (14 (aload_3))
                                      (15 (getstatic (fieldCP "THROWABLE_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type"))))
                                      (18 (invokevirtual
					(methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void)))
                                      (21 (aload_3))
                                      (22 (invokevirtual
					(methodCP "throwException" "clojure.asm.commons.GeneratorAdapter" () void)))
                                      (25 (return))
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$ThrowExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$ThrowExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$ThrowExpr" . "clojure.lang"))

