; Compiler$LocalBinding-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$LocalBinding*
 (make-class-def
      '(class "clojure.lang.Compiler$LocalBinding"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Can\nt type hint a local with a primitive initializer"))
            (fields
                        (field "sym" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *public* ) -1)
                        (field "tag" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *public* ) -1)
                        (field "init" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *public* ) -1)
                        (field "idx" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "name" (class "java.lang.String") (accessflags  *class*  *final*  *public* ) -1)
                        (field "isArg" boolean (accessflags  *class*  *final*  *public* ) -1)
                        (field "clearPathRoot" (class "clojure.lang.Compiler$PathNode") (accessflags  *class*  *final*  *public* ) -1)
                        (field "canBeCleared" boolean (accessflags  *class*  *public* ) -1)
                        (field "recurMistmatch" boolean (accessflags  *class*  *public* ) -1))
            (methods
                        (method "<init>"
                              (parameters int (class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") boolean (class "clojure.lang.Compiler$PathNode"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 7) (code_length . 97)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "<init>" "java.lang.Object" () void))) 
                                      (4 (aload_0)) 
                                      (5 (getstatic (fieldCP "disableLocalsClearingKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (8 (invokestatic (methodCP "getCompilerOption" "clojure.lang.Compiler" ((class "clojure.lang.Keyword")) (class "java.lang.Object")))) 
                                      (11 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (14 (ifne 21)) ;;to TAG_0
                                      (17 (iconst_1)) 
                                      (18 (goto 22)) ;;to TAG_1
                                      (21 (iconst_0)) ;;at TAG_0
                                      (22 (putfield (fieldCP "canBeCleared" "clojure.lang.Compiler$LocalBinding" boolean))) ;;at TAG_1
                                      (25 (aload_0)) 
                                      (26 (iconst_0)) 
                                      (27 (putfield (fieldCP "recurMistmatch" "clojure.lang.Compiler$LocalBinding" boolean))) 
                                      (30 (aload 4)) 
                                      (32 (invokestatic (methodCP "maybePrimitiveType" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$Expr")) (class "java.lang.Class")))) 
                                      (35 (ifnull 52))  ;;to TAG_2
                                      (38 (aload_3)) 
                                      (39 (ifnull 52))  ;;to TAG_2
                                      (42 (new (class "java.lang.UnsupportedOperationException"))) 
                                      (45 (dup)) 
                                      (46 (ldc 0)) ;;STRING:: "Can\nt type hint a local with a primitive initializer"
                                      (48 (invokespecial (methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void))) 
                                      (51 (athrow)) 
                                      (52 (aload_0)) ;;at TAG_2
                                      (53 (iload_1)) 
                                      (54 (putfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (57 (aload_0)) 
                                      (58 (aload_2)) 
                                      (59 (putfield (fieldCP "sym" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Symbol")))) 
                                      (62 (aload_0)) 
                                      (63 (aload_3)) 
                                      (64 (putfield (fieldCP "tag" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Symbol")))) 
                                      (67 (aload_0)) 
                                      (68 (aload 4)) 
                                      (70 (putfield (fieldCP "init" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Compiler$Expr")))) 
                                      (73 (aload_0)) 
                                      (74 (iload 5)) 
                                      (76 (putfield (fieldCP "isArg" "clojure.lang.Compiler$LocalBinding" boolean))) 
                                      (79 (aload_0)) 
                                      (80 (aload 6)) 
                                      (82 (putfield (fieldCP "clearPathRoot" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Compiler$PathNode")))) 
                                      (85 (aload_0)) 
                                      (86 (aload_2)) 
                                      (87 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (90 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (93 (putfield (fieldCP "name" "clojure.lang.Compiler$LocalBinding" (class "java.lang.String")))) 
                                      (96 (return)) 
                                      (endofcode 97))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 78)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "init" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Compiler$Expr")))) 
                                      (4 (ifnull 46)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "init" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Compiler$Expr")))) 
                                      (11 (invokeinterface (methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1)) 
                                      (16 (ifeq 46)) ;;to TAG_0
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "init" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Compiler$Expr")))) 
                                      (23 (invokeinterface (methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1)) 
                                      (28 (invokestatic (methodCP "isPrimitive" "clojure.lang.Util" ((class "java.lang.Class")) boolean))) 
                                      (31 (ifeq 46)) ;;to TAG_0
                                      (34 (aload_0)) 
                                      (35 (getfield (fieldCP "init" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Compiler$Expr")))) 
                                      (38 (instanceof (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (41 (ifne 46)) ;;to TAG_0
                                      (44 (iconst_0)) 
                                      (45 (ireturn)) 
                                      (46 (aload_0)) ;;at TAG_0
                                      (47 (getfield (fieldCP "tag" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Symbol")))) 
                                      (50 (ifnonnull 72)) ;;to TAG_1
                                      (53 (aload_0)) 
                                      (54 (getfield (fieldCP "init" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Compiler$Expr")))) 
                                      (57 (ifnull 76))  ;;to TAG_2
                                      (60 (aload_0)) 
                                      (61 (getfield (fieldCP "init" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Compiler$Expr")))) 
                                      (64 (invokeinterface (methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1)) 
                                      (69 (ifeq 76))  ;;to TAG_2
                                      (72 (iconst_1)) ;;at TAG_1
                                      (73 (goto 77)) ;;to TAG_3
                                      (76 (iconst_0)) ;;at TAG_2
                                      (77 (ireturn)) ;;at TAG_3
                                      (endofcode 78))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tag" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Symbol")))) 
                                      (4 (ifnull 17))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "tag" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Symbol")))) 
                                      (11 (invokestatic (methodCP "tagToClass" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (14 (goto 26)) ;;to TAG_1
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (getfield (fieldCP "init" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Compiler$Expr")))) 
                                      (21 (invokeinterface (methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1)) 
                                      (26 (areturn)) ;;at TAG_1
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getPrimitiveType"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "init" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (invokestatic
					(methodCP "maybePrimitiveType" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$Expr")) (class "java.lang.Class"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$LocalBinding-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$LocalBinding*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$LocalBinding" . "clojure.lang"))

