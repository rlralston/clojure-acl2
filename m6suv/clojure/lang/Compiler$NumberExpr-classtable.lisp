; Compiler$NumberExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$NumberExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$NumberExpr"
            "clojure.lang.Compiler$LiteralExpr"
            (constant_pool
                        (STRING  "Unsupported Number type: "))
            (fields
                        (field "n" (class "java.lang.Number") (accessflags  *class*  *final* ) -1)
                        (field "id" int (accessflags  *class*  *final*  *public* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.Number"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.Compiler$LiteralExpr" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "n" "clojure.lang.Compiler$NumberExpr" (class "java.lang.Number"))))
                                      (9 (aload_0))
                                      (10 (aload_1))
                                      (11 (invokestatic
					(methodCP "access$700" "clojure.lang.Compiler" ((class "java.lang.Object")) int)))
                                      (14 (putfield (fieldCP "id" "clojure.lang.Compiler$NumberExpr" int)))
                                      (17 (return))
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "val"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "n" "clojure.lang.Compiler$NumberExpr" (class "java.lang.Number"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 17)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (4 (if_acmpeq 16))  ;;to TAG_0
                                      (7 (aload_2)) 
                                      (8 (aload_3)) 
                                      (9 (aload_0)) 
                                      (10 (getfield (fieldCP "id" "clojure.lang.Compiler$NumberExpr" int))) 
                                      (13 (invokevirtual (methodCP "emitConstant" "clojure.lang.Compiler$ObjExpr" ((class "clojure.asm.commons.GeneratorAdapter") int) void))) 
                                      (16 (return)) ;;at TAG_0
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 78)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "n" "clojure.lang.Compiler$NumberExpr" (class "java.lang.Number")))) 
                                      (4 (instanceof (class "java.lang.Integer"))) 
                                      (7 (ifeq 14)) ;;to TAG_0
                                      (10 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (13 (areturn)) 
                                      (14 (aload_0)) ;;at TAG_0
                                      (15 (getfield (fieldCP "n" "clojure.lang.Compiler$NumberExpr" (class "java.lang.Number")))) 
                                      (18 (instanceof (class "java.lang.Double"))) 
                                      (21 (ifeq 28)) ;;to TAG_1
                                      (24 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (27 (areturn)) 
                                      (28 (aload_0)) ;;at TAG_1
                                      (29 (getfield (fieldCP "n" "clojure.lang.Compiler$NumberExpr" (class "java.lang.Number")))) 
                                      (32 (instanceof (class "java.lang.Long"))) 
                                      (35 (ifeq 42))  ;;to TAG_2
                                      (38 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (41 (areturn)) 
                                      (42 (new (class "java.lang.IllegalStateException"))) ;;at TAG_2
                                      (45 (dup)) 
                                      (46 (new (class "java.lang.StringBuilder"))) 
                                      (49 (dup)) 
                                      (50 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (53 (ldc 0)) ;;STRING:: "Unsupported Number type: "
                                      (55 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (58 (aload_0)) 
                                      (59 (getfield (fieldCP "n" "clojure.lang.Compiler$NumberExpr" (class "java.lang.Number")))) 
                                      (62 (invokevirtual (methodCP "getClass" "java.lang.Object" () (class "java.lang.Class")))) 
                                      (65 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (68 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (71 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (74 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (77 (athrow)) 
                                      (endofcode 78))
                                   (Exceptions )
                                   (StackMap )))
                        (method "canEmitPrimitive"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitUnboxed"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 70)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "n" "clojure.lang.Compiler$NumberExpr" (class "java.lang.Number")))) 
                                      (4 (instanceof (class "java.lang.Integer"))) 
                                      (7 (ifeq 24)) ;;to TAG_0
                                      (10 (aload_3)) 
                                      (11 (aload_0)) 
                                      (12 (getfield (fieldCP "n" "clojure.lang.Compiler$NumberExpr" (class "java.lang.Number")))) 
                                      (15 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (18 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" (long) void))) 
                                      (21 (goto 69)) ;;to TAG_1
                                      (24 (aload_0)) ;;at TAG_0
                                      (25 (getfield (fieldCP "n" "clojure.lang.Compiler$NumberExpr" (class "java.lang.Number")))) 
                                      (28 (instanceof (class "java.lang.Double"))) 
                                      (31 (ifeq 48))  ;;to TAG_2
                                      (34 (aload_3)) 
                                      (35 (aload_0)) 
                                      (36 (getfield (fieldCP "n" "clojure.lang.Compiler$NumberExpr" (class "java.lang.Number")))) 
                                      (39 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (42 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" (double) void))) 
                                      (45 (goto 69)) ;;to TAG_1
                                      (48 (aload_0)) ;;at TAG_2
                                      (49 (getfield (fieldCP "n" "clojure.lang.Compiler$NumberExpr" (class "java.lang.Number")))) 
                                      (52 (instanceof (class "java.lang.Long"))) 
                                      (55 (ifeq 69)) ;;to TAG_1
                                      (58 (aload_3)) 
                                      (59 (aload_0)) 
                                      (60 (getfield (fieldCP "n" "clojure.lang.Compiler$NumberExpr" (class "java.lang.Number")))) 
                                      (63 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (66 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" (long) void))) 
                                      (69 (return)) ;;at TAG_1
                                      (endofcode 70))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 39)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Integer"))) 
                                      (4 (ifne 21))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (instanceof (class "java.lang.Double"))) 
                                      (11 (ifne 21))  ;;to TAG_0
                                      (14 (aload_0)) 
                                      (15 (instanceof (class "java.lang.Long"))) 
                                      (18 (ifeq 30)) ;;to TAG_1
                                      (21 (new (class "clojure.lang.Compiler$NumberExpr"))) ;;at TAG_0
                                      (24 (dup)) 
                                      (25 (aload_0)) 
                                      (26 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$NumberExpr" ((class "java.lang.Number")) void))) 
                                      (29 (areturn)) 
                                      (30 (new (class "clojure.lang.Compiler$ConstantExpr"))) ;;at TAG_1
                                      (33 (dup)) 
                                      (34 (aload_0)) 
                                      (35 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$ConstantExpr" ((class "java.lang.Object")) void))) 
                                      (38 (areturn)) 
                                      (endofcode 39))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$MaybePrimitiveExpr")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$NumberExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$NumberExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$NumberExpr" . "clojure.lang"))

