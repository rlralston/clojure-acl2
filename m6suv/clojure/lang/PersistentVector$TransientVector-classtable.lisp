; PersistentVector$TransientVector-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentVector$TransientVector*
 (make-class-def
      '(class "clojure.lang.PersistentVector$TransientVector"
            "clojure.lang.AFn"
            (constant_pool
                        (STRING  "Transient used by non-owner thread")
                        (STRING  "Transient used after persistent! call")
                        (STRING  "Key must be integer")
                        (STRING  "Can\nt pop empty vector"))
            (fields
                        (field "cnt" int (accessflags  *class* ) -1)
                        (field "shift" int (accessflags  *class* ) -1)
                        (field "root" (class "clojure.lang.PersistentVector$Node") (accessflags  *class* ) -1)
                        (field "tail" (array (class "java.lang.Object")) (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object")))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFn" () void)))
                                      (4 (aload_0))
                                      (5 (iload_1))
                                      (6 (putfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int)))
                                      (9 (aload_0))
                                      (10 (iload_2))
                                      (11 (putfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int)))
                                      (14 (aload_0))
                                      (15 (aload_3))
                                      (16 (putfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node"))))
                                      (19 (aload_0))
                                      (20 (aload 4))
                                      (22 (putfield (fieldCP "tail" "clojure.lang.PersistentVector$TransientVector" (array (class "java.lang.Object")))))
                                      (25 (return))
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.PersistentVector"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int)))
                                      (5 (aload_1))
                                      (6 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int)))
                                      (9 (aload_1))
                                      (10 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node"))))
                                      (13 (invokestatic
					(methodCP "editableRoot" "clojure.lang.PersistentVector$TransientVector" ((class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node"))))
                                      (16 (aload_1))
                                      (17 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object")))))
                                      (20 (invokestatic
					(methodCP "editableTail" "clojure.lang.PersistentVector$TransientVector" ((array (class "java.lang.Object"))) (array (class "java.lang.Object")))))
                                      (23 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentVector$TransientVector" (int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object"))) void)))
                                      (26 (return))
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "ensureEditable" "clojure.lang.PersistentVector$TransientVector" () void)))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "ensureEditable"
                              (parameters (class "clojure.lang.PersistentVector$Node"))
                              (returntype . (class "clojure.lang.PersistentVector$Node"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 41)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (8 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (11 (if_acmpne 16))  ;;to TAG_0
                                      (14 (aload_1)) 
                                      (15 (areturn)) 
                                      (16 (new (class "clojure.lang.PersistentVector$Node"))) ;;at TAG_0
                                      (19 (dup)) 
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (24 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (27 (aload_1)) 
                                      (28 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (31 (invokevirtual (methodCP "clone" "java.lang.Object[]" () (class "java.lang.Object")))) 
                                      (34 (checkcast (array (class "java.lang.Object")))) 
                                      (37 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference") (array (class "java.lang.Object"))) void))) 
                                      (40 (areturn)) 
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap )))
                        (method "ensureEditable"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 46)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (4 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (7 (invokevirtual (methodCP "get" "java.util.concurrent.atomic.AtomicReference" () (class "java.lang.Object")))) 
                                      (10 (checkcast (class "java.lang.Thread"))) 
                                      (13 (astore_1)) 
                                      (14 (aload_1)) 
                                      (15 (invokestatic (methodCP "currentThread" "java.lang.Thread" () (class "java.lang.Thread")))) 
                                      (18 (if_acmpne 22))  ;;to TAG_0
                                      (21 (return)) 
                                      (22 (aload_1)) ;;at TAG_0
                                      (23 (ifnull 36)) ;;to TAG_1
                                      (26 (new (class "java.lang.IllegalAccessError"))) 
                                      (29 (dup)) 
                                      (30 (ldc 0)) ;;STRING:: "Transient used by non-owner thread"
                                      (32 (invokespecial (methodCP "<init>" "java.lang.IllegalAccessError" ((class "java.lang.String")) void))) 
                                      (35 (athrow)) 
                                      (36 (new (class "java.lang.IllegalAccessError"))) ;;at TAG_1
                                      (39 (dup)) 
                                      (40 (ldc 1)) ;;STRING:: "Transient used after persistent! call"
                                      (42 (invokespecial (methodCP "<init>" "java.lang.IllegalAccessError" ((class "java.lang.String")) void))) 
                                      (45 (athrow)) 
                                      (endofcode 46))
                                   (Exceptions )
                                   (StackMap )))
                        (method "editableRoot"
                              (parameters (class "clojure.lang.PersistentVector$Node"))
                              (returntype . (class "clojure.lang.PersistentVector$Node"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 1) (code_length . 28)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentVector$Node")))
                                      (3 (dup))
                                      (4 (new (class "java.util.concurrent.atomic.AtomicReference")))
                                      (7 (dup))
                                      (8 (invokestatic
					(methodCP "currentThread" "java.lang.Thread" () (class "java.lang.Thread"))))
                                      (11 (invokespecial
					(methodCP "<init>" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object")) void)))
                                      (14 (aload_0))
                                      (15 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object")))))
                                      (18 (invokevirtual
					(methodCP "clone" "java.lang.Object[]" () (class "java.lang.Object"))))
                                      (21 (checkcast (array (class "java.lang.Object"))))
                                      (24 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference") (array (class "java.lang.Object"))) void)))
                                      (27 (areturn))
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap )))
                        (method "persistent"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 61)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "ensureEditable" "clojure.lang.PersistentVector$TransientVector" () void)))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node"))))
                                      (8 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (11 (aconst_null))
                                      (12 (invokevirtual
					(methodCP "set" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object")) void)))
                                      (15 (aload_0))
                                      (16 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int)))
                                      (19 (aload_0))
                                      (20 (invokespecial
					(methodCP "tailoff" "clojure.lang.PersistentVector$TransientVector" () int)))
                                      (23 (isub))
                                      (24 (anewarray (class "java.lang.Object")))
                                      (27 (astore_1))
                                      (28 (aload_0))
                                      (29 (getfield (fieldCP "tail" "clojure.lang.PersistentVector$TransientVector" (array (class "java.lang.Object")))))
                                      (32 (iconst_0))
                                      (33 (aload_1))
                                      (34 (iconst_0))
                                      (35 (aload_1))
                                      (36 (arraylength))
                                      (37 (invokestatic
					(methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void)))
                                      (40 (new (class "clojure.lang.PersistentVector")))
                                      (43 (dup))
                                      (44 (aload_0))
                                      (45 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int)))
                                      (48 (aload_0))
                                      (49 (getfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int)))
                                      (52 (aload_0))
                                      (53 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node"))))
                                      (56 (aload_1))
                                      (57 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentVector" (int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object"))) void)))
                                      (60 (areturn))
                                      (endofcode 61))
                                   (Exceptions )
                                   (StackMap )))
                        (method "editableTail"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 17)
                                   (parsedcode
                                      (0 (bipush 32))
                                      (2 (anewarray (class "java.lang.Object")))
                                      (5 (astore_1))
                                      (6 (aload_0))
                                      (7 (iconst_0))
                                      (8 (aload_1))
                                      (9 (iconst_0))
                                      (10 (aload_0))
                                      (11 (arraylength))
                                      (12 (invokestatic
					(methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void)))
                                      (15 (aload_1))
                                      (16 (areturn))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "conj"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentVector$TransientVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 6) (code_length . 190)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "ensureEditable" "clojure.lang.PersistentVector$TransientVector" () void))) 
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (8 (istore_2)) 
                                      (9 (iload_2)) 
                                      (10 (aload_0)) 
                                      (11 (invokespecial (methodCP "tailoff" "clojure.lang.PersistentVector$TransientVector" () int))) 
                                      (14 (isub)) 
                                      (15 (bipush 32)) 
                                      (17 (if_icmpge 42)) ;;to TAG_0
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "tail" "clojure.lang.PersistentVector$TransientVector" (array (class "java.lang.Object"))))) 
                                      (24 (iload_2)) 
                                      (25 (bipush 31)) 
                                      (27 (iand)) 
                                      (28 (aload_1)) 
                                      (29 (aastore)) 
                                      (30 (aload_0)) 
                                      (31 (dup)) 
                                      (32 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (35 (iconst_1)) 
                                      (36 (iadd)) 
                                      (37 (putfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (40 (aload_0)) 
                                      (41 (areturn)) 
                                      (42 (new (class "clojure.lang.PersistentVector$Node"))) ;;at TAG_0
                                      (45 (dup)) 
                                      (46 (aload_0)) 
                                      (47 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (50 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (53 (aload_0)) 
                                      (54 (getfield (fieldCP "tail" "clojure.lang.PersistentVector$TransientVector" (array (class "java.lang.Object"))))) 
                                      (57 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference") (array (class "java.lang.Object"))) void))) 
                                      (60 (astore 4)) 
                                      (62 (aload_0)) 
                                      (63 (bipush 32)) 
                                      (65 (anewarray (class "java.lang.Object"))) 
                                      (68 (putfield (fieldCP "tail" "clojure.lang.PersistentVector$TransientVector" (array (class "java.lang.Object"))))) 
                                      (71 (aload_0)) 
                                      (72 (getfield (fieldCP "tail" "clojure.lang.PersistentVector$TransientVector" (array (class "java.lang.Object"))))) 
                                      (75 (iconst_0)) 
                                      (76 (aload_1)) 
                                      (77 (aastore)) 
                                      (78 (aload_0)) 
                                      (79 (getfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (82 (istore 5)) 
                                      (84 (aload_0)) 
                                      (85 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (88 (iconst_5)) 
                                      (89 (iushr)) 
                                      (90 (iconst_1)) 
                                      (91 (aload_0)) 
                                      (92 (getfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (95 (ishl)) 
                                      (96 (if_icmple 152)) ;;to TAG_1
                                      (99 (new (class "clojure.lang.PersistentVector$Node"))) 
                                      (102 (dup)) 
                                      (103 (aload_0)) 
                                      (104 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (107 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (110 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference")) void))) 
                                      (113 (astore_3)) 
                                      (114 (aload_3)) 
                                      (115 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (118 (iconst_0)) 
                                      (119 (aload_0)) 
                                      (120 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (123 (aastore)) 
                                      (124 (aload_3)) 
                                      (125 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (128 (iconst_1)) 
                                      (129 (aload_0)) 
                                      (130 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (133 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (136 (aload_0)) 
                                      (137 (getfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (140 (aload 4)) 
                                      (142 (invokestatic (methodCP "access$000" "clojure.lang.PersistentVector" ((class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (145 (aastore)) 
                                      (146 (iinc 5 5)) 
                                      (149 (goto 167))  ;;to TAG_2
                                      (152 (aload_0)) ;;at TAG_1
                                      (153 (aload_0)) 
                                      (154 (getfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (157 (aload_0)) 
                                      (158 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (161 (aload 4)) 
                                      (163 (invokespecial (methodCP "pushTail" "clojure.lang.PersistentVector$TransientVector" (int (class "clojure.lang.PersistentVector$Node") (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (166 (astore_3)) 
                                      (167 (aload_0)) ;;at TAG_2
                                      (168 (aload_3)) 
                                      (169 (putfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (172 (aload_0)) 
                                      (173 (iload 5)) 
                                      (175 (putfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (178 (aload_0)) 
                                      (179 (dup)) 
                                      (180 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (183 (iconst_1)) 
                                      (184 (iadd)) 
                                      (185 (putfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (188 (aload_0)) 
                                      (189 (areturn)) 
                                      (endofcode 190))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pushTail"
                              (parameters int (class "clojure.lang.PersistentVector$Node") (class "clojure.lang.PersistentVector$Node"))
                              (returntype . (class "clojure.lang.PersistentVector$Node"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 8) (code_length . 92)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_2)) 
                                      (2 (invokevirtual (methodCP "ensureEditable" "clojure.lang.PersistentVector$TransientVector" ((class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (5 (astore_2)) 
                                      (6 (aload_0)) 
                                      (7 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (10 (iconst_1)) 
                                      (11 (isub)) 
                                      (12 (iload_1)) 
                                      (13 (iushr)) 
                                      (14 (bipush 31)) 
                                      (16 (iand)) 
                                      (17 (istore 4)) 
                                      (19 (aload_2)) 
                                      (20 (astore 5)) 
                                      (22 (iload_1)) 
                                      (23 (iconst_5)) 
                                      (24 (if_icmpne 33)) ;;to TAG_0
                                      (27 (aload_3)) 
                                      (28 (astore 6)) 
                                      (30 (goto 79)) ;;to TAG_1
                                      (33 (aload_2)) ;;at TAG_0
                                      (34 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (37 (iload 4)) 
                                      (39 (aaload)) 
                                      (40 (checkcast (class "clojure.lang.PersistentVector$Node"))) 
                                      (43 (astore 7)) 
                                      (45 (aload 7)) 
                                      (47 (ifnull 63))  ;;to TAG_2
                                      (50 (aload_0)) 
                                      (51 (iload_1)) 
                                      (52 (iconst_5)) 
                                      (53 (isub)) 
                                      (54 (aload 7)) 
                                      (56 (aload_3)) 
                                      (57 (invokespecial (methodCP "pushTail" "clojure.lang.PersistentVector$TransientVector" (int (class "clojure.lang.PersistentVector$Node") (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (60 (goto 77)) ;;to TAG_3
                                      (63 (aload_0)) ;;at TAG_2
                                      (64 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (67 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (70 (iload_1)) 
                                      (71 (iconst_5)) 
                                      (72 (isub)) 
                                      (73 (aload_3)) 
                                      (74 (invokestatic (methodCP "access$000" "clojure.lang.PersistentVector" ((class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (77 (astore 6)) ;;at TAG_3
                                      (79 (aload 5)) ;;at TAG_1
                                      (81 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (84 (iload 4)) 
                                      (86 (aload 6)) 
                                      (88 (aastore)) 
                                      (89 (aload 5)) 
                                      (91 (areturn)) 
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "tailoff"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *final*  *private* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (4 (bipush 32)) 
                                      (6 (if_icmpge 11))  ;;to TAG_0
                                      (9 (iconst_0)) 
                                      (10 (ireturn)) 
                                      (11 (aload_0)) ;;at TAG_0
                                      (12 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (15 (iconst_1)) 
                                      (16 (isub)) 
                                      (17 (iconst_5)) 
                                      (18 (iushr)) 
                                      (19 (iconst_5)) 
                                      (20 (ishl)) 
                                      (21 (ireturn)) 
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "arrayFor"
                              (parameters int)
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 73)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (iflt 65)) ;;to TAG_0
                                      (4 (iload_1)) 
                                      (5 (aload_0)) 
                                      (6 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (9 (if_icmpge 65)) ;;to TAG_0
                                      (12 (iload_1)) 
                                      (13 (aload_0)) 
                                      (14 (invokespecial (methodCP "tailoff" "clojure.lang.PersistentVector$TransientVector" () int))) 
                                      (17 (if_icmplt 25)) ;;to TAG_1
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "tail" "clojure.lang.PersistentVector$TransientVector" (array (class "java.lang.Object"))))) 
                                      (24 (areturn)) 
                                      (25 (aload_0)) ;;at TAG_1
                                      (26 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (29 (astore_2)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (34 (istore_3)) 
                                      (35 (iload_3)) ;;at TAG_3
                                      (36 (ifle 60))  ;;to TAG_2
                                      (39 (aload_2)) 
                                      (40 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (43 (iload_1)) 
                                      (44 (iload_3)) 
                                      (45 (iushr)) 
                                      (46 (bipush 31)) 
                                      (48 (iand)) 
                                      (49 (aaload)) 
                                      (50 (checkcast (class "clojure.lang.PersistentVector$Node"))) 
                                      (53 (astore_2)) 
                                      (54 (iinc 3 -5)) 
                                      (57 (goto 35)) ;;to TAG_3
                                      (60 (aload_2)) ;;at TAG_2
                                      (61 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (64 (areturn)) 
                                      (65 (new (class "java.lang.IndexOutOfBoundsException"))) ;;at TAG_0
                                      (68 (dup)) 
                                      (69 (invokespecial (methodCP "<init>" "java.lang.IndexOutOfBoundsException" () void))) 
                                      (72 (athrow)) 
                                      (endofcode 73))
                                   (Exceptions )
                                   (StackMap )))
                        (method "editableArrayFor"
                              (parameters int)
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 77)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (iflt 69)) ;;to TAG_0
                                      (4 (iload_1)) 
                                      (5 (aload_0)) 
                                      (6 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (9 (if_icmpge 69)) ;;to TAG_0
                                      (12 (iload_1)) 
                                      (13 (aload_0)) 
                                      (14 (invokespecial (methodCP "tailoff" "clojure.lang.PersistentVector$TransientVector" () int))) 
                                      (17 (if_icmplt 25)) ;;to TAG_1
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "tail" "clojure.lang.PersistentVector$TransientVector" (array (class "java.lang.Object"))))) 
                                      (24 (areturn)) 
                                      (25 (aload_0)) ;;at TAG_1
                                      (26 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (29 (astore_2)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (34 (istore_3)) 
                                      (35 (iload_3)) ;;at TAG_3
                                      (36 (ifle 64))  ;;to TAG_2
                                      (39 (aload_0)) 
                                      (40 (aload_2)) 
                                      (41 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (44 (iload_1)) 
                                      (45 (iload_3)) 
                                      (46 (iushr)) 
                                      (47 (bipush 31)) 
                                      (49 (iand)) 
                                      (50 (aaload)) 
                                      (51 (checkcast (class "clojure.lang.PersistentVector$Node"))) 
                                      (54 (invokevirtual (methodCP "ensureEditable" "clojure.lang.PersistentVector$TransientVector" ((class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (57 (astore_2)) 
                                      (58 (iinc 3 -5)) 
                                      (61 (goto 35)) ;;to TAG_3
                                      (64 (aload_2)) ;;at TAG_2
                                      (65 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (68 (areturn)) 
                                      (69 (new (class "java.lang.IndexOutOfBoundsException"))) ;;at TAG_0
                                      (72 (dup)) 
                                      (73 (invokespecial (methodCP "<init>" "java.lang.IndexOutOfBoundsException" () void))) 
                                      (76 (athrow)) 
                                      (endofcode 77))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aconst_null))
                                      (3 (invokevirtual
					(methodCP "valAt" "clojure.lang.PersistentVector$TransientVector" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valAt"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 39)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "ensureEditable" "clojure.lang.PersistentVector$TransientVector" () void))) 
                                      (4 (aload_1)) 
                                      (5 (invokestatic (methodCP "isInteger" "clojure.lang.Util" ((class "java.lang.Object")) boolean))) 
                                      (8 (ifeq 37))  ;;to TAG_0
                                      (11 (aload_1)) 
                                      (12 (checkcast (class "java.lang.Number"))) 
                                      (15 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (18 (istore_3)) 
                                      (19 (iload_3)) 
                                      (20 (iflt 37))  ;;to TAG_0
                                      (23 (iload_3)) 
                                      (24 (aload_0)) 
                                      (25 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (28 (if_icmpge 37))  ;;to TAG_0
                                      (31 (aload_0)) 
                                      (32 (iload_3)) 
                                      (33 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector$TransientVector" (int) (class "java.lang.Object")))) 
                                      (36 (areturn)) 
                                      (37 (aload_2)) ;;at TAG_0
                                      (38 (areturn)) 
                                      (endofcode 39))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 29)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "isInteger" "clojure.lang.Util" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 19))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (aload_1)) 
                                      (9 (checkcast (class "java.lang.Number"))) 
                                      (12 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (15 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector$TransientVector" (int) (class "java.lang.Object")))) 
                                      (18 (areturn)) 
                                      (19 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_0
                                      (22 (dup)) 
                                      (23 (ldc 2)) ;;STRING:: "Key must be integer"
                                      (25 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (28 (athrow)) 
                                      (endofcode 29))
                                   (Exceptions )
                                   (StackMap )))
                        (method "nth"
                              (parameters int)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 17)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "ensureEditable" "clojure.lang.PersistentVector$TransientVector" () void)))
                                      (4 (aload_0))
                                      (5 (iload_1))
                                      (6 (invokespecial
					(methodCP "arrayFor" "clojure.lang.PersistentVector$TransientVector" (int) (array (class "java.lang.Object")))))
                                      (9 (astore_2))
                                      (10 (aload_2))
                                      (11 (iload_1))
                                      (12 (bipush 31))
                                      (14 (iand))
                                      (15 (aaload))
                                      (16 (areturn))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "nth"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 20)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (iflt 18))  ;;to TAG_0
                                      (4 (iload_1)) 
                                      (5 (aload_0)) 
                                      (6 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector$TransientVector" () int))) 
                                      (9 (if_icmpge 18))  ;;to TAG_0
                                      (12 (aload_0)) 
                                      (13 (iload_1)) 
                                      (14 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector$TransientVector" (int) (class "java.lang.Object")))) 
                                      (17 (areturn)) 
                                      (18 (aload_2)) ;;at TAG_0
                                      (19 (areturn)) 
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assocN"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentVector$TransientVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 3) (code_length . 78)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "ensureEditable" "clojure.lang.PersistentVector$TransientVector" () void))) 
                                      (4 (iload_1)) 
                                      (5 (iflt 56)) ;;to TAG_0
                                      (8 (iload_1)) 
                                      (9 (aload_0)) 
                                      (10 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (13 (if_icmpge 56)) ;;to TAG_0
                                      (16 (iload_1)) 
                                      (17 (aload_0)) 
                                      (18 (invokespecial (methodCP "tailoff" "clojure.lang.PersistentVector$TransientVector" () int))) 
                                      (21 (if_icmplt 36)) ;;to TAG_1
                                      (24 (aload_0)) 
                                      (25 (getfield (fieldCP "tail" "clojure.lang.PersistentVector$TransientVector" (array (class "java.lang.Object"))))) 
                                      (28 (iload_1)) 
                                      (29 (bipush 31)) 
                                      (31 (iand)) 
                                      (32 (aload_2)) 
                                      (33 (aastore)) 
                                      (34 (aload_0)) 
                                      (35 (areturn)) 
                                      (36 (aload_0)) ;;at TAG_1
                                      (37 (aload_0)) 
                                      (38 (aload_0)) 
                                      (39 (getfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (42 (aload_0)) 
                                      (43 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (46 (iload_1)) 
                                      (47 (aload_2)) 
                                      (48 (invokespecial (methodCP "doAssoc" "clojure.lang.PersistentVector$TransientVector" (int (class "clojure.lang.PersistentVector$Node") int (class "java.lang.Object")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (51 (putfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (54 (aload_0)) 
                                      (55 (areturn)) 
                                      (56 (iload_1)) ;;at TAG_0
                                      (57 (aload_0)) 
                                      (58 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (61 (if_icmpne 70))  ;;to TAG_2
                                      (64 (aload_0)) 
                                      (65 (aload_2)) 
                                      (66 (invokevirtual (methodCP "conj" "clojure.lang.PersistentVector$TransientVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector$TransientVector")))) 
                                      (69 (areturn)) 
                                      (70 (new (class "java.lang.IndexOutOfBoundsException"))) ;;at TAG_2
                                      (73 (dup)) 
                                      (74 (invokespecial (methodCP "<init>" "java.lang.IndexOutOfBoundsException" () void))) 
                                      (77 (athrow)) 
                                      (endofcode 78))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentVector$TransientVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "isInteger" "clojure.lang.Util" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 22))  ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (checkcast (class "java.lang.Number"))) 
                                      (11 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (14 (istore_3)) 
                                      (15 (aload_0)) 
                                      (16 (iload_3)) 
                                      (17 (aload_2)) 
                                      (18 (invokevirtual (methodCP "assocN" "clojure.lang.PersistentVector$TransientVector" (int (class "java.lang.Object")) (class "clojure.lang.PersistentVector$TransientVector")))) 
                                      (21 (areturn)) 
                                      (22 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_0
                                      (25 (dup)) 
                                      (26 (ldc 2)) ;;STRING:: "Key must be integer"
                                      (28 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (31 (athrow)) 
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doAssoc"
                              (parameters int (class "clojure.lang.PersistentVector$Node") int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentVector$Node"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 7) (max_locals . 7) (code_length . 67)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_2)) 
                                      (2 (invokevirtual (methodCP "ensureEditable" "clojure.lang.PersistentVector$TransientVector" ((class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (5 (astore_2)) 
                                      (6 (aload_2)) 
                                      (7 (astore 5)) 
                                      (9 (iload_1)) 
                                      (10 (ifne 28))  ;;to TAG_0
                                      (13 (aload 5)) 
                                      (15 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (18 (iload_3)) 
                                      (19 (bipush 31)) 
                                      (21 (iand)) 
                                      (22 (aload 4)) 
                                      (24 (aastore)) 
                                      (25 (goto 64)) ;;to TAG_1
                                      (28 (iload_3)) ;;at TAG_0
                                      (29 (iload_1)) 
                                      (30 (iushr)) 
                                      (31 (bipush 31)) 
                                      (33 (iand)) 
                                      (34 (istore 6)) 
                                      (36 (aload 5)) 
                                      (38 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (41 (iload 6)) 
                                      (43 (aload_0)) 
                                      (44 (iload_1)) 
                                      (45 (iconst_5)) 
                                      (46 (isub)) 
                                      (47 (aload_2)) 
                                      (48 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (51 (iload 6)) 
                                      (53 (aaload)) 
                                      (54 (checkcast (class "clojure.lang.PersistentVector$Node"))) 
                                      (57 (iload_3)) 
                                      (58 (aload 4)) 
                                      (60 (invokespecial (methodCP "doAssoc" "clojure.lang.PersistentVector$TransientVector" (int (class "clojure.lang.PersistentVector$Node") int (class "java.lang.Object")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (63 (aastore)) 
                                      (64 (aload 5)) ;;at TAG_1
                                      (66 (areturn)) 
                                      (endofcode 67))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pop"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentVector$TransientVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 173)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "ensureEditable" "clojure.lang.PersistentVector$TransientVector" () void))) 
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (8 (ifne 21)) ;;to TAG_0
                                      (11 (new (class "java.lang.IllegalStateException"))) 
                                      (14 (dup)) 
                                      (15 (ldc 3)) ;;STRING:: "Can\nt pop empty vector"
                                      (17 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (20 (athrow)) 
                                      (21 (aload_0)) ;;at TAG_0
                                      (22 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (25 (iconst_1)) 
                                      (26 (if_icmpne 36)) ;;to TAG_1
                                      (29 (aload_0)) 
                                      (30 (iconst_0)) 
                                      (31 (putfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (34 (aload_0)) 
                                      (35 (areturn)) 
                                      (36 (aload_0)) ;;at TAG_1
                                      (37 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (40 (iconst_1)) 
                                      (41 (isub)) 
                                      (42 (istore_1)) 
                                      (43 (iload_1)) 
                                      (44 (bipush 31)) 
                                      (46 (iand)) 
                                      (47 (ifle 62))  ;;to TAG_2
                                      (50 (aload_0)) 
                                      (51 (dup)) 
                                      (52 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (55 (iconst_1)) 
                                      (56 (isub)) 
                                      (57 (putfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (60 (aload_0)) 
                                      (61 (areturn)) 
                                      (62 (aload_0)) ;;at TAG_2
                                      (63 (aload_0)) 
                                      (64 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (67 (iconst_2)) 
                                      (68 (isub)) 
                                      (69 (invokespecial (methodCP "editableArrayFor" "clojure.lang.PersistentVector$TransientVector" (int) (array (class "java.lang.Object"))))) 
                                      (72 (astore_2)) 
                                      (73 (aload_0)) 
                                      (74 (aload_0)) 
                                      (75 (getfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (78 (aload_0)) 
                                      (79 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (82 (invokespecial (methodCP "popTail" "clojure.lang.PersistentVector$TransientVector" (int (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (85 (astore_3)) 
                                      (86 (aload_0)) 
                                      (87 (getfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (90 (istore 4)) 
                                      (92 (aload_3)) 
                                      (93 (ifnonnull 111)) ;;to TAG_3
                                      (96 (new (class "clojure.lang.PersistentVector$Node"))) 
                                      (99 (dup)) 
                                      (100 (aload_0)) 
                                      (101 (getfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (104 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (107 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference")) void))) 
                                      (110 (astore_3)) 
                                      (111 (aload_0)) ;;at TAG_3
                                      (112 (getfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (115 (iconst_5)) 
                                      (116 (if_icmple 145)) ;;to TAG_4
                                      (119 (aload_3)) 
                                      (120 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (123 (iconst_1)) 
                                      (124 (aaload)) 
                                      (125 (ifnonnull 145)) ;;to TAG_4
                                      (128 (aload_0)) 
                                      (129 (aload_3)) 
                                      (130 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (133 (iconst_0)) 
                                      (134 (aaload)) 
                                      (135 (checkcast (class "clojure.lang.PersistentVector$Node"))) 
                                      (138 (invokevirtual (methodCP "ensureEditable" "clojure.lang.PersistentVector$TransientVector" ((class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (141 (astore_3)) 
                                      (142 (iinc 4 -5)) 
                                      (145 (aload_0)) ;;at TAG_4
                                      (146 (aload_3)) 
                                      (147 (putfield (fieldCP "root" "clojure.lang.PersistentVector$TransientVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (150 (aload_0)) 
                                      (151 (iload 4)) 
                                      (153 (putfield (fieldCP "shift" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (156 (aload_0)) 
                                      (157 (dup)) 
                                      (158 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (161 (iconst_1)) 
                                      (162 (isub)) 
                                      (163 (putfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (166 (aload_0)) 
                                      (167 (aload_2)) 
                                      (168 (putfield (fieldCP "tail" "clojure.lang.PersistentVector$TransientVector" (array (class "java.lang.Object"))))) 
                                      (171 (aload_0)) 
                                      (172 (areturn)) 
                                      (endofcode 173))
                                   (Exceptions )
                                   (StackMap )))
                        (method "popTail"
                              (parameters int (class "clojure.lang.PersistentVector$Node"))
                              (returntype . (class "clojure.lang.PersistentVector$Node"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 87)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_2)) 
                                      (2 (invokevirtual (methodCP "ensureEditable" "clojure.lang.PersistentVector$TransientVector" ((class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (5 (astore_2)) 
                                      (6 (aload_0)) 
                                      (7 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector$TransientVector" int))) 
                                      (10 (iconst_2)) 
                                      (11 (isub)) 
                                      (12 (iload_1)) 
                                      (13 (iushr)) 
                                      (14 (bipush 31)) 
                                      (16 (iand)) 
                                      (17 (istore_3)) 
                                      (18 (iload_1)) 
                                      (19 (iconst_5)) 
                                      (20 (if_icmple 67)) ;;to TAG_0
                                      (23 (aload_0)) 
                                      (24 (iload_1)) 
                                      (25 (iconst_5)) 
                                      (26 (isub)) 
                                      (27 (aload_2)) 
                                      (28 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (31 (iload_3)) 
                                      (32 (aaload)) 
                                      (33 (checkcast (class "clojure.lang.PersistentVector$Node"))) 
                                      (36 (invokespecial (methodCP "popTail" "clojure.lang.PersistentVector$TransientVector" (int (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (39 (astore 4)) 
                                      (41 (aload 4)) 
                                      (43 (ifnonnull 52)) ;;to TAG_1
                                      (46 (iload_3)) 
                                      (47 (ifne 52)) ;;to TAG_1
                                      (50 (aconst_null)) 
                                      (51 (areturn)) 
                                      (52 (aload_2)) ;;at TAG_1
                                      (53 (astore 5)) 
                                      (55 (aload 5)) 
                                      (57 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (60 (iload_3)) 
                                      (61 (aload 4)) 
                                      (63 (aastore)) 
                                      (64 (aload 5)) 
                                      (66 (areturn)) 
                                      (67 (iload_3)) ;;at TAG_0
                                      (68 (ifne 73))  ;;to TAG_2
                                      (71 (aconst_null)) 
                                      (72 (areturn)) 
                                      (73 (aload_2)) ;;at TAG_2
                                      (74 (astore 4)) 
                                      (76 (aload 4)) 
                                      (78 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (81 (iload_3)) 
                                      (82 (aconst_null)) 
                                      (83 (aastore)) 
                                      (84 (aload 4)) 
                                      (86 (areturn)) 
                                      (endofcode 87))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pop"
                              (parameters )
                              (returntype . (class "clojure.lang.ITransientVector"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "pop" "clojure.lang.PersistentVector$TransientVector" () (class "clojure.lang.PersistentVector$TransientVector"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assocN"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.ITransientVector"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (aload_2))
                                      (3 (invokevirtual
					(methodCP "assocN" "clojure.lang.PersistentVector$TransientVector" (int (class "java.lang.Object")) (class "clojure.lang.PersistentVector$TransientVector"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.ITransientAssociative"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokevirtual
					(methodCP "assoc" "clojure.lang.PersistentVector$TransientVector" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.PersistentVector$TransientVector"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "persistent"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "persistent" "clojure.lang.PersistentVector$TransientVector" () (class "clojure.lang.PersistentVector"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "conj"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.ITransientCollection"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "conj" "clojure.lang.PersistentVector$TransientVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector$TransientVector"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.ITransientVector" "clojure.lang.Counted")
            (accessflags  *class*  *final*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentVector$TransientVector-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentVector$TransientVector*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentVector$TransientVector" . "clojure.lang"))

