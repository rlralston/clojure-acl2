; PersistentQueue-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentQueue*
 (make-class-def
      '(class "clojure.lang.PersistentQueue"
            "clojure.lang.Obj"
            (constant_pool)
            (fields
                        (field "EMPTY" (class "clojure.lang.PersistentQueue") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "cnt" int (accessflags  *class*  *final* ) -1)
                        (field "f" (class "clojure.lang.ISeq") (accessflags  *class*  *final* ) -1)
                        (field "r" (class "clojure.lang.PersistentVector") (accessflags  *class*  *final* ) -1)
                        (field "_hash" int (accessflags  *class* ) -1)
                        (field "_hasheq" int (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") int (class "clojure.lang.ISeq") (class "clojure.lang.PersistentVector"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokespecial
					(methodCP "<init>" "clojure.lang.Obj" ((class "clojure.lang.IPersistentMap")) void)))
                                      (5 (aload_0))
                                      (6 (iconst_m1))
                                      (7 (putfield (fieldCP "_hash" "clojure.lang.PersistentQueue" int)))
                                      (10 (aload_0))
                                      (11 (iconst_m1))
                                      (12 (putfield (fieldCP "_hasheq" "clojure.lang.PersistentQueue" int)))
                                      (15 (aload_0))
                                      (16 (iload_2))
                                      (17 (putfield (fieldCP "cnt" "clojure.lang.PersistentQueue" int)))
                                      (20 (aload_0))
                                      (21 (aload_3))
                                      (22 (putfield (fieldCP "f" "clojure.lang.PersistentQueue" (class "clojure.lang.ISeq"))))
                                      (25 (aload_0))
                                      (26 (aload 4))
                                      (28 (putfield (fieldCP "r" "clojure.lang.PersistentQueue" (class "clojure.lang.PersistentVector"))))
                                      (31 (return))
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 74)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (instanceof (class "clojure.lang.Sequential"))) 
                                      (4 (ifne 9)) ;;to TAG_0
                                      (7 (iconst_0)) 
                                      (8 (ireturn)) 
                                      (9 (aload_1)) ;;at TAG_0
                                      (10 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (13 (astore_2)) 
                                      (14 (aload_0)) 
                                      (15 (invokevirtual (methodCP "seq" "clojure.lang.PersistentQueue" () (class "clojure.lang.ISeq")))) 
                                      (18 (astore_3)) 
                                      (19 (aload_3)) ;;at TAG_4
                                      (20 (ifnull 64)) ;;to TAG_1
                                      (23 (aload_2)) 
                                      (24 (ifnull 45))  ;;to TAG_2
                                      (27 (aload_3)) 
                                      (28 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (33 (aload_2)) 
                                      (34 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (39 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (42 (ifne 47)) ;;to TAG_3
                                      (45 (iconst_0)) ;;at TAG_2
                                      (46 (ireturn)) 
                                      (47 (aload_3)) ;;at TAG_3
                                      (48 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (53 (astore_3)) 
                                      (54 (aload_2)) 
                                      (55 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (60 (astore_2)) 
                                      (61 (goto 19)) ;;to TAG_4
                                      (64 (aload_2)) ;;at TAG_1
                                      (65 (ifnonnull 72)) ;;to TAG_5
                                      (68 (iconst_1)) 
                                      (69 (goto 73)) ;;to TAG_6
                                      (72 (iconst_0)) ;;at TAG_5
                                      (73 (ireturn)) ;;at TAG_6
                                      (endofcode 74))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equals"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 74)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (instanceof (class "clojure.lang.Sequential"))) 
                                      (4 (ifne 9)) ;;to TAG_0
                                      (7 (iconst_0)) 
                                      (8 (ireturn)) 
                                      (9 (aload_1)) ;;at TAG_0
                                      (10 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (13 (astore_2)) 
                                      (14 (aload_0)) 
                                      (15 (invokevirtual (methodCP "seq" "clojure.lang.PersistentQueue" () (class "clojure.lang.ISeq")))) 
                                      (18 (astore_3)) 
                                      (19 (aload_3)) ;;at TAG_4
                                      (20 (ifnull 64)) ;;to TAG_1
                                      (23 (aload_2)) 
                                      (24 (ifnull 45))  ;;to TAG_2
                                      (27 (aload_3)) 
                                      (28 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (33 (aload_2)) 
                                      (34 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (39 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (42 (ifne 47)) ;;to TAG_3
                                      (45 (iconst_0)) ;;at TAG_2
                                      (46 (ireturn)) 
                                      (47 (aload_3)) ;;at TAG_3
                                      (48 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (53 (astore_3)) 
                                      (54 (aload_2)) 
                                      (55 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (60 (astore_2)) 
                                      (61 (goto 19)) ;;to TAG_4
                                      (64 (aload_2)) ;;at TAG_1
                                      (65 (ifnonnull 72)) ;;to TAG_5
                                      (68 (iconst_1)) 
                                      (69 (goto 73)) ;;to TAG_6
                                      (72 (iconst_0)) ;;at TAG_5
                                      (73 (ireturn)) ;;at TAG_6
                                      (endofcode 74))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hashCode"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 67)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "_hash" "clojure.lang.PersistentQueue" int))) 
                                      (4 (iconst_m1)) 
                                      (5 (if_icmpne 62)) ;;to TAG_0
                                      (8 (iconst_1)) 
                                      (9 (istore_1)) 
                                      (10 (aload_0)) 
                                      (11 (invokevirtual (methodCP "seq" "clojure.lang.PersistentQueue" () (class "clojure.lang.ISeq")))) 
                                      (14 (astore_2)) 
                                      (15 (aload_2)) ;;at TAG_4
                                      (16 (ifnull 57)) ;;to TAG_1
                                      (19 (bipush 31)) 
                                      (21 (iload_1)) 
                                      (22 (imul)) 
                                      (23 (aload_2)) 
                                      (24 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (29 (ifnonnull 36))  ;;to TAG_2
                                      (32 (iconst_0)) 
                                      (33 (goto 45)) ;;to TAG_3
                                      (36 (aload_2)) ;;at TAG_2
                                      (37 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (42 (invokevirtual (methodCP "hashCode" "java.lang.Object" () int))) 
                                      (45 (iadd)) ;;at TAG_3
                                      (46 (istore_1)) 
                                      (47 (aload_2)) 
                                      (48 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (53 (astore_2)) 
                                      (54 (goto 15)) ;;to TAG_4
                                      (57 (aload_0)) ;;at TAG_1
                                      (58 (iload_1)) 
                                      (59 (putfield (fieldCP "_hash" "clojure.lang.PersistentQueue" int))) 
                                      (62 (aload_0)) ;;at TAG_0
                                      (63 (getfield (fieldCP "_hash" "clojure.lang.PersistentQueue" int))) 
                                      (66 (ireturn)) 
                                      (endofcode 67))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasheq"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 54)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "_hasheq" "clojure.lang.PersistentQueue" int))) 
                                      (4 (iconst_m1)) 
                                      (5 (if_icmpne 49)) ;;to TAG_0
                                      (8 (iconst_1)) 
                                      (9 (istore_1)) 
                                      (10 (aload_0)) 
                                      (11 (invokevirtual (methodCP "seq" "clojure.lang.PersistentQueue" () (class "clojure.lang.ISeq")))) 
                                      (14 (astore_2)) 
                                      (15 (aload_2)) ;;at TAG_2
                                      (16 (ifnull 44)) ;;to TAG_1
                                      (19 (bipush 31)) 
                                      (21 (iload_1)) 
                                      (22 (imul)) 
                                      (23 (aload_2)) 
                                      (24 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (29 (invokestatic (methodCP "hasheq" "clojure.lang.Util" ((class "java.lang.Object")) int))) 
                                      (32 (iadd)) 
                                      (33 (istore_1)) 
                                      (34 (aload_2)) 
                                      (35 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (40 (astore_2)) 
                                      (41 (goto 15))  ;;to TAG_2
                                      (44 (aload_0)) ;;at TAG_1
                                      (45 (iload_1)) 
                                      (46 (putfield (fieldCP "_hasheq" "clojure.lang.PersistentQueue" int))) 
                                      (49 (aload_0)) ;;at TAG_0
                                      (50 (getfield (fieldCP "_hasheq" "clojure.lang.PersistentQueue" int))) 
                                      (53 (ireturn)) 
                                      (endofcode 54))
                                   (Exceptions )
                                   (StackMap )))
                        (method "peek"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "f" "clojure.lang.PersistentQueue" (class "clojure.lang.ISeq"))))
                                      (4 (invokestatic
					(methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pop"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentQueue"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 3) (code_length . 58)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "f" "clojure.lang.PersistentQueue" (class "clojure.lang.ISeq")))) 
                                      (4 (ifnonnull 9))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (areturn)) 
                                      (9 (aload_0)) ;;at TAG_0
                                      (10 (getfield (fieldCP "f" "clojure.lang.PersistentQueue" (class "clojure.lang.ISeq")))) 
                                      (13 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (18 (astore_1)) 
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "r" "clojure.lang.PersistentQueue" (class "clojure.lang.PersistentVector")))) 
                                      (23 (astore_2)) 
                                      (24 (aload_1)) 
                                      (25 (ifnonnull 38)) ;;to TAG_1
                                      (28 (aload_0)) 
                                      (29 (getfield (fieldCP "r" "clojure.lang.PersistentQueue" (class "clojure.lang.PersistentVector")))) 
                                      (32 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (35 (astore_1)) 
                                      (36 (aconst_null)) 
                                      (37 (astore_2)) 
                                      (38 (new (class "clojure.lang.PersistentQueue"))) ;;at TAG_1
                                      (41 (dup)) 
                                      (42 (aload_0)) 
                                      (43 (invokevirtual (methodCP "meta" "clojure.lang.PersistentQueue" () (class "clojure.lang.IPersistentMap")))) 
                                      (46 (aload_0)) 
                                      (47 (getfield (fieldCP "cnt" "clojure.lang.PersistentQueue" int))) 
                                      (50 (iconst_1)) 
                                      (51 (isub)) 
                                      (52 (aload_1)) 
                                      (53 (aload_2)) 
                                      (54 (invokespecial (methodCP "<init>" "clojure.lang.PersistentQueue" ((class "clojure.lang.IPersistentMap") int (class "clojure.lang.ISeq") (class "clojure.lang.PersistentVector")) void))) 
                                      (57 (areturn)) 
                                      (endofcode 58))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "cnt" "clojure.lang.PersistentQueue" int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "seq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 28)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "f" "clojure.lang.PersistentQueue" (class "clojure.lang.ISeq")))) 
                                      (4 (ifnonnull 9))  ;;to TAG_0
                                      (7 (aconst_null)) 
                                      (8 (areturn)) 
                                      (9 (new (class "clojure.lang.PersistentQueue$Seq"))) ;;at TAG_0
                                      (12 (dup)) 
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "f" "clojure.lang.PersistentQueue" (class "clojure.lang.ISeq")))) 
                                      (17 (aload_0)) 
                                      (18 (getfield (fieldCP "r" "clojure.lang.PersistentQueue" (class "clojure.lang.PersistentVector")))) 
                                      (21 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (24 (invokespecial (methodCP "<init>" "clojure.lang.PersistentQueue$Seq" ((class "clojure.lang.ISeq") (class "clojure.lang.ISeq")) void))) 
                                      (27 (areturn)) 
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap )))
                        (method "cons"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentQueue"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 2) (code_length . 73)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "f" "clojure.lang.PersistentQueue" (class "clojure.lang.ISeq")))) 
                                      (4 (ifnonnull 30)) ;;to TAG_0
                                      (7 (new (class "clojure.lang.PersistentQueue"))) 
                                      (10 (dup)) 
                                      (11 (aload_0)) 
                                      (12 (invokevirtual (methodCP "meta" "clojure.lang.PersistentQueue" () (class "clojure.lang.IPersistentMap")))) 
                                      (15 (aload_0)) 
                                      (16 (getfield (fieldCP "cnt" "clojure.lang.PersistentQueue" int))) 
                                      (19 (iconst_1)) 
                                      (20 (iadd)) 
                                      (21 (aload_1)) 
                                      (22 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (25 (aconst_null)) 
                                      (26 (invokespecial (methodCP "<init>" "clojure.lang.PersistentQueue" ((class "clojure.lang.IPersistentMap") int (class "clojure.lang.ISeq") (class "clojure.lang.PersistentVector")) void))) 
                                      (29 (areturn)) 
                                      (30 (new (class "clojure.lang.PersistentQueue"))) ;;at TAG_0
                                      (33 (dup)) 
                                      (34 (aload_0)) 
                                      (35 (invokevirtual (methodCP "meta" "clojure.lang.PersistentQueue" () (class "clojure.lang.IPersistentMap")))) 
                                      (38 (aload_0)) 
                                      (39 (getfield (fieldCP "cnt" "clojure.lang.PersistentQueue" int))) 
                                      (42 (iconst_1)) 
                                      (43 (iadd)) 
                                      (44 (aload_0)) 
                                      (45 (getfield (fieldCP "f" "clojure.lang.PersistentQueue" (class "clojure.lang.ISeq")))) 
                                      (48 (aload_0)) 
                                      (49 (getfield (fieldCP "r" "clojure.lang.PersistentQueue" (class "clojure.lang.PersistentVector")))) 
                                      (52 (ifnull 62)) ;;to TAG_1
                                      (55 (aload_0)) 
                                      (56 (getfield (fieldCP "r" "clojure.lang.PersistentQueue" (class "clojure.lang.PersistentVector")))) 
                                      (59 (goto 65))  ;;to TAG_2
                                      (62 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) ;;at TAG_1
                                      (65 (aload_1)) ;;at TAG_2
                                      (66 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (69 (invokespecial (methodCP "<init>" "clojure.lang.PersistentQueue" ((class "clojure.lang.IPersistentMap") int (class "clojure.lang.ISeq") (class "clojure.lang.PersistentVector")) void))) 
                                      (72 (areturn)) 
                                      (endofcode 73))
                                   (Exceptions )
                                   (StackMap )))
                        (method "empty"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentQueue" (class "clojure.lang.PersistentQueue"))))
                                      (3 (aload_0))
                                      (4 (invokevirtual
					(methodCP "meta" "clojure.lang.PersistentQueue" () (class "clojure.lang.IPersistentMap"))))
                                      (7 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentQueue" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentQueue"))))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.PersistentQueue"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 21)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentQueue")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "cnt" "clojure.lang.PersistentQueue" int)))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "f" "clojure.lang.PersistentQueue" (class "clojure.lang.ISeq"))))
                                      (13 (aload_0))
                                      (14 (getfield (fieldCP "r" "clojure.lang.PersistentQueue" (class "clojure.lang.PersistentVector"))))
                                      (17 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentQueue" ((class "clojure.lang.IPersistentMap") int (class "clojure.lang.ISeq") (class "clojure.lang.PersistentVector")) void)))
                                      (20 (areturn))
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toArray"
                              (parameters )
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "seq" "clojure.lang.PersistentQueue" () (class "clojure.lang.ISeq"))))
                                      (4 (invokestatic
					(methodCP "seqToArray" "clojure.lang.RT" ((class "clojure.lang.ISeq")) (array (class "java.lang.Object")))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remove"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addAll"
                              (parameters (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "clear"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "retainAll"
                              (parameters (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "removeAll"
                              (parameters (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "containsAll"
                              (parameters (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 38)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokeinterface (methodCP "iterator" "java.util.Collection" () (class "java.util.Iterator")) 1)) 
                                      (6 (astore_2)) 
                                      (7 (aload_2)) ;;at TAG_2
                                      (8 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (13 (ifeq 36)) ;;to TAG_0
                                      (16 (aload_2)) 
                                      (17 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (22 (astore_3)) 
                                      (23 (aload_0)) 
                                      (24 (aload_3)) 
                                      (25 (invokevirtual (methodCP "contains" "clojure.lang.PersistentQueue" ((class "java.lang.Object")) boolean))) 
                                      (28 (ifeq 33)) ;;to TAG_1
                                      (31 (iconst_1)) 
                                      (32 (ireturn)) 
                                      (33 (goto 7))  ;;to TAG_2;;at TAG_1
                                      (36 (iconst_0)) ;;at TAG_0
                                      (37 (ireturn)) 
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toArray"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "seq" "clojure.lang.PersistentQueue" () (class "clojure.lang.ISeq"))))
                                      (4 (aload_1))
                                      (5 (invokestatic
					(methodCP "seqToPassedArray" "clojure.lang.RT" ((class "clojure.lang.ISeq") (array (class "java.lang.Object"))) (array (class "java.lang.Object")))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "size"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "count" "clojure.lang.PersistentQueue" () int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isEmpty"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "count" "clojure.lang.PersistentQueue" () int))) 
                                      (4 (ifne 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "contains"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 36)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "seq" "clojure.lang.PersistentQueue" () (class "clojure.lang.ISeq")))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) ;;at TAG_2
                                      (6 (ifnull 34)) ;;to TAG_0
                                      (9 (aload_2)) 
                                      (10 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (15 (aload_1)) 
                                      (16 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (19 (ifeq 24)) ;;to TAG_1
                                      (22 (iconst_1)) 
                                      (23 (ireturn)) 
                                      (24 (aload_2)) ;;at TAG_1
                                      (25 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (30 (astore_2)) 
                                      (31 (goto 5))  ;;to TAG_2
                                      (34 (iconst_0)) ;;at TAG_0
                                      (35 (ireturn)) 
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap )))
                        (method "iterator"
                              (parameters )
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 12)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.SeqIterator")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (invokevirtual
					(methodCP "seq" "clojure.lang.PersistentQueue" () (class "clojure.lang.ISeq"))))
                                      (8 (invokespecial
					(methodCP "<init>" "clojure.lang.SeqIterator" ((class "clojure.lang.ISeq")) void)))
                                      (11 (areturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.Obj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentQueue" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentQueue"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentQueue" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentQueue"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pop"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentStack"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "pop" "clojure.lang.PersistentQueue" () (class "clojure.lang.PersistentQueue"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "cons"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "cons" "clojure.lang.PersistentQueue" ((class "java.lang.Object")) (class "clojure.lang.PersistentQueue"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 0) (code_length . 15)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentQueue")))
                                      (3 (dup))
                                      (4 (aconst_null))
                                      (5 (iconst_0))
                                      (6 (aconst_null))
                                      (7 (aconst_null))
                                      (8 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentQueue" ((class "clojure.lang.IPersistentMap") int (class "clojure.lang.ISeq") (class "clojure.lang.PersistentVector")) void)))
                                      (11 (putstatic (fieldCP "EMPTY" "clojure.lang.PersistentQueue" (class "clojure.lang.PersistentQueue"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IPersistentList" "java.util.Collection" "clojure.lang.Counted" "clojure.lang.IHashEq")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentQueue-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentQueue*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentQueue" . "clojure.lang"))

