; APersistentSet-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.APersistentSet*
 (make-class-def
      '(class "clojure.lang.APersistentSet"
            "clojure.lang.AFn"
            (constant_pool)
            (fields
                        (field "_hash" int (accessflags  *class* ) -1)
                        (field "_hasheq" int (accessflags  *class* ) -1)
                        (field "impl" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . void)
                              (accessflags  *class*  *protected* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFn" () void)))
                                      (4 (aload_0))
                                      (5 (iconst_m1))
                                      (6 (putfield (fieldCP "_hash" "clojure.lang.APersistentSet" int)))
                                      (9 (aload_0))
                                      (10 (iconst_m1))
                                      (11 (putfield (fieldCP "_hasheq" "clojure.lang.APersistentSet" int)))
                                      (14 (aload_0))
                                      (15 (aload_1))
                                      (16 (putfield (fieldCP "impl" "clojure.lang.APersistentSet" (class "clojure.lang.IPersistentMap"))))
                                      (19 (return))
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toString"
                              (parameters )
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
					(methodCP "printString" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.String"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "contains"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "impl" "clojure.lang.APersistentSet" (class "clojure.lang.IPersistentMap"))))
                                      (4 (aload_1))
                                      (5 (invokeinterface
					(methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2))
                                      (10 (ireturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "get"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "impl" "clojure.lang.APersistentSet" (class "clojure.lang.IPersistentMap"))))
                                      (4 (aload_1))
                                      (5 (invokeinterface
					(methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "impl" "clojure.lang.APersistentSet" (class "clojure.lang.IPersistentMap"))))
                                      (4 (invokeinterface
					(methodCP "count" "clojure.lang.IPersistentMap" () int) 1))
                                      (9 (ireturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "seq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "impl" "clojure.lang.APersistentSet" (class "clojure.lang.IPersistentMap"))))
                                      (4 (invokestatic
					(methodCP "keys" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "get" "clojure.lang.APersistentSet" ((class "java.lang.Object")) (class "java.lang.Object"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equals"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokestatic
					(methodCP "setEquals" "clojure.lang.APersistentSet" ((class "clojure.lang.IPersistentSet") (class "java.lang.Object")) boolean)))
                                      (5 (ireturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "setEquals"
                              (parameters (class "clojure.lang.IPersistentSet") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 80)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (if_acmpne 7)) ;;to TAG_0
                                      (5 (iconst_1)) 
                                      (6 (ireturn)) 
                                      (7 (aload_1)) ;;at TAG_0
                                      (8 (instanceof (class "java.util.Set"))) 
                                      (11 (ifne 16)) ;;to TAG_1
                                      (14 (iconst_0)) 
                                      (15 (ireturn)) 
                                      (16 (aload_1)) ;;at TAG_1
                                      (17 (checkcast (class "java.util.Set"))) 
                                      (20 (astore_2)) 
                                      (21 (aload_2)) 
                                      (22 (invokeinterface (methodCP "size" "java.util.Set" () int) 1)) 
                                      (27 (aload_0)) 
                                      (28 (invokeinterface (methodCP "count" "clojure.lang.IPersistentSet" () int) 1)) 
                                      (33 (if_icmpeq 38))  ;;to TAG_2
                                      (36 (iconst_0)) 
                                      (37 (ireturn)) 
                                      (38 (aload_2)) ;;at TAG_2
                                      (39 (invokeinterface (methodCP "iterator" "java.util.Set" () (class "java.util.Iterator")) 1)) 
                                      (44 (astore_3)) 
                                      (45 (aload_3)) ;;at TAG_5
                                      (46 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (51 (ifeq 78)) ;;to TAG_3
                                      (54 (aload_3)) 
                                      (55 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (60 (astore 4)) 
                                      (62 (aload_0)) 
                                      (63 (aload 4)) 
                                      (65 (invokeinterface (methodCP "contains" "clojure.lang.IPersistentSet" ((class "java.lang.Object")) boolean) 2)) 
                                      (70 (ifne 75)) ;;to TAG_4
                                      (73 (iconst_0)) 
                                      (74 (ireturn)) 
                                      (75 (goto 45)) ;;to TAG_5;;at TAG_4
                                      (78 (iconst_1)) ;;at TAG_3
                                      (79 (ireturn)) 
                                      (endofcode 80))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 69)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (instanceof (class "java.util.Set"))) 
                                      (4 (ifne 9)) ;;to TAG_0
                                      (7 (iconst_0)) 
                                      (8 (ireturn)) 
                                      (9 (aload_1)) ;;at TAG_0
                                      (10 (checkcast (class "java.util.Set"))) 
                                      (13 (astore_2)) 
                                      (14 (aload_2)) 
                                      (15 (invokeinterface (methodCP "size" "java.util.Set" () int) 1)) 
                                      (20 (aload_0)) 
                                      (21 (invokevirtual (methodCP "size" "clojure.lang.APersistentSet" () int))) 
                                      (24 (if_icmpeq 29)) ;;to TAG_1
                                      (27 (iconst_0)) 
                                      (28 (ireturn)) 
                                      (29 (aload_2)) ;;at TAG_1
                                      (30 (invokeinterface (methodCP "iterator" "java.util.Set" () (class "java.util.Iterator")) 1)) 
                                      (35 (astore_3)) 
                                      (36 (aload_3)) ;;at TAG_4
                                      (37 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (42 (ifeq 67))  ;;to TAG_2
                                      (45 (aload_3)) 
                                      (46 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (51 (astore 4)) 
                                      (53 (aload_0)) 
                                      (54 (aload 4)) 
                                      (56 (invokevirtual (methodCP "contains" "clojure.lang.APersistentSet" ((class "java.lang.Object")) boolean))) 
                                      (59 (ifne 64)) ;;to TAG_3
                                      (62 (iconst_0)) 
                                      (63 (ireturn)) 
                                      (64 (goto 36)) ;;to TAG_4;;at TAG_3
                                      (67 (iconst_1)) ;;at TAG_2
                                      (68 (ireturn)) 
                                      (endofcode 69))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hashCode"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 53)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "_hash" "clojure.lang.APersistentSet" int))) 
                                      (4 (iconst_m1)) 
                                      (5 (if_icmpne 48)) ;;to TAG_0
                                      (8 (iconst_0)) 
                                      (9 (istore_1)) 
                                      (10 (aload_0)) 
                                      (11 (invokevirtual (methodCP "seq" "clojure.lang.APersistentSet" () (class "clojure.lang.ISeq")))) 
                                      (14 (astore_2)) 
                                      (15 (aload_2)) ;;at TAG_2
                                      (16 (ifnull 43)) ;;to TAG_1
                                      (19 (aload_2)) 
                                      (20 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (25 (astore_3)) 
                                      (26 (iload_1)) 
                                      (27 (aload_3)) 
                                      (28 (invokestatic (methodCP "hash" "clojure.lang.Util" ((class "java.lang.Object")) int))) 
                                      (31 (iadd)) 
                                      (32 (istore_1)) 
                                      (33 (aload_2)) 
                                      (34 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (39 (astore_2)) 
                                      (40 (goto 15))  ;;to TAG_2
                                      (43 (aload_0)) ;;at TAG_1
                                      (44 (iload_1)) 
                                      (45 (putfield (fieldCP "_hash" "clojure.lang.APersistentSet" int))) 
                                      (48 (aload_0)) ;;at TAG_0
                                      (49 (getfield (fieldCP "_hash" "clojure.lang.APersistentSet" int))) 
                                      (52 (ireturn)) 
                                      (endofcode 53))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasheq"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 53)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "_hasheq" "clojure.lang.APersistentSet" int))) 
                                      (4 (iconst_m1)) 
                                      (5 (if_icmpne 48)) ;;to TAG_0
                                      (8 (iconst_0)) 
                                      (9 (istore_1)) 
                                      (10 (aload_0)) 
                                      (11 (invokevirtual (methodCP "seq" "clojure.lang.APersistentSet" () (class "clojure.lang.ISeq")))) 
                                      (14 (astore_2)) 
                                      (15 (aload_2)) ;;at TAG_2
                                      (16 (ifnull 43)) ;;to TAG_1
                                      (19 (aload_2)) 
                                      (20 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (25 (astore_3)) 
                                      (26 (iload_1)) 
                                      (27 (aload_3)) 
                                      (28 (invokestatic (methodCP "hasheq" "clojure.lang.Util" ((class "java.lang.Object")) int))) 
                                      (31 (iadd)) 
                                      (32 (istore_1)) 
                                      (33 (aload_2)) 
                                      (34 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (39 (astore_2)) 
                                      (40 (goto 15))  ;;to TAG_2
                                      (43 (aload_0)) ;;at TAG_1
                                      (44 (iload_1)) 
                                      (45 (putfield (fieldCP "_hasheq" "clojure.lang.APersistentSet" int))) 
                                      (48 (aload_0)) ;;at TAG_0
                                      (49 (getfield (fieldCP "_hasheq" "clojure.lang.APersistentSet" int))) 
                                      (52 (ireturn)) 
                                      (endofcode 53))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toArray"
                              (parameters )
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "seq" "clojure.lang.APersistentSet" () (class "clojure.lang.ISeq"))))
                                      (4 (invokestatic
					(methodCP "seqToArray" "clojure.lang.RT" ((class "clojure.lang.ISeq")) (array (class "java.lang.Object")))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remove"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addAll"
                              (parameters (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "clear"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "retainAll"
                              (parameters (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "removeAll"
                              (parameters (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "containsAll"
                              (parameters (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 38)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokeinterface (methodCP "iterator" "java.util.Collection" () (class "java.util.Iterator")) 1)) 
                                      (6 (astore_2)) 
                                      (7 (aload_2)) ;;at TAG_2
                                      (8 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (13 (ifeq 36)) ;;to TAG_0
                                      (16 (aload_2)) 
                                      (17 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (22 (astore_3)) 
                                      (23 (aload_0)) 
                                      (24 (aload_3)) 
                                      (25 (invokevirtual (methodCP "contains" "clojure.lang.APersistentSet" ((class "java.lang.Object")) boolean))) 
                                      (28 (ifne 33)) ;;to TAG_1
                                      (31 (iconst_0)) 
                                      (32 (ireturn)) 
                                      (33 (goto 7))  ;;to TAG_2;;at TAG_1
                                      (36 (iconst_1)) ;;at TAG_0
                                      (37 (ireturn)) 
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toArray"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "seq" "clojure.lang.APersistentSet" () (class "clojure.lang.ISeq"))))
                                      (4 (aload_1))
                                      (5 (invokestatic
					(methodCP "seqToPassedArray" "clojure.lang.RT" ((class "clojure.lang.ISeq") (array (class "java.lang.Object"))) (array (class "java.lang.Object")))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "size"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "count" "clojure.lang.APersistentSet" () int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isEmpty"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "count" "clojure.lang.APersistentSet" () int))) 
                                      (4 (ifne 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "iterator"
                              (parameters )
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 12)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.SeqIterator")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (invokevirtual
					(methodCP "seq" "clojure.lang.APersistentSet" () (class "clojure.lang.ISeq"))))
                                      (8 (invokespecial
					(methodCP "<init>" "clojure.lang.SeqIterator" ((class "clojure.lang.ISeq")) void)))
                                      (11 (areturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IPersistentSet" "java.util.Collection" "java.util.Set" "java.io.Serializable" "clojure.lang.IHashEq")
            (accessflags  *abstract*  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))


(defconst *APersistentSet-class-table*
  (make-static-class-decls 
   *clojure.lang.APersistentSet*))

(defconst *package-name-map* 
  ("clojure.lang.APersistentSet" . "clojure.lang"))

