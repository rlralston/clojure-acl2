; ExceptionInfo-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.ExceptionInfo*
 (make-class-def
      '(class "clojure.lang.ExceptionInfo"
            "java.lang.RuntimeException"
            (constant_pool
                        (STRING  "Additional data must be a persistent map: ")
                        (STRING  "clojure.lang.ExceptionInfo: ")
                        (STRING  " "))
            (fields
                        (field "data" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *final*  *public* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.String") (class "clojure.lang.IPersistentMap"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 48)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokespecial (methodCP "<init>" "java.lang.RuntimeException" ((class "java.lang.String")) void))) 
                                      (5 (aload_2)) 
                                      (6 (instanceof (class "clojure.lang.IPersistentMap"))) 
                                      (9 (ifeq 20))  ;;to TAG_0
                                      (12 (aload_0)) 
                                      (13 (aload_2)) 
                                      (14 (putfield (fieldCP "data" "clojure.lang.ExceptionInfo" (class "clojure.lang.IPersistentMap")))) 
                                      (17 (goto 47)) ;;to TAG_1
                                      (20 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_0
                                      (23 (dup)) 
                                      (24 (new (class "java.lang.StringBuilder"))) 
                                      (27 (dup)) 
                                      (28 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (31 (ldc 0)) ;;STRING:: "Additional data must be a persistent map: "
                                      (33 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (36 (aload_2)) 
                                      (37 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (40 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (43 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (46 (athrow)) 
                                      (47 (return)) ;;at TAG_1
                                      (endofcode 48))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.String") (class "clojure.lang.IPersistentMap") (class "java.lang.Throwable"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_3))
                                      (3 (invokespecial
					(methodCP "<init>" "java.lang.RuntimeException" ((class "java.lang.String") (class "java.lang.Throwable")) void)))
                                      (6 (aload_0))
                                      (7 (aload_2))
                                      (8 (putfield (fieldCP "data" "clojure.lang.ExceptionInfo" (class "clojure.lang.IPersistentMap"))))
                                      (11 (return))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getData"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "data" "clojure.lang.ExceptionInfo" (class "clojure.lang.IPersistentMap"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toString"
                              (parameters )
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 38)
                                   (parsedcode
                                      (0 (new (class "java.lang.StringBuilder")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.StringBuilder" () void)))
                                      (7 (ldc 1))         ;;STRING:: "clojure.lang.ExceptionInfo: "
                                      (9 (invokevirtual
					(methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder"))))
                                      (12 (aload_0))
                                      (13 (invokevirtual
					(methodCP "getMessage" "clojure.lang.ExceptionInfo" () (class "java.lang.String"))))
                                      (16 (invokevirtual
					(methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder"))))
                                      (19 (ldc 2))        ;;STRING:: " "
                                      (21 (invokevirtual
					(methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder"))))
                                      (24 (aload_0))
                                      (25 (getfield (fieldCP "data" "clojure.lang.ExceptionInfo" (class "clojure.lang.IPersistentMap"))))
                                      (28 (invokevirtual
					(methodCP "toString" "java.lang.Object" () (class "java.lang.String"))))
                                      (31 (invokevirtual
					(methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder"))))
                                      (34 (invokevirtual
					(methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String"))))
                                      (37 (areturn))
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IExceptionInfo")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))


(defconst *ExceptionInfo-class-table*
  (make-static-class-decls 
   *clojure.lang.ExceptionInfo*))

(defconst *package-name-map* 
  ("clojure.lang.ExceptionInfo" . "clojure.lang"))

