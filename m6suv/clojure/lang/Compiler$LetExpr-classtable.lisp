; Compiler$LetExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$LetExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$LetExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Can\nt eval let/loop")
                        (STRING  "__auto__")
                        (STRING  "Ljava/lang/Object;"))
            (fields
                        (field "bindingInits" (class "clojure.lang.PersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "body" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "isLoop" boolean (accessflags  *class*  *final*  *public* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.PersistentVector") (class "clojure.lang.Compiler$Expr") boolean)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "bindingInits" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.PersistentVector"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "body" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (14 (aload_0))
                                      (15 (iload_3))
                                      (16 (putfield (fieldCP "isLoop" "clojure.lang.Compiler$LetExpr" boolean)))
                                      (19 (return))
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (ldc 0))         ;;STRING:: "Can\nt eval let/loop"
                                      (6 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void)))
                                      (9 (athrow))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (aload_3))
                                      (4 (iconst_0))
                                      (5 (invokevirtual
					(methodCP "doEmit" "clojure.lang.Compiler$LetExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") boolean) void)))
                                      (8 (return))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitUnboxed"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (aload_3))
                                      (4 (iconst_1))
                                      (5 (invokevirtual
					(methodCP "doEmit" "clojure.lang.Compiler$LetExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") boolean) void)))
                                      (8 (return))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doEmit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") boolean)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 12) (code_length . 444)
                                   (parsedcode
                                      (0 (new (class "java.util.HashMap"))) 
                                      (3 (dup)) 
                                      (4 (invokespecial (methodCP "<init>" "java.util.HashMap" () void))) 
                                      (7 (astore 5)) 
                                      (9 (iconst_0)) 
                                      (10 (istore 6)) 
                                      (12 (iload 6)) ;;at TAG_3
                                      (14 (aload_0)) 
                                      (15 (getfield (fieldCP "bindingInits" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.PersistentVector")))) 
                                      (18 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (21 (if_icmpge 149)) ;;to TAG_0
                                      (24 (aload_0)) 
                                      (25 (getfield (fieldCP "bindingInits" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.PersistentVector")))) 
                                      (28 (iload 6)) 
                                      (30 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector" (int) (class "java.lang.Object")))) 
                                      (33 (checkcast (class "clojure.lang.Compiler$BindingInit"))) 
                                      (36 (astore 7)) 
                                      (38 (aload 7)) 
                                      (40 (getfield (fieldCP "init" "clojure.lang.Compiler$BindingInit" (class "clojure.lang.Compiler$Expr")))) 
                                      (43 (invokestatic (methodCP "maybePrimitiveType" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$Expr")) (class "java.lang.Class")))) 
                                      (46 (astore 8)) 
                                      (48 (aload 8)) 
                                      (50 (ifnull 96)) ;;to TAG_1
                                      (53 (aload 7)) 
                                      (55 (getfield (fieldCP "init" "clojure.lang.Compiler$BindingInit" (class "clojure.lang.Compiler$Expr")))) 
                                      (58 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (61 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (64 (aload_2)) 
                                      (65 (aload_3)) 
                                      (66 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (71 (aload_3)) 
                                      (72 (aload 8)) 
                                      (74 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (77 (bipush 54)) 
                                      (79 (invokevirtual (methodCP "getOpcode" "clojure.asm.Type" (int) int))) 
                                      (82 (aload 7)) 
                                      (84 (getfield (fieldCP "binding" "clojure.lang.Compiler$BindingInit" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (87 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (90 (invokevirtual (methodCP "visitVarInsn" "clojure.asm.commons.GeneratorAdapter" (int int) void))) 
                                      (93 (goto 131)) ;;to TAG_2
                                      (96 (aload 7)) ;;at TAG_1
                                      (98 (getfield (fieldCP "init" "clojure.lang.Compiler$BindingInit" (class "clojure.lang.Compiler$Expr")))) 
                                      (101 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (104 (aload_2)) 
                                      (105 (aload_3)) 
                                      (106 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (111 (aload_3)) 
                                      (112 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (115 (bipush 54)) 
                                      (117 (invokevirtual (methodCP "getOpcode" "clojure.asm.Type" (int) int))) 
                                      (120 (aload 7)) 
                                      (122 (getfield (fieldCP "binding" "clojure.lang.Compiler$BindingInit" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (125 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (128 (invokevirtual (methodCP "visitVarInsn" "clojure.asm.commons.GeneratorAdapter" (int int) void))) 
                                      (131 (aload 5)) ;;at TAG_2
                                      (133 (aload 7)) 
                                      (135 (aload_3)) 
                                      (136 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (139 (invokevirtual (methodCP "put" "java.util.HashMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (142 (pop)) 
                                      (143 (iinc 6 1)) 
                                      (146 (goto 12)) ;;to TAG_3
                                      (149 (aload_3)) ;;at TAG_0
                                      (150 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (153 (astore 6)) 
                                      (155 (aload_0)) 
                                      (156 (getfield (fieldCP "isLoop" "clojure.lang.Compiler$LetExpr" boolean))) 
                                      (159 (ifeq 242)) ;;to TAG_4
                                      (162 (iconst_2)) ;;at TAG_16
                                      (163 (anewarray (class "java.lang.Object"))) 
                                      (166 (dup)) 
                                      (167 (iconst_0)) 
                                      (168 (getstatic (fieldCP "LOOP_LABEL" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (171 (aastore)) 
                                      (172 (dup)) 
                                      (173 (iconst_1)) 
                                      (174 (aload 6)) 
                                      (176 (aastore)) 
                                      (177 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (180 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (183 (iload 4)) 
                                      (185 (ifeq 206))  ;;to TAG_5
                                      (188 (aload_0)) 
                                      (189 (getfield (fieldCP "body" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (192 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (195 (aload_1)) 
                                      (196 (aload_2)) 
                                      (197 (aload_3)) 
                                      (198 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (203 (goto 218)) ;;to TAG_6
                                      (206 (aload_0)) ;;at TAG_5
                                      (207 (getfield (fieldCP "body" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (210 (aload_1)) 
                                      (211 (aload_2)) 
                                      (212 (aload_3)) 
                                      (213 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (218 (jsr 232)) ;;to TAG_7;;at TAG_6
                                      (221 (goto 239)) ;;to TAG_8;;at TAG_17
                                      (224 (astore 9)) ;;at TAG_18
                                      (226 (jsr 232)) ;;to TAG_7
                                      (229 (aload 9)) ;;at TAG_19
                                      (231 (athrow)) 
                                      (232 (astore 10)) ;;at TAG_7
                                      (234 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (237 (ret 10)) 
                                      (239 (goto 277)) ;;to TAG_9;;at TAG_8
                                      (242 (iload 4)) ;;at TAG_4
                                      (244 (ifeq 265)) ;;to TAG_10
                                      (247 (aload_0)) 
                                      (248 (getfield (fieldCP "body" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (251 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (254 (aload_1)) 
                                      (255 (aload_2)) 
                                      (256 (aload_3)) 
                                      (257 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (262 (goto 277)) ;;to TAG_9
                                      (265 (aload_0)) ;;at TAG_10
                                      (266 (getfield (fieldCP "body" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (269 (aload_1)) 
                                      (270 (aload_2)) 
                                      (271 (aload_3)) 
                                      (272 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (277 (aload_3)) ;;at TAG_9
                                      (278 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (281 (astore 7)) 
                                      (283 (aload_0)) 
                                      (284 (getfield (fieldCP "bindingInits" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.PersistentVector")))) 
                                      (287 (invokevirtual (methodCP "seq" "clojure.lang.PersistentVector" () (class "clojure.lang.ISeq")))) 
                                      (290 (astore 8)) 
                                      (292 (aload 8)) ;;at TAG_15
                                      (294 (ifnull 443)) ;;to TAG_11
                                      (297 (aload 8)) 
                                      (299 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (304 (checkcast (class "clojure.lang.Compiler$BindingInit"))) 
                                      (307 (astore 9)) 
                                      (309 (aload 9)) 
                                      (311 (getfield (fieldCP "binding" "clojure.lang.Compiler$BindingInit" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (314 (getfield (fieldCP "name" "clojure.lang.Compiler$LocalBinding" (class "java.lang.String")))) 
                                      (317 (astore 10)) 
                                      (319 (aload 10)) 
                                      (321 (ldc 1)) ;;STRING:: "__auto__"
                                      (323 (invokevirtual (methodCP "endsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (326 (ifeq 352)) ;;to TAG_12
                                      (329 (new (class "java.lang.StringBuilder"))) 
                                      (332 (dup)) 
                                      (333 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (336 (aload 10)) 
                                      (338 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (341 (invokestatic (methodCP "nextID" "clojure.lang.RT" () int))) 
                                      (344 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (347 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (350 (astore 10)) 
                                      (352 (aload 9)) ;;at TAG_12
                                      (354 (getfield (fieldCP "init" "clojure.lang.Compiler$BindingInit" (class "clojure.lang.Compiler$Expr")))) 
                                      (357 (invokestatic (methodCP "maybePrimitiveType" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$Expr")) (class "java.lang.Class")))) 
                                      (360 (astore 11)) 
                                      (362 (aload 11)) 
                                      (364 (ifnull 402)) ;;to TAG_13
                                      (367 (aload_3)) 
                                      (368 (aload 10)) 
                                      (370 (aload 11)) 
                                      (372 (invokestatic (methodCP "getDescriptor" "clojure.asm.Type" ((class "java.lang.Class")) (class "java.lang.String")))) 
                                      (375 (aconst_null)) 
                                      (376 (aload 5)) 
                                      (378 (aload 9)) 
                                      (380 (invokevirtual (methodCP "get" "java.util.HashMap" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (383 (checkcast (class "clojure.asm.Label"))) 
                                      (386 (aload 7)) 
                                      (388 (aload 9)) 
                                      (390 (getfield (fieldCP "binding" "clojure.lang.Compiler$BindingInit" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (393 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (396 (invokevirtual (methodCP "visitLocalVariable" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "clojure.asm.Label") (class "clojure.asm.Label") int) void))) 
                                      (399 (goto 431)) ;;to TAG_14
                                      (402 (aload_3)) ;;at TAG_13
                                      (403 (aload 10)) 
                                      (405 (ldc 2)) ;;STRING:: "Ljava/lang/Object;"
                                      (407 (aconst_null)) 
                                      (408 (aload 5)) 
                                      (410 (aload 9)) 
                                      (412 (invokevirtual (methodCP "get" "java.util.HashMap" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (415 (checkcast (class "clojure.asm.Label"))) 
                                      (418 (aload 7)) 
                                      (420 (aload 9)) 
                                      (422 (getfield (fieldCP "binding" "clojure.lang.Compiler$BindingInit" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (425 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (428 (invokevirtual (methodCP "visitLocalVariable" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "clojure.asm.Label") (class "clojure.asm.Label") int) void))) 
                                      (431 (aload 8)) ;;at TAG_14
                                      (433 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (438 (astore 8)) 
                                      (440 (goto 292)) ;;to TAG_15
                                      (443 (return)) ;;at TAG_11
                                      (endofcode 444))
                                   (Exceptions 
                                     (handler 162 221  224 (class "java.lang.Throwable"))
                                     (handler 224 229  224 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "body" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (invokeinterface
					(methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1))
                                      (9 (ireturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "body" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (invokeinterface
					(methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "canEmitPrimitive"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 31)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "body" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (4 (instanceof (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (7 (ifeq 29))  ;;to TAG_0
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "body" "clojure.lang.Compiler$LetExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (14 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (17 (invokeinterface (methodCP "canEmitPrimitive" "clojure.lang.Compiler$MaybePrimitiveExpr" () boolean) 1)) 
                                      (22 (ifeq 29))  ;;to TAG_0
                                      (25 (iconst_1)) 
                                      (26 (goto 30)) ;;to TAG_1
                                      (29 (iconst_0)) ;;at TAG_0
                                      (30 (ireturn)) ;;at TAG_1
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr" "clojure.lang.Compiler$MaybePrimitiveExpr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$LetExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$LetExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$LetExpr" . "clojure.lang"))

