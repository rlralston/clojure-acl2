; Compiler$MapExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$MapExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$MapExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Duplicate constant keys in map")
                        (STRING  "clojure.lang.IPersistentMap map(Object[])")
                        (STRING  "clojure.lang.IPersistentMap mapUniqueKeys(Object[])"))
            (fields
                        (field "keyvals" (class "clojure.lang.IPersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "mapMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "mapUniqueKeysMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentVector"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "keyvals" "clojure.lang.Compiler$MapExpr" (class "clojure.lang.IPersistentVector"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 60)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "keyvals" "clojure.lang.Compiler$MapExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (4 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (9 (anewarray (class "java.lang.Object"))) 
                                      (12 (astore_1)) 
                                      (13 (iconst_0)) 
                                      (14 (istore_2)) 
                                      (15 (iload_2)) ;;at TAG_1
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "keyvals" "clojure.lang.Compiler$MapExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (20 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (25 (if_icmpge 55))  ;;to TAG_0
                                      (28 (aload_1)) 
                                      (29 (iload_2)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "keyvals" "clojure.lang.Compiler$MapExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (34 (iload_2)) 
                                      (35 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (40 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (43 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (48 (aastore)) 
                                      (49 (iinc 2 1)) 
                                      (52 (goto 15)) ;;to TAG_1
                                      (55 (aload_1)) ;;at TAG_0
                                      (56 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (59 (areturn)) 
                                      (endofcode 60))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 10) (code_length . 172)
                                   (parsedcode
                                      (0 (iconst_1)) 
                                      (1 (istore 4)) 
                                      (3 (iconst_1)) 
                                      (4 (istore 5)) 
                                      (6 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashSet" (class "clojure.lang.PersistentHashSet")))) 
                                      (9 (astore 6)) 
                                      (11 (iconst_0)) 
                                      (12 (istore 7)) 
                                      (14 (iload 7)) ;;at TAG_5
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "keyvals" "clojure.lang.Compiler$MapExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (20 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (25 (if_icmpge 105)) ;;to TAG_0
                                      (28 (aload_0)) 
                                      (29 (getfield (fieldCP "keyvals" "clojure.lang.Compiler$MapExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (32 (iload 7)) 
                                      (34 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (39 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (42 (astore 8)) 
                                      (44 (aload 8)) 
                                      (46 (instanceof (class "clojure.lang.Compiler$LiteralExpr"))) 
                                      (49 (ifeq 96))  ;;to TAG_1
                                      (52 (aload 8)) 
                                      (54 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (59 (astore 9)) 
                                      (61 (aload 6)) 
                                      (63 (aload 9)) 
                                      (65 (invokeinterface (methodCP "contains" "clojure.lang.IPersistentSet" ((class "java.lang.Object")) boolean) 2)) 
                                      (70 (ifeq 79)) ;;to TAG_2
                                      (73 (iconst_0)) 
                                      (74 (istore 5)) 
                                      (76 (goto 93)) ;;to TAG_3
                                      (79 (aload 6)) ;;at TAG_2
                                      (81 (aload 9)) 
                                      (83 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentSet" ((class "java.lang.Object")) (class "clojure.lang.IPersistentCollection")) 2)) 
                                      (88 (checkcast (class "clojure.lang.IPersistentSet"))) 
                                      (91 (astore 6)) 
                                      (93 (goto 99)) ;;to TAG_4;;at TAG_3
                                      (96 (iconst_0)) ;;at TAG_1
                                      (97 (istore 4)) 
                                      (99 (iinc 7 2)) ;;at TAG_4
                                      (102 (goto 14)) ;;to TAG_5
                                      (105 (aload_0)) ;;at TAG_0
                                      (106 (getfield (fieldCP "keyvals" "clojure.lang.Compiler$MapExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (109 (aload_2)) 
                                      (110 (aload_3)) 
                                      (111 (invokestatic (methodCP "emitArgsAsArray" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.IPersistentVector") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (114 (iload 4)) 
                                      (116 (ifeq 124)) ;;to TAG_6
                                      (119 (iload 5)) 
                                      (121 (ifne 137)) ;;to TAG_7
                                      (124 (aload_0)) ;;at TAG_6
                                      (125 (getfield (fieldCP "keyvals" "clojure.lang.Compiler$MapExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (128 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (133 (iconst_2)) 
                                      (134 (if_icmpgt 150)) ;;to TAG_8
                                      (137 (aload_3)) ;;at TAG_7
                                      (138 (invokestatic (methodCP "access$200" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (141 (getstatic (fieldCP "mapUniqueKeysMethod" "clojure.lang.Compiler$MapExpr" (class "clojure.asm.commons.Method")))) 
                                      (144 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (147 (goto 160)) ;;to TAG_9
                                      (150 (aload_3)) ;;at TAG_8
                                      (151 (invokestatic (methodCP "access$200" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (154 (getstatic (fieldCP "mapMethod" "clojure.lang.Compiler$MapExpr" (class "clojure.asm.commons.Method")))) 
                                      (157 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (160 (aload_1)) ;;at TAG_9
                                      (161 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (164 (if_acmpne 171)) ;;to TAG_10
                                      (167 (aload_3)) 
                                      (168 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (171 (return)) ;;at TAG_10
                                      (endofcode 172))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 4)
                                   (parsedcode
                                      (0 (ldc_w ))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 12) (code_length . 356)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (3 (astore_2)) 
                                      (4 (iconst_1)) 
                                      (5 (istore_3)) 
                                      (6 (iconst_1)) 
                                      (7 (istore 4)) 
                                      (9 (iconst_1)) 
                                      (10 (istore 5)) 
                                      (12 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashSet" (class "clojure.lang.PersistentHashSet")))) 
                                      (15 (astore 6)) 
                                      (17 (aload_1)) 
                                      (18 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (21 (astore 7)) 
                                      (23 (aload 7)) ;;at TAG_10
                                      (25 (ifnull 187)) ;;to TAG_0
                                      (28 (aload 7)) 
                                      (30 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (35 (checkcast (class "clojure.lang.IMapEntry"))) 
                                      (38 (astore 8)) 
                                      (40 (aload_0)) 
                                      (41 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (44 (if_acmpne 51)) ;;to TAG_1
                                      (47 (aload_0)) 
                                      (48 (goto 54)) ;;to TAG_2
                                      (51 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_1
                                      (54 (aload 8)) ;;at TAG_2
                                      (56 (invokeinterface (methodCP "key" "clojure.lang.IMapEntry" () (class "java.lang.Object")) 1)) 
                                      (61 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (64 (astore 9)) 
                                      (66 (aload_0)) 
                                      (67 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (70 (if_acmpne 77)) ;;to TAG_3
                                      (73 (aload_0)) 
                                      (74 (goto 80)) ;;to TAG_4
                                      (77 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_3
                                      (80 (aload 8)) ;;at TAG_4
                                      (82 (invokeinterface (methodCP "val" "clojure.lang.IMapEntry" () (class "java.lang.Object")) 1)) 
                                      (87 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (90 (astore 10)) 
                                      (92 (aload_2)) 
                                      (93 (aload 9)) 
                                      (95 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 2)) 
                                      (100 (astore_2)) 
                                      (101 (aload_2)) 
                                      (102 (aload 10)) 
                                      (104 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 2)) 
                                      (109 (astore_2)) 
                                      (110 (aload 9)) 
                                      (112 (instanceof (class "clojure.lang.Compiler$LiteralExpr"))) 
                                      (115 (ifeq 162)) ;;to TAG_5
                                      (118 (aload 9)) 
                                      (120 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (125 (astore 11)) 
                                      (127 (aload 6)) 
                                      (129 (aload 11)) 
                                      (131 (invokeinterface (methodCP "contains" "clojure.lang.IPersistentSet" ((class "java.lang.Object")) boolean) 2)) 
                                      (136 (ifeq 145)) ;;to TAG_6
                                      (139 (iconst_0)) 
                                      (140 (istore 5)) 
                                      (142 (goto 159)) ;;to TAG_7
                                      (145 (aload 6)) ;;at TAG_6
                                      (147 (aload 11)) 
                                      (149 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentSet" ((class "java.lang.Object")) (class "clojure.lang.IPersistentCollection")) 2)) 
                                      (154 (checkcast (class "clojure.lang.IPersistentSet"))) 
                                      (157 (astore 6)) 
                                      (159 (goto 164)) ;;to TAG_8;;at TAG_7
                                      (162 (iconst_0)) ;;at TAG_5
                                      (163 (istore_3)) 
                                      (164 (aload 10)) ;;at TAG_8
                                      (166 (instanceof (class "clojure.lang.Compiler$LiteralExpr"))) 
                                      (169 (ifne 175)) ;;to TAG_9
                                      (172 (iconst_0)) 
                                      (173 (istore 4)) 
                                      (175 (aload 7)) ;;at TAG_9
                                      (177 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (182 (astore 7)) 
                                      (184 (goto 23)) ;;to TAG_10
                                      (187 (new (class "clojure.lang.Compiler$MapExpr"))) ;;at TAG_0
                                      (190 (dup)) 
                                      (191 (aload_2)) 
                                      (192 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$MapExpr" ((class "clojure.lang.IPersistentVector")) void))) 
                                      (195 (astore 7)) 
                                      (197 (aload_1)) 
                                      (198 (instanceof (class "clojure.lang.IObj"))) 
                                      (201 (ifeq 252)) ;;to TAG_11
                                      (204 (aload_1)) 
                                      (205 (checkcast (class "clojure.lang.IObj"))) 
                                      (208 (invokeinterface (methodCP "meta" "clojure.lang.IObj" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (213 (ifnull 252)) ;;to TAG_11
                                      (216 (new (class "clojure.lang.Compiler$MetaExpr"))) 
                                      (219 (dup)) 
                                      (220 (aload 7)) 
                                      (222 (aload_0)) 
                                      (223 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (226 (if_acmpne 233)) ;;to TAG_12
                                      (229 (aload_0)) 
                                      (230 (goto 236))  ;;to TAG_13
                                      (233 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_12
                                      (236 (aload_1)) ;;at TAG_13
                                      (237 (checkcast (class "clojure.lang.IObj"))) 
                                      (240 (invokeinterface (methodCP "meta" "clojure.lang.IObj" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (245 (invokestatic (methodCP "parse" "clojure.lang.Compiler$MapExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.IPersistentMap")) (class "clojure.lang.Compiler$Expr")))) 
                                      (248 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$MetaExpr" ((class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (251 (areturn)) 
                                      (252 (iload_3)) ;;at TAG_11
                                      (253 (ifeq 353)) ;;to TAG_14
                                      (256 (iload 5)) 
                                      (258 (ifne 271)) ;;to TAG_15
                                      (261 (new (class "java.lang.IllegalArgumentException"))) 
                                      (264 (dup)) 
                                      (265 (ldc 0)) ;;STRING:: "Duplicate constant keys in map"
                                      (267 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (270 (athrow)) 
                                      (271 (iload 4)) ;;at TAG_15
                                      (273 (ifeq 350)) ;;to TAG_16
                                      (276 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (279 (astore 8)) 
                                      (281 (iconst_0)) 
                                      (282 (istore 9)) 
                                      (284 (iload 9)) ;;at TAG_18
                                      (286 (aload_2)) 
                                      (287 (invokeinterface (methodCP "length" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (292 (if_icmpge 340)) ;;to TAG_17
                                      (295 (aload 8)) 
                                      (297 (aload_2)) 
                                      (298 (iload 9)) 
                                      (300 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (305 (checkcast (class "clojure.lang.Compiler$LiteralExpr"))) 
                                      (308 (invokevirtual (methodCP "val" "clojure.lang.Compiler$LiteralExpr" () (class "java.lang.Object")))) 
                                      (311 (aload_2)) 
                                      (312 (iload 9)) 
                                      (314 (iconst_1)) 
                                      (315 (iadd)) 
                                      (316 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (321 (checkcast (class "clojure.lang.Compiler$LiteralExpr"))) 
                                      (324 (invokevirtual (methodCP "val" "clojure.lang.Compiler$LiteralExpr" () (class "java.lang.Object")))) 
                                      (327 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (332 (astore 8)) 
                                      (334 (iinc 9 2)) 
                                      (337 (goto 284)) ;;to TAG_18
                                      (340 (new (class "clojure.lang.Compiler$ConstantExpr"))) ;;at TAG_17
                                      (343 (dup)) 
                                      (344 (aload 8)) 
                                      (346 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$ConstantExpr" ((class "java.lang.Object")) void))) 
                                      (349 (areturn)) 
                                      (350 (aload 7)) ;;at TAG_16
                                      (352 (areturn)) 
                                      (353 (aload 7)) ;;at TAG_14
                                      (355 (areturn)) 
                                      (endofcode 356))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 17)
                                   (parsedcode
                                      (0 (ldc 1))         ;;STRING:: "clojure.lang.IPersistentMap map(Object[])"
                                      (2 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (5 (putstatic (fieldCP "mapMethod" "clojure.lang.Compiler$MapExpr" (class "clojure.asm.commons.Method"))))
                                      (8 (ldc 2))         ;;STRING:: "clojure.lang.IPersistentMap mapUniqueKeys(Object[])"
                                      (10 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (13 (putstatic (fieldCP "mapUniqueKeysMethod" "clojure.lang.Compiler$MapExpr" (class "clojure.asm.commons.Method"))))
                                      (16 (return))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$MapExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$MapExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$MapExpr" . "clojure.lang"))

