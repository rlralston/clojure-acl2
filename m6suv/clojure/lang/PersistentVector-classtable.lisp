; PersistentVector-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentVector*
 (make-class-def
      '(class "clojure.lang.PersistentVector"
            "clojure.lang.APersistentVector"
            (constant_pool
                        (STRING  "Can\nt pop empty vector"))
            (fields
                        (field "NOEDIT" (class "java.util.concurrent.atomic.AtomicReference") (accessflags  *class*  *final*  *static* ) -1)
                        (field "EMPTY_NODE" (class "clojure.lang.PersistentVector$Node") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "cnt" int (accessflags  *class*  *final* ) -1)
                        (field "shift" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "root" (class "clojure.lang.PersistentVector$Node") (accessflags  *class*  *final*  *public* ) -1)
                        (field "tail" (array (class "java.lang.Object")) (accessflags  *class*  *final*  *public* ) -1)
                        (field "_meta" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *final* ) -1)
                        (field "EMPTY" (class "clojure.lang.PersistentVector") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "create"
                              (parameters (class "clojure.lang.ISeq"))
                              (returntype . (class "clojure.lang.PersistentVector"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 37)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (3 (invokevirtual (methodCP "asTransient" "clojure.lang.PersistentVector" () (class "clojure.lang.PersistentVector$TransientVector")))) 
                                      (6 (astore_1)) 
                                      (7 (aload_0)) ;;at TAG_1
                                      (8 (ifnull 32))  ;;to TAG_0
                                      (11 (aload_1)) 
                                      (12 (aload_0)) 
                                      (13 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (18 (invokevirtual (methodCP "conj" "clojure.lang.PersistentVector$TransientVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector$TransientVector")))) 
                                      (21 (astore_1)) 
                                      (22 (aload_0)) 
                                      (23 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (28 (astore_0)) 
                                      (29 (goto 7)) ;;to TAG_1
                                      (32 (aload_1)) ;;at TAG_0
                                      (33 (invokevirtual (methodCP "persistent" "clojure.lang.PersistentVector$TransientVector" () (class "clojure.lang.PersistentVector")))) 
                                      (36 (areturn)) 
                                      (endofcode 37))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (class "java.util.List"))
                              (returntype . (class "clojure.lang.PersistentVector"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 44)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (3 (invokevirtual (methodCP "asTransient" "clojure.lang.PersistentVector" () (class "clojure.lang.PersistentVector$TransientVector")))) 
                                      (6 (astore_1)) 
                                      (7 (aload_0)) 
                                      (8 (invokeinterface (methodCP "iterator" "java.util.List" () (class "java.util.Iterator")) 1)) 
                                      (13 (astore_2)) 
                                      (14 (aload_2)) ;;at TAG_1
                                      (15 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (20 (ifeq 39))  ;;to TAG_0
                                      (23 (aload_2)) 
                                      (24 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (29 (astore_3)) 
                                      (30 (aload_1)) 
                                      (31 (aload_3)) 
                                      (32 (invokevirtual (methodCP "conj" "clojure.lang.PersistentVector$TransientVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector$TransientVector")))) 
                                      (35 (astore_1)) 
                                      (36 (goto 14)) ;;to TAG_1
                                      (39 (aload_1)) ;;at TAG_0
                                      (40 (invokevirtual (methodCP "persistent" "clojure.lang.PersistentVector$TransientVector" () (class "clojure.lang.PersistentVector")))) 
                                      (43 (areturn)) 
                                      (endofcode 44))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (class "clojure.lang.PersistentVector"))
                              (accessflags  *class*  *public*  *static*  *transient* )
                              (code
                                   (max_stack . 2) (max_locals . 6) (code_length . 45)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (3 (invokevirtual (methodCP "asTransient" "clojure.lang.PersistentVector" () (class "clojure.lang.PersistentVector$TransientVector")))) 
                                      (6 (astore_1)) 
                                      (7 (aload_0)) 
                                      (8 (astore_2)) 
                                      (9 (aload_2)) 
                                      (10 (arraylength)) 
                                      (11 (istore_3)) 
                                      (12 (iconst_0)) 
                                      (13 (istore 4)) 
                                      (15 (iload 4)) ;;at TAG_1
                                      (17 (iload_3)) 
                                      (18 (if_icmpge 40))  ;;to TAG_0
                                      (21 (aload_2)) 
                                      (22 (iload 4)) 
                                      (24 (aaload)) 
                                      (25 (astore 5)) 
                                      (27 (aload_1)) 
                                      (28 (aload 5)) 
                                      (30 (invokevirtual (methodCP "conj" "clojure.lang.PersistentVector$TransientVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector$TransientVector")))) 
                                      (33 (astore_1)) 
                                      (34 (iinc 4 1)) 
                                      (37 (goto 15)) ;;to TAG_1
                                      (40 (aload_1)) ;;at TAG_0
                                      (41 (invokevirtual (methodCP "persistent" "clojure.lang.PersistentVector$TransientVector" () (class "clojure.lang.PersistentVector")))) 
                                      (44 (areturn)) 
                                      (endofcode 45))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object")))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 31)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentVector" () void)))
                                      (4 (aload_0))
                                      (5 (aconst_null))
                                      (6 (putfield (fieldCP "_meta" "clojure.lang.PersistentVector" (class "clojure.lang.IPersistentMap"))))
                                      (9 (aload_0))
                                      (10 (iload_1))
                                      (11 (putfield (fieldCP "cnt" "clojure.lang.PersistentVector" int)))
                                      (14 (aload_0))
                                      (15 (iload_2))
                                      (16 (putfield (fieldCP "shift" "clojure.lang.PersistentVector" int)))
                                      (19 (aload_0))
                                      (20 (aload_3))
                                      (21 (putfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node"))))
                                      (24 (aload_0))
                                      (25 (aload 4))
                                      (27 (putfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object")))))
                                      (30 (return))
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object")))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 6) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentVector" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "_meta" "clojure.lang.PersistentVector" (class "clojure.lang.IPersistentMap"))))
                                      (9 (aload_0))
                                      (10 (iload_2))
                                      (11 (putfield (fieldCP "cnt" "clojure.lang.PersistentVector" int)))
                                      (14 (aload_0))
                                      (15 (iload_3))
                                      (16 (putfield (fieldCP "shift" "clojure.lang.PersistentVector" int)))
                                      (19 (aload_0))
                                      (20 (aload 4))
                                      (22 (putfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node"))))
                                      (25 (aload_0))
                                      (26 (aload 5))
                                      (28 (putfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object")))))
                                      (31 (return))
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "asTransient"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentVector$TransientVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentVector$TransientVector")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentVector$TransientVector" ((class "clojure.lang.PersistentVector")) void)))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "tailoff"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *final* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (4 (bipush 32)) 
                                      (6 (if_icmpge 11))  ;;to TAG_0
                                      (9 (iconst_0)) 
                                      (10 (ireturn)) 
                                      (11 (aload_0)) ;;at TAG_0
                                      (12 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (15 (iconst_1)) 
                                      (16 (isub)) 
                                      (17 (iconst_5)) 
                                      (18 (iushr)) 
                                      (19 (iconst_5)) 
                                      (20 (ishl)) 
                                      (21 (ireturn)) 
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "arrayFor"
                              (parameters int)
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 73)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (iflt 65)) ;;to TAG_0
                                      (4 (iload_1)) 
                                      (5 (aload_0)) 
                                      (6 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (9 (if_icmpge 65)) ;;to TAG_0
                                      (12 (iload_1)) 
                                      (13 (aload_0)) 
                                      (14 (invokevirtual (methodCP "tailoff" "clojure.lang.PersistentVector" () int))) 
                                      (17 (if_icmplt 25)) ;;to TAG_1
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object"))))) 
                                      (24 (areturn)) 
                                      (25 (aload_0)) ;;at TAG_1
                                      (26 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (29 (astore_2)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (34 (istore_3)) 
                                      (35 (iload_3)) ;;at TAG_3
                                      (36 (ifle 60))  ;;to TAG_2
                                      (39 (aload_2)) 
                                      (40 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (43 (iload_1)) 
                                      (44 (iload_3)) 
                                      (45 (iushr)) 
                                      (46 (bipush 31)) 
                                      (48 (iand)) 
                                      (49 (aaload)) 
                                      (50 (checkcast (class "clojure.lang.PersistentVector$Node"))) 
                                      (53 (astore_2)) 
                                      (54 (iinc 3 -5)) 
                                      (57 (goto 35)) ;;to TAG_3
                                      (60 (aload_2)) ;;at TAG_2
                                      (61 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (64 (areturn)) 
                                      (65 (new (class "java.lang.IndexOutOfBoundsException"))) ;;at TAG_0
                                      (68 (dup)) 
                                      (69 (invokespecial (methodCP "<init>" "java.lang.IndexOutOfBoundsException" () void))) 
                                      (72 (athrow)) 
                                      (endofcode 73))
                                   (Exceptions )
                                   (StackMap )))
                        (method "nth"
                              (parameters int)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (invokevirtual
					(methodCP "arrayFor" "clojure.lang.PersistentVector" (int) (array (class "java.lang.Object")))))
                                      (5 (astore_2))
                                      (6 (aload_2))
                                      (7 (iload_1))
                                      (8 (bipush 31))
                                      (10 (iand))
                                      (11 (aaload))
                                      (12 (areturn))
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "nth"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 20)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (iflt 18))  ;;to TAG_0
                                      (4 (iload_1)) 
                                      (5 (aload_0)) 
                                      (6 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (9 (if_icmpge 18))  ;;to TAG_0
                                      (12 (aload_0)) 
                                      (13 (iload_1)) 
                                      (14 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector" (int) (class "java.lang.Object")))) 
                                      (17 (areturn)) 
                                      (18 (aload_2)) ;;at TAG_0
                                      (19 (areturn)) 
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assocN"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 9) (max_locals . 4) (code_length . 135)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (iflt 113)) ;;to TAG_0
                                      (4 (iload_1)) 
                                      (5 (aload_0)) 
                                      (6 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (9 (if_icmpge 113)) ;;to TAG_0
                                      (12 (iload_1)) 
                                      (13 (aload_0)) 
                                      (14 (invokevirtual (methodCP "tailoff" "clojure.lang.PersistentVector" () int))) 
                                      (17 (if_icmplt 76)) ;;to TAG_1
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object"))))) 
                                      (24 (arraylength)) 
                                      (25 (anewarray (class "java.lang.Object"))) 
                                      (28 (astore_3)) 
                                      (29 (aload_0)) 
                                      (30 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object"))))) 
                                      (33 (iconst_0)) 
                                      (34 (aload_3)) 
                                      (35 (iconst_0)) 
                                      (36 (aload_0)) 
                                      (37 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object"))))) 
                                      (40 (arraylength)) 
                                      (41 (invokestatic (methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void))) 
                                      (44 (aload_3)) 
                                      (45 (iload_1)) 
                                      (46 (bipush 31)) 
                                      (48 (iand)) 
                                      (49 (aload_2)) 
                                      (50 (aastore)) 
                                      (51 (new (class "clojure.lang.PersistentVector"))) 
                                      (54 (dup)) 
                                      (55 (aload_0)) 
                                      (56 (invokevirtual (methodCP "meta" "clojure.lang.PersistentVector" () (class "clojure.lang.IPersistentMap")))) 
                                      (59 (aload_0)) 
                                      (60 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (63 (aload_0)) 
                                      (64 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (67 (aload_0)) 
                                      (68 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (71 (aload_3)) 
                                      (72 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector" ((class "clojure.lang.IPersistentMap") int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object"))) void))) 
                                      (75 (areturn)) 
                                      (76 (new (class "clojure.lang.PersistentVector"))) ;;at TAG_1
                                      (79 (dup)) 
                                      (80 (aload_0)) 
                                      (81 (invokevirtual (methodCP "meta" "clojure.lang.PersistentVector" () (class "clojure.lang.IPersistentMap")))) 
                                      (84 (aload_0)) 
                                      (85 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (88 (aload_0)) 
                                      (89 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (92 (aload_0)) 
                                      (93 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (96 (aload_0)) 
                                      (97 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (100 (iload_1)) 
                                      (101 (aload_2)) 
                                      (102 (invokestatic (methodCP "doAssoc" "clojure.lang.PersistentVector" (int (class "clojure.lang.PersistentVector$Node") int (class "java.lang.Object")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (105 (aload_0)) 
                                      (106 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object"))))) 
                                      (109 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector" ((class "clojure.lang.IPersistentMap") int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object"))) void))) 
                                      (112 (areturn)) 
                                      (113 (iload_1)) ;;at TAG_0
                                      (114 (aload_0)) 
                                      (115 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (118 (if_icmpne 127))  ;;to TAG_2
                                      (121 (aload_0)) 
                                      (122 (aload_2)) 
                                      (123 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (126 (areturn)) 
                                      (127 (new (class "java.lang.IndexOutOfBoundsException"))) ;;at TAG_2
                                      (130 (dup)) 
                                      (131 (invokespecial (methodCP "<init>" "java.lang.IndexOutOfBoundsException" () void))) 
                                      (134 (athrow)) 
                                      (endofcode 135))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doAssoc"
                              (parameters int (class "clojure.lang.PersistentVector$Node") int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentVector$Node"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 6) (code_length . 78)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentVector$Node"))) 
                                      (3 (dup)) 
                                      (4 (aload_1)) 
                                      (5 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (8 (aload_1)) 
                                      (9 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (12 (invokevirtual (methodCP "clone" "java.lang.Object[]" () (class "java.lang.Object")))) 
                                      (15 (checkcast (array (class "java.lang.Object")))) 
                                      (18 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference") (array (class "java.lang.Object"))) void))) 
                                      (21 (astore 4)) 
                                      (23 (iload_0)) 
                                      (24 (ifne 41))  ;;to TAG_0
                                      (27 (aload 4)) 
                                      (29 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (32 (iload_2)) 
                                      (33 (bipush 31)) 
                                      (35 (iand)) 
                                      (36 (aload_3)) 
                                      (37 (aastore)) 
                                      (38 (goto 75)) ;;to TAG_1
                                      (41 (iload_2)) ;;at TAG_0
                                      (42 (iload_0)) 
                                      (43 (iushr)) 
                                      (44 (bipush 31)) 
                                      (46 (iand)) 
                                      (47 (istore 5)) 
                                      (49 (aload 4)) 
                                      (51 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (54 (iload 5)) 
                                      (56 (iload_0)) 
                                      (57 (iconst_5)) 
                                      (58 (isub)) 
                                      (59 (aload_1)) 
                                      (60 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (63 (iload 5)) 
                                      (65 (aaload)) 
                                      (66 (checkcast (class "clojure.lang.PersistentVector$Node"))) 
                                      (69 (iload_2)) 
                                      (70 (aload_3)) 
                                      (71 (invokestatic (methodCP "doAssoc" "clojure.lang.PersistentVector" (int (class "clojure.lang.PersistentVector$Node") int (class "java.lang.Object")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (74 (aastore)) 
                                      (75 (aload 4)) ;;at TAG_1
                                      (77 (areturn)) 
                                      (endofcode 78))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.PersistentVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 2) (code_length . 25)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentVector")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int)))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int)))
                                      (13 (aload_0))
                                      (14 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node"))))
                                      (17 (aload_0))
                                      (18 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object")))))
                                      (21 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentVector" ((class "clojure.lang.IPersistentMap") int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object"))) void)))
                                      (24 (areturn))
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "meta"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "_meta" "clojure.lang.PersistentVector" (class "clojure.lang.IPersistentMap"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "cons"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 10) (max_locals . 6) (code_length . 218)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (4 (istore_2)) 
                                      (5 (aload_0)) 
                                      (6 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (9 (aload_0)) 
                                      (10 (invokevirtual (methodCP "tailoff" "clojure.lang.PersistentVector" () int))) 
                                      (13 (isub)) 
                                      (14 (bipush 32)) 
                                      (16 (if_icmpge 80)) ;;to TAG_0
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object"))))) 
                                      (23 (arraylength)) 
                                      (24 (iconst_1)) 
                                      (25 (iadd)) 
                                      (26 (anewarray (class "java.lang.Object"))) 
                                      (29 (astore_3)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object"))))) 
                                      (34 (iconst_0)) 
                                      (35 (aload_3)) 
                                      (36 (iconst_0)) 
                                      (37 (aload_0)) 
                                      (38 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object"))))) 
                                      (41 (arraylength)) 
                                      (42 (invokestatic (methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void))) 
                                      (45 (aload_3)) 
                                      (46 (aload_0)) 
                                      (47 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object"))))) 
                                      (50 (arraylength)) 
                                      (51 (aload_1)) 
                                      (52 (aastore)) 
                                      (53 (new (class "clojure.lang.PersistentVector"))) 
                                      (56 (dup)) 
                                      (57 (aload_0)) 
                                      (58 (invokevirtual (methodCP "meta" "clojure.lang.PersistentVector" () (class "clojure.lang.IPersistentMap")))) 
                                      (61 (aload_0)) 
                                      (62 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (65 (iconst_1)) 
                                      (66 (iadd)) 
                                      (67 (aload_0)) 
                                      (68 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (71 (aload_0)) 
                                      (72 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (75 (aload_3)) 
                                      (76 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector" ((class "clojure.lang.IPersistentMap") int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object"))) void))) 
                                      (79 (areturn)) 
                                      (80 (new (class "clojure.lang.PersistentVector$Node"))) ;;at TAG_0
                                      (83 (dup)) 
                                      (84 (aload_0)) 
                                      (85 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (88 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (91 (aload_0)) 
                                      (92 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object"))))) 
                                      (95 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference") (array (class "java.lang.Object"))) void))) 
                                      (98 (astore 4)) 
                                      (100 (aload_0)) 
                                      (101 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (104 (istore 5)) 
                                      (106 (aload_0)) 
                                      (107 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (110 (iconst_5)) 
                                      (111 (iushr)) 
                                      (112 (iconst_1)) 
                                      (113 (aload_0)) 
                                      (114 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (117 (ishl)) 
                                      (118 (if_icmple 174)) ;;to TAG_1
                                      (121 (new (class "clojure.lang.PersistentVector$Node"))) 
                                      (124 (dup)) 
                                      (125 (aload_0)) 
                                      (126 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (129 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (132 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference")) void))) 
                                      (135 (astore_3)) 
                                      (136 (aload_3)) 
                                      (137 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (140 (iconst_0)) 
                                      (141 (aload_0)) 
                                      (142 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (145 (aastore)) 
                                      (146 (aload_3)) 
                                      (147 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (150 (iconst_1)) 
                                      (151 (aload_0)) 
                                      (152 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (155 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (158 (aload_0)) 
                                      (159 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (162 (aload 4)) 
                                      (164 (invokestatic (methodCP "newPath" "clojure.lang.PersistentVector" ((class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (167 (aastore)) 
                                      (168 (iinc 5 5)) 
                                      (171 (goto 189))  ;;to TAG_2
                                      (174 (aload_0)) ;;at TAG_1
                                      (175 (aload_0)) 
                                      (176 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (179 (aload_0)) 
                                      (180 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (183 (aload 4)) 
                                      (185 (invokespecial (methodCP "pushTail" "clojure.lang.PersistentVector" (int (class "clojure.lang.PersistentVector$Node") (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (188 (astore_3)) 
                                      (189 (new (class "clojure.lang.PersistentVector"))) ;;at TAG_2
                                      (192 (dup)) 
                                      (193 (aload_0)) 
                                      (194 (invokevirtual (methodCP "meta" "clojure.lang.PersistentVector" () (class "clojure.lang.IPersistentMap")))) 
                                      (197 (aload_0)) 
                                      (198 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (201 (iconst_1)) 
                                      (202 (iadd)) 
                                      (203 (iload 5)) 
                                      (205 (aload_3)) 
                                      (206 (iconst_1)) 
                                      (207 (anewarray (class "java.lang.Object"))) 
                                      (210 (dup)) 
                                      (211 (iconst_0)) 
                                      (212 (aload_1)) 
                                      (213 (aastore)) 
                                      (214 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector" ((class "clojure.lang.IPersistentMap") int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object"))) void))) 
                                      (217 (areturn)) 
                                      (endofcode 218))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pushTail"
                              (parameters int (class "clojure.lang.PersistentVector$Node") (class "clojure.lang.PersistentVector$Node"))
                              (returntype . (class "clojure.lang.PersistentVector$Node"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 8) (code_length . 106)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (4 (iconst_1)) 
                                      (5 (isub)) 
                                      (6 (iload_1)) 
                                      (7 (iushr)) 
                                      (8 (bipush 31)) 
                                      (10 (iand)) 
                                      (11 (istore 4)) 
                                      (13 (new (class "clojure.lang.PersistentVector$Node"))) 
                                      (16 (dup)) 
                                      (17 (aload_2)) 
                                      (18 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (21 (aload_2)) 
                                      (22 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (25 (invokevirtual (methodCP "clone" "java.lang.Object[]" () (class "java.lang.Object")))) 
                                      (28 (checkcast (array (class "java.lang.Object")))) 
                                      (31 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference") (array (class "java.lang.Object"))) void))) 
                                      (34 (astore 5)) 
                                      (36 (iload_1)) 
                                      (37 (iconst_5)) 
                                      (38 (if_icmpne 47)) ;;to TAG_0
                                      (41 (aload_3)) 
                                      (42 (astore 6)) 
                                      (44 (goto 93)) ;;to TAG_1
                                      (47 (aload_2)) ;;at TAG_0
                                      (48 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (51 (iload 4)) 
                                      (53 (aaload)) 
                                      (54 (checkcast (class "clojure.lang.PersistentVector$Node"))) 
                                      (57 (astore 7)) 
                                      (59 (aload 7)) 
                                      (61 (ifnull 77))  ;;to TAG_2
                                      (64 (aload_0)) 
                                      (65 (iload_1)) 
                                      (66 (iconst_5)) 
                                      (67 (isub)) 
                                      (68 (aload 7)) 
                                      (70 (aload_3)) 
                                      (71 (invokespecial (methodCP "pushTail" "clojure.lang.PersistentVector" (int (class "clojure.lang.PersistentVector$Node") (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (74 (goto 91)) ;;to TAG_3
                                      (77 (aload_0)) ;;at TAG_2
                                      (78 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (81 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (84 (iload_1)) 
                                      (85 (iconst_5)) 
                                      (86 (isub)) 
                                      (87 (aload_3)) 
                                      (88 (invokestatic (methodCP "newPath" "clojure.lang.PersistentVector" ((class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (91 (astore 6)) ;;at TAG_3
                                      (93 (aload 5)) ;;at TAG_1
                                      (95 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (98 (iload 4)) 
                                      (100 (aload 6)) 
                                      (102 (aastore)) 
                                      (103 (aload 5)) 
                                      (105 (areturn)) 
                                      (endofcode 106))
                                   (Exceptions )
                                   (StackMap )))
                        (method "newPath"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentVector$Node"))
                              (returntype . (class "clojure.lang.PersistentVector$Node"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 31)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (ifne 6))  ;;to TAG_0
                                      (4 (aload_2)) 
                                      (5 (areturn)) 
                                      (6 (new (class "clojure.lang.PersistentVector$Node"))) ;;at TAG_0
                                      (9 (dup)) 
                                      (10 (aload_0)) 
                                      (11 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference")) void))) 
                                      (14 (astore_3)) 
                                      (15 (aload_3)) 
                                      (16 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (19 (iconst_0)) 
                                      (20 (aload_0)) 
                                      (21 (iload_1)) 
                                      (22 (iconst_5)) 
                                      (23 (isub)) 
                                      (24 (aload_2)) 
                                      (25 (invokestatic (methodCP "newPath" "clojure.lang.PersistentVector" ((class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (28 (aastore)) 
                                      (29 (aload_3)) 
                                      (30 (areturn)) 
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap )))
                        (method "chunkedSeq"
                              (parameters )
                              (returntype . (class "clojure.lang.IChunkedSeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 1) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (4 (ifne 9))  ;;to TAG_0
                                      (7 (aconst_null)) 
                                      (8 (areturn)) 
                                      (9 (new (class "clojure.lang.PersistentVector$ChunkedSeq"))) ;;at TAG_0
                                      (12 (dup)) 
                                      (13 (aload_0)) 
                                      (14 (iconst_0)) 
                                      (15 (iconst_0)) 
                                      (16 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector$ChunkedSeq" ((class "clojure.lang.PersistentVector") int int) void))) 
                                      (19 (areturn)) 
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "seq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "chunkedSeq" "clojure.lang.PersistentVector" () (class "clojure.lang.IChunkedSeq"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "rangedIterator"
                              (parameters int int)
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 11)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentVector$1")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (iload_1))
                                      (6 (iload_2))
                                      (7 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentVector$1" ((class "clojure.lang.PersistentVector") int int) void)))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "iterator"
                              (parameters )
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iconst_0))
                                      (2 (aload_0))
                                      (3 (invokevirtual
					(methodCP "count" "clojure.lang.PersistentVector" () int)))
                                      (6 (invokevirtual
					(methodCP "rangedIterator" "clojure.lang.PersistentVector" (int int) (class "java.util.Iterator"))))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "kvreduce"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 7) (code_length . 92)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_3)) 
                                      (2 (iconst_0)) 
                                      (3 (istore 4)) 
                                      (5 (iload 4)) ;;at TAG_4
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (11 (if_icmpge 90)) ;;to TAG_0
                                      (14 (aload_0)) 
                                      (15 (iload 4)) 
                                      (17 (invokevirtual (methodCP "arrayFor" "clojure.lang.PersistentVector" (int) (array (class "java.lang.Object"))))) 
                                      (20 (astore 5)) 
                                      (22 (iconst_0)) 
                                      (23 (istore 6)) 
                                      (25 (iload 6)) ;;at TAG_3
                                      (27 (aload 5)) 
                                      (29 (arraylength)) 
                                      (30 (if_icmpge 77)) ;;to TAG_1
                                      (33 (aload_1)) 
                                      (34 (aload_2)) 
                                      (35 (iload 6)) 
                                      (37 (iload 4)) 
                                      (39 (iadd)) 
                                      (40 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (43 (aload 5)) 
                                      (45 (iload 6)) 
                                      (47 (aaload)) 
                                      (48 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (53 (astore_2)) 
                                      (54 (aload_2)) 
                                      (55 (invokestatic (methodCP "isReduced" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (58 (ifeq 71))  ;;to TAG_2
                                      (61 (aload_2)) 
                                      (62 (checkcast (class "clojure.lang.IDeref"))) 
                                      (65 (invokeinterface (methodCP "deref" "clojure.lang.IDeref" () (class "java.lang.Object")) 1)) 
                                      (70 (areturn)) 
                                      (71 (iinc 6 1)) ;;at TAG_2
                                      (74 (goto 25)) ;;to TAG_3
                                      (77 (aload 5)) ;;at TAG_1
                                      (79 (arraylength)) 
                                      (80 (istore_3)) 
                                      (81 (iload 4)) 
                                      (83 (iload_3)) 
                                      (84 (iadd)) 
                                      (85 (istore 4)) 
                                      (87 (goto 5)) ;;to TAG_4
                                      (90 (aload_2)) ;;at TAG_0
                                      (91 (areturn)) 
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "empty"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector"))))
                                      (3 (aload_0))
                                      (4 (invokevirtual
					(methodCP "meta" "clojure.lang.PersistentVector" () (class "clojure.lang.IPersistentMap"))))
                                      (7 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentVector" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentVector"))))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pop"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 4) (code_length . 187)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (4 (ifne 17)) ;;to TAG_0
                                      (7 (new (class "java.lang.IllegalStateException"))) 
                                      (10 (dup)) 
                                      (11 (ldc 0)) ;;STRING:: "Can\nt pop empty vector"
                                      (13 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (16 (athrow)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (21 (iconst_1)) 
                                      (22 (if_icmpne 36)) ;;to TAG_1
                                      (25 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (28 (aload_0)) 
                                      (29 (invokevirtual (methodCP "meta" "clojure.lang.PersistentVector" () (class "clojure.lang.IPersistentMap")))) 
                                      (32 (invokevirtual (methodCP "withMeta" "clojure.lang.PersistentVector" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentVector")))) 
                                      (35 (areturn)) 
                                      (36 (aload_0)) ;;at TAG_1
                                      (37 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (40 (aload_0)) 
                                      (41 (invokevirtual (methodCP "tailoff" "clojure.lang.PersistentVector" () int))) 
                                      (44 (isub)) 
                                      (45 (iconst_1)) 
                                      (46 (if_icmple 99))  ;;to TAG_2
                                      (49 (aload_0)) 
                                      (50 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object"))))) 
                                      (53 (arraylength)) 
                                      (54 (iconst_1)) 
                                      (55 (isub)) 
                                      (56 (anewarray (class "java.lang.Object"))) 
                                      (59 (astore_1)) 
                                      (60 (aload_0)) 
                                      (61 (getfield (fieldCP "tail" "clojure.lang.PersistentVector" (array (class "java.lang.Object"))))) 
                                      (64 (iconst_0)) 
                                      (65 (aload_1)) 
                                      (66 (iconst_0)) 
                                      (67 (aload_1)) 
                                      (68 (arraylength)) 
                                      (69 (invokestatic (methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void))) 
                                      (72 (new (class "clojure.lang.PersistentVector"))) 
                                      (75 (dup)) 
                                      (76 (aload_0)) 
                                      (77 (invokevirtual (methodCP "meta" "clojure.lang.PersistentVector" () (class "clojure.lang.IPersistentMap")))) 
                                      (80 (aload_0)) 
                                      (81 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (84 (iconst_1)) 
                                      (85 (isub)) 
                                      (86 (aload_0)) 
                                      (87 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (90 (aload_0)) 
                                      (91 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (94 (aload_1)) 
                                      (95 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector" ((class "clojure.lang.IPersistentMap") int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object"))) void))) 
                                      (98 (areturn)) 
                                      (99 (aload_0)) ;;at TAG_2
                                      (100 (aload_0)) 
                                      (101 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (104 (iconst_2)) 
                                      (105 (isub)) 
                                      (106 (invokevirtual (methodCP "arrayFor" "clojure.lang.PersistentVector" (int) (array (class "java.lang.Object"))))) 
                                      (109 (astore_1)) 
                                      (110 (aload_0)) 
                                      (111 (aload_0)) 
                                      (112 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (115 (aload_0)) 
                                      (116 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (119 (invokespecial (methodCP "popTail" "clojure.lang.PersistentVector" (int (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (122 (astore_2)) 
                                      (123 (aload_0)) 
                                      (124 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (127 (istore_3)) 
                                      (128 (aload_2)) 
                                      (129 (ifnonnull 136)) ;;to TAG_3
                                      (132 (getstatic (fieldCP "EMPTY_NODE" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (135 (astore_2)) 
                                      (136 (aload_0)) ;;at TAG_3
                                      (137 (getfield (fieldCP "shift" "clojure.lang.PersistentVector" int))) 
                                      (140 (iconst_5)) 
                                      (141 (if_icmple 166)) ;;to TAG_4
                                      (144 (aload_2)) 
                                      (145 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (148 (iconst_1)) 
                                      (149 (aaload)) 
                                      (150 (ifnonnull 166)) ;;to TAG_4
                                      (153 (aload_2)) 
                                      (154 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (157 (iconst_0)) 
                                      (158 (aaload)) 
                                      (159 (checkcast (class "clojure.lang.PersistentVector$Node"))) 
                                      (162 (astore_2)) 
                                      (163 (iinc 3 -5)) 
                                      (166 (new (class "clojure.lang.PersistentVector"))) ;;at TAG_4
                                      (169 (dup)) 
                                      (170 (aload_0)) 
                                      (171 (invokevirtual (methodCP "meta" "clojure.lang.PersistentVector" () (class "clojure.lang.IPersistentMap")))) 
                                      (174 (aload_0)) 
                                      (175 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (178 (iconst_1)) 
                                      (179 (isub)) 
                                      (180 (iload_3)) 
                                      (181 (aload_2)) 
                                      (182 (aload_1)) 
                                      (183 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector" ((class "clojure.lang.IPersistentMap") int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object"))) void))) 
                                      (186 (areturn)) 
                                      (endofcode 187))
                                   (Exceptions )
                                   (StackMap )))
                        (method "popTail"
                              (parameters int (class "clojure.lang.PersistentVector$Node"))
                              (returntype . (class "clojure.lang.PersistentVector$Node"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 127)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "cnt" "clojure.lang.PersistentVector" int))) 
                                      (4 (iconst_2)) 
                                      (5 (isub)) 
                                      (6 (iload_1)) 
                                      (7 (iushr)) 
                                      (8 (bipush 31)) 
                                      (10 (iand)) 
                                      (11 (istore_3)) 
                                      (12 (iload_1)) 
                                      (13 (iconst_5)) 
                                      (14 (if_icmple 84)) ;;to TAG_0
                                      (17 (aload_0)) 
                                      (18 (iload_1)) 
                                      (19 (iconst_5)) 
                                      (20 (isub)) 
                                      (21 (aload_2)) 
                                      (22 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (25 (iload_3)) 
                                      (26 (aaload)) 
                                      (27 (checkcast (class "clojure.lang.PersistentVector$Node"))) 
                                      (30 (invokespecial (methodCP "popTail" "clojure.lang.PersistentVector" (int (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node")))) 
                                      (33 (astore 4)) 
                                      (35 (aload 4)) 
                                      (37 (ifnonnull 46)) ;;to TAG_1
                                      (40 (iload_3)) 
                                      (41 (ifne 46)) ;;to TAG_1
                                      (44 (aconst_null)) 
                                      (45 (areturn)) 
                                      (46 (new (class "clojure.lang.PersistentVector$Node"))) ;;at TAG_1
                                      (49 (dup)) 
                                      (50 (aload_0)) 
                                      (51 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (54 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (57 (aload_2)) 
                                      (58 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (61 (invokevirtual (methodCP "clone" "java.lang.Object[]" () (class "java.lang.Object")))) 
                                      (64 (checkcast (array (class "java.lang.Object")))) 
                                      (67 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference") (array (class "java.lang.Object"))) void))) 
                                      (70 (astore 5)) 
                                      (72 (aload 5)) 
                                      (74 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (77 (iload_3)) 
                                      (78 (aload 4)) 
                                      (80 (aastore)) 
                                      (81 (aload 5)) 
                                      (83 (areturn)) 
                                      (84 (iload_3)) ;;at TAG_0
                                      (85 (ifne 90))  ;;to TAG_2
                                      (88 (aconst_null)) 
                                      (89 (areturn)) 
                                      (90 (new (class "clojure.lang.PersistentVector$Node"))) ;;at TAG_2
                                      (93 (dup)) 
                                      (94 (aload_0)) 
                                      (95 (getfield (fieldCP "root" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node")))) 
                                      (98 (getfield (fieldCP "edit" "clojure.lang.PersistentVector$Node" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (101 (aload_2)) 
                                      (102 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (105 (invokevirtual (methodCP "clone" "java.lang.Object[]" () (class "java.lang.Object")))) 
                                      (108 (checkcast (array (class "java.lang.Object")))) 
                                      (111 (invokespecial (methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference") (array (class "java.lang.Object"))) void))) 
                                      (114 (astore 4)) 
                                      (116 (aload 4)) 
                                      (118 (getfield (fieldCP "array" "clojure.lang.PersistentVector$Node" (array (class "java.lang.Object"))))) 
                                      (121 (iload_3)) 
                                      (122 (aconst_null)) 
                                      (123 (aastore)) 
                                      (124 (aload 4)) 
                                      (126 (areturn)) 
                                      (endofcode 127))
                                   (Exceptions )
                                   (StackMap )))
                        (method "cons"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentVector"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assocN"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentVector"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (aload_2))
                                      (3 (invokevirtual
					(methodCP "assocN" "clojure.lang.PersistentVector" (int (class "java.lang.Object")) (class "clojure.lang.PersistentVector"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "cons"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pop"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentStack"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "pop" "clojure.lang.PersistentVector" () (class "clojure.lang.PersistentVector"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentVector" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentVector"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "asTransient"
                              (parameters )
                              (returntype . (class "clojure.lang.ITransientCollection"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "asTransient" "clojure.lang.PersistentVector" () (class "clojure.lang.PersistentVector$TransientVector"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$000"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentVector$Node"))
                              (returntype . (class "clojure.lang.PersistentVector$Node"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (aload_2))
                                      (3 (invokestatic
					(methodCP "newPath" "clojure.lang.PersistentVector" ((class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentVector$Node")) (class "clojure.lang.PersistentVector$Node"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 0) (code_length . 49)
                                   (parsedcode
                                      (0 (new (class "java.util.concurrent.atomic.AtomicReference")))
                                      (3 (dup))
                                      (4 (aconst_null))
                                      (5 (invokespecial
					(methodCP "<init>" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object")) void)))
                                      (8 (putstatic (fieldCP "NOEDIT" "clojure.lang.PersistentVector" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (11 (new (class "clojure.lang.PersistentVector$Node")))
                                      (14 (dup))
                                      (15 (getstatic (fieldCP "NOEDIT" "clojure.lang.PersistentVector" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (18 (bipush 32))
                                      (20 (anewarray (class "java.lang.Object")))
                                      (23 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentVector$Node" ((class "java.util.concurrent.atomic.AtomicReference") (array (class "java.lang.Object"))) void)))
                                      (26 (putstatic (fieldCP "EMPTY_NODE" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node"))))
                                      (29 (new (class "clojure.lang.PersistentVector")))
                                      (32 (dup))
                                      (33 (iconst_0))
                                      (34 (iconst_5))
                                      (35 (getstatic (fieldCP "EMPTY_NODE" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector$Node"))))
                                      (38 (iconst_0))
                                      (39 (anewarray (class "java.lang.Object")))
                                      (42 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentVector" (int int (class "clojure.lang.PersistentVector$Node") (array (class "java.lang.Object"))) void)))
                                      (45 (putstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector"))))
                                      (48 (return))
                                      (endofcode 49))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IObj" "clojure.lang.IEditableCollection")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentVector-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentVector*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentVector" . "clojure.lang"))

