; Compiler-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.Compiler*
 (make-class-def
      '(class "clojure.lang.Compiler"
            "java.lang.Object"
            (constant_pool
                        (STRING  "compile__stub")
                        (INT 20)
                        (STRING  "More than one matching method found: ")
                        (STRING  "var: ")
                        (STRING  " is not public")
                        (STRING  "Malformed member expression, expecting (.member target ...)")
                        (STRING  "Can\nt call nil")
                        (STRING  "%s, compiling:(%s:%d:%d)")
                        (STRING  "def")
                        (STRING  "eval")
                        (STRING  "KEYWORD_CALLSITES is not bound")
                        (STRING  "PROTOCOL_CALLSITES is not bound")
                        (STRING  "VAR_CALLSITES is not bound")
                        (STRING  "Unable to find static field: ")
                        (STRING  " in ")
                        (STRING  "Can\nt take value of a macro: ")
                        (STRING  "Unable to resolve symbol: ")
                        (STRING  " in this context")
                        (STRING  "L")
                        (STRING  "No such namespace: ")
                        (STRING  "No such var: ")
                        (STRING  ".")
                        (STRING  "Expecting var, but ")
                        (STRING  " is mapped to ")
                        (STRING  "NO_SOURCE_FILE")
                        (STRING  "*compile-path* not set")
                        (STRING  "/")
                        (STRING  ".class")
                        (STRING  "clojure.core")
                        (STRING  "*ns*")
                        (STRING  "__init")
                        (STRING  "java/lang/Object")
                        (STRING  "void load ()")
                        (STRING  "void __init")
                        (STRING  "()")
                        (STRING  "void <clinit> ()")
                        (STRING  "Class forName(String)")
                        (STRING  "ClassLoader getClassLoader()")
                        (STRING  "void pushNSandLoader(ClassLoader)")
                        (STRING  "void load()")
                        (STRING  "void popThreadBindings()")
                        (STRING  "int")
                        (STRING  "long")
                        (STRING  "float")
                        (STRING  "double")
                        (STRING  "char")
                        (STRING  "short")
                        (STRING  "byte")
                        (STRING  "boolean")
                        (STRING  "void")
                        (STRING  "loop*")
                        (STRING  "recur")
                        (STRING  "if")
                        (STRING  "let*")
                        (STRING  "letfn*")
                        (STRING  "do")
                        (STRING  "fn*")
                        (STRING  "once")
                        (STRING  "quote")
                        (STRING  "var")
                        (STRING  "set!")
                        (STRING  "try")
                        (STRING  "catch")
                        (STRING  "finally")
                        (STRING  "throw")
                        (STRING  "monitor-enter")
                        (STRING  "monitor-exit")
                        (STRING  "import*")
                        (STRING  "deftype*")
                        (STRING  "case*")
                        (STRING  "Class")
                        (STRING  "new")
                        (STRING  "this")
                        (STRING  "reify*")
                        (STRING  "list")
                        (STRING  "hash-map")
                        (STRING  "vector")
                        (STRING  "identity")
                        (STRING  "&")
                        (STRING  "clojure.lang.ISeq")
                        (STRING  "inline")
                        (STRING  "inline-arities")
                        (STRING  "static")
                        (STRING  "arglists")
                        (STRING  "invokeStatic")
                        (STRING  "volatile")
                        (STRING  "implements")
                        (STRING  "protocol")
                        (STRING  "on")
                        (STRING  "dynamic")
                        (STRING  "ns")
                        (STRING  "in-ns")
                        (STRING  "[Ljava/lang/Object;")
                        (STRING  "*source-path*")
                        (STRING  "*file*")
                        (STRING  "NO_SOURCE_PATH")
                        (STRING  "*compile-path*")
                        (STRING  "*compile-files*")
                        (STRING  "instance?")
                        (STRING  "add-annotations")
                        (STRING  "disable-locals-clearing")
                        (STRING  "elide-meta")
                        (STRING  "*compiler-options*")
                        (STRING  "_")
                        (STRING  "_COLON_")
                        (STRING  "_PLUS_")
                        (STRING  "_GT_")
                        (STRING  "_LT_")
                        (STRING  "_EQ_")
                        (STRING  "_TILDE_")
                        (STRING  "_BANG_")
                        (STRING  "_CIRCA_")
                        (STRING  "_SHARP_")
                        (STRING  "_SINGLEQUOTE_")
                        (STRING  "_DOUBLEQUOTE_")
                        (STRING  "_PERCENT_")
                        (STRING  "_CARET_")
                        (STRING  "_AMPERSAND_")
                        (STRING  "_STAR_")
                        (STRING  "_BAR_")
                        (STRING  "_LBRACE_")
                        (STRING  "_RBRACE_")
                        (STRING  "_LBRACK_")
                        (STRING  "_RBRACK_")
                        (STRING  "_SLASH_")
                        (STRING  "_BSLASH_")
                        (STRING  "_QMARK_"))
            (fields
                        (field "DEF" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "LOOP" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "RECUR" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "IF" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "LET" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "LETFN" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "DO" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "FN" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "FNONCE" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "QUOTE" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "THE_VAR" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "DOT" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "ASSIGN" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "TRY" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "CATCH" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "FINALLY" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "THROW" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "MONITOR_ENTER" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "MONITOR_EXIT" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "IMPORT" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "DEFTYPE" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "CASE" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "CLASS" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "NEW" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "THIS" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "REIFY" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "LIST" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "HASHMAP" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "VECTOR" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "IDENTITY" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "_AMP_" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "ISEQ" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "inlineKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "inlineAritiesKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "staticKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "arglistsKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "INVOKE_STATIC" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "volatileKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "implementsKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "COMPILE_STUB_PREFIX" (class "java.lang.String") (accessflags  *class*  *final*  *static* ) 0)
                        (field "protocolKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "onKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "dynamicKey" (class "clojure.lang.Keyword") (accessflags  *class*  *static* ) -1)
                        (field "NS" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "IN_NS" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "specials" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "MAX_POSITIONAL_ARITY" int (accessflags  *class*  *final*  *private*  *static* ) 1)
                        (field "OBJECT_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "KEYWORD_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "VAR_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "SYMBOL_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "IFN_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "AFUNCTION_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "RT_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "NUMBERS_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "CLASS_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "NS_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "UTIL_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "REFLECTOR_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "THROWABLE_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "BOOLEAN_OBJECT_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "IPERSISTENTMAP_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "IOBJ_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "ARG_TYPES" (array (array (class "clojure.asm.Type"))) (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "EXCEPTION_TYPES" (array (class "clojure.asm.Type")) (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "LOCAL_ENV" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "LOOP_LOCALS" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "LOOP_LABEL" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "CONSTANTS" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "CONSTANT_IDS" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "KEYWORD_CALLSITES" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "PROTOCOL_CALLSITES" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "VAR_CALLSITES" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "KEYWORDS" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "VARS" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "METHOD" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "IN_CATCH_FINALLY" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "NO_RECUR" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "LOADER" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "SOURCE" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "SOURCE_PATH" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "COMPILE_PATH" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "COMPILE_FILES" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "INSTANCE" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "ADD_ANNOTATIONS" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "disableLocalsClearingKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "elideMetaKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "COMPILER_OPTIONS" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "LINE" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "COLUMN" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "LINE_BEFORE" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "COLUMN_BEFORE" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "LINE_AFTER" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "COLUMN_AFTER" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "NEXT_LOCAL_NUM" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "RET_LOCAL_NUM" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "COMPILE_STUB_SYM" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "COMPILE_STUB_CLASS" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "CLEAR_PATH" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "CLEAR_ROOT" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "CLEAR_SITES" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "RECUR_CLASS" (class "java.lang.Class") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "NIL_EXPR" (class "clojure.lang.Compiler$NilExpr") (accessflags  *class*  *final*  *static* ) -1)
                        (field "TRUE_EXPR" (class "clojure.lang.Compiler$BooleanExpr") (accessflags  *class*  *final*  *static* ) -1)
                        (field "FALSE_EXPR" (class "clojure.lang.Compiler$BooleanExpr") (accessflags  *class*  *final*  *static* ) -1)
                        (field "CHAR_MAP" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getCompilerOption"
                              (parameters (class "clojure.lang.Keyword"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "COMPILER_OPTIONS" "clojure.lang.Compiler" (class "clojure.lang.Var"))))
                                      (3 (invokevirtual
					(methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (6 (aload_0))
                                      (7 (invokestatic
					(methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object"))))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "elideMeta"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 48)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "elideMetaKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (3 (invokestatic (methodCP "getCompilerOption" "clojure.lang.Compiler" ((class "clojure.lang.Keyword")) (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.util.Collection"))) 
                                      (9 (astore_1)) 
                                      (10 (aload_1)) 
                                      (11 (ifnull 46))  ;;to TAG_0
                                      (14 (aload_1)) 
                                      (15 (invokeinterface (methodCP "iterator" "java.util.Collection" () (class "java.util.Iterator")) 1)) 
                                      (20 (astore_2)) 
                                      (21 (aload_2)) ;;at TAG_1
                                      (22 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (27 (ifeq 46))  ;;to TAG_0
                                      (30 (aload_2)) 
                                      (31 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (36 (astore_3)) 
                                      (37 (aload_0)) 
                                      (38 (aload_3)) 
                                      (39 (invokestatic (methodCP "dissoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (42 (astore_0)) 
                                      (43 (goto 21)) ;;to TAG_1
                                      (46 (aload_0)) ;;at TAG_0
                                      (47 (areturn)) 
                                      (endofcode 48))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isSpecial"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "specials" "clojure.lang.Compiler" (class "clojure.lang.IPersistentMap"))))
                                      (3 (aload_0))
                                      (4 (invokeinterface
					(methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2))
                                      (9 (ireturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "resolveSymbol"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "clojure.lang.Symbol"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 144)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (4 (bipush 46)) 
                                      (6 (invokevirtual (methodCP "indexOf" "java.lang.String" (int) int))) 
                                      (9 (ifle 14)) ;;to TAG_0
                                      (12 (aload_0)) 
                                      (13 (areturn)) 
                                      (14 (aload_0)) ;;at TAG_0
                                      (15 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (18 (ifnull 61)) ;;to TAG_1
                                      (21 (aload_0)) 
                                      (22 (invokestatic (methodCP "namespaceFor" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (25 (astore_1)) 
                                      (26 (aload_1)) 
                                      (27 (ifnull 44))  ;;to TAG_2
                                      (30 (aload_1)) 
                                      (31 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (34 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (37 (aload_0)) 
                                      (38 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (41 (if_acmpne 46)) ;;to TAG_3
                                      (44 (aload_0)) ;;at TAG_2
                                      (45 (areturn)) 
                                      (46 (aload_1)) ;;at TAG_3
                                      (47 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (50 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (53 (aload_0)) 
                                      (54 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (57 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (60 (areturn)) 
                                      (61 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) ;;at TAG_1
                                      (64 (aload_0)) 
                                      (65 (invokevirtual (methodCP "getMapping" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "java.lang.Object")))) 
                                      (68 (astore_1)) 
                                      (69 (aload_1)) 
                                      (70 (ifnonnull 90)) ;;to TAG_4
                                      (73 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) 
                                      (76 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (79 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (82 (aload_0)) 
                                      (83 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (86 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (89 (areturn)) 
                                      (90 (aload_1)) ;;at TAG_4
                                      (91 (instanceof (class "java.lang.Class"))) 
                                      (94 (ifeq 109)) ;;to TAG_5
                                      (97 (aconst_null)) 
                                      (98 (aload_1)) 
                                      (99 (checkcast (class "java.lang.Class"))) 
                                      (102 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (105 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (108 (areturn)) 
                                      (109 (aload_1)) ;;at TAG_5
                                      (110 (instanceof (class "clojure.lang.Var"))) 
                                      (113 (ifeq 142)) ;;to TAG_6
                                      (116 (aload_1)) 
                                      (117 (checkcast (class "clojure.lang.Var"))) 
                                      (120 (astore_2)) 
                                      (121 (aload_2)) 
                                      (122 (getfield (fieldCP "ns" "clojure.lang.Var" (class "clojure.lang.Namespace")))) 
                                      (125 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (128 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (131 (aload_2)) 
                                      (132 (getfield (fieldCP "sym" "clojure.lang.Var" (class "clojure.lang.Symbol")))) 
                                      (135 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (138 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (141 (areturn)) 
                                      (142 (aconst_null)) ;;at TAG_6
                                      (143 (areturn)) 
                                      (endofcode 144))
                                   (Exceptions )
                                   (StackMap )))
                        (method "maybePrimitiveType"
                              (parameters (class "clojure.lang.Compiler$Expr"))
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 55)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_2
                                      (1 (instanceof (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (4 (ifeq 44)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (invokeinterface (methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1)) 
                                      (13 (ifeq 44)) ;;to TAG_0
                                      (16 (aload_0)) 
                                      (17 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (20 (invokeinterface (methodCP "canEmitPrimitive" "clojure.lang.Compiler$MaybePrimitiveExpr" () boolean) 1)) 
                                      (25 (ifeq 44)) ;;to TAG_0
                                      (28 (aload_0)) 
                                      (29 (invokeinterface (methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1)) 
                                      (34 (astore_1)) 
                                      (35 (aload_1)) 
                                      (36 (invokestatic (methodCP "isPrimitive" "clojure.lang.Util" ((class "java.lang.Class")) boolean))) 
                                      (39 (ifeq 44)) ;;to TAG_0
                                      (42 (aload_1)) 
                                      (43 (areturn)) ;;at TAG_3
                                      (44 (goto 53)) ;;to TAG_1;;at TAG_0
                                      (47 (astore_1)) ;;at TAG_4
                                      (48 (aload_1)) 
                                      (49 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (52 (athrow)) 
                                      (53 (aconst_null)) ;;at TAG_1
                                      (54 (areturn)) 
                                      (endofcode 55))
                                   (Exceptions 
                                     (handler 0 43  47 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "maybeJavaClass"
                              (parameters (class "java.util.Collection"))
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 86)
                                   (parsedcode
                                      (0 (aconst_null)) 
                                      (1 (astore_1)) 
                                      (2 (aload_0)) ;;at TAG_7
                                      (3 (invokeinterface (methodCP "iterator" "java.util.Collection" () (class "java.util.Iterator")) 1)) 
                                      (8 (astore_2)) 
                                      (9 (aload_2)) ;;at TAG_2
                                      (10 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (15 (ifeq 78)) ;;to TAG_0
                                      (18 (aload_2)) 
                                      (19 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (24 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (27 (astore_3)) 
                                      (28 (aload_3)) 
                                      (29 (instanceof (class "clojure.lang.Compiler$ThrowExpr"))) 
                                      (32 (ifeq 38))  ;;to TAG_1
                                      (35 (goto 9)) ;;to TAG_2
                                      (38 (aload_3)) ;;at TAG_1
                                      (39 (invokeinterface (methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1)) 
                                      (44 (ifne 49)) ;;to TAG_3
                                      (47 (aconst_null)) 
                                      (48 (areturn)) ;;at TAG_8
                                      (49 (aload_3)) ;;at TAG_3
                                      (50 (invokeinterface (methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1)) 
                                      (55 (astore 4)) 
                                      (57 (aload_1)) 
                                      (58 (ifnonnull 67)) ;;to TAG_4
                                      (61 (aload 4)) 
                                      (63 (astore_1)) 
                                      (64 (goto 75)) ;;to TAG_5
                                      (67 (aload_1)) ;;at TAG_4
                                      (68 (aload 4)) 
                                      (70 (if_acmpeq 75)) ;;to TAG_5
                                      (73 (aconst_null)) 
                                      (74 (areturn)) ;;at TAG_10
                                      (75 (goto 9)) ;;to TAG_2;;at TAG_5
                                      (78 (goto 84)) ;;to TAG_6;;at TAG_0
                                      (81 (astore_2)) ;;at TAG_9
                                      (82 (aconst_null)) 
                                      (83 (areturn)) 
                                      (84 (aload_1)) ;;at TAG_6
                                      (85 (areturn)) 
                                      (endofcode 86))
                                   (Exceptions 
                                     (handler 2 48  81 (class "java.lang.Exception"))
                                     (handler 49 74  81 (class "java.lang.Exception"))
                                     (handler 75 78  81 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "subsumes"
                              (parameters (array (class "java.lang.Class")) (array (class "java.lang.Class")))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 73)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (invokestatic (methodCP "valueOf" "java.lang.Boolean" (boolean) (class "java.lang.Boolean")))) 
                                      (4 (astore_2)) 
                                      (5 (iconst_0)) 
                                      (6 (istore_3)) 
                                      (7 (iload_3)) ;;at TAG_5
                                      (8 (aload_0)) 
                                      (9 (arraylength)) 
                                      (10 (if_icmpge 68)) ;;to TAG_0
                                      (13 (aload_0)) 
                                      (14 (iload_3)) 
                                      (15 (aaload)) 
                                      (16 (aload_1)) 
                                      (17 (iload_3)) 
                                      (18 (aaload)) 
                                      (19 (if_acmpeq 62)) ;;to TAG_1
                                      (22 (aload_0)) 
                                      (23 (iload_3)) 
                                      (24 (aaload)) 
                                      (25 (invokevirtual (methodCP "isPrimitive" "java.lang.Class" () boolean))) 
                                      (28 (ifne 40))  ;;to TAG_2
                                      (31 (aload_1)) 
                                      (32 (iload_3)) 
                                      (33 (aaload)) 
                                      (34 (invokevirtual (methodCP "isPrimitive" "java.lang.Class" () boolean))) 
                                      (37 (ifne 52)) ;;to TAG_3
                                      (40 (aload_1)) ;;at TAG_2
                                      (41 (iload_3)) 
                                      (42 (aaload)) 
                                      (43 (aload_0)) 
                                      (44 (iload_3)) 
                                      (45 (aaload)) 
                                      (46 (invokevirtual (methodCP "isAssignableFrom" "java.lang.Class" ((class "java.lang.Class")) boolean))) 
                                      (49 (ifeq 60)) ;;to TAG_4
                                      (52 (iconst_1)) ;;at TAG_3
                                      (53 (invokestatic (methodCP "valueOf" "java.lang.Boolean" (boolean) (class "java.lang.Boolean")))) 
                                      (56 (astore_2)) 
                                      (57 (goto 62)) ;;to TAG_1
                                      (60 (iconst_0)) ;;at TAG_4
                                      (61 (ireturn)) 
                                      (62 (iinc 3 1)) ;;at TAG_1
                                      (65 (goto 7)) ;;to TAG_5
                                      (68 (aload_2)) ;;at TAG_0
                                      (69 (invokevirtual (methodCP "booleanValue" "java.lang.Boolean" () boolean))) 
                                      (72 (ireturn)) 
                                      (endofcode 73))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getMatchingParams"
                              (parameters (class "java.lang.String") (class "java.util.ArrayList") (class "clojure.lang.IPersistentVector") (class "java.util.List"))
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 15) (code_length . 404)
                                   (parsedcode
                                      (0 (iconst_m1)) 
                                      (1 (istore 4)) 
                                      (3 (iconst_0)) 
                                      (4 (istore 5)) 
                                      (6 (iconst_0)) 
                                      (7 (istore 6)) 
                                      (9 (iconst_0)) 
                                      (10 (istore 7)) 
                                      (12 (iload 7)) ;;at TAG_14
                                      (14 (aload_1)) 
                                      (15 (invokevirtual (methodCP "size" "java.util.ArrayList" () int))) 
                                      (18 (if_icmpge 369)) ;;to TAG_0
                                      (21 (iconst_1)) 
                                      (22 (istore 8)) 
                                      (24 (aload_2)) 
                                      (25 (invokeinterface (methodCP "seq" "clojure.lang.IPersistentVector" () (class "clojure.lang.ISeq")) 1)) 
                                      (30 (astore 9)) 
                                      (32 (iconst_0)) 
                                      (33 (istore 10)) 
                                      (35 (iconst_0)) 
                                      (36 (istore 11)) 
                                      (38 (iload 8)) ;;at TAG_6
                                      (40 (ifeq 157))  ;;to TAG_1
                                      (43 (iload 11)) 
                                      (45 (aload_2)) 
                                      (46 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (51 (if_icmpge 157))  ;;to TAG_1
                                      (54 (aload 9)) 
                                      (56 (ifnull 157))  ;;to TAG_1
                                      (59 (aload 9)) 
                                      (61 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (66 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (69 (astore 12)) 
                                      (71 (aload 12)) 
                                      (73 (invokeinterface (methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1)) 
                                      (78 (ifeq 91)) ;;to TAG_2
                                      (81 (aload 12)) 
                                      (83 (invokeinterface (methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1)) 
                                      (88 (goto 94)) ;;to TAG_3
                                      (91 (ldc_w )) ;;at TAG_2
                                      (94 (astore 13)) ;;at TAG_3
                                      (96 (aload_1)) 
                                      (97 (iload 7)) 
                                      (99 (invokevirtual (methodCP "get" "java.util.ArrayList" (int) (class "java.lang.Object")))) 
                                      (102 (checkcast (array (class "java.lang.Class")))) 
                                      (105 (iload 11)) 
                                      (107 (aaload)) 
                                      (108 (astore 14)) 
                                      (110 (aload 12)) 
                                      (112 (invokeinterface (methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1)) 
                                      (117 (ifeq 133)) ;;to TAG_4
                                      (120 (aload 13)) 
                                      (122 (aload 14)) 
                                      (124 (if_acmpne 133)) ;;to TAG_4
                                      (127 (iinc 10 1)) 
                                      (130 (goto 142)) ;;to TAG_5
                                      (133 (aload 14)) ;;at TAG_4
                                      (135 (aload 13)) 
                                      (137 (invokestatic (methodCP "paramArgTypeMatch" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.Class")) boolean))) 
                                      (140 (istore 8)) 
                                      (142 (iinc 11 1)) ;;at TAG_5
                                      (145 (aload 9)) 
                                      (147 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (152 (astore 9)) 
                                      (154 (goto 38)) ;;to TAG_6
                                      (157 (iload 10)) ;;at TAG_1
                                      (159 (aload_2)) 
                                      (160 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (165 (if_icmpne 220)) ;;to TAG_7
                                      (168 (iload 6)) 
                                      (170 (ifeq 207)) ;;to TAG_8
                                      (173 (iload 4)) 
                                      (175 (iconst_m1)) 
                                      (176 (if_icmpeq 207)) ;;to TAG_8
                                      (179 (aload_3)) 
                                      (180 (iload 4)) 
                                      (182 (invokeinterface (methodCP "get" "java.util.List" (int) (class "java.lang.Object")) 2)) 
                                      (187 (checkcast (class "java.lang.Class"))) 
                                      (190 (aload_3)) 
                                      (191 (iload 7)) 
                                      (193 (invokeinterface (methodCP "get" "java.util.List" (int) (class "java.lang.Object")) 2)) 
                                      (198 (checkcast (class "java.lang.Class"))) 
                                      (201 (invokevirtual (methodCP "isAssignableFrom" "java.lang.Class" ((class "java.lang.Class")) boolean))) 
                                      (204 (ifeq 211)) ;;to TAG_9
                                      (207 (iload 7)) ;;at TAG_8
                                      (209 (istore 4)) 
                                      (211 (iconst_0)) ;;at TAG_9
                                      (212 (istore 5)) 
                                      (214 (iconst_1)) 
                                      (215 (istore 6)) 
                                      (217 (goto 363)) ;;to TAG_10
                                      (220 (iload 8)) ;;at TAG_7
                                      (222 (ifeq 363)) ;;to TAG_10
                                      (225 (iload 6)) 
                                      (227 (ifne 363)) ;;to TAG_10
                                      (230 (iload 4)) 
                                      (232 (iconst_m1)) 
                                      (233 (if_icmpne 243)) ;;to TAG_11
                                      (236 (iload 7)) 
                                      (238 (istore 4)) 
                                      (240 (goto 363)) ;;to TAG_10
                                      (243 (aload_1)) ;;at TAG_11
                                      (244 (iload 7)) 
                                      (246 (invokevirtual (methodCP "get" "java.util.ArrayList" (int) (class "java.lang.Object")))) 
                                      (249 (checkcast (array (class "java.lang.Class")))) 
                                      (252 (aload_1)) 
                                      (253 (iload 4)) 
                                      (255 (invokevirtual (methodCP "get" "java.util.ArrayList" (int) (class "java.lang.Object")))) 
                                      (258 (checkcast (array (class "java.lang.Class")))) 
                                      (261 (invokestatic (methodCP "subsumes" "clojure.lang.Compiler" ((array (class "java.lang.Class")) (array (class "java.lang.Class"))) boolean))) 
                                      (264 (ifeq 277)) ;;to TAG_12
                                      (267 (iload 7)) 
                                      (269 (istore 4)) 
                                      (271 (iconst_0)) 
                                      (272 (istore 5)) 
                                      (274 (goto 363)) ;;to TAG_10
                                      (277 (aload_1)) ;;at TAG_12
                                      (278 (iload 4)) 
                                      (280 (invokevirtual (methodCP "get" "java.util.ArrayList" (int) (class "java.lang.Object")))) 
                                      (283 (checkcast (array (class "java.lang.Object")))) 
                                      (286 (aload_1)) 
                                      (287 (iload 7)) 
                                      (289 (invokevirtual (methodCP "get" "java.util.ArrayList" (int) (class "java.lang.Object")))) 
                                      (292 (checkcast (array (class "java.lang.Object")))) 
                                      (295 (invokestatic (methodCP "equals" "java.util.Arrays" ((array (class "java.lang.Object")) (array (class "java.lang.Object"))) boolean))) 
                                      (298 (ifeq 336)) ;;to TAG_13
                                      (301 (aload_3)) 
                                      (302 (iload 4)) 
                                      (304 (invokeinterface (methodCP "get" "java.util.List" (int) (class "java.lang.Object")) 2)) 
                                      (309 (checkcast (class "java.lang.Class"))) 
                                      (312 (aload_3)) 
                                      (313 (iload 7)) 
                                      (315 (invokeinterface (methodCP "get" "java.util.List" (int) (class "java.lang.Object")) 2)) 
                                      (320 (checkcast (class "java.lang.Class"))) 
                                      (323 (invokevirtual (methodCP "isAssignableFrom" "java.lang.Class" ((class "java.lang.Class")) boolean))) 
                                      (326 (ifeq 363)) ;;to TAG_10
                                      (329 (iload 7)) 
                                      (331 (istore 4)) 
                                      (333 (goto 363)) ;;to TAG_10
                                      (336 (aload_1)) ;;at TAG_13
                                      (337 (iload 4)) 
                                      (339 (invokevirtual (methodCP "get" "java.util.ArrayList" (int) (class "java.lang.Object")))) 
                                      (342 (checkcast (array (class "java.lang.Class")))) 
                                      (345 (aload_1)) 
                                      (346 (iload 7)) 
                                      (348 (invokevirtual (methodCP "get" "java.util.ArrayList" (int) (class "java.lang.Object")))) 
                                      (351 (checkcast (array (class "java.lang.Class")))) 
                                      (354 (invokestatic (methodCP "subsumes" "clojure.lang.Compiler" ((array (class "java.lang.Class")) (array (class "java.lang.Class"))) boolean))) 
                                      (357 (ifne 363)) ;;to TAG_10
                                      (360 (iconst_1)) 
                                      (361 (istore 5)) 
                                      (363 (iinc 7 1)) ;;at TAG_10
                                      (366 (goto 12)) ;;to TAG_14
                                      (369 (iload 5)) ;;at TAG_0
                                      (371 (ifeq 401)) ;;to TAG_15
                                      (374 (new (class "java.lang.IllegalArgumentException"))) 
                                      (377 (dup)) 
                                      (378 (new (class "java.lang.StringBuilder"))) 
                                      (381 (dup)) 
                                      (382 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (385 (ldc 2)) ;;STRING:: "More than one matching method found: "
                                      (387 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (390 (aload_0)) 
                                      (391 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (394 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (397 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (400 (athrow)) 
                                      (401 (iload 4)) ;;at TAG_15
                                      (403 (ireturn)) 
                                      (endofcode 404))
                                   (Exceptions )
                                   (StackMap )))
                        (method "munge"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 7) (code_length . 82)
                                   (parsedcode
                                      (0 (new (class "java.lang.StringBuilder"))) 
                                      (3 (dup)) 
                                      (4 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (7 (astore_1)) 
                                      (8 (aload_0)) 
                                      (9 (invokevirtual (methodCP "toCharArray" "java.lang.String" () (array char)))) 
                                      (12 (astore_2)) 
                                      (13 (aload_2)) 
                                      (14 (arraylength)) 
                                      (15 (istore_3)) 
                                      (16 (iconst_0)) 
                                      (17 (istore 4)) 
                                      (19 (iload 4)) ;;at TAG_3
                                      (21 (iload_3)) 
                                      (22 (if_icmpge 77)) ;;to TAG_0
                                      (25 (aload_2)) 
                                      (26 (iload 4)) 
                                      (28 (caload)) 
                                      (29 (istore 5)) 
                                      (31 (getstatic (fieldCP "CHAR_MAP" "clojure.lang.Compiler" (class "clojure.lang.IPersistentMap")))) 
                                      (34 (iload 5)) 
                                      (36 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (39 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (44 (checkcast (class "java.lang.String"))) 
                                      (47 (astore 6)) 
                                      (49 (aload 6)) 
                                      (51 (ifnull 64)) ;;to TAG_1
                                      (54 (aload_1)) 
                                      (55 (aload 6)) 
                                      (57 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (60 (pop)) 
                                      (61 (goto 71))  ;;to TAG_2
                                      (64 (aload_1)) ;;at TAG_1
                                      (65 (iload 5)) 
                                      (67 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (70 (pop)) 
                                      (71 (iinc 4 1)) ;;at TAG_2
                                      (74 (goto 19)) ;;to TAG_3
                                      (77 (aload_1)) ;;at TAG_0
                                      (78 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (81 (areturn)) 
                                      (endofcode 82))
                                   (Exceptions )
                                   (StackMap )))
                        (method "clearPathRoot"
                              (parameters )
                              (returntype . (class "clojure.lang.Compiler$PathNode"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 10)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "CLEAR_ROOT" "clojure.lang.Compiler" (class "clojure.lang.Var"))))
                                      (3 (invokevirtual
					(methodCP "get" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (6 (checkcast (class "clojure.lang.Compiler$PathNode")))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "registerLocal"
                              (parameters (class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") boolean)
                              (returntype . (class "clojure.lang.Compiler$LocalBinding"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 8) (max_locals . 8) (code_length . 110)
                                   (parsedcode
                                      (0 (invokestatic
					(methodCP "getAndIncLocalNum" "clojure.lang.Compiler" () int)))
                                      (3 (istore 4))
                                      (5 (new (class "clojure.lang.Compiler$LocalBinding")))
                                      (8 (dup))
                                      (9 (iload 4))
                                      (11 (aload_0))
                                      (12 (aload_1))
                                      (13 (aload_2))
                                      (14 (iload_3))
                                      (15 (invokestatic
					(methodCP "clearPathRoot" "clojure.lang.Compiler" () (class "clojure.lang.Compiler$PathNode"))))
                                      (18 (invokespecial
					(methodCP "<init>" "clojure.lang.Compiler$LocalBinding" (int (class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") boolean (class "clojure.lang.Compiler$PathNode")) void)))
                                      (21 (astore 5))
                                      (23 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var"))))
                                      (26 (invokevirtual
					(methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (29 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (32 (astore 6))
                                      (34 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var"))))
                                      (37 (aload 6))
                                      (39 (aload 5))
                                      (41 (getfield (fieldCP "sym" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Symbol"))))
                                      (44 (aload 5))
                                      (46 (invokestatic
					(methodCP "assoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative"))))
                                      (49 (invokevirtual
					(methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object"))))
                                      (52 (pop))
                                      (53 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var"))))
                                      (56 (invokevirtual
					(methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (59 (checkcast (class "clojure.lang.Compiler$ObjMethod")))
                                      (62 (astore 7))
                                      (64 (aload 7))
                                      (66 (aload 7))
                                      (68 (getfield (fieldCP "locals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.IPersistentMap"))))
                                      (71 (aload 5))
                                      (73 (aload 5))
                                      (75 (invokestatic
					(methodCP "assoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative"))))
                                      (78 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (81 (putfield (fieldCP "locals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.IPersistentMap"))))
                                      (84 (aload 7))
                                      (86 (aload 7))
                                      (88 (getfield (fieldCP "indexlocals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.IPersistentMap"))))
                                      (91 (iload 4))
                                      (93 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (96 (aload 5))
                                      (98 (invokestatic
					(methodCP "assoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative"))))
                                      (101 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (104 (putfield (fieldCP "indexlocals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.IPersistentMap"))))
                                      (107 (aload 5))
                                      (109 (areturn))
                                      (endofcode 110))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getAndIncLocalNum"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 51)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "NEXT_LOCAL_NUM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.lang.Number"))) 
                                      (9 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (12 (istore_0)) 
                                      (13 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (16 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (19 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (22 (astore_1)) 
                                      (23 (iload_0)) 
                                      (24 (aload_1)) 
                                      (25 (getfield (fieldCP "maxLocal" "clojure.lang.Compiler$ObjMethod" int))) 
                                      (28 (if_icmple 36))  ;;to TAG_0
                                      (31 (aload_1)) 
                                      (32 (iload_0)) 
                                      (33 (putfield (fieldCP "maxLocal" "clojure.lang.Compiler$ObjMethod" int))) 
                                      (36 (getstatic (fieldCP "NEXT_LOCAL_NUM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (39 (iload_0)) 
                                      (40 (iconst_1)) 
                                      (41 (iadd)) 
                                      (42 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (45 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (48 (pop)) 
                                      (49 (iload_0)) 
                                      (50 (ireturn)) 
                                      (endofcode 51))
                                   (Exceptions )
                                   (StackMap )))
                        (method "analyze"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aconst_null))
                                      (3 (invokestatic
					(methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object") (class "java.lang.String")) (class "clojure.lang.Compiler$Expr"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "analyze"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object") (class "java.lang.String"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 5) (code_length . 359)
                                   (parsedcode
                                      (0 (aload_1)) ;;at TAG_19
                                      (1 (instanceof (class "clojure.lang.LazySeq"))) 
                                      (4 (ifeq 20))  ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (11 (astore_1)) 
                                      (12 (aload_1)) 
                                      (13 (ifnonnull 20))  ;;to TAG_0
                                      (16 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentList" (class "clojure.lang.PersistentList$EmptyList")))) 
                                      (19 (astore_1)) 
                                      (20 (aload_1)) ;;at TAG_0
                                      (21 (ifnonnull 28)) ;;to TAG_1
                                      (24 (getstatic (fieldCP "NIL_EXPR" "clojure.lang.Compiler" (class "clojure.lang.Compiler$NilExpr")))) 
                                      (27 (areturn)) ;;at TAG_20
                                      (28 (aload_1)) ;;at TAG_1
                                      (29 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (32 (if_acmpne 39)) ;;to TAG_2
                                      (35 (getstatic (fieldCP "TRUE_EXPR" "clojure.lang.Compiler" (class "clojure.lang.Compiler$BooleanExpr")))) 
                                      (38 (areturn)) ;;at TAG_22
                                      (39 (aload_1)) ;;at TAG_2
                                      (40 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (43 (if_acmpne 50)) ;;to TAG_3
                                      (46 (getstatic (fieldCP "FALSE_EXPR" "clojure.lang.Compiler" (class "clojure.lang.Compiler$BooleanExpr")))) 
                                      (49 (areturn)) ;;at TAG_23
                                      (50 (aload_1)) ;;at TAG_3
                                      (51 (invokevirtual (methodCP "getClass" "java.lang.Object" () (class "java.lang.Class")))) 
                                      (54 (astore_3)) 
                                      (55 (aload_3)) 
                                      (56 (ldc_w )) 
                                      (59 (if_acmpne 70)) ;;to TAG_4
                                      (62 (aload_1)) 
                                      (63 (checkcast (class "clojure.lang.Symbol"))) 
                                      (66 (invokestatic (methodCP "analyzeSymbol" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "clojure.lang.Compiler$Expr")))) 
                                      (69 (areturn)) ;;at TAG_24
                                      (70 (aload_3)) ;;at TAG_4
                                      (71 (ldc_w )) 
                                      (74 (if_acmpne 85)) ;;to TAG_5
                                      (77 (aload_1)) 
                                      (78 (checkcast (class "clojure.lang.Keyword"))) 
                                      (81 (invokestatic (methodCP "registerKeyword" "clojure.lang.Compiler" ((class "clojure.lang.Keyword")) (class "clojure.lang.Compiler$KeywordExpr")))) 
                                      (84 (areturn)) ;;at TAG_25
                                      (85 (aload_1)) ;;at TAG_5
                                      (86 (instanceof (class "java.lang.Number"))) 
                                      (89 (ifeq 100)) ;;to TAG_6
                                      (92 (aload_1)) 
                                      (93 (checkcast (class "java.lang.Number"))) 
                                      (96 (invokestatic (methodCP "parse" "clojure.lang.Compiler$NumberExpr" ((class "java.lang.Number")) (class "clojure.lang.Compiler$Expr")))) 
                                      (99 (areturn)) ;;at TAG_26
                                      (100 (aload_3)) ;;at TAG_6
                                      (101 (ldc_w )) 
                                      (104 (if_acmpne 122)) ;;to TAG_7
                                      (107 (new (class "clojure.lang.Compiler$StringExpr"))) 
                                      (110 (dup)) 
                                      (111 (aload_1)) 
                                      (112 (checkcast (class "java.lang.String"))) 
                                      (115 (invokevirtual (methodCP "intern" "java.lang.String" () (class "java.lang.String")))) 
                                      (118 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$StringExpr" ((class "java.lang.String")) void))) 
                                      (121 (areturn)) ;;at TAG_27
                                      (122 (aload_1)) ;;at TAG_7
                                      (123 (instanceof (class "clojure.lang.IPersistentCollection"))) 
                                      (126 (ifeq 198)) ;;to TAG_8
                                      (129 (aload_1)) 
                                      (130 (checkcast (class "clojure.lang.IPersistentCollection"))) 
                                      (133 (invokeinterface (methodCP "count" "clojure.lang.IPersistentCollection" () int) 1)) 
                                      (138 (ifne 198)) ;;to TAG_8
                                      (141 (new (class "clojure.lang.Compiler$EmptyExpr"))) 
                                      (144 (dup)) 
                                      (145 (aload_1)) 
                                      (146 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$EmptyExpr" ((class "java.lang.Object")) void))) 
                                      (149 (astore 4)) 
                                      (151 (aload_1)) 
                                      (152 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (155 (ifnull 195)) ;;to TAG_9
                                      (158 (new (class "clojure.lang.Compiler$MetaExpr"))) 
                                      (161 (dup)) 
                                      (162 (aload 4)) 
                                      (164 (aload_0)) 
                                      (165 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (168 (if_acmpne 175)) ;;to TAG_10
                                      (171 (aload_0)) 
                                      (172 (goto 178)) ;;to TAG_11
                                      (175 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_10
                                      (178 (aload_1)) ;;at TAG_11
                                      (179 (checkcast (class "clojure.lang.IObj"))) 
                                      (182 (invokeinterface (methodCP "meta" "clojure.lang.IObj" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (187 (invokestatic (methodCP "parse" "clojure.lang.Compiler$MapExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.IPersistentMap")) (class "clojure.lang.Compiler$Expr")))) 
                                      (190 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$MetaExpr" ((class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (193 (astore 4)) 
                                      (195 (aload 4)) ;;at TAG_9
                                      (197 (areturn)) ;;at TAG_28
                                      (198 (aload_1)) ;;at TAG_8
                                      (199 (instanceof (class "clojure.lang.ISeq"))) 
                                      (202 (ifeq 215)) ;;to TAG_12
                                      (205 (aload_0)) 
                                      (206 (aload_1)) 
                                      (207 (checkcast (class "clojure.lang.ISeq"))) 
                                      (210 (aload_2)) 
                                      (211 (invokestatic (methodCP "analyzeSeq" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "clojure.lang.ISeq") (class "java.lang.String")) (class "clojure.lang.Compiler$Expr")))) 
                                      (214 (areturn)) ;;at TAG_29
                                      (215 (aload_1)) ;;at TAG_12
                                      (216 (instanceof (class "clojure.lang.IPersistentVector"))) 
                                      (219 (ifeq 231)) ;;to TAG_13
                                      (222 (aload_0)) 
                                      (223 (aload_1)) 
                                      (224 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (227 (invokestatic (methodCP "parse" "clojure.lang.Compiler$VectorExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.IPersistentVector")) (class "clojure.lang.Compiler$Expr")))) 
                                      (230 (areturn)) ;;at TAG_30
                                      (231 (aload_1)) ;;at TAG_13
                                      (232 (instanceof (class "clojure.lang.IRecord"))) 
                                      (235 (ifeq 247)) ;;to TAG_14
                                      (238 (new (class "clojure.lang.Compiler$ConstantExpr"))) 
                                      (241 (dup)) 
                                      (242 (aload_1)) 
                                      (243 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$ConstantExpr" ((class "java.lang.Object")) void))) 
                                      (246 (areturn)) ;;at TAG_31
                                      (247 (aload_1)) ;;at TAG_14
                                      (248 (instanceof (class "clojure.lang.IType"))) 
                                      (251 (ifeq 263)) ;;to TAG_15
                                      (254 (new (class "clojure.lang.Compiler$ConstantExpr"))) 
                                      (257 (dup)) 
                                      (258 (aload_1)) 
                                      (259 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$ConstantExpr" ((class "java.lang.Object")) void))) 
                                      (262 (areturn)) ;;at TAG_32
                                      (263 (aload_1)) ;;at TAG_15
                                      (264 (instanceof (class "clojure.lang.IPersistentMap"))) 
                                      (267 (ifeq 279)) ;;to TAG_16
                                      (270 (aload_0)) 
                                      (271 (aload_1)) 
                                      (272 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (275 (invokestatic (methodCP "parse" "clojure.lang.Compiler$MapExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.IPersistentMap")) (class "clojure.lang.Compiler$Expr")))) 
                                      (278 (areturn)) ;;at TAG_33
                                      (279 (aload_1)) ;;at TAG_16
                                      (280 (instanceof (class "clojure.lang.IPersistentSet"))) 
                                      (283 (ifeq 295)) ;;to TAG_17
                                      (286 (aload_0)) 
                                      (287 (aload_1)) 
                                      (288 (checkcast (class "clojure.lang.IPersistentSet"))) 
                                      (291 (invokestatic (methodCP "parse" "clojure.lang.Compiler$SetExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.IPersistentSet")) (class "clojure.lang.Compiler$Expr")))) 
                                      (294 (areturn)) ;;at TAG_34
                                      (295 (new (class "clojure.lang.Compiler$ConstantExpr"))) ;;at TAG_17
                                      (298 (dup)) 
                                      (299 (aload_1)) 
                                      (300 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$ConstantExpr" ((class "java.lang.Object")) void))) 
                                      (303 (areturn)) ;;at TAG_35
                                      (304 (astore_3)) ;;at TAG_21
                                      (305 (aload_3)) 
                                      (306 (instanceof (class "clojure.lang.Compiler$CompilerException"))) 
                                      (309 (ifne 354)) ;;to TAG_18
                                      (312 (new (class "clojure.lang.Compiler$CompilerException"))) 
                                      (315 (dup)) 
                                      (316 (getstatic (fieldCP "SOURCE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (319 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (322 (checkcast (class "java.lang.String"))) 
                                      (325 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (328 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (331 (checkcast (class "java.lang.Integer"))) 
                                      (334 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (337 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (340 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (343 (checkcast (class "java.lang.Integer"))) 
                                      (346 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (349 (aload_3)) 
                                      (350 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$CompilerException" ((class "java.lang.String") int int (class "java.lang.Throwable")) void))) 
                                      (353 (athrow)) 
                                      (354 (aload_3)) ;;at TAG_18
                                      (355 (checkcast (class "clojure.lang.Compiler$CompilerException"))) 
                                      (358 (athrow)) 
                                      (endofcode 359))
                                   (Exceptions 
                                     (handler 0 27  304 (class "java.lang.Throwable"))
                                     (handler 28 38  304 (class "java.lang.Throwable"))
                                     (handler 39 49  304 (class "java.lang.Throwable"))
                                     (handler 50 69  304 (class "java.lang.Throwable"))
                                     (handler 70 84  304 (class "java.lang.Throwable"))
                                     (handler 85 99  304 (class "java.lang.Throwable"))
                                     (handler 100 121  304 (class "java.lang.Throwable"))
                                     (handler 122 197  304 (class "java.lang.Throwable"))
                                     (handler 198 214  304 (class "java.lang.Throwable"))
                                     (handler 215 230  304 (class "java.lang.Throwable"))
                                     (handler 231 246  304 (class "java.lang.Throwable"))
                                     (handler 247 262  304 (class "java.lang.Throwable"))
                                     (handler 263 278  304 (class "java.lang.Throwable"))
                                     (handler 279 294  304 (class "java.lang.Throwable"))
                                     (handler 295 303  304 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "isMacro"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Var"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 121)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "clojure.lang.Symbol"))) 
                                      (4 (ifeq 19)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "clojure.lang.Symbol"))) 
                                      (11 (invokestatic (methodCP "referenceLocal" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (14 (ifnull 19)) ;;to TAG_0
                                      (17 (aconst_null)) 
                                      (18 (areturn)) 
                                      (19 (aload_0)) ;;at TAG_0
                                      (20 (instanceof (class "clojure.lang.Symbol"))) 
                                      (23 (ifne 33)) ;;to TAG_1
                                      (26 (aload_0)) 
                                      (27 (instanceof (class "clojure.lang.Var"))) 
                                      (30 (ifeq 119))  ;;to TAG_2
                                      (33 (aload_0)) ;;at TAG_1
                                      (34 (instanceof (class "clojure.lang.Var"))) 
                                      (37 (ifeq 47)) ;;to TAG_3
                                      (40 (aload_0)) 
                                      (41 (checkcast (class "clojure.lang.Var"))) 
                                      (44 (goto 56)) ;;to TAG_4
                                      (47 (aload_0)) ;;at TAG_3
                                      (48 (checkcast (class "clojure.lang.Symbol"))) 
                                      (51 (iconst_0)) 
                                      (52 (iconst_0)) 
                                      (53 (invokestatic (methodCP "lookupVar" "clojure.lang.Compiler" ((class "clojure.lang.Symbol") boolean boolean) (class "clojure.lang.Var")))) 
                                      (56 (astore_1)) ;;at TAG_4
                                      (57 (aload_1)) 
                                      (58 (ifnull 119))  ;;to TAG_2
                                      (61 (aload_1)) 
                                      (62 (invokevirtual (methodCP "isMacro" "clojure.lang.Var" () boolean))) 
                                      (65 (ifeq 119))  ;;to TAG_2
                                      (68 (aload_1)) 
                                      (69 (getfield (fieldCP "ns" "clojure.lang.Var" (class "clojure.lang.Namespace")))) 
                                      (72 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) 
                                      (75 (if_acmpeq 117)) ;;to TAG_5
                                      (78 (aload_1)) 
                                      (79 (invokevirtual (methodCP "isPublic" "clojure.lang.Var" () boolean))) 
                                      (82 (ifne 117)) ;;to TAG_5
                                      (85 (new (class "java.lang.IllegalStateException"))) 
                                      (88 (dup)) 
                                      (89 (new (class "java.lang.StringBuilder"))) 
                                      (92 (dup)) 
                                      (93 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (96 (ldc 3)) ;;STRING:: "var: "
                                      (98 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (101 (aload_1)) 
                                      (102 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (105 (ldc 4)) ;;STRING:: " is not public"
                                      (107 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (110 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (113 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (116 (athrow)) 
                                      (117 (aload_1)) ;;at TAG_5
                                      (118 (areturn)) 
                                      (119 (aconst_null)) ;;at TAG_2
                                      (120 (areturn)) 
                                      (endofcode 121))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isInline"
                              (parameters (class "java.lang.Object") int)
                              (returntype . (class "clojure.lang.IFn"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 168)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "clojure.lang.Symbol"))) 
                                      (4 (ifeq 19)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "clojure.lang.Symbol"))) 
                                      (11 (invokestatic (methodCP "referenceLocal" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (14 (ifnull 19)) ;;to TAG_0
                                      (17 (aconst_null)) 
                                      (18 (areturn)) 
                                      (19 (aload_0)) ;;at TAG_0
                                      (20 (instanceof (class "clojure.lang.Symbol"))) 
                                      (23 (ifne 33)) ;;to TAG_1
                                      (26 (aload_0)) 
                                      (27 (instanceof (class "clojure.lang.Var"))) 
                                      (30 (ifeq 166))  ;;to TAG_2
                                      (33 (aload_0)) ;;at TAG_1
                                      (34 (instanceof (class "clojure.lang.Var"))) 
                                      (37 (ifeq 47)) ;;to TAG_3
                                      (40 (aload_0)) 
                                      (41 (checkcast (class "clojure.lang.Var"))) 
                                      (44 (goto 55)) ;;to TAG_4
                                      (47 (aload_0)) ;;at TAG_3
                                      (48 (checkcast (class "clojure.lang.Symbol"))) 
                                      (51 (iconst_0)) 
                                      (52 (invokestatic (methodCP "lookupVar" "clojure.lang.Compiler" ((class "clojure.lang.Symbol") boolean) (class "clojure.lang.Var")))) 
                                      (55 (astore_2)) ;;at TAG_4
                                      (56 (aload_2)) 
                                      (57 (ifnull 166))  ;;to TAG_2
                                      (60 (aload_2)) 
                                      (61 (getfield (fieldCP "ns" "clojure.lang.Var" (class "clojure.lang.Namespace")))) 
                                      (64 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) 
                                      (67 (if_acmpeq 109)) ;;to TAG_5
                                      (70 (aload_2)) 
                                      (71 (invokevirtual (methodCP "isPublic" "clojure.lang.Var" () boolean))) 
                                      (74 (ifne 109)) ;;to TAG_5
                                      (77 (new (class "java.lang.IllegalStateException"))) 
                                      (80 (dup)) 
                                      (81 (new (class "java.lang.StringBuilder"))) 
                                      (84 (dup)) 
                                      (85 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (88 (ldc 3)) ;;STRING:: "var: "
                                      (90 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (93 (aload_2)) 
                                      (94 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (97 (ldc 4)) ;;STRING:: " is not public"
                                      (99 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (102 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (105 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (108 (athrow)) 
                                      (109 (aload_2)) ;;at TAG_5
                                      (110 (invokevirtual (methodCP "meta" "clojure.lang.Var" () (class "clojure.lang.IPersistentMap")))) 
                                      (113 (getstatic (fieldCP "inlineKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (116 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (119 (checkcast (class "clojure.lang.IFn"))) 
                                      (122 (astore_3)) 
                                      (123 (aload_3)) 
                                      (124 (ifnull 166))  ;;to TAG_2
                                      (127 (aload_2)) 
                                      (128 (invokevirtual (methodCP "meta" "clojure.lang.Var" () (class "clojure.lang.IPersistentMap")))) 
                                      (131 (getstatic (fieldCP "inlineAritiesKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (134 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (137 (checkcast (class "clojure.lang.IFn"))) 
                                      (140 (astore 4)) 
                                      (142 (aload 4)) 
                                      (144 (ifnull 164)) ;;to TAG_6
                                      (147 (aload 4)) 
                                      (149 (iload_1)) 
                                      (150 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (153 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (158 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (161 (ifeq 166))  ;;to TAG_2
                                      (164 (aload_3)) ;;at TAG_6
                                      (165 (areturn)) 
                                      (166 (aconst_null)) ;;at TAG_2
                                      (167 (areturn)) 
                                      (endofcode 168))
                                   (Exceptions )
                                   (StackMap )))
                        (method "namesStaticMember"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (4 (ifnull 18))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (invokestatic (methodCP "namespaceFor" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (11 (ifnonnull 18))  ;;to TAG_0
                                      (14 (iconst_1)) 
                                      (15 (goto 19)) ;;to TAG_1
                                      (18 (iconst_0)) ;;at TAG_0
                                      (19 (ireturn)) ;;at TAG_1
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "preserveTag"
                              (parameters (class "clojure.lang.ISeq") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 44)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "tagOf" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) 
                                      (6 (ifnull 42))  ;;to TAG_0
                                      (9 (aload_1)) 
                                      (10 (instanceof (class "clojure.lang.IObj"))) 
                                      (13 (ifeq 42))  ;;to TAG_0
                                      (16 (aload_1)) 
                                      (17 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (20 (astore_3)) 
                                      (21 (aload_1)) 
                                      (22 (checkcast (class "clojure.lang.IObj"))) 
                                      (25 (aload_3)) 
                                      (26 (getstatic (fieldCP "TAG_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (29 (aload_2)) 
                                      (30 (invokestatic (methodCP "assoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative")))) 
                                      (33 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (36 (invokeinterface (methodCP "withMeta" "clojure.lang.IObj" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")) 2)) 
                                      (41 (areturn)) 
                                      (42 (aload_1)) ;;at TAG_0
                                      (43 (areturn)) 
                                      (endofcode 44))
                                   (Exceptions )
                                   (StackMap )))
                        (method "macroexpand1"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 9) (code_length . 334)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "clojure.lang.ISeq"))) 
                                      (4 (ifeq 332)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "clojure.lang.ISeq"))) 
                                      (11 (astore_1)) 
                                      (12 (aload_1)) 
                                      (13 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (16 (astore_2)) 
                                      (17 (aload_2)) 
                                      (18 (invokestatic (methodCP "isSpecial" "clojure.lang.Compiler" ((class "java.lang.Object")) boolean))) 
                                      (21 (ifeq 26))  ;;to TAG_1
                                      (24 (aload_0)) 
                                      (25 (areturn)) 
                                      (26 (aload_2)) ;;at TAG_1
                                      (27 (invokestatic (methodCP "isMacro" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (30 (astore_3)) 
                                      (31 (aload_3)) 
                                      (32 (ifnull 81)) ;;to TAG_2
                                      (35 (aload_3)) ;;at TAG_8
                                      (36 (aload_1)) 
                                      (37 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (40 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (43 (aload_1)) 
                                      (44 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (49 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (52 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (55 (invokevirtual (methodCP "applyTo" "clojure.lang.Var" ((class "clojure.lang.ISeq")) (class "java.lang.Object")))) 
                                      (58 (areturn)) ;;at TAG_9
                                      (59 (astore 4)) ;;at TAG_10
                                      (61 (new (class "clojure.lang.ArityException"))) 
                                      (64 (dup)) 
                                      (65 (aload 4)) 
                                      (67 (getfield (fieldCP "actual" "clojure.lang.ArityException" int))) 
                                      (70 (iconst_2)) 
                                      (71 (isub)) 
                                      (72 (aload 4)) 
                                      (74 (getfield (fieldCP "name" "clojure.lang.ArityException" (class "java.lang.String")))) 
                                      (77 (invokespecial (methodCP "<init>" "clojure.lang.ArityException" (int (class "java.lang.String")) void))) 
                                      (80 (athrow)) 
                                      (81 (aload_2)) ;;at TAG_2
                                      (82 (instanceof (class "clojure.lang.Symbol"))) 
                                      (85 (ifeq 332)) ;;to TAG_0
                                      (88 (aload_2)) 
                                      (89 (checkcast (class "clojure.lang.Symbol"))) 
                                      (92 (astore 4)) 
                                      (94 (aload 4)) 
                                      (96 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (99 (astore 5)) 
                                      (101 (aload 4)) 
                                      (103 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (106 (iconst_0)) 
                                      (107 (invokevirtual (methodCP "charAt" "java.lang.String" (int) char))) 
                                      (110 (bipush 46)) 
                                      (112 (if_icmpne 222)) ;;to TAG_3
                                      (115 (aload_1)) 
                                      (116 (invokestatic (methodCP "length" "clojure.lang.RT" ((class "clojure.lang.ISeq")) int))) 
                                      (119 (iconst_2)) 
                                      (120 (if_icmpge 133)) ;;to TAG_4
                                      (123 (new (class "java.lang.IllegalArgumentException"))) 
                                      (126 (dup)) 
                                      (127 (ldc 5)) ;;STRING:: "Malformed member expression, expecting (.member target ...)"
                                      (129 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (132 (athrow)) 
                                      (133 (aload 5)) ;;at TAG_4
                                      (135 (iconst_1)) 
                                      (136 (invokevirtual (methodCP "substring" "java.lang.String" (int) (class "java.lang.String")))) 
                                      (139 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (142 (astore 6)) 
                                      (144 (aload_1)) 
                                      (145 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (148 (astore 7)) 
                                      (150 (aload 7)) 
                                      (152 (iconst_0)) 
                                      (153 (invokestatic (methodCP "access$400" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object") boolean) (class "java.lang.Class")))) 
                                      (156 (ifnull 196)) ;;to TAG_5
                                      (159 (getstatic (fieldCP "IDENTITY" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (162 (aload 7)) 
                                      (164 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (167 (checkcast (class "clojure.lang.IObj"))) 
                                      (170 (iconst_2)) 
                                      (171 (anewarray (class "java.lang.Object"))) 
                                      (174 (dup)) 
                                      (175 (iconst_0)) 
                                      (176 (getstatic (fieldCP "TAG_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (179 (aastore)) 
                                      (180 (dup)) 
                                      (181 (iconst_1)) 
                                      (182 (getstatic (fieldCP "CLASS" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (185 (aastore)) 
                                      (186 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (189 (invokeinterface (methodCP "withMeta" "clojure.lang.IObj" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")) 2)) 
                                      (194 (astore 7)) 
                                      (196 (aload_1)) ;;at TAG_5
                                      (197 (getstatic (fieldCP "DOT" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (200 (aload 7)) 
                                      (202 (aload 6)) 
                                      (204 (aload_1)) 
                                      (205 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (210 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (215 (invokestatic (methodCP "listStar" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.ISeq")) (class "clojure.lang.ISeq")))) 
                                      (218 (invokestatic (methodCP "preserveTag" "clojure.lang.Compiler" ((class "clojure.lang.ISeq") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (221 (areturn)) 
                                      (222 (aload 4)) ;;at TAG_3
                                      (224 (invokestatic (methodCP "namesStaticMember" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) boolean))) 
                                      (227 (ifeq 287)) ;;to TAG_6
                                      (230 (aload 4)) 
                                      (232 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (235 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (238 (astore 6)) 
                                      (240 (aload 6)) 
                                      (242 (iconst_0)) 
                                      (243 (invokestatic (methodCP "access$400" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object") boolean) (class "java.lang.Class")))) 
                                      (246 (astore 7)) 
                                      (248 (aload 7)) 
                                      (250 (ifnull 284)) ;;to TAG_7
                                      (253 (aload 4)) 
                                      (255 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (258 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (261 (astore 8)) 
                                      (263 (aload_1)) 
                                      (264 (getstatic (fieldCP "DOT" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (267 (aload 6)) 
                                      (269 (aload 8)) 
                                      (271 (aload_1)) 
                                      (272 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (277 (invokestatic (methodCP "listStar" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.ISeq")) (class "clojure.lang.ISeq")))) 
                                      (280 (invokestatic (methodCP "preserveTag" "clojure.lang.Compiler" ((class "clojure.lang.ISeq") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (283 (areturn)) 
                                      (284 (goto 332)) ;;to TAG_0;;at TAG_7
                                      (287 (aload 5)) ;;at TAG_6
                                      (289 (bipush 46)) 
                                      (291 (invokevirtual (methodCP "lastIndexOf" "java.lang.String" (int) int))) 
                                      (294 (istore 6)) 
                                      (296 (iload 6)) 
                                      (298 (aload 5)) 
                                      (300 (invokevirtual (methodCP "length" "java.lang.String" () int))) 
                                      (303 (iconst_1)) 
                                      (304 (isub)) 
                                      (305 (if_icmpne 332)) ;;to TAG_0
                                      (308 (getstatic (fieldCP "NEW" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (311 (aload 5)) 
                                      (313 (iconst_0)) 
                                      (314 (iload 6)) 
                                      (316 (invokevirtual (methodCP "substring" "java.lang.String" (int int) (class "java.lang.String")))) 
                                      (319 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (322 (aload_1)) 
                                      (323 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (328 (invokestatic (methodCP "listStar" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.ISeq")) (class "clojure.lang.ISeq")))) 
                                      (331 (areturn)) 
                                      (332 (aload_0)) ;;at TAG_0
                                      (333 (areturn)) 
                                      (endofcode 334))
                                   (Exceptions 
                                     (handler 35 58  59 (class "clojure.lang.ArityException")))
                                   (StackMap )))
                        (method "macroexpand"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 17)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "macroexpand1" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (4 (astore_1)) 
                                      (5 (aload_1)) 
                                      (6 (aload_0)) 
                                      (7 (if_acmpeq 15))  ;;to TAG_0
                                      (10 (aload_1)) 
                                      (11 (invokestatic (methodCP "macroexpand" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (14 (areturn)) 
                                      (15 (aload_0)) ;;at TAG_0
                                      (16 (areturn)) 
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "analyzeSeq"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.ISeq") (class "java.lang.String"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 12) (code_length . 371)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.lang.Integer"))) 
                                      (9 (astore_3)) 
                                      (10 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (13 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (16 (checkcast (class "java.lang.Integer"))) 
                                      (19 (astore 4)) 
                                      (21 (aload_1)) 
                                      (22 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (25 (ifnull 59)) ;;to TAG_0
                                      (28 (aload_1)) 
                                      (29 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (32 (getstatic (fieldCP "LINE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (35 (invokeinterface (methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (40 (ifeq 59)) ;;to TAG_0
                                      (43 (aload_1)) 
                                      (44 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (47 (getstatic (fieldCP "LINE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (50 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (55 (checkcast (class "java.lang.Integer"))) 
                                      (58 (astore_3)) 
                                      (59 (aload_1)) ;;at TAG_0
                                      (60 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (63 (ifnull 98)) ;;to TAG_1
                                      (66 (aload_1)) 
                                      (67 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (70 (getstatic (fieldCP "COLUMN_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (73 (invokeinterface (methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (78 (ifeq 98)) ;;to TAG_1
                                      (81 (aload_1)) 
                                      (82 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (85 (getstatic (fieldCP "COLUMN_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (88 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (93 (checkcast (class "java.lang.Integer"))) 
                                      (96 (astore 4)) 
                                      (98 (iconst_4)) ;;at TAG_1
                                      (99 (anewarray (class "java.lang.Object"))) 
                                      (102 (dup)) 
                                      (103 (iconst_0)) 
                                      (104 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (107 (aastore)) 
                                      (108 (dup)) 
                                      (109 (iconst_1)) 
                                      (110 (aload_3)) 
                                      (111 (aastore)) 
                                      (112 (dup)) 
                                      (113 (iconst_2)) 
                                      (114 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (117 (aastore)) 
                                      (118 (dup)) 
                                      (119 (iconst_3)) 
                                      (120 (aload 4)) 
                                      (122 (aastore)) 
                                      (123 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (126 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (129 (aload_1)) ;;at TAG_9
                                      (130 (invokestatic (methodCP "macroexpand1" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (133 (astore 5)) 
                                      (135 (aload 5)) 
                                      (137 (aload_1)) 
                                      (138 (if_acmpeq 156)) ;;to TAG_2
                                      (141 (aload_0)) 
                                      (142 (aload 5)) 
                                      (144 (aload_2)) 
                                      (145 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object") (class "java.lang.String")) (class "clojure.lang.Compiler$Expr")))) 
                                      (148 (astore 6)) 
                                      (150 (jsr 364)) ;;to TAG_3
                                      (153 (aload 6)) ;;at TAG_10
                                      (155 (areturn)) 
                                      (156 (aload_1)) ;;at TAG_2
                                      (157 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (160 (astore 6)) 
                                      (162 (aload 6)) 
                                      (164 (ifnonnull 177)) ;;to TAG_4
                                      (167 (new (class "java.lang.IllegalArgumentException"))) 
                                      (170 (dup)) 
                                      (171 (ldc 6)) ;;STRING:: "Can\nt call nil"
                                      (173 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (176 (athrow)) 
                                      (177 (aload 6)) ;;at TAG_4
                                      (179 (aload_1)) 
                                      (180 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (183 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (186 (invokestatic (methodCP "isInline" "clojure.lang.Compiler" ((class "java.lang.Object") int) (class "clojure.lang.IFn")))) 
                                      (189 (astore 7)) 
                                      (191 (aload 7)) 
                                      (193 (ifnull 223)) ;;to TAG_5
                                      (196 (aload_0)) 
                                      (197 (aload_1)) 
                                      (198 (aload 7)) 
                                      (200 (aload_1)) 
                                      (201 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (204 (invokeinterface (methodCP "applyTo" "clojure.lang.IFn" ((class "clojure.lang.ISeq")) (class "java.lang.Object")) 2)) 
                                      (209 (invokestatic (methodCP "preserveTag" "clojure.lang.Compiler" ((class "clojure.lang.ISeq") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (212 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (215 (astore 8)) 
                                      (217 (jsr 364)) ;;to TAG_3
                                      (220 (aload 8)) ;;at TAG_12
                                      (222 (areturn)) 
                                      (223 (aload 6)) ;;at TAG_5
                                      (225 (getstatic (fieldCP "FN" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (228 (invokevirtual (methodCP "equals" "java.lang.Object" ((class "java.lang.Object")) boolean))) 
                                      (231 (ifeq 248)) ;;to TAG_6
                                      (234 (aload_0)) 
                                      (235 (aload_1)) 
                                      (236 (aload_2)) 
                                      (237 (invokestatic (methodCP "parse" "clojure.lang.Compiler$FnExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.ISeq") (class "java.lang.String")) (class "clojure.lang.Compiler$Expr")))) 
                                      (240 (astore 9)) 
                                      (242 (jsr 364)) ;;to TAG_3
                                      (245 (aload 9)) ;;at TAG_13
                                      (247 (areturn)) 
                                      (248 (getstatic (fieldCP "specials" "clojure.lang.Compiler" (class "clojure.lang.IPersistentMap")))) ;;at TAG_6
                                      (251 (aload 6)) 
                                      (253 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (258 (checkcast (class "clojure.lang.Compiler$IParser"))) 
                                      (261 (dup)) 
                                      (262 (astore 8)) 
                                      (264 (ifnull 284)) ;;to TAG_7
                                      (267 (aload 8)) 
                                      (269 (aload_0)) 
                                      (270 (aload_1)) 
                                      (271 (invokeinterface (methodCP "parse" "clojure.lang.Compiler$IParser" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")) 3)) 
                                      (276 (astore 9)) 
                                      (278 (jsr 364)) ;;to TAG_3
                                      (281 (aload 9)) ;;at TAG_14
                                      (283 (areturn)) 
                                      (284 (aload_0)) ;;at TAG_7
                                      (285 (aload_1)) 
                                      (286 (invokestatic (methodCP "parse" "clojure.lang.Compiler$InvokeExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.ISeq")) (class "clojure.lang.Compiler$Expr")))) 
                                      (289 (astore 9)) 
                                      (291 (jsr 364)) ;;to TAG_3
                                      (294 (aload 9)) ;;at TAG_15
                                      (296 (areturn)) 
                                      (297 (astore 5)) ;;at TAG_11
                                      (299 (aload 5)) 
                                      (301 (instanceof (class "clojure.lang.Compiler$CompilerException"))) 
                                      (304 (ifne 350)) ;;to TAG_8
                                      (307 (new (class "clojure.lang.Compiler$CompilerException"))) 
                                      (310 (dup)) 
                                      (311 (getstatic (fieldCP "SOURCE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (314 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (317 (checkcast (class "java.lang.String"))) 
                                      (320 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (323 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (326 (checkcast (class "java.lang.Integer"))) 
                                      (329 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (332 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (335 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (338 (checkcast (class "java.lang.Integer"))) 
                                      (341 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (344 (aload 5)) 
                                      (346 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$CompilerException" ((class "java.lang.String") int int (class "java.lang.Throwable")) void))) 
                                      (349 (athrow)) 
                                      (350 (aload 5)) ;;at TAG_8
                                      (352 (checkcast (class "clojure.lang.Compiler$CompilerException"))) 
                                      (355 (athrow)) 
                                      (356 (astore 10)) ;;at TAG_16
                                      (358 (jsr 364)) ;;to TAG_3
                                      (361 (aload 10)) ;;at TAG_17
                                      (363 (athrow)) 
                                      (364 (astore 11)) ;;at TAG_3
                                      (366 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (369 (ret 11)) 
                                      (endofcode 371))
                                   (Exceptions 
                                     (handler 129 153  297 (class "java.lang.Throwable"))
                                     (handler 156 220  297 (class "java.lang.Throwable"))
                                     (handler 223 245  297 (class "java.lang.Throwable"))
                                     (handler 248 281  297 (class "java.lang.Throwable"))
                                     (handler 284 294  297 (class "java.lang.Throwable"))
                                     (handler 129 153  356 (class "java.lang.Throwable"))
                                     (handler 156 220  356 (class "java.lang.Throwable"))
                                     (handler 223 245  356 (class "java.lang.Throwable"))
                                     (handler 248 281  356 (class "java.lang.Throwable"))
                                     (handler 284 294  356 (class "java.lang.Throwable"))
                                     (handler 297 361  356 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "errorMsg"
                              (parameters (class "java.lang.String") int int (class "java.lang.String"))
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 32)
                                   (parsedcode
                                      (0 (ldc 7))         ;;STRING:: "%s, compiling:(%s:%d:%d)"
                                      (2 (iconst_4))
                                      (3 (anewarray (class "java.lang.Object")))
                                      (6 (dup))
                                      (7 (iconst_0))
                                      (8 (aload_3))
                                      (9 (aastore))
                                      (10 (dup))
                                      (11 (iconst_1))
                                      (12 (aload_0))
                                      (13 (aastore))
                                      (14 (dup))
                                      (15 (iconst_2))
                                      (16 (iload_1))
                                      (17 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (20 (aastore))
                                      (21 (dup))
                                      (22 (iconst_3))
                                      (23 (iload_2))
                                      (24 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (27 (aastore))
                                      (28 (invokestatic
					(methodCP "format" "java.lang.String" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.String"))))
                                      (31 (areturn))
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iconst_1))
                                      (2 (invokestatic
					(methodCP "eval" "clojure.lang.Compiler" ((class "java.lang.Object") boolean) (class "java.lang.Object"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters (class "java.lang.Object") boolean)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 12) (code_length . 429)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_2)) 
                                      (2 (iconst_2)) 
                                      (3 (anewarray (class "java.lang.Object"))) 
                                      (6 (dup)) 
                                      (7 (iconst_0)) 
                                      (8 (getstatic (fieldCP "LOADER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (11 (aastore)) 
                                      (12 (dup)) 
                                      (13 (iconst_1)) 
                                      (14 (invokestatic (methodCP "makeClassLoader" "clojure.lang.RT" () (class "java.lang.ClassLoader")))) 
                                      (17 (aastore)) 
                                      (18 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (21 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (24 (iconst_1)) 
                                      (25 (istore_2)) 
                                      (26 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_18
                                      (29 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (32 (checkcast (class "java.lang.Integer"))) 
                                      (35 (astore_3)) 
                                      (36 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (39 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (42 (checkcast (class "java.lang.Integer"))) 
                                      (45 (astore 4)) 
                                      (47 (aload_0)) 
                                      (48 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (51 (ifnull 85)) ;;to TAG_0
                                      (54 (aload_0)) 
                                      (55 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (58 (getstatic (fieldCP "LINE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (61 (invokeinterface (methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (66 (ifeq 85)) ;;to TAG_0
                                      (69 (aload_0)) 
                                      (70 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (73 (getstatic (fieldCP "LINE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (76 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (81 (checkcast (class "java.lang.Integer"))) 
                                      (84 (astore_3)) 
                                      (85 (aload_0)) ;;at TAG_0
                                      (86 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (89 (ifnull 124)) ;;to TAG_1
                                      (92 (aload_0)) 
                                      (93 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (96 (getstatic (fieldCP "COLUMN_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (99 (invokeinterface (methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (104 (ifeq 124)) ;;to TAG_1
                                      (107 (aload_0)) 
                                      (108 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (111 (getstatic (fieldCP "COLUMN_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (114 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (119 (checkcast (class "java.lang.Integer"))) 
                                      (122 (astore 4)) 
                                      (124 (iconst_4)) ;;at TAG_1
                                      (125 (anewarray (class "java.lang.Object"))) 
                                      (128 (dup)) 
                                      (129 (iconst_0)) 
                                      (130 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (133 (aastore)) 
                                      (134 (dup)) 
                                      (135 (iconst_1)) 
                                      (136 (aload_3)) 
                                      (137 (aastore)) 
                                      (138 (dup)) 
                                      (139 (iconst_2)) 
                                      (140 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (143 (aastore)) 
                                      (144 (dup)) 
                                      (145 (iconst_3)) 
                                      (146 (aload 4)) 
                                      (148 (aastore)) 
                                      (149 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (152 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (155 (aload_0)) ;;at TAG_11
                                      (156 (invokestatic (methodCP "macroexpand" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (159 (astore_0)) 
                                      (160 (aload_0)) 
                                      (161 (instanceof (class "clojure.lang.IPersistentCollection"))) 
                                      (164 (ifeq 234)) ;;to TAG_2
                                      (167 (aload_0)) 
                                      (168 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (171 (getstatic (fieldCP "DO" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (174 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (177 (ifeq 234)) ;;to TAG_2
                                      (180 (aload_0)) 
                                      (181 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (184 (astore 5)) 
                                      (186 (aload 5)) ;;at TAG_4
                                      (188 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (191 (ifnull 214)) ;;to TAG_3
                                      (194 (aload 5)) 
                                      (196 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (199 (iconst_0)) 
                                      (200 (invokestatic (methodCP "eval" "clojure.lang.Compiler" ((class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (203 (pop)) 
                                      (204 (aload 5)) 
                                      (206 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (209 (astore 5)) 
                                      (211 (goto 186)) ;;to TAG_4
                                      (214 (aload 5)) ;;at TAG_3
                                      (216 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (219 (iconst_0)) 
                                      (220 (invokestatic (methodCP "eval" "clojure.lang.Compiler" ((class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (223 (astore 6)) 
                                      (225 (jsr 403)) ;;to TAG_5
                                      (228 (jsr 418)) ;;to TAG_6;;at TAG_12
                                      (231 (aload 6)) ;;at TAG_19
                                      (233 (areturn)) 
                                      (234 (aload_0)) ;;at TAG_2
                                      (235 (instanceof (class "clojure.lang.IType"))) 
                                      (238 (ifne 276)) ;;to TAG_7
                                      (241 (aload_0)) 
                                      (242 (instanceof (class "clojure.lang.IPersistentCollection"))) 
                                      (245 (ifeq 346)) ;;to TAG_8
                                      (248 (aload_0)) 
                                      (249 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (252 (instanceof (class "clojure.lang.Symbol"))) 
                                      (255 (ifeq 276)) ;;to TAG_7
                                      (258 (aload_0)) 
                                      (259 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (262 (checkcast (class "clojure.lang.Symbol"))) 
                                      (265 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (268 (ldc 8)) ;;STRING:: "def"
                                      (270 (invokevirtual (methodCP "startsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (273 (ifne 346)) ;;to TAG_8
                                      (276 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_7
                                      (279 (getstatic (fieldCP "FN" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (282 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (285 (aload_0)) 
                                      (286 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (289 (new (class "java.lang.StringBuilder"))) 
                                      (292 (dup)) 
                                      (293 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (296 (ldc 9)) ;;STRING:: "eval"
                                      (298 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (301 (invokestatic (methodCP "nextID" "clojure.lang.RT" () int))) 
                                      (304 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (307 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (310 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object") (class "java.lang.String")) (class "clojure.lang.Compiler$Expr")))) 
                                      (313 (checkcast (class "clojure.lang.Compiler$ObjExpr"))) 
                                      (316 (astore 5)) 
                                      (318 (aload 5)) 
                                      (320 (invokevirtual (methodCP "eval" "clojure.lang.Compiler$ObjExpr" () (class "java.lang.Object")))) 
                                      (323 (checkcast (class "clojure.lang.IFn"))) 
                                      (326 (astore 6)) 
                                      (328 (aload 6)) 
                                      (330 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (335 (astore 7)) 
                                      (337 (jsr 403)) ;;to TAG_5
                                      (340 (jsr 418)) ;;to TAG_6;;at TAG_14
                                      (343 (aload 7)) ;;at TAG_21
                                      (345 (areturn)) 
                                      (346 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_8
                                      (349 (aload_0)) 
                                      (350 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (353 (astore 5)) 
                                      (355 (aload 5)) 
                                      (357 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (362 (astore 6)) 
                                      (364 (jsr 403)) ;;to TAG_5
                                      (367 (jsr 418)) ;;to TAG_6;;at TAG_15
                                      (370 (aload 6)) ;;at TAG_22
                                      (372 (areturn)) 
                                      (373 (astore 5)) ;;at TAG_13
                                      (375 (aload 5)) 
                                      (377 (instanceof (class "java.lang.RuntimeException"))) 
                                      (380 (ifne 389)) ;;to TAG_9
                                      (383 (aload 5)) 
                                      (385 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (388 (athrow)) 
                                      (389 (aload 5)) ;;at TAG_9
                                      (391 (checkcast (class "java.lang.RuntimeException"))) 
                                      (394 (athrow)) 
                                      (395 (astore 8)) ;;at TAG_16
                                      (397 (jsr 403)) ;;to TAG_5
                                      (400 (aload 8)) ;;at TAG_17
                                      (402 (athrow)) 
                                      (403 (astore 9)) ;;at TAG_5
                                      (405 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (408 (ret 9)) 
                                      (410 (astore 10)) ;;at TAG_20
                                      (412 (jsr 418)) ;;to TAG_6
                                      (415 (aload 10)) ;;at TAG_23
                                      (417 (athrow)) 
                                      (418 (astore 11)) ;;at TAG_6
                                      (420 (iload_2)) 
                                      (421 (ifeq 427)) ;;to TAG_10
                                      (424 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (427 (ret 11)) ;;at TAG_10
                                      (endofcode 429))
                                   (Exceptions 
                                     (handler 155 228  373 (class "java.lang.Throwable"))
                                     (handler 234 340  373 (class "java.lang.Throwable"))
                                     (handler 346 367  373 (class "java.lang.Throwable"))
                                     (handler 155 228  395 (class "java.lang.Throwable"))
                                     (handler 234 340  395 (class "java.lang.Throwable"))
                                     (handler 346 367  395 (class "java.lang.Throwable"))
                                     (handler 373 400  395 (class "java.lang.Throwable"))
                                     (handler 26 231  410 (class "java.lang.Throwable"))
                                     (handler 234 343  410 (class "java.lang.Throwable"))
                                     (handler 346 370  410 (class "java.lang.Throwable"))
                                     (handler 373 415  410 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "registerConstant"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 79)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "CONSTANTS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "isBound" "clojure.lang.Var" () boolean))) 
                                      (6 (ifne 11))  ;;to TAG_0
                                      (9 (iconst_m1)) 
                                      (10 (ireturn)) 
                                      (11 (getstatic (fieldCP "CONSTANTS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (14 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (17 (checkcast (class "clojure.lang.PersistentVector"))) 
                                      (20 (astore_1)) 
                                      (21 (getstatic (fieldCP "CONSTANT_IDS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (24 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (27 (checkcast (class "java.util.IdentityHashMap"))) 
                                      (30 (astore_2)) 
                                      (31 (aload_2)) 
                                      (32 (aload_0)) 
                                      (33 (invokevirtual (methodCP "get" "java.util.IdentityHashMap" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (36 (checkcast (class "java.lang.Integer"))) 
                                      (39 (astore_3)) 
                                      (40 (aload_3)) 
                                      (41 (ifnull 49)) ;;to TAG_1
                                      (44 (aload_3)) 
                                      (45 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (48 (ireturn)) 
                                      (49 (getstatic (fieldCP "CONSTANTS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (52 (aload_1)) 
                                      (53 (aload_0)) 
                                      (54 (invokestatic (methodCP "conj" "clojure.lang.RT" ((class "clojure.lang.IPersistentCollection") (class "java.lang.Object")) (class "clojure.lang.IPersistentCollection")))) 
                                      (57 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (60 (pop)) 
                                      (61 (aload_2)) 
                                      (62 (aload_0)) 
                                      (63 (aload_1)) 
                                      (64 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (67 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (70 (invokevirtual (methodCP "put" "java.util.IdentityHashMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (73 (pop)) 
                                      (74 (aload_1)) 
                                      (75 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (78 (ireturn)) 
                                      (endofcode 79))
                                   (Exceptions )
                                   (StackMap )))
                        (method "registerKeyword"
                              (parameters (class "clojure.lang.Keyword"))
                              (returntype . (class "clojure.lang.Compiler$KeywordExpr"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 66)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "KEYWORDS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "isBound" "clojure.lang.Var" () boolean))) 
                                      (6 (ifne 18))  ;;to TAG_0
                                      (9 (new (class "clojure.lang.Compiler$KeywordExpr"))) 
                                      (12 (dup)) 
                                      (13 (aload_0)) 
                                      (14 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$KeywordExpr" ((class "clojure.lang.Keyword")) void))) 
                                      (17 (areturn)) 
                                      (18 (getstatic (fieldCP "KEYWORDS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (21 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (24 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (27 (astore_1)) 
                                      (28 (aload_1)) 
                                      (29 (aload_0)) 
                                      (30 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (33 (astore_2)) 
                                      (34 (aload_2)) 
                                      (35 (ifnonnull 57)) ;;to TAG_1
                                      (38 (getstatic (fieldCP "KEYWORDS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (41 (aload_1)) 
                                      (42 (aload_0)) 
                                      (43 (aload_0)) 
                                      (44 (invokestatic (methodCP "registerConstant" "clojure.lang.Compiler" ((class "java.lang.Object")) int))) 
                                      (47 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (50 (invokestatic (methodCP "assoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative")))) 
                                      (53 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (56 (pop)) 
                                      (57 (new (class "clojure.lang.Compiler$KeywordExpr"))) ;;at TAG_1
                                      (60 (dup)) 
                                      (61 (aload_0)) 
                                      (62 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$KeywordExpr" ((class "clojure.lang.Keyword")) void))) 
                                      (65 (areturn)) 
                                      (endofcode 66))
                                   (Exceptions )
                                   (StackMap )))
                        (method "registerKeywordCallsite"
                              (parameters (class "clojure.lang.Keyword"))
                              (returntype . int)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 54)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "KEYWORD_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "isBound" "clojure.lang.Var" () boolean))) 
                                      (6 (ifne 19))  ;;to TAG_0
                                      (9 (new (class "java.lang.IllegalAccessError"))) 
                                      (12 (dup)) 
                                      (13 (ldc 10)) ;;STRING:: "KEYWORD_CALLSITES is not bound"
                                      (15 (invokespecial (methodCP "<init>" "java.lang.IllegalAccessError" ((class "java.lang.String")) void))) 
                                      (18 (athrow)) 
                                      (19 (getstatic (fieldCP "KEYWORD_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (22 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (25 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (28 (astore_1)) 
                                      (29 (aload_1)) 
                                      (30 (aload_0)) 
                                      (31 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 2)) 
                                      (36 (astore_1)) 
                                      (37 (getstatic (fieldCP "KEYWORD_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (40 (aload_1)) 
                                      (41 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (44 (pop)) 
                                      (45 (aload_1)) 
                                      (46 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (51 (iconst_1)) 
                                      (52 (isub)) 
                                      (53 (ireturn)) 
                                      (endofcode 54))
                                   (Exceptions )
                                   (StackMap )))
                        (method "registerProtocolCallsite"
                              (parameters (class "clojure.lang.Var"))
                              (returntype . int)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 54)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "PROTOCOL_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "isBound" "clojure.lang.Var" () boolean))) 
                                      (6 (ifne 19))  ;;to TAG_0
                                      (9 (new (class "java.lang.IllegalAccessError"))) 
                                      (12 (dup)) 
                                      (13 (ldc 11)) ;;STRING:: "PROTOCOL_CALLSITES is not bound"
                                      (15 (invokespecial (methodCP "<init>" "java.lang.IllegalAccessError" ((class "java.lang.String")) void))) 
                                      (18 (athrow)) 
                                      (19 (getstatic (fieldCP "PROTOCOL_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (22 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (25 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (28 (astore_1)) 
                                      (29 (aload_1)) 
                                      (30 (aload_0)) 
                                      (31 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 2)) 
                                      (36 (astore_1)) 
                                      (37 (getstatic (fieldCP "PROTOCOL_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (40 (aload_1)) 
                                      (41 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (44 (pop)) 
                                      (45 (aload_1)) 
                                      (46 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (51 (iconst_1)) 
                                      (52 (isub)) 
                                      (53 (ireturn)) 
                                      (endofcode 54))
                                   (Exceptions )
                                   (StackMap )))
                        (method "registerVarCallsite"
                              (parameters (class "clojure.lang.Var"))
                              (returntype . void)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 46)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "VAR_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "isBound" "clojure.lang.Var" () boolean))) 
                                      (6 (ifne 19))  ;;to TAG_0
                                      (9 (new (class "java.lang.IllegalAccessError"))) 
                                      (12 (dup)) 
                                      (13 (ldc 12)) ;;STRING:: "VAR_CALLSITES is not bound"
                                      (15 (invokespecial (methodCP "<init>" "java.lang.IllegalAccessError" ((class "java.lang.String")) void))) 
                                      (18 (athrow)) 
                                      (19 (getstatic (fieldCP "VAR_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (22 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (25 (checkcast (class "clojure.lang.IPersistentCollection"))) 
                                      (28 (astore_1)) 
                                      (29 (aload_1)) 
                                      (30 (aload_0)) 
                                      (31 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentCollection" ((class "java.lang.Object")) (class "clojure.lang.IPersistentCollection")) 2)) 
                                      (36 (astore_1)) 
                                      (37 (getstatic (fieldCP "VAR_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (40 (aload_1)) 
                                      (41 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (44 (pop)) 
                                      (45 (return)) 
                                      (endofcode 46))
                                   (Exceptions )
                                   (StackMap )))
                        (method "fwdPath"
                              (parameters (class "clojure.lang.Compiler$PathNode"))
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 22)
                                   (parsedcode
                                      (0 (aconst_null)) 
                                      (1 (astore_1)) 
                                      (2 (aload_0)) ;;at TAG_1
                                      (3 (ifnull 20))  ;;to TAG_0
                                      (6 (aload_0)) 
                                      (7 (aload_1)) 
                                      (8 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (11 (astore_1)) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "parent" "clojure.lang.Compiler$PathNode" (class "clojure.lang.Compiler$PathNode")))) 
                                      (16 (astore_0)) 
                                      (17 (goto 2)) ;;to TAG_1
                                      (20 (aload_1)) ;;at TAG_0
                                      (21 (areturn)) 
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "commonPath"
                              (parameters (class "clojure.lang.Compiler$PathNode") (class "clojure.lang.Compiler$PathNode"))
                              (returntype . (class "clojure.lang.Compiler$PathNode"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 66)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "fwdPath" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$PathNode")) (class "clojure.lang.ISeq")))) 
                                      (4 (astore_2)) 
                                      (5 (aload_1)) 
                                      (6 (invokestatic (methodCP "fwdPath" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$PathNode")) (class "clojure.lang.ISeq")))) 
                                      (9 (astore_3)) 
                                      (10 (aload_2)) 
                                      (11 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (14 (aload_3)) 
                                      (15 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (18 (if_acmpeq 23))  ;;to TAG_0
                                      (21 (aconst_null)) 
                                      (22 (areturn)) 
                                      (23 (aload_2)) ;;at TAG_0
                                      (24 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (27 (ifnull 58)) ;;to TAG_1
                                      (30 (aload_2)) 
                                      (31 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (34 (aload_3)) 
                                      (35 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (38 (if_acmpne 58)) ;;to TAG_1
                                      (41 (aload_2)) 
                                      (42 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (47 (astore_2)) 
                                      (48 (aload_3)) 
                                      (49 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (54 (astore_3)) 
                                      (55 (goto 23))  ;;to TAG_0
                                      (58 (aload_2)) ;;at TAG_1
                                      (59 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (62 (checkcast (class "clojure.lang.Compiler$PathNode"))) 
                                      (65 (areturn)) 
                                      (endofcode 66))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addAnnotation"
                              (parameters (class "java.lang.Object") (class "clojure.lang.IPersistentMap"))
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_1)) ;;at TAG_2
                                      (1 (ifnull 22)) ;;to TAG_0
                                      (4 (getstatic (fieldCP "ADD_ANNOTATIONS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (7 (invokevirtual (methodCP "isBound" "clojure.lang.Var" () boolean))) 
                                      (10 (ifeq 22)) ;;to TAG_0
                                      (13 (getstatic (fieldCP "ADD_ANNOTATIONS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (16 (aload_0)) 
                                      (17 (aload_1)) 
                                      (18 (invokevirtual (methodCP "invoke" "clojure.lang.Var" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (21 (pop)) 
                                      (22 (goto 31)) ;;to TAG_1;;at TAG_0
                                      (25 (astore_2)) ;;at TAG_3
                                      (26 (aload_2)) 
                                      (27 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (30 (athrow)) 
                                      (31 (return)) ;;at TAG_1
                                      (endofcode 32))
                                   (Exceptions 
                                     (handler 0 22  25 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "addParameterAnnotation"
                              (parameters (class "java.lang.Object") (class "clojure.lang.IPersistentMap") int)
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 36)
                                   (parsedcode
                                      (0 (aload_1)) ;;at TAG_2
                                      (1 (ifnull 26)) ;;to TAG_0
                                      (4 (getstatic (fieldCP "ADD_ANNOTATIONS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (7 (invokevirtual (methodCP "isBound" "clojure.lang.Var" () boolean))) 
                                      (10 (ifeq 26)) ;;to TAG_0
                                      (13 (getstatic (fieldCP "ADD_ANNOTATIONS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (16 (aload_0)) 
                                      (17 (aload_1)) 
                                      (18 (iload_2)) 
                                      (19 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (22 (invokevirtual (methodCP "invoke" "clojure.lang.Var" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (25 (pop)) 
                                      (26 (goto 35)) ;;to TAG_1;;at TAG_0
                                      (29 (astore_3)) ;;at TAG_3
                                      (30 (aload_3)) 
                                      (31 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (34 (athrow)) 
                                      (35 (return)) ;;at TAG_1
                                      (endofcode 36))
                                   (Exceptions 
                                     (handler 0 26  29 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "analyzeSymbol"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 4) (code_length . 306)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "tagOf" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (4 (astore_1)) 
                                      (5 (aload_0)) 
                                      (6 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (9 (ifnonnull 34)) ;;to TAG_0
                                      (12 (aload_0)) 
                                      (13 (invokestatic (methodCP "referenceLocal" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (16 (astore_2)) 
                                      (17 (aload_2)) 
                                      (18 (ifnull 31))  ;;to TAG_1
                                      (21 (new (class "clojure.lang.Compiler$LocalBindingExpr"))) 
                                      (24 (dup)) 
                                      (25 (aload_2)) 
                                      (26 (aload_1)) 
                                      (27 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$LocalBindingExpr" ((class "clojure.lang.Compiler$LocalBinding") (class "clojure.lang.Symbol")) void))) 
                                      (30 (areturn)) 
                                      (31 (goto 146)) ;;to TAG_2;;at TAG_1
                                      (34 (aload_0)) ;;at TAG_0
                                      (35 (invokestatic (methodCP "namespaceFor" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (38 (ifnonnull 146)) ;;to TAG_2
                                      (41 (aload_0)) 
                                      (42 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (45 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (48 (astore_2)) 
                                      (49 (aload_2)) 
                                      (50 (iconst_0)) 
                                      (51 (invokestatic (methodCP "access$400" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object") boolean) (class "java.lang.Class")))) 
                                      (54 (astore_3)) 
                                      (55 (aload_3)) 
                                      (56 (ifnull 146)) ;;to TAG_2
                                      (59 (aload_3)) 
                                      (60 (aload_0)) 
                                      (61 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (64 (iconst_1)) 
                                      (65 (invokestatic (methodCP "getField" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.String") boolean) (class "java.lang.reflect.Field")))) 
                                      (68 (ifnull 109)) ;;to TAG_3
                                      (71 (new (class "clojure.lang.Compiler$StaticFieldExpr"))) 
                                      (74 (dup)) 
                                      (75 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (78 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (81 (checkcast (class "java.lang.Integer"))) 
                                      (84 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (87 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (90 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (93 (checkcast (class "java.lang.Integer"))) 
                                      (96 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (99 (aload_3)) 
                                      (100 (aload_0)) 
                                      (101 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (104 (aload_1)) 
                                      (105 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$StaticFieldExpr" (int int (class "java.lang.Class") (class "java.lang.String") (class "clojure.lang.Symbol")) void))) 
                                      (108 (areturn)) 
                                      (109 (new (class "java.lang.StringBuilder"))) ;;at TAG_3
                                      (112 (dup)) 
                                      (113 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (116 (ldc_w 13)) ;;STRING:: "Unable to find static field: "
                                      (119 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (122 (aload_0)) 
                                      (123 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (126 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (129 (ldc_w 14)) ;;STRING:: " in "
                                      (132 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (135 (aload_3)) 
                                      (136 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (139 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (142 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (145 (athrow)) 
                                      (146 (aload_0)) ;;at TAG_2
                                      (147 (invokestatic (methodCP "resolve" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "java.lang.Object")))) 
                                      (150 (astore_2)) 
                                      (151 (aload_2)) 
                                      (152 (instanceof (class "clojure.lang.Var"))) 
                                      (155 (ifeq 241)) ;;to TAG_4
                                      (158 (aload_2)) 
                                      (159 (checkcast (class "clojure.lang.Var"))) 
                                      (162 (astore_3)) 
                                      (163 (aload_3)) 
                                      (164 (invokestatic (methodCP "isMacro" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (167 (ifnull 194)) ;;to TAG_5
                                      (170 (new (class "java.lang.StringBuilder"))) 
                                      (173 (dup)) 
                                      (174 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (177 (ldc_w 15)) ;;STRING:: "Can\nt take value of a macro: "
                                      (180 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (183 (aload_3)) 
                                      (184 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (187 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (190 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (193 (athrow)) 
                                      (194 (aload_3)) ;;at TAG_5
                                      (195 (invokevirtual (methodCP "meta" "clojure.lang.Var" () (class "clojure.lang.IPersistentMap")))) 
                                      (198 (getstatic (fieldCP "CONST_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (201 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (204 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (207 (ifeq 227)) ;;to TAG_6
                                      (210 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (213 (getstatic (fieldCP "QUOTE" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (216 (aload_3)) 
                                      (217 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (220 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (223 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (226 (areturn)) 
                                      (227 (aload_3)) ;;at TAG_6
                                      (228 (invokestatic (methodCP "registerVar" "clojure.lang.Compiler" ((class "clojure.lang.Var")) void))) 
                                      (231 (new (class "clojure.lang.Compiler$VarExpr"))) 
                                      (234 (dup)) 
                                      (235 (aload_3)) 
                                      (236 (aload_1)) 
                                      (237 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$VarExpr" ((class "clojure.lang.Var") (class "clojure.lang.Symbol")) void))) 
                                      (240 (areturn)) 
                                      (241 (aload_2)) ;;at TAG_4
                                      (242 (instanceof (class "java.lang.Class"))) 
                                      (245 (ifeq 257)) ;;to TAG_7
                                      (248 (new (class "clojure.lang.Compiler$ConstantExpr"))) 
                                      (251 (dup)) 
                                      (252 (aload_2)) 
                                      (253 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$ConstantExpr" ((class "java.lang.Object")) void))) 
                                      (256 (areturn)) 
                                      (257 (aload_2)) ;;at TAG_7
                                      (258 (instanceof (class "clojure.lang.Symbol"))) 
                                      (261 (ifeq 276)) ;;to TAG_8
                                      (264 (new (class "clojure.lang.Compiler$UnresolvedVarExpr"))) 
                                      (267 (dup)) 
                                      (268 (aload_2)) 
                                      (269 (checkcast (class "clojure.lang.Symbol"))) 
                                      (272 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$UnresolvedVarExpr" ((class "clojure.lang.Symbol")) void))) 
                                      (275 (areturn)) 
                                      (276 (new (class "java.lang.StringBuilder"))) ;;at TAG_8
                                      (279 (dup)) 
                                      (280 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (283 (ldc_w 16)) ;;STRING:: "Unable to resolve symbol: "
                                      (286 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (289 (aload_0)) 
                                      (290 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (293 (ldc_w 17)) ;;STRING:: " in this context"
                                      (296 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (299 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (302 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (305 (athrow)) 
                                      (endofcode 306))
                                   (Exceptions )
                                   (StackMap )))
                        (method "destubClassName"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 25)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ldc_w 0)) ;;STRING:: "compile__stub"
                                      (4 (invokevirtual (methodCP "startsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (7 (ifeq 23))  ;;to TAG_0
                                      (10 (aload_0)) 
                                      (11 (ldc_w 0)) ;;STRING:: "compile__stub"
                                      (14 (invokevirtual (methodCP "length" "java.lang.String" () int))) 
                                      (17 (iconst_1)) 
                                      (18 (iadd)) 
                                      (19 (invokevirtual (methodCP "substring" "java.lang.String" (int) (class "java.lang.String")))) 
                                      (22 (areturn)) 
                                      (23 (aload_0)) ;;at TAG_0
                                      (24 (areturn)) 
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getType"
                              (parameters (class "java.lang.Class"))
                              (returntype . (class "clojure.asm.Type"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 51)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (4 (invokevirtual (methodCP "getDescriptor" "clojure.asm.Type" () (class "java.lang.String")))) 
                                      (7 (astore_1)) 
                                      (8 (aload_1)) 
                                      (9 (ldc_w 18)) ;;STRING:: "L"
                                      (12 (invokevirtual (methodCP "startsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (15 (ifeq 46))  ;;to TAG_0
                                      (18 (new (class "java.lang.StringBuilder"))) 
                                      (21 (dup)) 
                                      (22 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (25 (ldc_w 18)) ;;STRING:: "L"
                                      (28 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (31 (aload_1)) 
                                      (32 (iconst_1)) 
                                      (33 (invokevirtual (methodCP "substring" "java.lang.String" (int) (class "java.lang.String")))) 
                                      (36 (invokestatic (methodCP "destubClassName" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (39 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (42 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (45 (astore_1)) 
                                      (46 (aload_1)) ;;at TAG_0
                                      (47 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.String")) (class "clojure.asm.Type")))) 
                                      (50 (areturn)) 
                                      (endofcode 51))
                                   (Exceptions )
                                   (StackMap )))
                        (method "resolve"
                              (parameters (class "clojure.lang.Symbol") boolean)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 9)
                                   (parsedcode
                                      (0 (invokestatic
					(methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace"))))
                                      (3 (aload_0))
                                      (4 (iload_1))
                                      (5 (invokestatic
					(methodCP "resolveIn" "clojure.lang.Compiler" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol") boolean) (class "java.lang.Object"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "resolve"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (invokestatic
					(methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace"))))
                                      (3 (aload_0))
                                      (4 (iconst_0))
                                      (5 (invokestatic
					(methodCP "resolveIn" "clojure.lang.Compiler" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol") boolean) (class "java.lang.Object"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "namespaceFor"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "clojure.lang.Namespace"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (invokestatic
					(methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace"))))
                                      (3 (aload_0))
                                      (4 (invokestatic
					(methodCP "namespaceFor" "clojure.lang.Compiler" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol")) (class "clojure.lang.Namespace"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "namespaceFor"
                              (parameters (class "clojure.lang.Namespace") (class "clojure.lang.Symbol"))
                              (returntype . (class "clojure.lang.Namespace"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 25)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (4 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (7 (astore_2)) 
                                      (8 (aload_0)) 
                                      (9 (aload_2)) 
                                      (10 (invokevirtual (methodCP "lookupAlias" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (13 (astore_3)) 
                                      (14 (aload_3)) 
                                      (15 (ifnonnull 23))  ;;to TAG_0
                                      (18 (aload_2)) 
                                      (19 (invokestatic (methodCP "find" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (22 (astore_3)) 
                                      (23 (aload_3)) ;;at TAG_0
                                      (24 (areturn)) 
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "resolveIn"
                              (parameters (class "clojure.lang.Namespace") (class "clojure.lang.Symbol") boolean)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 281)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (4 (ifnull 144)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (aload_1)) 
                                      (9 (invokestatic (methodCP "namespaceFor" "clojure.lang.Compiler" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (12 (astore_3)) 
                                      (13 (aload_3)) 
                                      (14 (ifnonnull 44))  ;;to TAG_1
                                      (17 (new (class "java.lang.StringBuilder"))) 
                                      (20 (dup)) 
                                      (21 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (24 (ldc_w 19)) ;;STRING:: "No such namespace: "
                                      (27 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (30 (aload_1)) 
                                      (31 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (34 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (37 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (40 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (43 (athrow)) 
                                      (44 (aload_3)) ;;at TAG_1
                                      (45 (aload_1)) 
                                      (46 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (49 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (52 (invokevirtual (methodCP "findInternedVar" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Var")))) 
                                      (55 (astore 4)) 
                                      (57 (aload 4)) 
                                      (59 (ifnonnull 86)) ;;to TAG_2
                                      (62 (new (class "java.lang.StringBuilder"))) 
                                      (65 (dup)) 
                                      (66 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (69 (ldc_w 20)) ;;STRING:: "No such var: "
                                      (72 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (75 (aload_1)) 
                                      (76 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (79 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (82 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (85 (athrow)) 
                                      (86 (aload 4)) ;;at TAG_2
                                      (88 (getfield (fieldCP "ns" "clojure.lang.Var" (class "clojure.lang.Namespace")))) 
                                      (91 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) 
                                      (94 (if_acmpeq 141)) ;;to TAG_3
                                      (97 (aload 4)) 
                                      (99 (invokevirtual (methodCP "isPublic" "clojure.lang.Var" () boolean))) 
                                      (102 (ifne 141)) ;;to TAG_3
                                      (105 (iload_2)) 
                                      (106 (ifne 141)) ;;to TAG_3
                                      (109 (new (class "java.lang.IllegalStateException"))) 
                                      (112 (dup)) 
                                      (113 (new (class "java.lang.StringBuilder"))) 
                                      (116 (dup)) 
                                      (117 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (120 (ldc 3)) ;;STRING:: "var: "
                                      (122 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (125 (aload_1)) 
                                      (126 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (129 (ldc 4)) ;;STRING:: " is not public"
                                      (131 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (134 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (137 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (140 (athrow)) 
                                      (141 (aload 4)) ;;at TAG_3
                                      (143 (areturn)) 
                                      (144 (aload_1)) ;;at TAG_0
                                      (145 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (148 (bipush 46)) 
                                      (150 (invokevirtual (methodCP "indexOf" "java.lang.String" (int) int))) 
                                      (153 (ifgt 169)) ;;to TAG_4
                                      (156 (aload_1)) 
                                      (157 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (160 (iconst_0)) 
                                      (161 (invokevirtual (methodCP "charAt" "java.lang.String" (int) char))) 
                                      (164 (bipush 91)) 
                                      (166 (if_icmpne 177)) ;;to TAG_5
                                      (169 (aload_1)) ;;at TAG_4
                                      (170 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (173 (invokestatic (methodCP "classForName" "clojure.lang.RT" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (176 (areturn)) 
                                      (177 (aload_1)) ;;at TAG_5
                                      (178 (getstatic (fieldCP "NS" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (181 (invokevirtual (methodCP "equals" "clojure.lang.Symbol" ((class "java.lang.Object")) boolean))) 
                                      (184 (ifeq 191)) ;;to TAG_6
                                      (187 (getstatic (fieldCP "NS_VAR" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (190 (areturn)) 
                                      (191 (aload_1)) ;;at TAG_6
                                      (192 (getstatic (fieldCP "IN_NS" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (195 (invokevirtual (methodCP "equals" "clojure.lang.Symbol" ((class "java.lang.Object")) boolean))) 
                                      (198 (ifeq 205)) ;;to TAG_7
                                      (201 (getstatic (fieldCP "IN_NS_VAR" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (204 (areturn)) 
                                      (205 (aload_1)) ;;at TAG_7
                                      (206 (getstatic (fieldCP "COMPILE_STUB_SYM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (209 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (212 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (215 (ifeq 225)) ;;to TAG_8
                                      (218 (getstatic (fieldCP "COMPILE_STUB_CLASS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (221 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (224 (areturn)) 
                                      (225 (aload_0)) ;;at TAG_8
                                      (226 (aload_1)) 
                                      (227 (invokevirtual (methodCP "getMapping" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "java.lang.Object")))) 
                                      (230 (astore_3)) 
                                      (231 (aload_3)) 
                                      (232 (ifnonnull 279)) ;;to TAG_9
                                      (235 (getstatic (fieldCP "ALLOW_UNRESOLVED_VARS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (238 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (241 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (244 (ifeq 249)) ;;to TAG_10
                                      (247 (aload_1)) 
                                      (248 (areturn)) 
                                      (249 (new (class "java.lang.StringBuilder"))) ;;at TAG_10
                                      (252 (dup)) 
                                      (253 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (256 (ldc_w 16)) ;;STRING:: "Unable to resolve symbol: "
                                      (259 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (262 (aload_1)) 
                                      (263 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (266 (ldc_w 17)) ;;STRING:: " in this context"
                                      (269 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (272 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (275 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (278 (athrow)) 
                                      (279 (aload_3)) ;;at TAG_9
                                      (280 (areturn)) 
                                      (endofcode 281))
                                   (Exceptions )
                                   (StackMap )))
                        (method "maybeResolveIn"
                              (parameters (class "clojure.lang.Namespace") (class "clojure.lang.Symbol"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 121)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (4 (ifnull 39)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (aload_1)) 
                                      (9 (invokestatic (methodCP "namespaceFor" "clojure.lang.Compiler" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (12 (astore_2)) 
                                      (13 (aload_2)) 
                                      (14 (ifnonnull 19)) ;;to TAG_1
                                      (17 (aconst_null)) 
                                      (18 (areturn)) 
                                      (19 (aload_2)) ;;at TAG_1
                                      (20 (aload_1)) 
                                      (21 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (24 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (27 (invokevirtual (methodCP "findInternedVar" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Var")))) 
                                      (30 (astore_3)) 
                                      (31 (aload_3)) 
                                      (32 (ifnonnull 37))  ;;to TAG_2
                                      (35 (aconst_null)) 
                                      (36 (areturn)) 
                                      (37 (aload_3)) ;;at TAG_2
                                      (38 (areturn)) 
                                      (39 (aload_1)) ;;at TAG_0
                                      (40 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (43 (bipush 46)) 
                                      (45 (invokevirtual (methodCP "indexOf" "java.lang.String" (int) int))) 
                                      (48 (ifle 64)) ;;to TAG_3
                                      (51 (aload_1)) 
                                      (52 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (55 (ldc_w 21)) ;;STRING:: "."
                                      (58 (invokevirtual (methodCP "endsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (61 (ifeq 77)) ;;to TAG_4
                                      (64 (aload_1)) ;;at TAG_3
                                      (65 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (68 (iconst_0)) 
                                      (69 (invokevirtual (methodCP "charAt" "java.lang.String" (int) char))) 
                                      (72 (bipush 91)) 
                                      (74 (if_icmpne 85)) ;;to TAG_5
                                      (77 (aload_1)) ;;at TAG_4
                                      (78 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (81 (invokestatic (methodCP "classForName" "clojure.lang.RT" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (84 (areturn)) 
                                      (85 (aload_1)) ;;at TAG_5
                                      (86 (getstatic (fieldCP "NS" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (89 (invokevirtual (methodCP "equals" "clojure.lang.Symbol" ((class "java.lang.Object")) boolean))) 
                                      (92 (ifeq 99)) ;;to TAG_6
                                      (95 (getstatic (fieldCP "NS_VAR" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (98 (areturn)) 
                                      (99 (aload_1)) ;;at TAG_6
                                      (100 (getstatic (fieldCP "IN_NS" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (103 (invokevirtual (methodCP "equals" "clojure.lang.Symbol" ((class "java.lang.Object")) boolean))) 
                                      (106 (ifeq 113)) ;;to TAG_7
                                      (109 (getstatic (fieldCP "IN_NS_VAR" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (112 (areturn)) 
                                      (113 (aload_0)) ;;at TAG_7
                                      (114 (aload_1)) 
                                      (115 (invokevirtual (methodCP "getMapping" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "java.lang.Object")))) 
                                      (118 (astore_2)) 
                                      (119 (aload_2)) 
                                      (120 (areturn)) 
                                      (endofcode 121))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lookupVar"
                              (parameters (class "clojure.lang.Symbol") boolean boolean)
                              (returntype . (class "clojure.lang.Var"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 6) (code_length . 208)
                                   (parsedcode
                                      (0 (aconst_null)) 
                                      (1 (astore_3)) 
                                      (2 (aload_0)) 
                                      (3 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (6 (ifnull 66)) ;;to TAG_0
                                      (9 (aload_0)) 
                                      (10 (invokestatic (methodCP "namespaceFor" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (13 (astore 4)) 
                                      (15 (aload 4)) 
                                      (17 (ifnonnull 22))  ;;to TAG_1
                                      (20 (aconst_null)) 
                                      (21 (areturn)) 
                                      (22 (aload_0)) ;;at TAG_1
                                      (23 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (26 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (29 (astore 5)) 
                                      (31 (iload_1)) 
                                      (32 (ifeq 55)) ;;to TAG_2
                                      (35 (aload 4)) 
                                      (37 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) 
                                      (40 (if_acmpne 55)) ;;to TAG_2
                                      (43 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) 
                                      (46 (aload 5)) 
                                      (48 (invokevirtual (methodCP "intern" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Var")))) 
                                      (51 (astore_3)) 
                                      (52 (goto 63)) ;;to TAG_3
                                      (55 (aload 4)) ;;at TAG_2
                                      (57 (aload 5)) 
                                      (59 (invokevirtual (methodCP "findInternedVar" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Var")))) 
                                      (62 (astore_3)) 
                                      (63 (goto 187)) ;;to TAG_4;;at TAG_3
                                      (66 (aload_0)) ;;at TAG_0
                                      (67 (getstatic (fieldCP "NS" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (70 (invokevirtual (methodCP "equals" "clojure.lang.Symbol" ((class "java.lang.Object")) boolean))) 
                                      (73 (ifeq 83)) ;;to TAG_5
                                      (76 (getstatic (fieldCP "NS_VAR" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (79 (astore_3)) 
                                      (80 (goto 187)) ;;to TAG_4
                                      (83 (aload_0)) ;;at TAG_5
                                      (84 (getstatic (fieldCP "IN_NS" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (87 (invokevirtual (methodCP "equals" "clojure.lang.Symbol" ((class "java.lang.Object")) boolean))) 
                                      (90 (ifeq 100)) ;;to TAG_6
                                      (93 (getstatic (fieldCP "IN_NS_VAR" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (96 (astore_3)) 
                                      (97 (goto 187)) ;;to TAG_4
                                      (100 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) ;;at TAG_6
                                      (103 (aload_0)) 
                                      (104 (invokevirtual (methodCP "getMapping" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "java.lang.Object")))) 
                                      (107 (astore 4)) 
                                      (109 (aload 4)) 
                                      (111 (ifnonnull 135)) ;;to TAG_7
                                      (114 (iload_1)) 
                                      (115 (ifeq 187)) ;;to TAG_4
                                      (118 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) 
                                      (121 (aload_0)) 
                                      (122 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (125 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (128 (invokevirtual (methodCP "intern" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Var")))) 
                                      (131 (astore_3)) 
                                      (132 (goto 187)) ;;to TAG_4
                                      (135 (aload 4)) ;;at TAG_7
                                      (137 (instanceof (class "clojure.lang.Var"))) 
                                      (140 (ifeq 152)) ;;to TAG_8
                                      (143 (aload 4)) 
                                      (145 (checkcast (class "clojure.lang.Var"))) 
                                      (148 (astore_3)) 
                                      (149 (goto 187)) ;;to TAG_4
                                      (152 (new (class "java.lang.StringBuilder"))) ;;at TAG_8
                                      (155 (dup)) 
                                      (156 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (159 (ldc_w 22)) ;;STRING:: "Expecting var, but "
                                      (162 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (165 (aload_0)) 
                                      (166 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (169 (ldc_w 23)) ;;STRING:: " is mapped to "
                                      (172 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (175 (aload 4)) 
                                      (177 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (180 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (183 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (186 (athrow)) 
                                      (187 (aload_3)) ;;at TAG_4
                                      (188 (ifnull 206)) ;;to TAG_9
                                      (191 (aload_3)) 
                                      (192 (invokevirtual (methodCP "isMacro" "clojure.lang.Var" () boolean))) 
                                      (195 (ifeq 202)) ;;to TAG_10
                                      (198 (iload_2)) 
                                      (199 (ifeq 206)) ;;to TAG_9
                                      (202 (aload_3)) ;;at TAG_10
                                      (203 (invokestatic (methodCP "registerVar" "clojure.lang.Compiler" ((class "clojure.lang.Var")) void))) 
                                      (206 (aload_3)) ;;at TAG_9
                                      (207 (areturn)) 
                                      (endofcode 208))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lookupVar"
                              (parameters (class "clojure.lang.Symbol") boolean)
                              (returntype . (class "clojure.lang.Var"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (iconst_1))
                                      (3 (invokestatic
					(methodCP "lookupVar" "clojure.lang.Compiler" ((class "clojure.lang.Symbol") boolean boolean) (class "clojure.lang.Var"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "registerVar"
                              (parameters (class "clojure.lang.Var"))
                              (returntype . void)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 50)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "VARS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "isBound" "clojure.lang.Var" () boolean))) 
                                      (6 (ifne 10))  ;;to TAG_0
                                      (9 (return)) 
                                      (10 (getstatic (fieldCP "VARS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (13 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (16 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (19 (astore_1)) 
                                      (20 (aload_1)) 
                                      (21 (aload_0)) 
                                      (22 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (25 (astore_2)) 
                                      (26 (aload_2)) 
                                      (27 (ifnonnull 49)) ;;to TAG_1
                                      (30 (getstatic (fieldCP "VARS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (33 (aload_1)) 
                                      (34 (aload_0)) 
                                      (35 (aload_0)) 
                                      (36 (invokestatic (methodCP "registerConstant" "clojure.lang.Compiler" ((class "java.lang.Object")) int))) 
                                      (39 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (42 (invokestatic (methodCP "assoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative")))) 
                                      (45 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (48 (pop)) 
                                      (49 (return)) ;;at TAG_1
                                      (endofcode 50))
                                   (Exceptions )
                                   (StackMap )))
                        (method "currentNS"
                              (parameters )
                              (returntype . (class "clojure.lang.Namespace"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 10)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var"))))
                                      (3 (invokevirtual
					(methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (6 (checkcast (class "clojure.lang.Namespace")))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "closeOver"
                              (parameters (class "clojure.lang.Compiler$LocalBinding") (class "clojure.lang.Compiler$ObjMethod"))
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 83)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnull 82))  ;;to TAG_0
                                      (4 (aload_1)) 
                                      (5 (ifnull 82))  ;;to TAG_0
                                      (8 (aload_1)) 
                                      (9 (getfield (fieldCP "locals" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.IPersistentMap")))) 
                                      (12 (aload_0)) 
                                      (13 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (16 (ifnonnull 52)) ;;to TAG_1
                                      (19 (aload_1)) 
                                      (20 (getfield (fieldCP "objx" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.Compiler$ObjExpr")))) 
                                      (23 (aload_1)) 
                                      (24 (getfield (fieldCP "objx" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.Compiler$ObjExpr")))) 
                                      (27 (getfield (fieldCP "closes" "clojure.lang.Compiler$ObjExpr" (class "clojure.lang.IPersistentMap")))) 
                                      (30 (aload_0)) 
                                      (31 (aload_0)) 
                                      (32 (invokestatic (methodCP "assoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative")))) 
                                      (35 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (38 (putfield (fieldCP "closes" "clojure.lang.Compiler$ObjExpr" (class "clojure.lang.IPersistentMap")))) 
                                      (41 (aload_0)) 
                                      (42 (aload_1)) 
                                      (43 (getfield (fieldCP "parent" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.Compiler$ObjMethod")))) 
                                      (46 (invokestatic (methodCP "closeOver" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$LocalBinding") (class "clojure.lang.Compiler$ObjMethod")) void))) 
                                      (49 (goto 82))  ;;to TAG_0
                                      (52 (getstatic (fieldCP "IN_CATCH_FINALLY" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (55 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (58 (ifnull 82))  ;;to TAG_0
                                      (61 (aload_1)) 
                                      (62 (aload_1)) 
                                      (63 (getfield (fieldCP "localsUsedInCatchFinally" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.PersistentHashSet")))) 
                                      (66 (aload_0)) 
                                      (67 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (70 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (73 (invokevirtual (methodCP "cons" "clojure.lang.PersistentHashSet" ((class "java.lang.Object")) (class "clojure.lang.IPersistentSet")))) 
                                      (76 (checkcast (class "clojure.lang.PersistentHashSet"))) 
                                      (79 (putfield (fieldCP "localsUsedInCatchFinally" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.PersistentHashSet")))) 
                                      (82 (return)) ;;at TAG_0
                                      (endofcode 83))
                                   (Exceptions )
                                   (StackMap )))
                        (method "referenceLocal"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "clojure.lang.Compiler$LocalBinding"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 46)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "isBound" "clojure.lang.Var" () boolean))) 
                                      (6 (ifne 11))  ;;to TAG_0
                                      (9 (aconst_null)) 
                                      (10 (areturn)) 
                                      (11 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (14 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (17 (aload_0)) 
                                      (18 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (21 (checkcast (class "clojure.lang.Compiler$LocalBinding"))) 
                                      (24 (astore_1)) 
                                      (25 (aload_1)) 
                                      (26 (ifnull 44)) ;;to TAG_1
                                      (29 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (32 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (35 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (38 (astore_2)) 
                                      (39 (aload_1)) 
                                      (40 (aload_2)) 
                                      (41 (invokestatic (methodCP "closeOver" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$LocalBinding") (class "clojure.lang.Compiler$ObjMethod")) void))) 
                                      (44 (aload_1)) ;;at TAG_1
                                      (45 (areturn)) 
                                      (endofcode 46))
                                   (Exceptions )
                                   (StackMap )))
                        (method "tagOf"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Symbol"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 41)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (4 (getstatic (fieldCP "TAG_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (7 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (10 (astore_1)) 
                                      (11 (aload_1)) 
                                      (12 (instanceof (class "clojure.lang.Symbol"))) 
                                      (15 (ifeq 23))  ;;to TAG_0
                                      (18 (aload_1)) 
                                      (19 (checkcast (class "clojure.lang.Symbol"))) 
                                      (22 (areturn)) 
                                      (23 (aload_1)) ;;at TAG_0
                                      (24 (instanceof (class "java.lang.String"))) 
                                      (27 (ifeq 39)) ;;to TAG_1
                                      (30 (aconst_null)) 
                                      (31 (aload_1)) 
                                      (32 (checkcast (class "java.lang.String"))) 
                                      (35 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (38 (areturn)) 
                                      (39 (aconst_null)) ;;at TAG_1
                                      (40 (areturn)) 
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap )))
                        (method "loadFile"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 65)
                                   (parsedcode
                                      (0 (new (class "java.io.FileInputStream"))) 
                                      (3 (dup)) 
                                      (4 (aload_0)) 
                                      (5 (invokespecial (methodCP "<init>" "java.io.FileInputStream" ((class "java.lang.String")) void))) 
                                      (8 (astore_1)) 
                                      (9 (new (class "java.io.InputStreamReader"))) ;;at TAG_1
                                      (12 (dup)) 
                                      (13 (aload_1)) 
                                      (14 (getstatic (fieldCP "UTF8" "clojure.lang.RT" (class "java.nio.charset.Charset")))) 
                                      (17 (invokespecial (methodCP "<init>" "java.io.InputStreamReader" ((class "java.io.InputStream") (class "java.nio.charset.Charset")) void))) 
                                      (20 (new (class "java.io.File"))) 
                                      (23 (dup)) 
                                      (24 (aload_0)) 
                                      (25 (invokespecial (methodCP "<init>" "java.io.File" ((class "java.lang.String")) void))) 
                                      (28 (invokevirtual (methodCP "getAbsolutePath" "java.io.File" () (class "java.lang.String")))) 
                                      (31 (new (class "java.io.File"))) 
                                      (34 (dup)) 
                                      (35 (aload_0)) 
                                      (36 (invokespecial (methodCP "<init>" "java.io.File" ((class "java.lang.String")) void))) 
                                      (39 (invokevirtual (methodCP "getName" "java.io.File" () (class "java.lang.String")))) 
                                      (42 (invokestatic (methodCP "load" "clojure.lang.Compiler" ((class "java.io.Reader") (class "java.lang.String") (class "java.lang.String")) (class "java.lang.Object")))) 
                                      (45 (astore_2)) 
                                      (46 (jsr 57)) ;;to TAG_0
                                      (49 (aload_2)) ;;at TAG_2
                                      (50 (areturn)) 
                                      (51 (astore_3)) ;;at TAG_3
                                      (52 (jsr 57)) ;;to TAG_0
                                      (55 (aload_3)) ;;at TAG_4
                                      (56 (athrow)) 
                                      (57 (astore 4)) ;;at TAG_0
                                      (59 (aload_1)) 
                                      (60 (invokevirtual (methodCP "close" "java.io.FileInputStream" () void))) 
                                      (63 (ret 4)) 
                                      (endofcode 65))
                                   (Exceptions 
                                     (handler 9 49  51 (class "java.lang.Throwable"))
                                     (handler 51 55  51 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "load"
                              (parameters (class "java.io.Reader"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aconst_null))
                                      (2 (ldc_w 24))      ;;STRING:: "NO_SOURCE_FILE"
                                      (5 (invokestatic
					(methodCP "load" "clojure.lang.Compiler" ((class "java.io.Reader") (class "java.lang.String") (class "java.lang.String")) (class "java.lang.Object"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "load"
                              (parameters (class "java.io.Reader") (class "java.lang.String") (class "java.lang.String"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 9) (code_length . 434)
                                   (parsedcode
                                      (0 (new (class "java.lang.Object"))) 
                                      (3 (dup)) 
                                      (4 (invokespecial (methodCP "<init>" "java.lang.Object" () void))) 
                                      (7 (astore_3)) 
                                      (8 (aconst_null)) 
                                      (9 (astore 4)) 
                                      (11 (aload_0)) 
                                      (12 (instanceof (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (15 (ifeq 25)) ;;to TAG_0
                                      (18 (aload_0)) 
                                      (19 (checkcast (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (22 (goto 33))  ;;to TAG_1
                                      (25 (new (class "clojure.lang.LineNumberingPushbackReader"))) ;;at TAG_0
                                      (28 (dup)) 
                                      (29 (aload_0)) 
                                      (30 (invokespecial (methodCP "<init>" "clojure.lang.LineNumberingPushbackReader" ((class "java.io.Reader")) void))) 
                                      (33 (astore 5)) ;;at TAG_1
                                      (35 (bipush 32)) 
                                      (37 (anewarray (class "java.lang.Object"))) 
                                      (40 (dup)) 
                                      (41 (iconst_0)) 
                                      (42 (getstatic (fieldCP "LOADER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (45 (aastore)) 
                                      (46 (dup)) 
                                      (47 (iconst_1)) 
                                      (48 (invokestatic (methodCP "makeClassLoader" "clojure.lang.RT" () (class "java.lang.ClassLoader")))) 
                                      (51 (aastore)) 
                                      (52 (dup)) 
                                      (53 (iconst_2)) 
                                      (54 (getstatic (fieldCP "SOURCE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (57 (aastore)) 
                                      (58 (dup)) 
                                      (59 (iconst_3)) 
                                      (60 (aload_1)) 
                                      (61 (aastore)) 
                                      (62 (dup)) 
                                      (63 (iconst_4)) 
                                      (64 (getstatic (fieldCP "SOURCE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (67 (aastore)) 
                                      (68 (dup)) 
                                      (69 (iconst_5)) 
                                      (70 (aload_2)) 
                                      (71 (aastore)) 
                                      (72 (dup)) 
                                      (73 (bipush 6)) 
                                      (75 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (78 (aastore)) 
                                      (79 (dup)) 
                                      (80 (bipush 7)) 
                                      (82 (aconst_null)) 
                                      (83 (aastore)) 
                                      (84 (dup)) 
                                      (85 (bipush 8)) 
                                      (87 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (90 (aastore)) 
                                      (91 (dup)) 
                                      (92 (bipush 9)) 
                                      (94 (aconst_null)) 
                                      (95 (aastore)) 
                                      (96 (dup)) 
                                      (97 (bipush 10)) 
                                      (99 (getstatic (fieldCP "LOOP_LOCALS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (102 (aastore)) 
                                      (103 (dup)) 
                                      (104 (bipush 11)) 
                                      (106 (aconst_null)) 
                                      (107 (aastore)) 
                                      (108 (dup)) 
                                      (109 (bipush 12)) 
                                      (111 (getstatic (fieldCP "NEXT_LOCAL_NUM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (114 (aastore)) 
                                      (115 (dup)) 
                                      (116 (bipush 13)) 
                                      (118 (iconst_0)) 
                                      (119 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (122 (aastore)) 
                                      (123 (dup)) 
                                      (124 (bipush 14)) 
                                      (126 (getstatic (fieldCP "READEVAL" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (129 (aastore)) 
                                      (130 (dup)) 
                                      (131 (bipush 15)) 
                                      (133 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (136 (aastore)) 
                                      (137 (dup)) 
                                      (138 (bipush 16)) 
                                      (140 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (143 (aastore)) 
                                      (144 (dup)) 
                                      (145 (bipush 17)) 
                                      (147 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (150 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (153 (aastore)) 
                                      (154 (dup)) 
                                      (155 (bipush 18)) 
                                      (157 (getstatic (fieldCP "LINE_BEFORE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (160 (aastore)) 
                                      (161 (dup)) 
                                      (162 (bipush 19)) 
                                      (164 (aload 5)) 
                                      (166 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (169 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (172 (aastore)) 
                                      (173 (dup)) 
                                      (174 (bipush 20)) 
                                      (176 (getstatic (fieldCP "COLUMN_BEFORE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (179 (aastore)) 
                                      (180 (dup)) 
                                      (181 (bipush 21)) 
                                      (183 (aload 5)) 
                                      (185 (invokevirtual (methodCP "getColumnNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (188 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (191 (aastore)) 
                                      (192 (dup)) 
                                      (193 (bipush 22)) 
                                      (195 (getstatic (fieldCP "LINE_AFTER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (198 (aastore)) 
                                      (199 (dup)) 
                                      (200 (bipush 23)) 
                                      (202 (aload 5)) 
                                      (204 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (207 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (210 (aastore)) 
                                      (211 (dup)) 
                                      (212 (bipush 24)) 
                                      (214 (getstatic (fieldCP "COLUMN_AFTER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (217 (aastore)) 
                                      (218 (dup)) 
                                      (219 (bipush 25)) 
                                      (221 (aload 5)) 
                                      (223 (invokevirtual (methodCP "getColumnNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (226 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (229 (aastore)) 
                                      (230 (dup)) 
                                      (231 (bipush 26)) 
                                      (233 (getstatic (fieldCP "UNCHECKED_MATH" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (236 (aastore)) 
                                      (237 (dup)) 
                                      (238 (bipush 27)) 
                                      (240 (getstatic (fieldCP "UNCHECKED_MATH" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (243 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (246 (aastore)) 
                                      (247 (dup)) 
                                      (248 (bipush 28)) 
                                      (250 (getstatic (fieldCP "WARN_ON_REFLECTION" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (253 (aastore)) 
                                      (254 (dup)) 
                                      (255 (bipush 29)) 
                                      (257 (getstatic (fieldCP "WARN_ON_REFLECTION" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (260 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (263 (aastore)) 
                                      (264 (dup)) 
                                      (265 (bipush 30)) 
                                      (267 (getstatic (fieldCP "DATA_READERS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (270 (aastore)) 
                                      (271 (dup)) 
                                      (272 (bipush 31)) 
                                      (274 (getstatic (fieldCP "DATA_READERS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (277 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (280 (aastore)) 
                                      (281 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (284 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (287 (aload 5)) ;;at TAG_6
                                      (289 (iconst_0)) 
                                      (290 (aload_3)) 
                                      (291 (iconst_0)) 
                                      (292 (invokestatic (methodCP "read" "clojure.lang.LispReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (295 (astore 6)) 
                                      (297 (aload 6)) ;;at TAG_3
                                      (299 (aload_3)) 
                                      (300 (if_acmpeq 384)) ;;to TAG_2
                                      (303 (getstatic (fieldCP "LINE_AFTER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (306 (aload 5)) 
                                      (308 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (311 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (314 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (317 (pop)) 
                                      (318 (getstatic (fieldCP "COLUMN_AFTER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (321 (aload 5)) 
                                      (323 (invokevirtual (methodCP "getColumnNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (326 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (329 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (332 (pop)) 
                                      (333 (aload 6)) 
                                      (335 (iconst_0)) 
                                      (336 (invokestatic (methodCP "eval" "clojure.lang.Compiler" ((class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (339 (astore 4)) 
                                      (341 (getstatic (fieldCP "LINE_BEFORE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (344 (aload 5)) 
                                      (346 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (349 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (352 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (355 (pop)) 
                                      (356 (getstatic (fieldCP "COLUMN_BEFORE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (359 (aload 5)) 
                                      (361 (invokevirtual (methodCP "getColumnNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (364 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (367 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (370 (pop)) 
                                      (371 (aload 5)) 
                                      (373 (iconst_0)) 
                                      (374 (aload_3)) 
                                      (375 (iconst_0)) 
                                      (376 (invokestatic (methodCP "read" "clojure.lang.LispReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (379 (astore 6)) 
                                      (381 (goto 297)) ;;to TAG_3
                                      (384 (jsr 424)) ;;to TAG_4;;at TAG_2
                                      (387 (goto 431)) ;;to TAG_5;;at TAG_8
                                      (390 (astore 6)) ;;at TAG_7
                                      (392 (new (class "clojure.lang.Compiler$CompilerException"))) 
                                      (395 (dup)) 
                                      (396 (aload_1)) 
                                      (397 (aload 6)) 
                                      (399 (getfield (fieldCP "line" "clojure.lang.LispReader$ReaderException" int))) 
                                      (402 (aload 6)) 
                                      (404 (getfield (fieldCP "column" "clojure.lang.LispReader$ReaderException" int))) 
                                      (407 (aload 6)) 
                                      (409 (invokevirtual (methodCP "getCause" "clojure.lang.LispReader$ReaderException" () (class "java.lang.Throwable")))) 
                                      (412 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$CompilerException" ((class "java.lang.String") int int (class "java.lang.Throwable")) void))) 
                                      (415 (athrow)) 
                                      (416 (astore 7)) ;;at TAG_9
                                      (418 (jsr 424)) ;;to TAG_4
                                      (421 (aload 7)) ;;at TAG_10
                                      (423 (athrow)) 
                                      (424 (astore 8)) ;;at TAG_4
                                      (426 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (429 (ret 8)) 
                                      (431 (aload 4)) ;;at TAG_5
                                      (433 (areturn)) 
                                      (endofcode 434))
                                   (Exceptions 
                                     (handler 287 384  390 (class "clojure.lang.LispReader$ReaderException"))
                                     (handler 287 387  416 (class "java.lang.Throwable"))
                                     (handler 390 421  416 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "writeClassFile"
                              (parameters (class "java.lang.String") (array byte))
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 10) (code_length . 196)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "COMPILE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.lang.String"))) 
                                      (9 (astore_2)) 
                                      (10 (aload_2)) 
                                      (11 (ifnonnull 21)) ;;to TAG_0
                                      (14 (ldc_w 25)) ;;STRING:: "*compile-path* not set"
                                      (17 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (20 (athrow)) 
                                      (21 (aload_0)) ;;at TAG_0
                                      (22 (ldc_w 26)) ;;STRING:: "/"
                                      (25 (invokevirtual (methodCP "split" "java.lang.String" ((class "java.lang.String")) (array (class "java.lang.String"))))) 
                                      (28 (astore_3)) 
                                      (29 (aload_2)) 
                                      (30 (astore 4)) 
                                      (32 (iconst_0)) 
                                      (33 (istore 5)) 
                                      (35 (iload 5)) ;;at TAG_2
                                      (37 (aload_3)) 
                                      (38 (arraylength)) 
                                      (39 (iconst_1)) 
                                      (40 (isub)) 
                                      (41 (if_icmpge 93))  ;;to TAG_1
                                      (44 (new (class "java.lang.StringBuilder"))) 
                                      (47 (dup)) 
                                      (48 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (51 (aload 4)) 
                                      (53 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (56 (getstatic (fieldCP "separator" "java.io.File" (class "java.lang.String")))) 
                                      (59 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (62 (aload_3)) 
                                      (63 (iload 5)) 
                                      (65 (aaload)) 
                                      (66 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (69 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (72 (astore 4)) 
                                      (74 (new (class "java.io.File"))) 
                                      (77 (dup)) 
                                      (78 (aload 4)) 
                                      (80 (invokespecial (methodCP "<init>" "java.io.File" ((class "java.lang.String")) void))) 
                                      (83 (invokevirtual (methodCP "mkdir" "java.io.File" () boolean))) 
                                      (86 (pop)) 
                                      (87 (iinc 5 1)) 
                                      (90 (goto 35)) ;;to TAG_2
                                      (93 (new (class "java.lang.StringBuilder"))) ;;at TAG_1
                                      (96 (dup)) 
                                      (97 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (100 (aload_2)) 
                                      (101 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (104 (getstatic (fieldCP "separator" "java.io.File" (class "java.lang.String")))) 
                                      (107 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (110 (aload_0)) 
                                      (111 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (114 (ldc_w 27)) ;;STRING:: ".class"
                                      (117 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (120 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (123 (astore 5)) 
                                      (125 (new (class "java.io.File"))) 
                                      (128 (dup)) 
                                      (129 (aload 5)) 
                                      (131 (invokespecial (methodCP "<init>" "java.io.File" ((class "java.lang.String")) void))) 
                                      (134 (astore 6)) 
                                      (136 (aload 6)) 
                                      (138 (invokevirtual (methodCP "createNewFile" "java.io.File" () boolean))) 
                                      (141 (pop)) 
                                      (142 (new (class "java.io.FileOutputStream"))) 
                                      (145 (dup)) 
                                      (146 (aload 6)) 
                                      (148 (invokespecial (methodCP "<init>" "java.io.FileOutputStream" ((class "java.io.File")) void))) 
                                      (151 (astore 7)) 
                                      (153 (aload 7)) ;;at TAG_5
                                      (155 (aload_1)) 
                                      (156 (invokevirtual (methodCP "write" "java.io.FileOutputStream" ((array byte)) void))) 
                                      (159 (aload 7)) 
                                      (161 (invokevirtual (methodCP "flush" "java.io.FileOutputStream" () void))) 
                                      (164 (aload 7)) 
                                      (166 (invokevirtual (methodCP "getFD" "java.io.FileOutputStream" () (class "java.io.FileDescriptor")))) 
                                      (169 (invokevirtual (methodCP "sync" "java.io.FileDescriptor" () void))) 
                                      (172 (jsr 186)) ;;to TAG_3
                                      (175 (goto 195)) ;;to TAG_4;;at TAG_6
                                      (178 (astore 8)) ;;at TAG_7
                                      (180 (jsr 186)) ;;to TAG_3
                                      (183 (aload 8)) ;;at TAG_8
                                      (185 (athrow)) 
                                      (186 (astore 9)) ;;at TAG_3
                                      (188 (aload 7)) 
                                      (190 (invokevirtual (methodCP "close" "java.io.FileOutputStream" () void))) 
                                      (193 (ret 9)) 
                                      (195 (return)) ;;at TAG_4
                                      (endofcode 196))
                                   (Exceptions 
                                     (handler 153 175  178 (class "java.lang.Throwable"))
                                     (handler 178 183  178 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "pushNS"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 0) (code_length . 36)
                                   (parsedcode
                                      (0 (iconst_2))
                                      (1 (anewarray (class "java.lang.Object")))
                                      (4 (dup))
                                      (5 (iconst_0))
                                      (6 (ldc_w 28))      ;;STRING:: "clojure.core"
                                      (9 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (12 (ldc_w 29))     ;;STRING:: "*ns*"
                                      (15 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (18 (invokestatic
					(methodCP "intern" "clojure.lang.Var" ((class "clojure.lang.Symbol") (class "clojure.lang.Symbol")) (class "clojure.lang.Var"))))
                                      (21 (invokevirtual
					(methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var"))))
                                      (24 (aastore))
                                      (25 (dup))
                                      (26 (iconst_1))
                                      (27 (aconst_null))
                                      (28 (aastore))
                                      (29 (invokestatic
					(methodCP "create" "clojure.lang.PersistentHashMap" ((array (class "java.lang.Object"))) (class "clojure.lang.PersistentHashMap"))))
                                      (32 (invokestatic
					(methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void)))
                                      (35 (return))
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pushNSandLoader"
                              (parameters (class "java.lang.ClassLoader"))
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 1) (code_length . 59)
                                   (parsedcode
                                      (0 (bipush 6))
                                      (2 (anewarray (class "java.lang.Object")))
                                      (5 (dup))
                                      (6 (iconst_0))
                                      (7 (ldc_w 28))      ;;STRING:: "clojure.core"
                                      (10 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (13 (ldc_w 29))     ;;STRING:: "*ns*"
                                      (16 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (19 (invokestatic
					(methodCP "intern" "clojure.lang.Var" ((class "clojure.lang.Symbol") (class "clojure.lang.Symbol")) (class "clojure.lang.Var"))))
                                      (22 (invokevirtual
					(methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var"))))
                                      (25 (aastore))
                                      (26 (dup))
                                      (27 (iconst_1))
                                      (28 (aconst_null))
                                      (29 (aastore))
                                      (30 (dup))
                                      (31 (iconst_2))
                                      (32 (getstatic (fieldCP "FN_LOADER_VAR" "clojure.lang.RT" (class "clojure.lang.Var"))))
                                      (35 (aastore))
                                      (36 (dup))
                                      (37 (iconst_3))
                                      (38 (aload_0))
                                      (39 (aastore))
                                      (40 (dup))
                                      (41 (iconst_4))
                                      (42 (getstatic (fieldCP "READEVAL" "clojure.lang.RT" (class "clojure.lang.Var"))))
                                      (45 (aastore))
                                      (46 (dup))
                                      (47 (iconst_5))
                                      (48 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean"))))
                                      (51 (aastore))
                                      (52 (invokestatic
					(methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (55 (invokestatic
					(methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void)))
                                      (58 (return))
                                      (endofcode 59))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getLookupThunk"
                              (parameters (class "java.lang.Object") (class "clojure.lang.Keyword"))
                              (returntype . (class "clojure.lang.ILookupThunk"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 2)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "compile1"
                              (parameters (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$ObjExpr") (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 8) (code_length . 291)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.lang.Integer"))) 
                                      (9 (astore_3)) 
                                      (10 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (13 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (16 (checkcast (class "java.lang.Integer"))) 
                                      (19 (astore 4)) 
                                      (21 (aload_2)) 
                                      (22 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (25 (ifnull 59)) ;;to TAG_0
                                      (28 (aload_2)) 
                                      (29 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (32 (getstatic (fieldCP "LINE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (35 (invokeinterface (methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (40 (ifeq 59)) ;;to TAG_0
                                      (43 (aload_2)) 
                                      (44 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (47 (getstatic (fieldCP "LINE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (50 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (55 (checkcast (class "java.lang.Integer"))) 
                                      (58 (astore_3)) 
                                      (59 (aload_2)) ;;at TAG_0
                                      (60 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (63 (ifnull 98))  ;;to TAG_1
                                      (66 (aload_2)) 
                                      (67 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (70 (getstatic (fieldCP "COLUMN_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (73 (invokeinterface (methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (78 (ifeq 98))  ;;to TAG_1
                                      (81 (aload_2)) 
                                      (82 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (85 (getstatic (fieldCP "COLUMN_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (88 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (93 (checkcast (class "java.lang.Integer"))) 
                                      (96 (astore 4)) 
                                      (98 (bipush 6)) ;;at TAG_1
                                      (100 (anewarray (class "java.lang.Object"))) 
                                      (103 (dup)) 
                                      (104 (iconst_0)) 
                                      (105 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (108 (aastore)) 
                                      (109 (dup)) 
                                      (110 (iconst_1)) 
                                      (111 (aload_3)) 
                                      (112 (aastore)) 
                                      (113 (dup)) 
                                      (114 (iconst_2)) 
                                      (115 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (118 (aastore)) 
                                      (119 (dup)) 
                                      (120 (iconst_3)) 
                                      (121 (aload 4)) 
                                      (123 (aastore)) 
                                      (124 (dup)) 
                                      (125 (iconst_4)) 
                                      (126 (getstatic (fieldCP "LOADER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (129 (aastore)) 
                                      (130 (dup)) 
                                      (131 (iconst_5)) 
                                      (132 (invokestatic (methodCP "makeClassLoader" "clojure.lang.RT" () (class "java.lang.ClassLoader")))) 
                                      (135 (aastore)) 
                                      (136 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (139 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (142 (aload_2)) ;;at TAG_8
                                      (143 (invokestatic (methodCP "macroexpand" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (146 (astore_2)) 
                                      (147 (aload_2)) 
                                      (148 (instanceof (class "clojure.lang.IPersistentCollection"))) 
                                      (151 (ifeq 201)) ;;to TAG_2
                                      (154 (aload_2)) 
                                      (155 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (158 (getstatic (fieldCP "DO" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (161 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (164 (ifeq 201)) ;;to TAG_2
                                      (167 (aload_2)) 
                                      (168 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (171 (astore 5)) 
                                      (173 (aload 5)) ;;at TAG_4
                                      (175 (ifnull 198)) ;;to TAG_3
                                      (178 (aload_0)) 
                                      (179 (aload_1)) 
                                      (180 (aload 5)) 
                                      (182 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (185 (invokestatic (methodCP "compile1" "clojure.lang.Compiler" ((class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$ObjExpr") (class "java.lang.Object")) void))) 
                                      (188 (aload 5)) 
                                      (190 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (193 (astore 5)) 
                                      (195 (goto 173)) ;;to TAG_4
                                      (198 (goto 269)) ;;to TAG_5;;at TAG_3
                                      (201 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_2
                                      (204 (aload_2)) 
                                      (205 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (208 (astore 5)) 
                                      (210 (aload_1)) 
                                      (211 (getstatic (fieldCP "KEYWORDS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (214 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (217 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (220 (putfield (fieldCP "keywords" "clojure.lang.Compiler$ObjExpr" (class "clojure.lang.IPersistentMap")))) 
                                      (223 (aload_1)) 
                                      (224 (getstatic (fieldCP "VARS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (227 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (230 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (233 (putfield (fieldCP "vars" "clojure.lang.Compiler$ObjExpr" (class "clojure.lang.IPersistentMap")))) 
                                      (236 (aload_1)) 
                                      (237 (getstatic (fieldCP "CONSTANTS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (240 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (243 (checkcast (class "clojure.lang.PersistentVector"))) 
                                      (246 (putfield (fieldCP "constants" "clojure.lang.Compiler$ObjExpr" (class "clojure.lang.PersistentVector")))) 
                                      (249 (aload 5)) 
                                      (251 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (254 (aload_1)) 
                                      (255 (aload_0)) 
                                      (256 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (261 (aload 5)) 
                                      (263 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (268 (pop)) 
                                      (269 (jsr 283)) ;;to TAG_6;;at TAG_5
                                      (272 (goto 290)) ;;to TAG_7;;at TAG_9
                                      (275 (astore 6)) ;;at TAG_10
                                      (277 (jsr 283)) ;;to TAG_6
                                      (280 (aload 6)) ;;at TAG_11
                                      (282 (athrow)) 
                                      (283 (astore 7)) ;;at TAG_6
                                      (285 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (288 (ret 7)) 
                                      (290 (return)) ;;at TAG_7
                                      (endofcode 291))
                                   (Exceptions 
                                     (handler 142 272  275 (class "java.lang.Throwable"))
                                     (handler 275 280  275 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "compile"
                              (parameters (class "java.io.Reader") (class "java.lang.String") (class "java.lang.String"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 20) (code_length . 1228)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "COMPILE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (ifnonnull 16)) ;;to TAG_0
                                      (9 (ldc_w 25)) ;;STRING:: "*compile-path* not set"
                                      (12 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (15 (athrow)) 
                                      (16 (new (class "java.lang.Object"))) ;;at TAG_0
                                      (19 (dup)) 
                                      (20 (invokespecial (methodCP "<init>" "java.lang.Object" () void))) 
                                      (23 (astore_3)) 
                                      (24 (aconst_null)) 
                                      (25 (astore 4)) 
                                      (27 (aload_0)) 
                                      (28 (instanceof (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (31 (ifeq 41)) ;;to TAG_1
                                      (34 (aload_0)) 
                                      (35 (checkcast (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (38 (goto 49)) ;;to TAG_2
                                      (41 (new (class "clojure.lang.LineNumberingPushbackReader"))) ;;at TAG_1
                                      (44 (dup)) 
                                      (45 (aload_0)) 
                                      (46 (invokespecial (methodCP "<init>" "clojure.lang.LineNumberingPushbackReader" ((class "java.io.Reader")) void))) 
                                      (49 (astore 5)) ;;at TAG_2
                                      (51 (bipush 38)) 
                                      (53 (anewarray (class "java.lang.Object"))) 
                                      (56 (dup)) 
                                      (57 (iconst_0)) 
                                      (58 (getstatic (fieldCP "SOURCE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (61 (aastore)) 
                                      (62 (dup)) 
                                      (63 (iconst_1)) 
                                      (64 (aload_1)) 
                                      (65 (aastore)) 
                                      (66 (dup)) 
                                      (67 (iconst_2)) 
                                      (68 (getstatic (fieldCP "SOURCE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (71 (aastore)) 
                                      (72 (dup)) 
                                      (73 (iconst_3)) 
                                      (74 (aload_2)) 
                                      (75 (aastore)) 
                                      (76 (dup)) 
                                      (77 (iconst_4)) 
                                      (78 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (81 (aastore)) 
                                      (82 (dup)) 
                                      (83 (iconst_5)) 
                                      (84 (aconst_null)) 
                                      (85 (aastore)) 
                                      (86 (dup)) 
                                      (87 (bipush 6)) 
                                      (89 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (92 (aastore)) 
                                      (93 (dup)) 
                                      (94 (bipush 7)) 
                                      (96 (aconst_null)) 
                                      (97 (aastore)) 
                                      (98 (dup)) 
                                      (99 (bipush 8)) 
                                      (101 (getstatic (fieldCP "LOOP_LOCALS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (104 (aastore)) 
                                      (105 (dup)) 
                                      (106 (bipush 9)) 
                                      (108 (aconst_null)) 
                                      (109 (aastore)) 
                                      (110 (dup)) 
                                      (111 (bipush 10)) 
                                      (113 (getstatic (fieldCP "NEXT_LOCAL_NUM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (116 (aastore)) 
                                      (117 (dup)) 
                                      (118 (bipush 11)) 
                                      (120 (iconst_0)) 
                                      (121 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (124 (aastore)) 
                                      (125 (dup)) 
                                      (126 (bipush 12)) 
                                      (128 (getstatic (fieldCP "READEVAL" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (131 (aastore)) 
                                      (132 (dup)) 
                                      (133 (bipush 13)) 
                                      (135 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (138 (aastore)) 
                                      (139 (dup)) 
                                      (140 (bipush 14)) 
                                      (142 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (145 (aastore)) 
                                      (146 (dup)) 
                                      (147 (bipush 15)) 
                                      (149 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (152 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (155 (aastore)) 
                                      (156 (dup)) 
                                      (157 (bipush 16)) 
                                      (159 (getstatic (fieldCP "LINE_BEFORE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (162 (aastore)) 
                                      (163 (dup)) 
                                      (164 (bipush 17)) 
                                      (166 (aload 5)) 
                                      (168 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (171 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (174 (aastore)) 
                                      (175 (dup)) 
                                      (176 (bipush 18)) 
                                      (178 (getstatic (fieldCP "COLUMN_BEFORE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (181 (aastore)) 
                                      (182 (dup)) 
                                      (183 (bipush 19)) 
                                      (185 (aload 5)) 
                                      (187 (invokevirtual (methodCP "getColumnNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (190 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (193 (aastore)) 
                                      (194 (dup)) 
                                      (195 (bipush 20)) 
                                      (197 (getstatic (fieldCP "LINE_AFTER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (200 (aastore)) 
                                      (201 (dup)) 
                                      (202 (bipush 21)) 
                                      (204 (aload 5)) 
                                      (206 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (209 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (212 (aastore)) 
                                      (213 (dup)) 
                                      (214 (bipush 22)) 
                                      (216 (getstatic (fieldCP "COLUMN_AFTER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (219 (aastore)) 
                                      (220 (dup)) 
                                      (221 (bipush 23)) 
                                      (223 (aload 5)) 
                                      (225 (invokevirtual (methodCP "getColumnNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (228 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (231 (aastore)) 
                                      (232 (dup)) 
                                      (233 (bipush 24)) 
                                      (235 (getstatic (fieldCP "CONSTANTS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (238 (aastore)) 
                                      (239 (dup)) 
                                      (240 (bipush 25)) 
                                      (242 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (245 (aastore)) 
                                      (246 (dup)) 
                                      (247 (bipush 26)) 
                                      (249 (getstatic (fieldCP "CONSTANT_IDS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (252 (aastore)) 
                                      (253 (dup)) 
                                      (254 (bipush 27)) 
                                      (256 (new (class "java.util.IdentityHashMap"))) 
                                      (259 (dup)) 
                                      (260 (invokespecial (methodCP "<init>" "java.util.IdentityHashMap" () void))) 
                                      (263 (aastore)) 
                                      (264 (dup)) 
                                      (265 (bipush 28)) 
                                      (267 (getstatic (fieldCP "KEYWORDS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (270 (aastore)) 
                                      (271 (dup)) 
                                      (272 (bipush 29)) 
                                      (274 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (277 (aastore)) 
                                      (278 (dup)) 
                                      (279 (bipush 30)) 
                                      (281 (getstatic (fieldCP "VARS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (284 (aastore)) 
                                      (285 (dup)) 
                                      (286 (bipush 31)) 
                                      (288 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (291 (aastore)) 
                                      (292 (dup)) 
                                      (293 (bipush 32)) 
                                      (295 (getstatic (fieldCP "UNCHECKED_MATH" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (298 (aastore)) 
                                      (299 (dup)) 
                                      (300 (bipush 33)) 
                                      (302 (getstatic (fieldCP "UNCHECKED_MATH" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (305 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (308 (aastore)) 
                                      (309 (dup)) 
                                      (310 (bipush 34)) 
                                      (312 (getstatic (fieldCP "WARN_ON_REFLECTION" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (315 (aastore)) 
                                      (316 (dup)) 
                                      (317 (bipush 35)) 
                                      (319 (getstatic (fieldCP "WARN_ON_REFLECTION" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (322 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (325 (aastore)) 
                                      (326 (dup)) 
                                      (327 (bipush 36)) 
                                      (329 (getstatic (fieldCP "DATA_READERS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (332 (aastore)) 
                                      (333 (dup)) 
                                      (334 (bipush 37)) 
                                      (336 (getstatic (fieldCP "DATA_READERS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (339 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (342 (aastore)) 
                                      (343 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (346 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (349 (new (class "clojure.lang.Compiler$ObjExpr"))) ;;at TAG_22
                                      (352 (dup)) 
                                      (353 (aconst_null)) 
                                      (354 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$ObjExpr" ((class "java.lang.Object")) void))) 
                                      (357 (astore 6)) 
                                      (359 (aload 6)) 
                                      (361 (new (class "java.lang.StringBuilder"))) 
                                      (364 (dup)) 
                                      (365 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (368 (aload_1)) 
                                      (369 (getstatic (fieldCP "separator" "java.io.File" (class "java.lang.String")))) 
                                      (372 (ldc_w 26)) ;;STRING:: "/"
                                      (375 (invokevirtual (methodCP "replace" "java.lang.String" ((class "java.lang.CharSequence") (class "java.lang.CharSequence")) (class "java.lang.String")))) 
                                      (378 (iconst_0)) 
                                      (379 (aload_1)) 
                                      (380 (bipush 46)) 
                                      (382 (invokevirtual (methodCP "lastIndexOf" "java.lang.String" (int) int))) 
                                      (385 (invokevirtual (methodCP "substring" "java.lang.String" (int int) (class "java.lang.String")))) 
                                      (388 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (391 (ldc_w 30)) ;;STRING:: "__init"
                                      (394 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (397 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (400 (putfield (fieldCP "internalName" "clojure.lang.Compiler$ObjExpr" (class "java.lang.String")))) 
                                      (403 (aload 6)) 
                                      (405 (aload 6)) 
                                      (407 (getfield (fieldCP "internalName" "clojure.lang.Compiler$ObjExpr" (class "java.lang.String")))) 
                                      (410 (invokestatic (methodCP "getObjectType" "clojure.asm.Type" ((class "java.lang.String")) (class "clojure.asm.Type")))) 
                                      (413 (putfield (fieldCP "objtype" "clojure.lang.Compiler$ObjExpr" (class "clojure.asm.Type")))) 
                                      (416 (new (class "clojure.asm.ClassWriter"))) 
                                      (419 (dup)) 
                                      (420 (iconst_1)) 
                                      (421 (invokespecial (methodCP "<init>" "clojure.asm.ClassWriter" (int) void))) 
                                      (424 (astore 7)) 
                                      (426 (aload 7)) 
                                      (428 (astore 8)) 
                                      (430 (aload 8)) 
                                      (432 (bipush 49)) 
                                      (434 (bipush 33)) 
                                      (436 (aload 6)) 
                                      (438 (getfield (fieldCP "internalName" "clojure.lang.Compiler$ObjExpr" (class "java.lang.String")))) 
                                      (441 (aconst_null)) 
                                      (442 (ldc_w 31)) ;;STRING:: "java/lang/Object"
                                      (445 (aconst_null)) 
                                      (446 (invokeinterface (methodCP "visit" "clojure.asm.ClassVisitor" (int int (class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (array (class "java.lang.String"))) void) 7)) 
                                      (451 (new (class "clojure.asm.commons.GeneratorAdapter"))) 
                                      (454 (dup)) 
                                      (455 (bipush 9)) 
                                      (457 (ldc_w 32)) ;;STRING:: "void load ()"
                                      (460 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (463 (aconst_null)) 
                                      (464 (aconst_null)) 
                                      (465 (aload 8)) 
                                      (467 (invokespecial (methodCP "<init>" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.commons.Method") (class "java.lang.String") (array (class "clojure.asm.Type")) (class "clojure.asm.ClassVisitor")) void))) 
                                      (470 (astore 9)) 
                                      (472 (aload 9)) 
                                      (474 (invokevirtual (methodCP "visitCode" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (477 (aload 5)) 
                                      (479 (iconst_0)) 
                                      (480 (aload_3)) 
                                      (481 (iconst_0)) 
                                      (482 (invokestatic (methodCP "read" "clojure.lang.LispReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (485 (astore 10)) 
                                      (487 (aload 10)) ;;at TAG_4
                                      (489 (aload_3)) 
                                      (490 (if_acmpeq 575)) ;;to TAG_3
                                      (493 (getstatic (fieldCP "LINE_AFTER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (496 (aload 5)) 
                                      (498 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (501 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (504 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (507 (pop)) 
                                      (508 (getstatic (fieldCP "COLUMN_AFTER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (511 (aload 5)) 
                                      (513 (invokevirtual (methodCP "getColumnNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (516 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (519 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (522 (pop)) 
                                      (523 (aload 9)) 
                                      (525 (aload 6)) 
                                      (527 (aload 10)) 
                                      (529 (invokestatic (methodCP "compile1" "clojure.lang.Compiler" ((class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$ObjExpr") (class "java.lang.Object")) void))) 
                                      (532 (getstatic (fieldCP "LINE_BEFORE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (535 (aload 5)) 
                                      (537 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (540 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (543 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (546 (pop)) 
                                      (547 (getstatic (fieldCP "COLUMN_BEFORE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (550 (aload 5)) 
                                      (552 (invokevirtual (methodCP "getColumnNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (555 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (558 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (561 (pop)) 
                                      (562 (aload 5)) 
                                      (564 (iconst_0)) 
                                      (565 (aload_3)) 
                                      (566 (iconst_0)) 
                                      (567 (invokestatic (methodCP "read" "clojure.lang.LispReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (570 (astore 10)) 
                                      (572 (goto 487)) ;;to TAG_4
                                      (575 (aload 9)) ;;at TAG_3
                                      (577 (invokevirtual (methodCP "returnValue" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (580 (aload 9)) 
                                      (582 (invokevirtual (methodCP "endMethod" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (585 (iconst_0)) 
                                      (586 (istore 10)) 
                                      (588 (iload 10)) ;;at TAG_6
                                      (590 (aload 6)) 
                                      (592 (getfield (fieldCP "constants" "clojure.lang.Compiler$ObjExpr" (class "clojure.lang.PersistentVector")))) 
                                      (595 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (598 (if_icmpge 636)) ;;to TAG_5
                                      (601 (aload 8)) 
                                      (603 (bipush 25)) 
                                      (605 (aload 6)) 
                                      (607 (iload 10)) 
                                      (609 (invokevirtual (methodCP "constantName" "clojure.lang.Compiler$ObjExpr" (int) (class "java.lang.String")))) 
                                      (612 (aload 6)) 
                                      (614 (iload 10)) 
                                      (616 (invokevirtual (methodCP "constantType" "clojure.lang.Compiler$ObjExpr" (int) (class "clojure.asm.Type")))) 
                                      (619 (invokevirtual (methodCP "getDescriptor" "clojure.asm.Type" () (class "java.lang.String")))) 
                                      (622 (aconst_null)) 
                                      (623 (aconst_null)) 
                                      (624 (invokeinterface (methodCP "visitField" "clojure.asm.ClassVisitor" (int (class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "java.lang.Object")) (class "clojure.asm.FieldVisitor")) 6)) 
                                      (629 (pop)) 
                                      (630 (iinc 10 1)) 
                                      (633 (goto 588)) ;;to TAG_6
                                      (636 (bipush 100)) ;;at TAG_5
                                      (638 (istore 10)) 
                                      (640 (aload 6)) 
                                      (642 (getfield (fieldCP "constants" "clojure.lang.Compiler$ObjExpr" (class "clojure.lang.PersistentVector")))) 
                                      (645 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (648 (bipush 100)) 
                                      (650 (idiv)) 
                                      (651 (istore 11)) 
                                      (653 (aload 6)) 
                                      (655 (getfield (fieldCP "constants" "clojure.lang.Compiler$ObjExpr" (class "clojure.lang.PersistentVector")))) 
                                      (658 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (661 (bipush 100)) 
                                      (663 (irem)) 
                                      (664 (ifeq 670)) ;;to TAG_7
                                      (667 (iinc 11 1)) 
                                      (670 (iconst_0)) ;;at TAG_7
                                      (671 (istore 12)) 
                                      (673 (iload 12)) ;;at TAG_13
                                      (675 (iload 11)) 
                                      (677 (if_icmpge 880)) ;;to TAG_8
                                      (680 (new (class "clojure.asm.commons.GeneratorAdapter"))) 
                                      (683 (dup)) 
                                      (684 (bipush 9)) 
                                      (686 (new (class "java.lang.StringBuilder"))) 
                                      (689 (dup)) 
                                      (690 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (693 (ldc_w 33)) ;;STRING:: "void __init"
                                      (696 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (699 (iload 12)) 
                                      (701 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (704 (ldc_w 34)) ;;STRING:: "()"
                                      (707 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (710 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (713 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (716 (aconst_null)) 
                                      (717 (aconst_null)) 
                                      (718 (aload 8)) 
                                      (720 (invokespecial (methodCP "<init>" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.commons.Method") (class "java.lang.String") (array (class "clojure.asm.Type")) (class "clojure.asm.ClassVisitor")) void))) 
                                      (723 (astore 13)) 
                                      (725 (aload 13)) 
                                      (727 (invokevirtual (methodCP "visitCode" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (730 (iconst_2)) ;;at TAG_18
                                      (731 (anewarray (class "java.lang.Object"))) 
                                      (734 (dup)) 
                                      (735 (iconst_0)) 
                                      (736 (getstatic (fieldCP "PRINT_DUP" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (739 (aastore)) 
                                      (740 (dup)) 
                                      (741 (iconst_1)) 
                                      (742 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (745 (aastore)) 
                                      (746 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (749 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (752 (iload 12)) 
                                      (754 (bipush 100)) 
                                      (756 (imul)) 
                                      (757 (istore 14)) 
                                      (759 (iload 14)) ;;at TAG_10
                                      (761 (aload 6)) 
                                      (763 (getfield (fieldCP "constants" "clojure.lang.Compiler$ObjExpr" (class "clojure.lang.PersistentVector")))) 
                                      (766 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (769 (if_icmpge 843)) ;;to TAG_9
                                      (772 (iload 14)) 
                                      (774 (iload 12)) 
                                      (776 (iconst_1)) 
                                      (777 (iadd)) 
                                      (778 (bipush 100)) 
                                      (780 (imul)) 
                                      (781 (if_icmpge 843)) ;;to TAG_9
                                      (784 (aload 6)) 
                                      (786 (aload 6)) 
                                      (788 (getfield (fieldCP "constants" "clojure.lang.Compiler$ObjExpr" (class "clojure.lang.PersistentVector")))) 
                                      (791 (iload 14)) 
                                      (793 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector" (int) (class "java.lang.Object")))) 
                                      (796 (aload 13)) 
                                      (798 (invokevirtual (methodCP "emitValue" "clojure.lang.Compiler$ObjExpr" ((class "java.lang.Object") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (801 (aload 13)) 
                                      (803 (aload 6)) 
                                      (805 (iload 14)) 
                                      (807 (invokevirtual (methodCP "constantType" "clojure.lang.Compiler$ObjExpr" (int) (class "clojure.asm.Type")))) 
                                      (810 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (813 (aload 13)) 
                                      (815 (aload 6)) 
                                      (817 (getfield (fieldCP "objtype" "clojure.lang.Compiler$ObjExpr" (class "clojure.asm.Type")))) 
                                      (820 (aload 6)) 
                                      (822 (iload 14)) 
                                      (824 (invokevirtual (methodCP "constantName" "clojure.lang.Compiler$ObjExpr" (int) (class "java.lang.String")))) 
                                      (827 (aload 6)) 
                                      (829 (iload 14)) 
                                      (831 (invokevirtual (methodCP "constantType" "clojure.lang.Compiler$ObjExpr" (int) (class "clojure.asm.Type")))) 
                                      (834 (invokevirtual (methodCP "putStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "java.lang.String") (class "clojure.asm.Type")) void))) 
                                      (837 (iinc 14 1)) 
                                      (840 (goto 759)) ;;to TAG_10
                                      (843 (jsr 857)) ;;to TAG_11;;at TAG_9
                                      (846 (goto 864)) ;;to TAG_12;;at TAG_19
                                      (849 (astore 15)) ;;at TAG_20
                                      (851 (jsr 857)) ;;to TAG_11
                                      (854 (aload 15)) ;;at TAG_21
                                      (856 (athrow)) 
                                      (857 (astore 16)) ;;at TAG_11
                                      (859 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (862 (ret 16)) 
                                      (864 (aload 13)) ;;at TAG_12
                                      (866 (invokevirtual (methodCP "returnValue" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (869 (aload 13)) 
                                      (871 (invokevirtual (methodCP "endMethod" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (874 (iinc 12 1)) 
                                      (877 (goto 673))  ;;to TAG_13
                                      (880 (new (class "clojure.asm.commons.GeneratorAdapter"))) ;;at TAG_8
                                      (883 (dup)) 
                                      (884 (bipush 9)) 
                                      (886 (ldc_w 35)) ;;STRING:: "void <clinit> ()"
                                      (889 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (892 (aconst_null)) 
                                      (893 (aconst_null)) 
                                      (894 (aload 8)) 
                                      (896 (invokespecial (methodCP "<init>" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.commons.Method") (class "java.lang.String") (array (class "clojure.asm.Type")) (class "clojure.asm.ClassVisitor")) void))) 
                                      (899 (astore 12)) 
                                      (901 (aload 12)) 
                                      (903 (invokevirtual (methodCP "visitCode" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (906 (aload 12)) 
                                      (908 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (911 (astore 13)) 
                                      (913 (aload 12)) 
                                      (915 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (918 (astore 14)) 
                                      (920 (aload 12)) 
                                      (922 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (925 (astore 15)) 
                                      (927 (aload 12)) 
                                      (929 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (932 (astore 16)) 
                                      (934 (iconst_0)) 
                                      (935 (istore 17)) 
                                      (937 (iload 17)) ;;at TAG_15
                                      (939 (iload 11)) 
                                      (941 (if_icmpge 990)) ;;to TAG_14
                                      (944 (aload 12)) 
                                      (946 (aload 6)) 
                                      (948 (getfield (fieldCP "objtype" "clojure.lang.Compiler$ObjExpr" (class "clojure.asm.Type")))) 
                                      (951 (new (class "java.lang.StringBuilder"))) 
                                      (954 (dup)) 
                                      (955 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (958 (ldc_w 33)) ;;STRING:: "void __init"
                                      (961 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (964 (iload 17)) 
                                      (966 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (969 (ldc_w 34)) ;;STRING:: "()"
                                      (972 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (975 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (978 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (981 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (984 (iinc 17 1)) 
                                      (987 (goto 937)) ;;to TAG_15
                                      (990 (aload 12)) ;;at TAG_14
                                      (992 (aload 6)) 
                                      (994 (getfield (fieldCP "internalName" "clojure.lang.Compiler$ObjExpr" (class "java.lang.String")))) 
                                      (997 (bipush 47)) 
                                      (999 (bipush 46)) 
                                      (1001 (invokevirtual (methodCP "replace" "java.lang.String" (char char) (class "java.lang.String")))) 
                                      (1004 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String")) void))) 
                                      (1007 (aload 12)) 
                                      (1009 (getstatic (fieldCP "CLASS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (1012 (ldc_w 36)) ;;STRING:: "Class forName(String)"
                                      (1015 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (1018 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (1021 (aload 12)) 
                                      (1023 (getstatic (fieldCP "CLASS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (1026 (ldc_w 37)) ;;STRING:: "ClassLoader getClassLoader()"
                                      (1029 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (1032 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (1035 (aload 12)) 
                                      (1037 (ldc_w )) 
                                      (1040 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (1043 (ldc_w 38)) ;;STRING:: "void pushNSandLoader(ClassLoader)"
                                      (1046 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (1049 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (1052 (aload 12)) 
                                      (1054 (aload 13)) 
                                      (1056 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (1059 (aload 12)) 
                                      (1061 (aload 6)) 
                                      (1063 (getfield (fieldCP "objtype" "clojure.lang.Compiler$ObjExpr" (class "clojure.asm.Type")))) 
                                      (1066 (ldc_w 39)) ;;STRING:: "void load()"
                                      (1069 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (1072 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (1075 (aload 12)) 
                                      (1077 (aload 14)) 
                                      (1079 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (1082 (aload 12)) 
                                      (1084 (getstatic (fieldCP "VAR_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (1087 (ldc_w 40)) ;;STRING:: "void popThreadBindings()"
                                      (1090 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (1093 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (1096 (aload 12)) 
                                      (1098 (aload 15)) 
                                      (1100 (invokevirtual (methodCP "goTo" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (1103 (aload 12)) 
                                      (1105 (aload 16)) 
                                      (1107 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (1110 (aload 12)) 
                                      (1112 (getstatic (fieldCP "VAR_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (1115 (ldc_w 40)) ;;STRING:: "void popThreadBindings()"
                                      (1118 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (1121 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (1124 (aload 12)) 
                                      (1126 (invokevirtual (methodCP "throwException" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (1129 (aload 12)) 
                                      (1131 (aload 15)) 
                                      (1133 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (1136 (aload 12)) 
                                      (1138 (aload 13)) 
                                      (1140 (aload 14)) 
                                      (1142 (aload 16)) 
                                      (1144 (aconst_null)) 
                                      (1145 (invokevirtual (methodCP "visitTryCatchBlock" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label") (class "clojure.asm.Label") (class "clojure.asm.Label") (class "java.lang.String")) void))) 
                                      (1148 (aload 12)) 
                                      (1150 (invokevirtual (methodCP "returnValue" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (1153 (aload 12)) 
                                      (1155 (invokevirtual (methodCP "endMethod" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (1158 (aload 8)) 
                                      (1160 (invokeinterface (methodCP "visitEnd" "clojure.asm.ClassVisitor" () void) 1)) 
                                      (1165 (aload 6)) 
                                      (1167 (getfield (fieldCP "internalName" "clojure.lang.Compiler$ObjExpr" (class "java.lang.String")))) 
                                      (1170 (aload 7)) 
                                      (1172 (invokevirtual (methodCP "toByteArray" "clojure.asm.ClassWriter" () (array byte)))) 
                                      (1175 (invokestatic (methodCP "writeClassFile" "clojure.lang.Compiler" ((class "java.lang.String") (array byte)) void))) 
                                      (1178 (jsr 1218)) ;;to TAG_16;;at TAG_23
                                      (1181 (goto 1225)) ;;to TAG_17;;at TAG_25
                                      (1184 (astore 6)) ;;at TAG_24
                                      (1186 (new (class "clojure.lang.Compiler$CompilerException"))) 
                                      (1189 (dup)) 
                                      (1190 (aload_1)) 
                                      (1191 (aload 6)) 
                                      (1193 (getfield (fieldCP "line" "clojure.lang.LispReader$ReaderException" int))) 
                                      (1196 (aload 6)) 
                                      (1198 (getfield (fieldCP "column" "clojure.lang.LispReader$ReaderException" int))) 
                                      (1201 (aload 6)) 
                                      (1203 (invokevirtual (methodCP "getCause" "clojure.lang.LispReader$ReaderException" () (class "java.lang.Throwable")))) 
                                      (1206 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$CompilerException" ((class "java.lang.String") int int (class "java.lang.Throwable")) void))) 
                                      (1209 (athrow)) 
                                      (1210 (astore 18)) ;;at TAG_26
                                      (1212 (jsr 1218)) ;;to TAG_16
                                      (1215 (aload 18)) ;;at TAG_27
                                      (1217 (athrow)) 
                                      (1218 (astore 19)) ;;at TAG_16
                                      (1220 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (1223 (ret 19)) 
                                      (1225 (aload 4)) ;;at TAG_17
                                      (1227 (areturn)) 
                                      (endofcode 1228))
                                   (Exceptions 
                                     (handler 730 846  849 (class "java.lang.Throwable"))
                                     (handler 849 854  849 (class "java.lang.Throwable"))
                                     (handler 349 1178  1184 (class "clojure.lang.LispReader$ReaderException"))
                                     (handler 349 1181  1210 (class "java.lang.Throwable"))
                                     (handler 1184 1215  1210 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "primClass"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 187)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnonnull 6)) ;;to TAG_0
                                      (4 (aconst_null)) 
                                      (5 (areturn)) 
                                      (6 (aconst_null)) ;;at TAG_0
                                      (7 (astore_1)) 
                                      (8 (aload_0)) 
                                      (9 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (12 (ldc_w 41)) ;;STRING:: "int"
                                      (15 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (18 (ifeq 28))  ;;to TAG_1
                                      (21 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (24 (astore_1)) 
                                      (25 (goto 185)) ;;to TAG_2
                                      (28 (aload_0)) ;;at TAG_1
                                      (29 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (32 (ldc_w 42)) ;;STRING:: "long"
                                      (35 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (38 (ifeq 48)) ;;to TAG_3
                                      (41 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (44 (astore_1)) 
                                      (45 (goto 185)) ;;to TAG_2
                                      (48 (aload_0)) ;;at TAG_3
                                      (49 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (52 (ldc_w 43)) ;;STRING:: "float"
                                      (55 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (58 (ifeq 68)) ;;to TAG_4
                                      (61 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (64 (astore_1)) 
                                      (65 (goto 185)) ;;to TAG_2
                                      (68 (aload_0)) ;;at TAG_4
                                      (69 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (72 (ldc_w 44)) ;;STRING:: "double"
                                      (75 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (78 (ifeq 88)) ;;to TAG_5
                                      (81 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (84 (astore_1)) 
                                      (85 (goto 185)) ;;to TAG_2
                                      (88 (aload_0)) ;;at TAG_5
                                      (89 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (92 (ldc_w 45)) ;;STRING:: "char"
                                      (95 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (98 (ifeq 108)) ;;to TAG_6
                                      (101 (getstatic (fieldCP "TYPE" "java.lang.Character" (class "java.lang.Class")))) 
                                      (104 (astore_1)) 
                                      (105 (goto 185)) ;;to TAG_2
                                      (108 (aload_0)) ;;at TAG_6
                                      (109 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (112 (ldc_w 46)) ;;STRING:: "short"
                                      (115 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (118 (ifeq 128)) ;;to TAG_7
                                      (121 (getstatic (fieldCP "TYPE" "java.lang.Short" (class "java.lang.Class")))) 
                                      (124 (astore_1)) 
                                      (125 (goto 185)) ;;to TAG_2
                                      (128 (aload_0)) ;;at TAG_7
                                      (129 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (132 (ldc_w 47)) ;;STRING:: "byte"
                                      (135 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (138 (ifeq 148)) ;;to TAG_8
                                      (141 (getstatic (fieldCP "TYPE" "java.lang.Byte" (class "java.lang.Class")))) 
                                      (144 (astore_1)) 
                                      (145 (goto 185)) ;;to TAG_2
                                      (148 (aload_0)) ;;at TAG_8
                                      (149 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (152 (ldc_w 48)) ;;STRING:: "boolean"
                                      (155 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (158 (ifeq 168)) ;;to TAG_9
                                      (161 (getstatic (fieldCP "TYPE" "java.lang.Boolean" (class "java.lang.Class")))) 
                                      (164 (astore_1)) 
                                      (165 (goto 185)) ;;to TAG_2
                                      (168 (aload_0)) ;;at TAG_9
                                      (169 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (172 (ldc_w 49)) ;;STRING:: "void"
                                      (175 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (178 (ifeq 185)) ;;to TAG_2
                                      (181 (getstatic (fieldCP "TYPE" "java.lang.Void" (class "java.lang.Class")))) 
                                      (184 (astore_1)) 
                                      (185 (aload_1)) ;;at TAG_2
                                      (186 (areturn)) 
                                      (endofcode 187))
                                   (Exceptions )
                                   (StackMap )))
                        (method "tagClass"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 36)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnonnull 8)) ;;to TAG_0
                                      (4 (ldc_w )) 
                                      (7 (areturn)) 
                                      (8 (aconst_null)) ;;at TAG_0
                                      (9 (astore_1)) 
                                      (10 (aload_0)) 
                                      (11 (instanceof (class "clojure.lang.Symbol"))) 
                                      (14 (ifeq 25)) ;;to TAG_1
                                      (17 (aload_0)) 
                                      (18 (checkcast (class "clojure.lang.Symbol"))) 
                                      (21 (invokestatic (methodCP "primClass" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "java.lang.Class")))) 
                                      (24 (astore_1)) 
                                      (25 (aload_1)) ;;at TAG_1
                                      (26 (ifnonnull 34))  ;;to TAG_2
                                      (29 (aload_0)) 
                                      (30 (invokestatic (methodCP "tagToClass" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (33 (astore_1)) 
                                      (34 (aload_1)) ;;at TAG_2
                                      (35 (areturn)) 
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap )))
                        (method "primClass"
                              (parameters (class "java.lang.Class"))
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "isPrimitive" "java.lang.Class" () boolean))) 
                                      (4 (ifeq 11))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (goto 14)) ;;to TAG_1
                                      (11 (ldc_w )) ;;at TAG_0
                                      (14 (areturn)) ;;at TAG_1
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "boxClass"
                              (parameters (class "java.lang.Class"))
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 122)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "isPrimitive" "java.lang.Class" () boolean))) 
                                      (4 (ifne 9)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (areturn)) 
                                      (9 (aconst_null)) ;;at TAG_0
                                      (10 (astore_1)) 
                                      (11 (aload_0)) 
                                      (12 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (15 (if_acmpne 25))  ;;to TAG_1
                                      (18 (ldc_w )) 
                                      (21 (astore_1)) 
                                      (22 (goto 120)) ;;to TAG_2
                                      (25 (aload_0)) ;;at TAG_1
                                      (26 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (29 (if_acmpne 39)) ;;to TAG_3
                                      (32 (ldc_w )) 
                                      (35 (astore_1)) 
                                      (36 (goto 120)) ;;to TAG_2
                                      (39 (aload_0)) ;;at TAG_3
                                      (40 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (43 (if_acmpne 53)) ;;to TAG_4
                                      (46 (ldc_w )) 
                                      (49 (astore_1)) 
                                      (50 (goto 120)) ;;to TAG_2
                                      (53 (aload_0)) ;;at TAG_4
                                      (54 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (57 (if_acmpne 67)) ;;to TAG_5
                                      (60 (ldc_w )) 
                                      (63 (astore_1)) 
                                      (64 (goto 120)) ;;to TAG_2
                                      (67 (aload_0)) ;;at TAG_5
                                      (68 (getstatic (fieldCP "TYPE" "java.lang.Character" (class "java.lang.Class")))) 
                                      (71 (if_acmpne 81)) ;;to TAG_6
                                      (74 (ldc_w )) 
                                      (77 (astore_1)) 
                                      (78 (goto 120)) ;;to TAG_2
                                      (81 (aload_0)) ;;at TAG_6
                                      (82 (getstatic (fieldCP "TYPE" "java.lang.Short" (class "java.lang.Class")))) 
                                      (85 (if_acmpne 95)) ;;to TAG_7
                                      (88 (ldc_w )) 
                                      (91 (astore_1)) 
                                      (92 (goto 120)) ;;to TAG_2
                                      (95 (aload_0)) ;;at TAG_7
                                      (96 (getstatic (fieldCP "TYPE" "java.lang.Byte" (class "java.lang.Class")))) 
                                      (99 (if_acmpne 109)) ;;to TAG_8
                                      (102 (ldc_w )) 
                                      (105 (astore_1)) 
                                      (106 (goto 120)) ;;to TAG_2
                                      (109 (aload_0)) ;;at TAG_8
                                      (110 (getstatic (fieldCP "TYPE" "java.lang.Boolean" (class "java.lang.Class")))) 
                                      (113 (if_acmpne 120)) ;;to TAG_2
                                      (116 (ldc_w )) 
                                      (119 (astore_1)) 
                                      (120 (aload_1)) ;;at TAG_2
                                      (121 (areturn)) 
                                      (endofcode 122))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emptyVarCallSites"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashSet" (class "clojure.lang.PersistentHashSet"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$000"
                              (parameters )
                              (returntype . (class "clojure.asm.Type"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "VAR_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$100"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object") (class "java.lang.String"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokestatic
					(methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object") (class "java.lang.String")) (class "clojure.lang.Compiler$Expr"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$200"
                              (parameters )
                              (returntype . (class "clojure.asm.Type"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "RT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$300"
                              (parameters )
                              (returntype . (class "clojure.asm.Type"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "NUMBERS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$500"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Symbol"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
					(methodCP "tagOf" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$600"
                              (parameters )
                              (returntype . (class "clojure.asm.Type"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$700"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
					(methodCP "registerConstant" "clojure.lang.Compiler" ((class "java.lang.Object")) int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$800"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 4)
                                   (parsedcode
                                      (0 (invokestatic
					(methodCP "getAndIncLocalNum" "clojure.lang.Compiler" () int)))
                                      (3 (ireturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$900"
                              (parameters (class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") boolean)
                              (returntype . (class "clojure.lang.Compiler$LocalBinding"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (iload_3))
                                      (4 (invokestatic
					(methodCP "registerLocal" "clojure.lang.Compiler" ((class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") boolean) (class "clojure.lang.Compiler$LocalBinding"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$1000"
                              (parameters (class "clojure.lang.Keyword"))
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
					(methodCP "registerKeywordCallsite" "clojure.lang.Compiler" ((class "clojure.lang.Keyword")) int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$1100"
                              (parameters (class "clojure.lang.Var"))
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
					(methodCP "registerProtocolCallsite" "clojure.lang.Compiler" ((class "clojure.lang.Var")) int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$1200"
                              (parameters )
                              (returntype . (class "clojure.asm.Type"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "IFN_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$1300"
                              (parameters )
                              (returntype . (array (array (class "clojure.asm.Type"))))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "ARG_TYPES" "clojure.lang.Compiler" (array (array (class "clojure.asm.Type"))))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$1400"
                              (parameters )
                              (returntype . (class "clojure.asm.Type"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "AFUNCTION_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$1500"
                              (parameters )
                              (returntype . (array (class "clojure.asm.Type")))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EXCEPTION_TYPES" "clojure.lang.Compiler" (array (class "clojure.asm.Type")))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 3) (code_length . 2005)
                                   (parsedcode
                                      (0 (ldc 8)) ;;STRING:: "def"
                                      (2 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (5 (putstatic (fieldCP "DEF" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (8 (ldc_w 50)) ;;STRING:: "loop*"
                                      (11 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (14 (putstatic (fieldCP "LOOP" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (17 (ldc_w 51)) ;;STRING:: "recur"
                                      (20 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (23 (putstatic (fieldCP "RECUR" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (26 (ldc_w 52)) ;;STRING:: "if"
                                      (29 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (32 (putstatic (fieldCP "IF" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (35 (ldc_w 53)) ;;STRING:: "let*"
                                      (38 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (41 (putstatic (fieldCP "LET" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (44 (ldc_w 54)) ;;STRING:: "letfn*"
                                      (47 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (50 (putstatic (fieldCP "LETFN" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (53 (ldc_w 55)) ;;STRING:: "do"
                                      (56 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (59 (putstatic (fieldCP "DO" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (62 (ldc_w 56)) ;;STRING:: "fn*"
                                      (65 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (68 (putstatic (fieldCP "FN" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (71 (ldc_w 56)) ;;STRING:: "fn*"
                                      (74 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (77 (iconst_2)) 
                                      (78 (anewarray (class "java.lang.Object"))) 
                                      (81 (dup)) 
                                      (82 (iconst_0)) 
                                      (83 (aconst_null)) 
                                      (84 (ldc_w 57)) ;;STRING:: "once"
                                      (87 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (90 (aastore)) 
                                      (91 (dup)) 
                                      (92 (iconst_1)) 
                                      (93 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (96 (aastore)) 
                                      (97 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (100 (invokevirtual (methodCP "withMeta" "clojure.lang.Symbol" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")))) 
                                      (103 (checkcast (class "clojure.lang.Symbol"))) 
                                      (106 (putstatic (fieldCP "FNONCE" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (109 (ldc_w 58)) ;;STRING:: "quote"
                                      (112 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (115 (putstatic (fieldCP "QUOTE" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (118 (ldc_w 59)) ;;STRING:: "var"
                                      (121 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (124 (putstatic (fieldCP "THE_VAR" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (127 (ldc_w 21)) ;;STRING:: "."
                                      (130 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (133 (putstatic (fieldCP "DOT" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (136 (ldc_w 60)) ;;STRING:: "set!"
                                      (139 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (142 (putstatic (fieldCP "ASSIGN" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (145 (ldc_w 61)) ;;STRING:: "try"
                                      (148 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (151 (putstatic (fieldCP "TRY" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (154 (ldc_w 62)) ;;STRING:: "catch"
                                      (157 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (160 (putstatic (fieldCP "CATCH" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (163 (ldc_w 63)) ;;STRING:: "finally"
                                      (166 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (169 (putstatic (fieldCP "FINALLY" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (172 (ldc_w 64)) ;;STRING:: "throw"
                                      (175 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (178 (putstatic (fieldCP "THROW" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (181 (ldc_w 65)) ;;STRING:: "monitor-enter"
                                      (184 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (187 (putstatic (fieldCP "MONITOR_ENTER" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (190 (ldc_w 66)) ;;STRING:: "monitor-exit"
                                      (193 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (196 (putstatic (fieldCP "MONITOR_EXIT" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (199 (ldc_w 28)) ;;STRING:: "clojure.core"
                                      (202 (ldc_w 67)) ;;STRING:: "import*"
                                      (205 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (208 (putstatic (fieldCP "IMPORT" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (211 (ldc_w 68)) ;;STRING:: "deftype*"
                                      (214 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (217 (putstatic (fieldCP "DEFTYPE" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (220 (ldc_w 69)) ;;STRING:: "case*"
                                      (223 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (226 (putstatic (fieldCP "CASE" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (229 (ldc_w 70)) ;;STRING:: "Class"
                                      (232 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (235 (putstatic (fieldCP "CLASS" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (238 (ldc_w 71)) ;;STRING:: "new"
                                      (241 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (244 (putstatic (fieldCP "NEW" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (247 (ldc_w 72)) ;;STRING:: "this"
                                      (250 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (253 (putstatic (fieldCP "THIS" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (256 (ldc_w 73)) ;;STRING:: "reify*"
                                      (259 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (262 (putstatic (fieldCP "REIFY" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (265 (ldc_w 28)) ;;STRING:: "clojure.core"
                                      (268 (ldc_w 74)) ;;STRING:: "list"
                                      (271 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (274 (putstatic (fieldCP "LIST" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (277 (ldc_w 28)) ;;STRING:: "clojure.core"
                                      (280 (ldc_w 75)) ;;STRING:: "hash-map"
                                      (283 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (286 (putstatic (fieldCP "HASHMAP" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (289 (ldc_w 28)) ;;STRING:: "clojure.core"
                                      (292 (ldc_w 76)) ;;STRING:: "vector"
                                      (295 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (298 (putstatic (fieldCP "VECTOR" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (301 (ldc_w 28)) ;;STRING:: "clojure.core"
                                      (304 (ldc_w 77)) ;;STRING:: "identity"
                                      (307 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (310 (putstatic (fieldCP "IDENTITY" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (313 (ldc_w 78)) ;;STRING:: "&"
                                      (316 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (319 (putstatic (fieldCP "_AMP_" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (322 (ldc_w 79)) ;;STRING:: "clojure.lang.ISeq"
                                      (325 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (328 (putstatic (fieldCP "ISEQ" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (331 (aconst_null)) 
                                      (332 (ldc_w 80)) ;;STRING:: "inline"
                                      (335 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (338 (putstatic (fieldCP "inlineKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (341 (aconst_null)) 
                                      (342 (ldc_w 81)) ;;STRING:: "inline-arities"
                                      (345 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (348 (putstatic (fieldCP "inlineAritiesKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (351 (aconst_null)) 
                                      (352 (ldc_w 82)) ;;STRING:: "static"
                                      (355 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (358 (putstatic (fieldCP "staticKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (361 (aconst_null)) 
                                      (362 (ldc_w 83)) ;;STRING:: "arglists"
                                      (365 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (368 (putstatic (fieldCP "arglistsKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (371 (ldc_w 84)) ;;STRING:: "invokeStatic"
                                      (374 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (377 (putstatic (fieldCP "INVOKE_STATIC" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (380 (aconst_null)) 
                                      (381 (ldc_w 85)) ;;STRING:: "volatile"
                                      (384 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (387 (putstatic (fieldCP "volatileKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (390 (aconst_null)) 
                                      (391 (ldc_w 86)) ;;STRING:: "implements"
                                      (394 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (397 (putstatic (fieldCP "implementsKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (400 (aconst_null)) 
                                      (401 (ldc_w 87)) ;;STRING:: "protocol"
                                      (404 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (407 (putstatic (fieldCP "protocolKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (410 (aconst_null)) 
                                      (411 (ldc_w 88)) ;;STRING:: "on"
                                      (414 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (417 (putstatic (fieldCP "onKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (420 (ldc_w 89)) ;;STRING:: "dynamic"
                                      (423 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (426 (putstatic (fieldCP "dynamicKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (429 (ldc_w 90)) ;;STRING:: "ns"
                                      (432 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (435 (putstatic (fieldCP "NS" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (438 (ldc_w 91)) ;;STRING:: "in-ns"
                                      (441 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (444 (putstatic (fieldCP "IN_NS" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (447 (bipush 48)) 
                                      (449 (anewarray (class "java.lang.Object"))) 
                                      (452 (dup)) 
                                      (453 (iconst_0)) 
                                      (454 (getstatic (fieldCP "DEF" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (457 (aastore)) 
                                      (458 (dup)) 
                                      (459 (iconst_1)) 
                                      (460 (new (class "clojure.lang.Compiler$DefExpr$Parser"))) 
                                      (463 (dup)) 
                                      (464 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$DefExpr$Parser" () void))) 
                                      (467 (aastore)) 
                                      (468 (dup)) 
                                      (469 (iconst_2)) 
                                      (470 (getstatic (fieldCP "LOOP" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (473 (aastore)) 
                                      (474 (dup)) 
                                      (475 (iconst_3)) 
                                      (476 (new (class "clojure.lang.Compiler$LetExpr$Parser"))) 
                                      (479 (dup)) 
                                      (480 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$LetExpr$Parser" () void))) 
                                      (483 (aastore)) 
                                      (484 (dup)) 
                                      (485 (iconst_4)) 
                                      (486 (getstatic (fieldCP "RECUR" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (489 (aastore)) 
                                      (490 (dup)) 
                                      (491 (iconst_5)) 
                                      (492 (new (class "clojure.lang.Compiler$RecurExpr$Parser"))) 
                                      (495 (dup)) 
                                      (496 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$RecurExpr$Parser" () void))) 
                                      (499 (aastore)) 
                                      (500 (dup)) 
                                      (501 (bipush 6)) 
                                      (503 (getstatic (fieldCP "IF" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (506 (aastore)) 
                                      (507 (dup)) 
                                      (508 (bipush 7)) 
                                      (510 (new (class "clojure.lang.Compiler$IfExpr$Parser"))) 
                                      (513 (dup)) 
                                      (514 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$IfExpr$Parser" () void))) 
                                      (517 (aastore)) 
                                      (518 (dup)) 
                                      (519 (bipush 8)) 
                                      (521 (getstatic (fieldCP "CASE" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (524 (aastore)) 
                                      (525 (dup)) 
                                      (526 (bipush 9)) 
                                      (528 (new (class "clojure.lang.Compiler$CaseExpr$Parser"))) 
                                      (531 (dup)) 
                                      (532 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$CaseExpr$Parser" () void))) 
                                      (535 (aastore)) 
                                      (536 (dup)) 
                                      (537 (bipush 10)) 
                                      (539 (getstatic (fieldCP "LET" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (542 (aastore)) 
                                      (543 (dup)) 
                                      (544 (bipush 11)) 
                                      (546 (new (class "clojure.lang.Compiler$LetExpr$Parser"))) 
                                      (549 (dup)) 
                                      (550 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$LetExpr$Parser" () void))) 
                                      (553 (aastore)) 
                                      (554 (dup)) 
                                      (555 (bipush 12)) 
                                      (557 (getstatic (fieldCP "LETFN" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (560 (aastore)) 
                                      (561 (dup)) 
                                      (562 (bipush 13)) 
                                      (564 (new (class "clojure.lang.Compiler$LetFnExpr$Parser"))) 
                                      (567 (dup)) 
                                      (568 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$LetFnExpr$Parser" () void))) 
                                      (571 (aastore)) 
                                      (572 (dup)) 
                                      (573 (bipush 14)) 
                                      (575 (getstatic (fieldCP "DO" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (578 (aastore)) 
                                      (579 (dup)) 
                                      (580 (bipush 15)) 
                                      (582 (new (class "clojure.lang.Compiler$BodyExpr$Parser"))) 
                                      (585 (dup)) 
                                      (586 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$BodyExpr$Parser" () void))) 
                                      (589 (aastore)) 
                                      (590 (dup)) 
                                      (591 (bipush 16)) 
                                      (593 (getstatic (fieldCP "FN" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (596 (aastore)) 
                                      (597 (dup)) 
                                      (598 (bipush 17)) 
                                      (600 (aconst_null)) 
                                      (601 (aastore)) 
                                      (602 (dup)) 
                                      (603 (bipush 18)) 
                                      (605 (getstatic (fieldCP "QUOTE" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (608 (aastore)) 
                                      (609 (dup)) 
                                      (610 (bipush 19)) 
                                      (612 (new (class "clojure.lang.Compiler$ConstantExpr$Parser"))) 
                                      (615 (dup)) 
                                      (616 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$ConstantExpr$Parser" () void))) 
                                      (619 (aastore)) 
                                      (620 (dup)) 
                                      (621 (bipush 20)) 
                                      (623 (getstatic (fieldCP "THE_VAR" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (626 (aastore)) 
                                      (627 (dup)) 
                                      (628 (bipush 21)) 
                                      (630 (new (class "clojure.lang.Compiler$TheVarExpr$Parser"))) 
                                      (633 (dup)) 
                                      (634 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$TheVarExpr$Parser" () void))) 
                                      (637 (aastore)) 
                                      (638 (dup)) 
                                      (639 (bipush 22)) 
                                      (641 (getstatic (fieldCP "IMPORT" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (644 (aastore)) 
                                      (645 (dup)) 
                                      (646 (bipush 23)) 
                                      (648 (new (class "clojure.lang.Compiler$ImportExpr$Parser"))) 
                                      (651 (dup)) 
                                      (652 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$ImportExpr$Parser" () void))) 
                                      (655 (aastore)) 
                                      (656 (dup)) 
                                      (657 (bipush 24)) 
                                      (659 (getstatic (fieldCP "DOT" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (662 (aastore)) 
                                      (663 (dup)) 
                                      (664 (bipush 25)) 
                                      (666 (new (class "clojure.lang.Compiler$HostExpr$Parser"))) 
                                      (669 (dup)) 
                                      (670 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$HostExpr$Parser" () void))) 
                                      (673 (aastore)) 
                                      (674 (dup)) 
                                      (675 (bipush 26)) 
                                      (677 (getstatic (fieldCP "ASSIGN" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (680 (aastore)) 
                                      (681 (dup)) 
                                      (682 (bipush 27)) 
                                      (684 (new (class "clojure.lang.Compiler$AssignExpr$Parser"))) 
                                      (687 (dup)) 
                                      (688 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$AssignExpr$Parser" () void))) 
                                      (691 (aastore)) 
                                      (692 (dup)) 
                                      (693 (bipush 28)) 
                                      (695 (getstatic (fieldCP "DEFTYPE" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (698 (aastore)) 
                                      (699 (dup)) 
                                      (700 (bipush 29)) 
                                      (702 (new (class "clojure.lang.Compiler$NewInstanceExpr$DeftypeParser"))) 
                                      (705 (dup)) 
                                      (706 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$NewInstanceExpr$DeftypeParser" () void))) 
                                      (709 (aastore)) 
                                      (710 (dup)) 
                                      (711 (bipush 30)) 
                                      (713 (getstatic (fieldCP "REIFY" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (716 (aastore)) 
                                      (717 (dup)) 
                                      (718 (bipush 31)) 
                                      (720 (new (class "clojure.lang.Compiler$NewInstanceExpr$ReifyParser"))) 
                                      (723 (dup)) 
                                      (724 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$NewInstanceExpr$ReifyParser" () void))) 
                                      (727 (aastore)) 
                                      (728 (dup)) 
                                      (729 (bipush 32)) 
                                      (731 (getstatic (fieldCP "TRY" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (734 (aastore)) 
                                      (735 (dup)) 
                                      (736 (bipush 33)) 
                                      (738 (new (class "clojure.lang.Compiler$TryExpr$Parser"))) 
                                      (741 (dup)) 
                                      (742 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$TryExpr$Parser" () void))) 
                                      (745 (aastore)) 
                                      (746 (dup)) 
                                      (747 (bipush 34)) 
                                      (749 (getstatic (fieldCP "THROW" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (752 (aastore)) 
                                      (753 (dup)) 
                                      (754 (bipush 35)) 
                                      (756 (new (class "clojure.lang.Compiler$ThrowExpr$Parser"))) 
                                      (759 (dup)) 
                                      (760 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$ThrowExpr$Parser" () void))) 
                                      (763 (aastore)) 
                                      (764 (dup)) 
                                      (765 (bipush 36)) 
                                      (767 (getstatic (fieldCP "MONITOR_ENTER" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (770 (aastore)) 
                                      (771 (dup)) 
                                      (772 (bipush 37)) 
                                      (774 (new (class "clojure.lang.Compiler$MonitorEnterExpr$Parser"))) 
                                      (777 (dup)) 
                                      (778 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$MonitorEnterExpr$Parser" () void))) 
                                      (781 (aastore)) 
                                      (782 (dup)) 
                                      (783 (bipush 38)) 
                                      (785 (getstatic (fieldCP "MONITOR_EXIT" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (788 (aastore)) 
                                      (789 (dup)) 
                                      (790 (bipush 39)) 
                                      (792 (new (class "clojure.lang.Compiler$MonitorExitExpr$Parser"))) 
                                      (795 (dup)) 
                                      (796 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$MonitorExitExpr$Parser" () void))) 
                                      (799 (aastore)) 
                                      (800 (dup)) 
                                      (801 (bipush 40)) 
                                      (803 (getstatic (fieldCP "CATCH" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (806 (aastore)) 
                                      (807 (dup)) 
                                      (808 (bipush 41)) 
                                      (810 (aconst_null)) 
                                      (811 (aastore)) 
                                      (812 (dup)) 
                                      (813 (bipush 42)) 
                                      (815 (getstatic (fieldCP "FINALLY" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (818 (aastore)) 
                                      (819 (dup)) 
                                      (820 (bipush 43)) 
                                      (822 (aconst_null)) 
                                      (823 (aastore)) 
                                      (824 (dup)) 
                                      (825 (bipush 44)) 
                                      (827 (getstatic (fieldCP "NEW" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (830 (aastore)) 
                                      (831 (dup)) 
                                      (832 (bipush 45)) 
                                      (834 (new (class "clojure.lang.Compiler$NewExpr$Parser"))) 
                                      (837 (dup)) 
                                      (838 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$NewExpr$Parser" () void))) 
                                      (841 (aastore)) 
                                      (842 (dup)) 
                                      (843 (bipush 46)) 
                                      (845 (getstatic (fieldCP "_AMP_" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (848 (aastore)) 
                                      (849 (dup)) 
                                      (850 (bipush 47)) 
                                      (852 (aconst_null)) 
                                      (853 (aastore)) 
                                      (854 (invokestatic (methodCP "create" "clojure.lang.PersistentHashMap" ((array (class "java.lang.Object"))) (class "clojure.lang.PersistentHashMap")))) 
                                      (857 (putstatic (fieldCP "specials" "clojure.lang.Compiler" (class "clojure.lang.IPersistentMap")))) 
                                      (860 (ldc_w )) 
                                      (863 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (866 (putstatic (fieldCP "KEYWORD_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (869 (ldc_w )) 
                                      (872 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (875 (putstatic (fieldCP "VAR_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (878 (ldc_w )) 
                                      (881 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (884 (putstatic (fieldCP "SYMBOL_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (887 (ldc_w )) 
                                      (890 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (893 (putstatic (fieldCP "IFN_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (896 (ldc_w )) 
                                      (899 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (902 (putstatic (fieldCP "AFUNCTION_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (905 (ldc_w )) 
                                      (908 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (911 (putstatic (fieldCP "RT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (914 (ldc_w )) 
                                      (917 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (920 (putstatic (fieldCP "NUMBERS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (923 (ldc_w )) 
                                      (926 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (929 (putstatic (fieldCP "CLASS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (932 (ldc_w )) 
                                      (935 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (938 (putstatic (fieldCP "NS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (941 (ldc_w )) 
                                      (944 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (947 (putstatic (fieldCP "UTIL_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (950 (ldc_w )) 
                                      (953 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (956 (putstatic (fieldCP "REFLECTOR_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (959 (ldc_w )) 
                                      (962 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (965 (putstatic (fieldCP "THROWABLE_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (968 (ldc_w )) 
                                      (971 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (974 (putstatic (fieldCP "BOOLEAN_OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (977 (ldc_w )) 
                                      (980 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (983 (putstatic (fieldCP "IPERSISTENTMAP_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (986 (ldc_w )) 
                                      (989 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (992 (putstatic (fieldCP "IOBJ_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (995 (iconst_0)) 
                                      (996 (anewarray (class "clojure.asm.Type"))) 
                                      (999 (putstatic (fieldCP "EXCEPTION_TYPES" "clojure.lang.Compiler" (array (class "clojure.asm.Type"))))) 
                                      (1002 (ldc_w )) 
                                      (1005 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (1008 (putstatic (fieldCP "OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (1011 (bipush 22)) 
                                      (1013 (anewarray (array (class "clojure.asm.Type")))) 
                                      (1016 (putstatic (fieldCP "ARG_TYPES" "clojure.lang.Compiler" (array (array (class "clojure.asm.Type")))))) 
                                      (1019 (iconst_0)) 
                                      (1020 (istore_0)) 
                                      (1021 (iload_0)) ;;at TAG_3
                                      (1022 (bipush 20)) 
                                      (1024 (if_icmpgt 1063)) ;;to TAG_0
                                      (1027 (iload_0)) 
                                      (1028 (anewarray (class "clojure.asm.Type"))) 
                                      (1031 (astore_1)) 
                                      (1032 (iconst_0)) 
                                      (1033 (istore_2)) 
                                      (1034 (iload_2)) ;;at TAG_2
                                      (1035 (iload_0)) 
                                      (1036 (if_icmpge 1051)) ;;to TAG_1
                                      (1039 (aload_1)) 
                                      (1040 (iload_2)) 
                                      (1041 (getstatic (fieldCP "OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (1044 (aastore)) 
                                      (1045 (iinc 2 1)) 
                                      (1048 (goto 1034))  ;;to TAG_2
                                      (1051 (getstatic (fieldCP "ARG_TYPES" "clojure.lang.Compiler" (array (array (class "clojure.asm.Type")))))) ;;at TAG_1
                                      (1054 (iload_0)) 
                                      (1055 (aload_1)) 
                                      (1056 (aastore)) 
                                      (1057 (iinc 0 1)) 
                                      (1060 (goto 1021)) ;;to TAG_3
                                      (1063 (bipush 21)) ;;at TAG_0
                                      (1065 (anewarray (class "clojure.asm.Type"))) 
                                      (1068 (astore_0)) 
                                      (1069 (iconst_0)) 
                                      (1070 (istore_1)) 
                                      (1071 (iload_1)) ;;at TAG_5
                                      (1072 (bipush 20)) 
                                      (1074 (if_icmpge 1089)) ;;to TAG_4
                                      (1077 (aload_0)) 
                                      (1078 (iload_1)) 
                                      (1079 (getstatic (fieldCP "OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (1082 (aastore)) 
                                      (1083 (iinc 1 1)) 
                                      (1086 (goto 1071)) ;;to TAG_5
                                      (1089 (aload_0)) ;;at TAG_4
                                      (1090 (bipush 20)) 
                                      (1092 (ldc_w 92)) ;;STRING:: "[Ljava/lang/Object;"
                                      (1095 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.String")) (class "clojure.asm.Type")))) 
                                      (1098 (aastore)) 
                                      (1099 (getstatic (fieldCP "ARG_TYPES" "clojure.lang.Compiler" (array (array (class "clojure.asm.Type")))))) 
                                      (1102 (bipush 21)) 
                                      (1104 (aload_0)) 
                                      (1105 (aastore)) 
                                      (1106 (aconst_null)) 
                                      (1107 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1110 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1113 (putstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1116 (invokestatic (methodCP "create" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1119 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1122 (putstatic (fieldCP "LOOP_LOCALS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1125 (invokestatic (methodCP "create" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1128 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1131 (putstatic (fieldCP "LOOP_LABEL" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1134 (invokestatic (methodCP "create" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1137 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1140 (putstatic (fieldCP "CONSTANTS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1143 (invokestatic (methodCP "create" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1146 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1149 (putstatic (fieldCP "CONSTANT_IDS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1152 (invokestatic (methodCP "create" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1155 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1158 (putstatic (fieldCP "KEYWORD_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1161 (invokestatic (methodCP "create" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1164 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1167 (putstatic (fieldCP "PROTOCOL_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1170 (invokestatic (methodCP "create" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1173 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1176 (putstatic (fieldCP "VAR_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1179 (invokestatic (methodCP "create" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1182 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1185 (putstatic (fieldCP "KEYWORDS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1188 (invokestatic (methodCP "create" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1191 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1194 (putstatic (fieldCP "VARS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1197 (aconst_null)) 
                                      (1198 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1201 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1204 (putstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1207 (aconst_null)) 
                                      (1208 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1211 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1214 (putstatic (fieldCP "IN_CATCH_FINALLY" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1217 (aconst_null)) 
                                      (1218 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1221 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1224 (putstatic (fieldCP "NO_RECUR" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1227 (invokestatic (methodCP "create" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1230 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1233 (putstatic (fieldCP "LOADER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1236 (ldc_w 28)) ;;STRING:: "clojure.core"
                                      (1239 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1242 (invokestatic (methodCP "findOrCreate" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (1245 (ldc_w 93)) ;;STRING:: "*source-path*"
                                      (1248 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1251 (ldc_w 24)) ;;STRING:: "NO_SOURCE_FILE"
                                      (1254 (invokestatic (methodCP "intern" "clojure.lang.Var" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol") (class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1257 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1260 (putstatic (fieldCP "SOURCE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1263 (ldc_w 28)) ;;STRING:: "clojure.core"
                                      (1266 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1269 (invokestatic (methodCP "findOrCreate" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (1272 (ldc_w 94)) ;;STRING:: "*file*"
                                      (1275 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1278 (ldc_w 95)) ;;STRING:: "NO_SOURCE_PATH"
                                      (1281 (invokestatic (methodCP "intern" "clojure.lang.Var" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol") (class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1284 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1287 (putstatic (fieldCP "SOURCE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1290 (ldc_w 28)) ;;STRING:: "clojure.core"
                                      (1293 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1296 (invokestatic (methodCP "findOrCreate" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (1299 (ldc_w 96)) ;;STRING:: "*compile-path*"
                                      (1302 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1305 (aconst_null)) 
                                      (1306 (invokestatic (methodCP "intern" "clojure.lang.Var" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol") (class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1309 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1312 (putstatic (fieldCP "COMPILE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1315 (ldc_w 28)) ;;STRING:: "clojure.core"
                                      (1318 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1321 (invokestatic (methodCP "findOrCreate" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (1324 (ldc_w 97)) ;;STRING:: "*compile-files*"
                                      (1327 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1330 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (1333 (invokestatic (methodCP "intern" "clojure.lang.Var" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol") (class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1336 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1339 (putstatic (fieldCP "COMPILE_FILES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1342 (ldc_w 28)) ;;STRING:: "clojure.core"
                                      (1345 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1348 (invokestatic (methodCP "findOrCreate" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (1351 (ldc_w 98)) ;;STRING:: "instance?"
                                      (1354 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1357 (invokestatic (methodCP "intern" "clojure.lang.Var" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol")) (class "clojure.lang.Var")))) 
                                      (1360 (putstatic (fieldCP "INSTANCE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1363 (ldc_w 28)) ;;STRING:: "clojure.core"
                                      (1366 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1369 (invokestatic (methodCP "findOrCreate" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (1372 (ldc_w 99)) ;;STRING:: "add-annotations"
                                      (1375 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1378 (invokestatic (methodCP "intern" "clojure.lang.Var" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol")) (class "clojure.lang.Var")))) 
                                      (1381 (putstatic (fieldCP "ADD_ANNOTATIONS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1384 (ldc_w 100)) ;;STRING:: "disable-locals-clearing"
                                      (1387 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (1390 (putstatic (fieldCP "disableLocalsClearingKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (1393 (ldc_w 101)) ;;STRING:: "elide-meta"
                                      (1396 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (1399 (putstatic (fieldCP "elideMetaKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (1402 (ldc_w 28)) ;;STRING:: "clojure.core"
                                      (1405 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1408 (invokestatic (methodCP "findOrCreate" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace")))) 
                                      (1411 (ldc_w 102)) ;;STRING:: "*compiler-options*"
                                      (1414 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (1417 (aconst_null)) 
                                      (1418 (invokestatic (methodCP "intern" "clojure.lang.Var" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol") (class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1421 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1424 (putstatic (fieldCP "COMPILER_OPTIONS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1427 (iconst_0)) 
                                      (1428 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (1431 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1434 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1437 (putstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1440 (iconst_0)) 
                                      (1441 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (1444 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1447 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1450 (putstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1453 (iconst_0)) 
                                      (1454 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (1457 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1460 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1463 (putstatic (fieldCP "LINE_BEFORE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1466 (iconst_0)) 
                                      (1467 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (1470 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1473 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1476 (putstatic (fieldCP "COLUMN_BEFORE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1479 (iconst_0)) 
                                      (1480 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (1483 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1486 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1489 (putstatic (fieldCP "LINE_AFTER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1492 (iconst_0)) 
                                      (1493 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (1496 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1499 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1502 (putstatic (fieldCP "COLUMN_AFTER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1505 (iconst_0)) 
                                      (1506 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (1509 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1512 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1515 (putstatic (fieldCP "NEXT_LOCAL_NUM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1518 (invokestatic (methodCP "create" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1521 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1524 (putstatic (fieldCP "RET_LOCAL_NUM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1527 (aconst_null)) 
                                      (1528 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1531 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1534 (putstatic (fieldCP "COMPILE_STUB_SYM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1537 (aconst_null)) 
                                      (1538 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1541 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1544 (putstatic (fieldCP "COMPILE_STUB_CLASS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1547 (aconst_null)) 
                                      (1548 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1551 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1554 (putstatic (fieldCP "CLEAR_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1557 (aconst_null)) 
                                      (1558 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1561 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1564 (putstatic (fieldCP "CLEAR_ROOT" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1567 (aconst_null)) 
                                      (1568 (invokestatic (methodCP "create" "clojure.lang.Var" ((class "java.lang.Object")) (class "clojure.lang.Var")))) 
                                      (1571 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (1574 (putstatic (fieldCP "CLEAR_SITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (1577 (ldc_w )) 
                                      (1580 (putstatic (fieldCP "RECUR_CLASS" "clojure.lang.Compiler" (class "java.lang.Class")))) 
                                      (1583 (new (class "clojure.lang.Compiler$NilExpr"))) 
                                      (1586 (dup)) 
                                      (1587 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$NilExpr" () void))) 
                                      (1590 (putstatic (fieldCP "NIL_EXPR" "clojure.lang.Compiler" (class "clojure.lang.Compiler$NilExpr")))) 
                                      (1593 (new (class "clojure.lang.Compiler$BooleanExpr"))) 
                                      (1596 (dup)) 
                                      (1597 (iconst_1)) 
                                      (1598 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$BooleanExpr" (boolean) void))) 
                                      (1601 (putstatic (fieldCP "TRUE_EXPR" "clojure.lang.Compiler" (class "clojure.lang.Compiler$BooleanExpr")))) 
                                      (1604 (new (class "clojure.lang.Compiler$BooleanExpr"))) 
                                      (1607 (dup)) 
                                      (1608 (iconst_0)) 
                                      (1609 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$BooleanExpr" (boolean) void))) 
                                      (1612 (putstatic (fieldCP "FALSE_EXPR" "clojure.lang.Compiler" (class "clojure.lang.Compiler$BooleanExpr")))) 
                                      (1615 (bipush 48)) 
                                      (1617 (anewarray (class "java.lang.Object"))) 
                                      (1620 (dup)) 
                                      (1621 (iconst_0)) 
                                      (1622 (bipush 45)) 
                                      (1624 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1627 (aastore)) 
                                      (1628 (dup)) 
                                      (1629 (iconst_1)) 
                                      (1630 (ldc_w 103)) ;;STRING:: "_"
                                      (1633 (aastore)) 
                                      (1634 (dup)) 
                                      (1635 (iconst_2)) 
                                      (1636 (bipush 58)) 
                                      (1638 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1641 (aastore)) 
                                      (1642 (dup)) 
                                      (1643 (iconst_3)) 
                                      (1644 (ldc_w 104)) ;;STRING:: "_COLON_"
                                      (1647 (aastore)) 
                                      (1648 (dup)) 
                                      (1649 (iconst_4)) 
                                      (1650 (bipush 43)) 
                                      (1652 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1655 (aastore)) 
                                      (1656 (dup)) 
                                      (1657 (iconst_5)) 
                                      (1658 (ldc_w 105)) ;;STRING:: "_PLUS_"
                                      (1661 (aastore)) 
                                      (1662 (dup)) 
                                      (1663 (bipush 6)) 
                                      (1665 (bipush 62)) 
                                      (1667 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1670 (aastore)) 
                                      (1671 (dup)) 
                                      (1672 (bipush 7)) 
                                      (1674 (ldc_w 106)) ;;STRING:: "_GT_"
                                      (1677 (aastore)) 
                                      (1678 (dup)) 
                                      (1679 (bipush 8)) 
                                      (1681 (bipush 60)) 
                                      (1683 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1686 (aastore)) 
                                      (1687 (dup)) 
                                      (1688 (bipush 9)) 
                                      (1690 (ldc_w 107)) ;;STRING:: "_LT_"
                                      (1693 (aastore)) 
                                      (1694 (dup)) 
                                      (1695 (bipush 10)) 
                                      (1697 (bipush 61)) 
                                      (1699 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1702 (aastore)) 
                                      (1703 (dup)) 
                                      (1704 (bipush 11)) 
                                      (1706 (ldc_w 108)) ;;STRING:: "_EQ_"
                                      (1709 (aastore)) 
                                      (1710 (dup)) 
                                      (1711 (bipush 12)) 
                                      (1713 (bipush 126)) 
                                      (1715 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1718 (aastore)) 
                                      (1719 (dup)) 
                                      (1720 (bipush 13)) 
                                      (1722 (ldc_w 109)) ;;STRING:: "_TILDE_"
                                      (1725 (aastore)) 
                                      (1726 (dup)) 
                                      (1727 (bipush 14)) 
                                      (1729 (bipush 33)) 
                                      (1731 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1734 (aastore)) 
                                      (1735 (dup)) 
                                      (1736 (bipush 15)) 
                                      (1738 (ldc_w 110)) ;;STRING:: "_BANG_"
                                      (1741 (aastore)) 
                                      (1742 (dup)) 
                                      (1743 (bipush 16)) 
                                      (1745 (bipush 64)) 
                                      (1747 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1750 (aastore)) 
                                      (1751 (dup)) 
                                      (1752 (bipush 17)) 
                                      (1754 (ldc_w 111)) ;;STRING:: "_CIRCA_"
                                      (1757 (aastore)) 
                                      (1758 (dup)) 
                                      (1759 (bipush 18)) 
                                      (1761 (bipush 35)) 
                                      (1763 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1766 (aastore)) 
                                      (1767 (dup)) 
                                      (1768 (bipush 19)) 
                                      (1770 (ldc_w 112)) ;;STRING:: "_SHARP_"
                                      (1773 (aastore)) 
                                      (1774 (dup)) 
                                      (1775 (bipush 20)) 
                                      (1777 (bipush 39)) 
                                      (1779 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1782 (aastore)) 
                                      (1783 (dup)) 
                                      (1784 (bipush 21)) 
                                      (1786 (ldc_w 113)) ;;STRING:: "_SINGLEQUOTE_"
                                      (1789 (aastore)) 
                                      (1790 (dup)) 
                                      (1791 (bipush 22)) 
                                      (1793 (bipush 34)) 
                                      (1795 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1798 (aastore)) 
                                      (1799 (dup)) 
                                      (1800 (bipush 23)) 
                                      (1802 (ldc_w 114)) ;;STRING:: "_DOUBLEQUOTE_"
                                      (1805 (aastore)) 
                                      (1806 (dup)) 
                                      (1807 (bipush 24)) 
                                      (1809 (bipush 37)) 
                                      (1811 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1814 (aastore)) 
                                      (1815 (dup)) 
                                      (1816 (bipush 25)) 
                                      (1818 (ldc_w 115)) ;;STRING:: "_PERCENT_"
                                      (1821 (aastore)) 
                                      (1822 (dup)) 
                                      (1823 (bipush 26)) 
                                      (1825 (bipush 94)) 
                                      (1827 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1830 (aastore)) 
                                      (1831 (dup)) 
                                      (1832 (bipush 27)) 
                                      (1834 (ldc_w 116)) ;;STRING:: "_CARET_"
                                      (1837 (aastore)) 
                                      (1838 (dup)) 
                                      (1839 (bipush 28)) 
                                      (1841 (bipush 38)) 
                                      (1843 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1846 (aastore)) 
                                      (1847 (dup)) 
                                      (1848 (bipush 29)) 
                                      (1850 (ldc_w 117)) ;;STRING:: "_AMPERSAND_"
                                      (1853 (aastore)) 
                                      (1854 (dup)) 
                                      (1855 (bipush 30)) 
                                      (1857 (bipush 42)) 
                                      (1859 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1862 (aastore)) 
                                      (1863 (dup)) 
                                      (1864 (bipush 31)) 
                                      (1866 (ldc_w 118)) ;;STRING:: "_STAR_"
                                      (1869 (aastore)) 
                                      (1870 (dup)) 
                                      (1871 (bipush 32)) 
                                      (1873 (bipush 124)) 
                                      (1875 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1878 (aastore)) 
                                      (1879 (dup)) 
                                      (1880 (bipush 33)) 
                                      (1882 (ldc_w 119)) ;;STRING:: "_BAR_"
                                      (1885 (aastore)) 
                                      (1886 (dup)) 
                                      (1887 (bipush 34)) 
                                      (1889 (bipush 123)) 
                                      (1891 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1894 (aastore)) 
                                      (1895 (dup)) 
                                      (1896 (bipush 35)) 
                                      (1898 (ldc_w 120)) ;;STRING:: "_LBRACE_"
                                      (1901 (aastore)) 
                                      (1902 (dup)) 
                                      (1903 (bipush 36)) 
                                      (1905 (bipush 125)) 
                                      (1907 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1910 (aastore)) 
                                      (1911 (dup)) 
                                      (1912 (bipush 37)) 
                                      (1914 (ldc_w 121)) ;;STRING:: "_RBRACE_"
                                      (1917 (aastore)) 
                                      (1918 (dup)) 
                                      (1919 (bipush 38)) 
                                      (1921 (bipush 91)) 
                                      (1923 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1926 (aastore)) 
                                      (1927 (dup)) 
                                      (1928 (bipush 39)) 
                                      (1930 (ldc_w 122)) ;;STRING:: "_LBRACK_"
                                      (1933 (aastore)) 
                                      (1934 (dup)) 
                                      (1935 (bipush 40)) 
                                      (1937 (bipush 93)) 
                                      (1939 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1942 (aastore)) 
                                      (1943 (dup)) 
                                      (1944 (bipush 41)) 
                                      (1946 (ldc_w 123)) ;;STRING:: "_RBRACK_"
                                      (1949 (aastore)) 
                                      (1950 (dup)) 
                                      (1951 (bipush 42)) 
                                      (1953 (bipush 47)) 
                                      (1955 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1958 (aastore)) 
                                      (1959 (dup)) 
                                      (1960 (bipush 43)) 
                                      (1962 (ldc_w 124)) ;;STRING:: "_SLASH_"
                                      (1965 (aastore)) 
                                      (1966 (dup)) 
                                      (1967 (bipush 44)) 
                                      (1969 (bipush 92)) 
                                      (1971 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1974 (aastore)) 
                                      (1975 (dup)) 
                                      (1976 (bipush 45)) 
                                      (1978 (ldc_w 125)) ;;STRING:: "_BSLASH_"
                                      (1981 (aastore)) 
                                      (1982 (dup)) 
                                      (1983 (bipush 46)) 
                                      (1985 (bipush 63)) 
                                      (1987 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (1990 (aastore)) 
                                      (1991 (dup)) 
                                      (1992 (bipush 47)) 
                                      (1994 (ldc_w 126)) ;;STRING:: "_QMARK_"
                                      (1997 (aastore)) 
                                      (1998 (invokestatic (methodCP "create" "clojure.lang.PersistentHashMap" ((array (class "java.lang.Object"))) (class "clojure.lang.PersistentHashMap")))) 
                                      (2001 (putstatic (fieldCP "CHAR_MAP" "clojure.lang.Compiler" (class "clojure.lang.IPersistentMap")))) 
                                      (2004 (return)) 
                                      (endofcode 2005))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.asm.Opcodes")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler" . "clojure.lang"))

