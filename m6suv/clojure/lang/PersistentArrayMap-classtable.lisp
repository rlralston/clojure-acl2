; PersistentArrayMap-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentArrayMap*
 (make-class-def
      '(class "clojure.lang.PersistentArrayMap"
            "clojure.lang.APersistentMap"
            (constant_pool
                        (INT 16)
                        (STRING  "Duplicate key: ")
                        (STRING  "Internal error: m=")
                        (STRING  "Key already present"))
            (fields
                        (field "array" (array (class "java.lang.Object")) (accessflags  *class*  *final* ) -1)
                        (field "HASHTABLE_THRESHOLD" int (accessflags  *class*  *final*  *static* ) 0)
                        (field "EMPTY" (class "clojure.lang.PersistentArrayMap") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "_meta" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *final*  *private* ) -1))
            (methods
                        (method "create"
                              (parameters (class "java.util.Map"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 72)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentArrayMap" (class "clojure.lang.PersistentArrayMap")))) 
                                      (3 (invokevirtual (methodCP "asTransient" "clojure.lang.PersistentArrayMap" () (class "clojure.lang.ITransientMap")))) 
                                      (6 (astore_1)) 
                                      (7 (aload_0)) 
                                      (8 (invokeinterface (methodCP "entrySet" "java.util.Map" () (class "java.util.Set")) 1)) 
                                      (13 (invokeinterface (methodCP "iterator" "java.util.Set" () (class "java.util.Iterator")) 1)) 
                                      (18 (astore_2)) 
                                      (19 (aload_2)) ;;at TAG_1
                                      (20 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (25 (ifeq 65))  ;;to TAG_0
                                      (28 (aload_2)) 
                                      (29 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (34 (astore_3)) 
                                      (35 (aload_3)) 
                                      (36 (checkcast (class "java.util.Map$Entry"))) 
                                      (39 (astore 4)) 
                                      (41 (aload_1)) 
                                      (42 (aload 4)) 
                                      (44 (invokeinterface (methodCP "getKey" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (49 (aload 4)) 
                                      (51 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (56 (invokeinterface (methodCP "assoc" "clojure.lang.ITransientMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ITransientMap")) 3)) 
                                      (61 (astore_1)) 
                                      (62 (goto 19)) ;;to TAG_1
                                      (65 (aload_1)) ;;at TAG_0
                                      (66 (invokeinterface (methodCP "persistent" "clojure.lang.ITransientMap" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (71 (areturn)) 
                                      (endofcode 72))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *protected* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentMap" () void)))
                                      (4 (aload_0))
                                      (5 (iconst_0))
                                      (6 (anewarray (class "java.lang.Object")))
                                      (9 (putfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object")))))
                                      (12 (aload_0))
                                      (13 (aconst_null))
                                      (14 (putfield (fieldCP "_meta" "clojure.lang.PersistentArrayMap" (class "clojure.lang.IPersistentMap"))))
                                      (17 (return))
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.PersistentArrayMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 13)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentArrayMap")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object")))))
                                      (9 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentArrayMap" ((class "clojure.lang.IPersistentMap") (array (class "java.lang.Object"))) void)))
                                      (12 (areturn))
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (class "clojure.lang.PersistentArrayMap"))
                              (accessflags  *class*  *transient* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 13)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentArrayMap")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (invokevirtual
					(methodCP "meta" "clojure.lang.PersistentArrayMap" () (class "clojure.lang.IPersistentMap"))))
                                      (8 (aload_1))
                                      (9 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentArrayMap" ((class "clojure.lang.IPersistentMap") (array (class "java.lang.Object"))) void)))
                                      (12 (areturn))
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "createHT"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "meta" "clojure.lang.PersistentArrayMap" () (class "clojure.lang.IPersistentMap"))))
                                      (4 (aload_1))
                                      (5 (invokestatic
					(methodCP "create" "clojure.lang.PersistentHashMap" ((class "clojure.lang.IPersistentMap") (array (class "java.lang.Object"))) (class "clojure.lang.PersistentHashMap"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "createWithCheck"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (class "clojure.lang.PersistentArrayMap"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 80)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_1)) 
                                      (2 (iload_1)) ;;at TAG_4
                                      (3 (aload_0)) 
                                      (4 (arraylength)) 
                                      (5 (if_icmpge 71)) ;;to TAG_0
                                      (8 (iload_1)) 
                                      (9 (iconst_2)) 
                                      (10 (iadd)) 
                                      (11 (istore_2)) 
                                      (12 (iload_2)) ;;at TAG_3
                                      (13 (aload_0)) 
                                      (14 (arraylength)) 
                                      (15 (if_icmpge 65)) ;;to TAG_1
                                      (18 (aload_0)) 
                                      (19 (iload_1)) 
                                      (20 (aaload)) 
                                      (21 (aload_0)) 
                                      (22 (iload_2)) 
                                      (23 (aaload)) 
                                      (24 (invokestatic (methodCP "equalKey" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (27 (ifeq 59))  ;;to TAG_2
                                      (30 (new (class "java.lang.IllegalArgumentException"))) 
                                      (33 (dup)) 
                                      (34 (new (class "java.lang.StringBuilder"))) 
                                      (37 (dup)) 
                                      (38 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (41 (ldc 1)) ;;STRING:: "Duplicate key: "
                                      (43 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (46 (aload_0)) 
                                      (47 (iload_1)) 
                                      (48 (aaload)) 
                                      (49 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (52 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (55 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (58 (athrow)) 
                                      (59 (iinc 2 2)) ;;at TAG_2
                                      (62 (goto 12)) ;;to TAG_3
                                      (65 (iinc 1 2)) ;;at TAG_1
                                      (68 (goto 2)) ;;to TAG_4
                                      (71 (new (class "clojure.lang.PersistentArrayMap"))) ;;at TAG_0
                                      (74 (dup)) 
                                      (75 (aload_0)) 
                                      (76 (invokespecial (methodCP "<init>" "clojure.lang.PersistentArrayMap" ((array (class "java.lang.Object"))) void))) 
                                      (79 (areturn)) 
                                      (endofcode 80))
                                   (Exceptions )
                                   (StackMap )))
                        (method "createAsIfByAssoc"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (class "clojure.lang.PersistentArrayMap"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 7) (code_length . 230)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_1)) 
                                      (2 (iconst_0)) 
                                      (3 (istore_2)) 
                                      (4 (iload_2)) ;;at TAG_5
                                      (5 (aload_0)) 
                                      (6 (arraylength)) 
                                      (7 (if_icmpge 58)) ;;to TAG_0
                                      (10 (iconst_0)) 
                                      (11 (istore_3)) 
                                      (12 (iconst_0)) 
                                      (13 (istore 4)) 
                                      (15 (iload 4)) ;;at TAG_3
                                      (17 (iload_2)) 
                                      (18 (if_icmpge 45))  ;;to TAG_1
                                      (21 (aload_0)) 
                                      (22 (iload_2)) 
                                      (23 (aaload)) 
                                      (24 (aload_0)) 
                                      (25 (iload 4)) 
                                      (27 (aaload)) 
                                      (28 (invokestatic (methodCP "equalKey" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (31 (ifeq 39)) ;;to TAG_2
                                      (34 (iconst_1)) 
                                      (35 (istore_3)) 
                                      (36 (goto 45))  ;;to TAG_1
                                      (39 (iinc 4 2)) ;;at TAG_2
                                      (42 (goto 15)) ;;to TAG_3
                                      (45 (iload_3)) ;;at TAG_1
                                      (46 (ifne 52)) ;;to TAG_4
                                      (49 (iinc 1 2)) 
                                      (52 (iinc 2 2)) ;;at TAG_4
                                      (55 (goto 4)) ;;to TAG_5
                                      (58 (iload_1)) ;;at TAG_0
                                      (59 (aload_0)) 
                                      (60 (arraylength)) 
                                      (61 (if_icmpge 221)) ;;to TAG_6
                                      (64 (iload_1)) 
                                      (65 (anewarray (class "java.lang.Object"))) 
                                      (68 (astore_2)) 
                                      (69 (iconst_0)) 
                                      (70 (istore_3)) 
                                      (71 (iconst_0)) 
                                      (72 (istore 4)) 
                                      (74 (iload 4)) ;;at TAG_15
                                      (76 (aload_0)) 
                                      (77 (arraylength)) 
                                      (78 (if_icmpge 187)) ;;to TAG_7
                                      (81 (iconst_0)) 
                                      (82 (istore 5)) 
                                      (84 (iconst_0)) 
                                      (85 (istore 6)) 
                                      (87 (iload 6)) ;;at TAG_10
                                      (89 (iload_3)) 
                                      (90 (if_icmpge 119)) ;;to TAG_8
                                      (93 (aload_0)) 
                                      (94 (iload 4)) 
                                      (96 (aaload)) 
                                      (97 (aload_2)) 
                                      (98 (iload 6)) 
                                      (100 (aaload)) 
                                      (101 (invokestatic (methodCP "equalKey" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (104 (ifeq 113)) ;;to TAG_9
                                      (107 (iconst_1)) 
                                      (108 (istore 5)) 
                                      (110 (goto 119)) ;;to TAG_8
                                      (113 (iinc 6 2)) ;;at TAG_9
                                      (116 (goto 87)) ;;to TAG_10
                                      (119 (iload 5)) ;;at TAG_8
                                      (121 (ifne 181)) ;;to TAG_11
                                      (124 (aload_0)) 
                                      (125 (arraylength)) 
                                      (126 (iconst_2)) 
                                      (127 (isub)) 
                                      (128 (istore 6)) 
                                      (130 (iload 6)) ;;at TAG_14
                                      (132 (iload 4)) 
                                      (134 (if_icmplt 160)) ;;to TAG_12
                                      (137 (aload_0)) 
                                      (138 (iload 4)) 
                                      (140 (aaload)) 
                                      (141 (aload_0)) 
                                      (142 (iload 6)) 
                                      (144 (aaload)) 
                                      (145 (invokestatic (methodCP "equalKey" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (148 (ifeq 154)) ;;to TAG_13
                                      (151 (goto 160)) ;;to TAG_12
                                      (154 (iinc 6 -2)) ;;at TAG_13
                                      (157 (goto 130)) ;;to TAG_14
                                      (160 (aload_2)) ;;at TAG_12
                                      (161 (iload_3)) 
                                      (162 (aload_0)) 
                                      (163 (iload 4)) 
                                      (165 (aaload)) 
                                      (166 (aastore)) 
                                      (167 (aload_2)) 
                                      (168 (iload_3)) 
                                      (169 (iconst_1)) 
                                      (170 (iadd)) 
                                      (171 (aload_0)) 
                                      (172 (iload 6)) 
                                      (174 (iconst_1)) 
                                      (175 (iadd)) 
                                      (176 (aaload)) 
                                      (177 (aastore)) 
                                      (178 (iinc 3 2)) 
                                      (181 (iinc 4 2)) ;;at TAG_11
                                      (184 (goto 74)) ;;to TAG_15
                                      (187 (iload_3)) ;;at TAG_7
                                      (188 (iload_1)) 
                                      (189 (if_icmpeq 219)) ;;to TAG_16
                                      (192 (new (class "java.lang.IllegalArgumentException"))) 
                                      (195 (dup)) 
                                      (196 (new (class "java.lang.StringBuilder"))) 
                                      (199 (dup)) 
                                      (200 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (203 (ldc 2)) ;;STRING:: "Internal error: m="
                                      (205 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (208 (iload_3)) 
                                      (209 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (212 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (215 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (218 (athrow)) 
                                      (219 (aload_2)) ;;at TAG_16
                                      (220 (astore_0)) 
                                      (221 (new (class "clojure.lang.PersistentArrayMap"))) ;;at TAG_6
                                      (224 (dup)) 
                                      (225 (aload_0)) 
                                      (226 (invokespecial (methodCP "<init>" "clojure.lang.PersistentArrayMap" ((array (class "java.lang.Object"))) void))) 
                                      (229 (areturn)) 
                                      (endofcode 230))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentMap" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object")))))
                                      (9 (aload_0))
                                      (10 (aconst_null))
                                      (11 (putfield (fieldCP "_meta" "clojure.lang.PersistentArrayMap" (class "clojure.lang.IPersistentMap"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (array (class "java.lang.Object")))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentMap" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "_meta" "clojure.lang.PersistentArrayMap" (class "clojure.lang.IPersistentMap"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object")))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object")))))
                                      (4 (arraylength))
                                      (5 (iconst_2))
                                      (6 (idiv))
                                      (7 (ireturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "containsKey"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokespecial (methodCP "indexOf" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object")) int))) 
                                      (5 (iflt 12))  ;;to TAG_0
                                      (8 (iconst_1)) 
                                      (9 (goto 13)) ;;to TAG_1
                                      (12 (iconst_0)) ;;at TAG_0
                                      (13 (ireturn)) ;;at TAG_1
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "entryAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IMapEntry"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 3) (code_length . 34)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokespecial (methodCP "indexOf" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object")) int))) 
                                      (5 (istore_2)) 
                                      (6 (iload_2)) 
                                      (7 (iflt 32))  ;;to TAG_0
                                      (10 (new (class "clojure.lang.MapEntry"))) 
                                      (13 (dup)) 
                                      (14 (aload_0)) 
                                      (15 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (18 (iload_2)) 
                                      (19 (aaload)) 
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (24 (iload_2)) 
                                      (25 (iconst_1)) 
                                      (26 (iadd)) 
                                      (27 (aaload)) 
                                      (28 (invokespecial (methodCP "<init>" "clojure.lang.MapEntry" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (31 (areturn)) 
                                      (32 (aconst_null)) ;;at TAG_0
                                      (33 (areturn)) 
                                      (endofcode 34))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assocEx"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 95)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokespecial (methodCP "indexOf" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object")) int))) 
                                      (5 (istore_3)) 
                                      (6 (iload_3)) 
                                      (7 (iflt 16)) ;;to TAG_0
                                      (10 (ldc 3)) ;;STRING:: "Key already present"
                                      (12 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (15 (athrow)) 
                                      (16 (aload_0)) ;;at TAG_0
                                      (17 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (20 (arraylength)) 
                                      (21 (bipush 16)) 
                                      (23 (if_icmple 42)) ;;to TAG_1
                                      (26 (aload_0)) 
                                      (27 (aload_0)) 
                                      (28 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (31 (invokevirtual (methodCP "createHT" "clojure.lang.PersistentArrayMap" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (34 (aload_1)) 
                                      (35 (aload_2)) 
                                      (36 (invokeinterface (methodCP "assocEx" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (41 (areturn)) 
                                      (42 (aload_0)) ;;at TAG_1
                                      (43 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (46 (arraylength)) 
                                      (47 (iconst_2)) 
                                      (48 (iadd)) 
                                      (49 (anewarray (class "java.lang.Object"))) 
                                      (52 (astore 4)) 
                                      (54 (aload_0)) 
                                      (55 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (58 (arraylength)) 
                                      (59 (ifle 78))  ;;to TAG_2
                                      (62 (aload_0)) 
                                      (63 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (66 (iconst_0)) 
                                      (67 (aload 4)) 
                                      (69 (iconst_2)) 
                                      (70 (aload_0)) 
                                      (71 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (74 (arraylength)) 
                                      (75 (invokestatic (methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void))) 
                                      (78 (aload 4)) ;;at TAG_2
                                      (80 (iconst_0)) 
                                      (81 (aload_1)) 
                                      (82 (aastore)) 
                                      (83 (aload 4)) 
                                      (85 (iconst_1)) 
                                      (86 (aload_2)) 
                                      (87 (aastore)) 
                                      (88 (aload_0)) 
                                      (89 (aload 4)) 
                                      (91 (invokevirtual (methodCP "create" "clojure.lang.PersistentArrayMap" ((array (class "java.lang.Object"))) (class "clojure.lang.PersistentArrayMap")))) 
                                      (94 (areturn)) 
                                      (endofcode 95))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 125)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokespecial (methodCP "indexOf" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object")) int))) 
                                      (5 (istore_3)) 
                                      (6 (iload_3)) 
                                      (7 (iflt 46)) ;;to TAG_0
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (14 (iload_3)) 
                                      (15 (iconst_1)) 
                                      (16 (iadd)) 
                                      (17 (aaload)) 
                                      (18 (aload_2)) 
                                      (19 (if_acmpne 24)) ;;to TAG_1
                                      (22 (aload_0)) 
                                      (23 (areturn)) 
                                      (24 (aload_0)) ;;at TAG_1
                                      (25 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (28 (invokevirtual (methodCP "clone" "java.lang.Object[]" () (class "java.lang.Object")))) 
                                      (31 (checkcast (array (class "java.lang.Object")))) 
                                      (34 (astore 4)) 
                                      (36 (aload 4)) 
                                      (38 (iload_3)) 
                                      (39 (iconst_1)) 
                                      (40 (iadd)) 
                                      (41 (aload_2)) 
                                      (42 (aastore)) 
                                      (43 (goto 118))  ;;to TAG_2
                                      (46 (aload_0)) ;;at TAG_0
                                      (47 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (50 (arraylength)) 
                                      (51 (bipush 16)) 
                                      (53 (if_icmple 72)) ;;to TAG_3
                                      (56 (aload_0)) 
                                      (57 (aload_0)) 
                                      (58 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (61 (invokevirtual (methodCP "createHT" "clojure.lang.PersistentArrayMap" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (64 (aload_1)) 
                                      (65 (aload_2)) 
                                      (66 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (71 (areturn)) 
                                      (72 (aload_0)) ;;at TAG_3
                                      (73 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (76 (arraylength)) 
                                      (77 (iconst_2)) 
                                      (78 (iadd)) 
                                      (79 (anewarray (class "java.lang.Object"))) 
                                      (82 (astore 4)) 
                                      (84 (aload_0)) 
                                      (85 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (88 (arraylength)) 
                                      (89 (ifle 108)) ;;to TAG_4
                                      (92 (aload_0)) 
                                      (93 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (96 (iconst_0)) 
                                      (97 (aload 4)) 
                                      (99 (iconst_2)) 
                                      (100 (aload_0)) 
                                      (101 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (104 (arraylength)) 
                                      (105 (invokestatic (methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void))) 
                                      (108 (aload 4)) ;;at TAG_4
                                      (110 (iconst_0)) 
                                      (111 (aload_1)) 
                                      (112 (aastore)) 
                                      (113 (aload 4)) 
                                      (115 (iconst_1)) 
                                      (116 (aload_2)) 
                                      (117 (aastore)) 
                                      (118 (aload_0)) ;;at TAG_2
                                      (119 (aload 4)) 
                                      (121 (invokevirtual (methodCP "create" "clojure.lang.PersistentArrayMap" ((array (class "java.lang.Object"))) (class "clojure.lang.PersistentArrayMap")))) 
                                      (124 (areturn)) 
                                      (endofcode 125))
                                   (Exceptions )
                                   (StackMap )))
                        (method "without"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 7) (code_length . 109)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokespecial (methodCP "indexOf" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object")) int))) 
                                      (5 (istore_2)) 
                                      (6 (iload_2)) 
                                      (7 (iflt 107)) ;;to TAG_0
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (14 (arraylength)) 
                                      (15 (iconst_2)) 
                                      (16 (isub)) 
                                      (17 (istore_3)) 
                                      (18 (iload_3)) 
                                      (19 (ifne 27)) ;;to TAG_1
                                      (22 (aload_0)) 
                                      (23 (invokevirtual (methodCP "empty" "clojure.lang.PersistentArrayMap" () (class "clojure.lang.IPersistentMap")))) 
                                      (26 (areturn)) 
                                      (27 (iload_3)) ;;at TAG_1
                                      (28 (anewarray (class "java.lang.Object"))) 
                                      (31 (astore 4)) 
                                      (33 (iconst_0)) 
                                      (34 (istore 5)) 
                                      (36 (iconst_0)) 
                                      (37 (istore 6)) 
                                      (39 (iload 5)) ;;at TAG_4
                                      (41 (aload_0)) 
                                      (42 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (45 (arraylength)) 
                                      (46 (if_icmpge 100))  ;;to TAG_2
                                      (49 (aload_0)) 
                                      (50 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (53 (iload 5)) 
                                      (55 (aaload)) 
                                      (56 (aload_1)) 
                                      (57 (invokestatic (methodCP "equalKey" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (60 (ifne 94)) ;;to TAG_3
                                      (63 (aload 4)) 
                                      (65 (iload 6)) 
                                      (67 (aload_0)) 
                                      (68 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (71 (iload 5)) 
                                      (73 (aaload)) 
                                      (74 (aastore)) 
                                      (75 (aload 4)) 
                                      (77 (iload 6)) 
                                      (79 (iconst_1)) 
                                      (80 (iadd)) 
                                      (81 (aload_0)) 
                                      (82 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (85 (iload 5)) 
                                      (87 (iconst_1)) 
                                      (88 (iadd)) 
                                      (89 (aaload)) 
                                      (90 (aastore)) 
                                      (91 (iinc 6 2)) 
                                      (94 (iinc 5 2)) ;;at TAG_3
                                      (97 (goto 39)) ;;to TAG_4
                                      (100 (aload_0)) ;;at TAG_2
                                      (101 (aload 4)) 
                                      (103 (invokevirtual (methodCP "create" "clojure.lang.PersistentArrayMap" ((array (class "java.lang.Object"))) (class "clojure.lang.PersistentArrayMap")))) 
                                      (106 (areturn)) 
                                      (107 (aload_0)) ;;at TAG_0
                                      (108 (areturn)) 
                                      (endofcode 109))
                                   (Exceptions )
                                   (StackMap )))
                        (method "empty"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentArrayMap" (class "clojure.lang.PersistentArrayMap"))))
                                      (3 (aload_0))
                                      (4 (invokevirtual
					(methodCP "meta" "clojure.lang.PersistentArrayMap" () (class "clojure.lang.IPersistentMap"))))
                                      (7 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentArrayMap" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentArrayMap"))))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valAt"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokespecial (methodCP "indexOf" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object")) int))) 
                                      (5 (istore_3)) 
                                      (6 (iload_3)) 
                                      (7 (iflt 19))  ;;to TAG_0
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (14 (iload_3)) 
                                      (15 (iconst_1)) 
                                      (16 (iadd)) 
                                      (17 (aaload)) 
                                      (18 (areturn)) 
                                      (19 (aload_2)) ;;at TAG_0
                                      (20 (areturn)) 
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aconst_null))
                                      (3 (invokevirtual
					(methodCP "valAt" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "capacity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "count" "clojure.lang.PersistentArrayMap" () int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "indexOfObject"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 42)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "equivPred" "clojure.lang.Util" ((class "java.lang.Object")) (class "clojure.lang.Util$EquivPred")))) 
                                      (4 (astore_2)) 
                                      (5 (iconst_0)) 
                                      (6 (istore_3)) 
                                      (7 (iload_3)) ;;at TAG_2
                                      (8 (aload_0)) 
                                      (9 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (12 (arraylength)) 
                                      (13 (if_icmpge 40)) ;;to TAG_0
                                      (16 (aload_2)) 
                                      (17 (aload_1)) 
                                      (18 (aload_0)) 
                                      (19 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (22 (iload_3)) 
                                      (23 (aaload)) 
                                      (24 (invokeinterface (methodCP "equiv" "clojure.lang.Util$EquivPred" ((class "java.lang.Object") (class "java.lang.Object")) boolean) 3)) 
                                      (29 (ifeq 34)) ;;to TAG_1
                                      (32 (iload_3)) 
                                      (33 (ireturn)) 
                                      (34 (iinc 3 2)) ;;at TAG_1
                                      (37 (goto 7))  ;;to TAG_2
                                      (40 (iconst_m1)) ;;at TAG_0
                                      (41 (ireturn)) 
                                      (endofcode 42))
                                   (Exceptions )
                                   (StackMap )))
                        (method "indexOf"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 44)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (instanceof (class "clojure.lang.Keyword"))) 
                                      (4 (ifeq 38)) ;;to TAG_0
                                      (7 (iconst_0)) 
                                      (8 (istore_2)) 
                                      (9 (iload_2)) ;;at TAG_3
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (14 (arraylength)) 
                                      (15 (if_icmpge 36)) ;;to TAG_1
                                      (18 (aload_1)) 
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (23 (iload_2)) 
                                      (24 (aaload)) 
                                      (25 (if_acmpne 30))  ;;to TAG_2
                                      (28 (iload_2)) 
                                      (29 (ireturn)) 
                                      (30 (iinc 2 2)) ;;at TAG_2
                                      (33 (goto 9)) ;;to TAG_3
                                      (36 (iconst_m1)) ;;at TAG_1
                                      (37 (ireturn)) 
                                      (38 (aload_0)) ;;at TAG_0
                                      (39 (aload_1)) 
                                      (40 (invokespecial (methodCP "indexOfObject" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object")) int))) 
                                      (43 (ireturn)) 
                                      (endofcode 44))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equalKey"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 24)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "clojure.lang.Keyword"))) 
                                      (4 (ifeq 18)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (aload_1)) 
                                      (9 (if_acmpne 16)) ;;to TAG_1
                                      (12 (iconst_1)) 
                                      (13 (goto 17))  ;;to TAG_2
                                      (16 (iconst_0)) ;;at TAG_1
                                      (17 (ireturn)) ;;at TAG_2
                                      (18 (aload_0)) ;;at TAG_0
                                      (19 (aload_1)) 
                                      (20 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (23 (ireturn)) 
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap )))
                        (method "iterator"
                              (parameters )
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 12)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentArrayMap$Iter")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object")))))
                                      (8 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentArrayMap$Iter" ((array (class "java.lang.Object"))) void)))
                                      (11 (areturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "seq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 23)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (4 (arraylength)) 
                                      (5 (ifle 21))  ;;to TAG_0
                                      (8 (new (class "clojure.lang.PersistentArrayMap$Seq"))) 
                                      (11 (dup)) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (16 (iconst_0)) 
                                      (17 (invokespecial (methodCP "<init>" "clojure.lang.PersistentArrayMap$Seq" ((array (class "java.lang.Object")) int) void))) 
                                      (20 (areturn)) 
                                      (21 (aconst_null)) ;;at TAG_0
                                      (22 (areturn)) 
                                      (endofcode 23))
                                   (Exceptions )
                                   (StackMap )))
                        (method "meta"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "_meta" "clojure.lang.PersistentArrayMap" (class "clojure.lang.IPersistentMap"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "kvreduce"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 58)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_3)) 
                                      (2 (iload_3)) ;;at TAG_2
                                      (3 (aload_0)) 
                                      (4 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (7 (arraylength)) 
                                      (8 (if_icmpge 56)) ;;to TAG_0
                                      (11 (aload_1)) 
                                      (12 (aload_2)) 
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (17 (iload_3)) 
                                      (18 (aaload)) 
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object"))))) 
                                      (23 (iload_3)) 
                                      (24 (iconst_1)) 
                                      (25 (iadd)) 
                                      (26 (aaload)) 
                                      (27 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (32 (astore_2)) 
                                      (33 (aload_2)) 
                                      (34 (invokestatic (methodCP "isReduced" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (37 (ifeq 50)) ;;to TAG_1
                                      (40 (aload_2)) 
                                      (41 (checkcast (class "clojure.lang.IDeref"))) 
                                      (44 (invokeinterface (methodCP "deref" "clojure.lang.IDeref" () (class "java.lang.Object")) 1)) 
                                      (49 (areturn)) 
                                      (50 (iinc 3 2)) ;;at TAG_1
                                      (53 (goto 2))  ;;to TAG_2
                                      (56 (aload_2)) ;;at TAG_0
                                      (57 (areturn)) 
                                      (endofcode 58))
                                   (Exceptions )
                                   (StackMap )))
                        (method "asTransient"
                              (parameters )
                              (returntype . (class "clojure.lang.ITransientMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 12)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentArrayMap$TransientArrayMap")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap" (array (class "java.lang.Object")))))
                                      (8 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentArrayMap$TransientArrayMap" ((array (class "java.lang.Object"))) void)))
                                      (11 (areturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Associative"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokevirtual
					(methodCP "assoc" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "empty"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "empty" "clojure.lang.PersistentArrayMap" () (class "clojure.lang.IPersistentMap"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentArrayMap" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentArrayMap"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "asTransient"
                              (parameters )
                              (returntype . (class "clojure.lang.ITransientCollection"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "asTransient" "clojure.lang.PersistentArrayMap" () (class "clojure.lang.ITransientMap"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 11)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentArrayMap")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentArrayMap" () void)))
                                      (7 (putstatic (fieldCP "EMPTY" "clojure.lang.PersistentArrayMap" (class "clojure.lang.PersistentArrayMap"))))
                                      (10 (return))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IObj" "clojure.lang.IEditableCollection")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentArrayMap-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentArrayMap*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentArrayMap" . "clojure.lang"))

