; PersistentArrayMap$TransientArrayMap-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentArrayMap$TransientArrayMap*
 (make-class-def
      '(class "clojure.lang.PersistentArrayMap$TransientArrayMap"
            "clojure.lang.ATransientMap"
            (constant_pool
                        (STRING  "Transient used by non-owner thread")
                        (STRING  "Transient used after persistent! call"))
            (fields
                        (field "len" int (accessflags  *class* ) -1)
                        (field "array" (array (class "java.lang.Object")) (accessflags  *class*  *final* ) -1)
                        (field "owner" (class "java.lang.Thread") (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 44)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.ATransientMap" () void)))
                                      (4 (aload_0))
                                      (5 (invokestatic
					(methodCP "currentThread" "java.lang.Thread" () (class "java.lang.Thread"))))
                                      (8 (putfield (fieldCP "owner" "clojure.lang.PersistentArrayMap$TransientArrayMap" (class "java.lang.Thread"))))
                                      (11 (aload_0))
                                      (12 (bipush 16))
                                      (14 (aload_1))
                                      (15 (arraylength))
                                      (16 (invokestatic
					(methodCP "max" "java.lang.Math" (int int) int)))
                                      (19 (anewarray (class "java.lang.Object")))
                                      (22 (putfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object")))))
                                      (25 (aload_1))
                                      (26 (iconst_0))
                                      (27 (aload_0))
                                      (28 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object")))))
                                      (31 (iconst_0))
                                      (32 (aload_1))
                                      (33 (arraylength))
                                      (34 (invokestatic
					(methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void)))
                                      (37 (aload_0))
                                      (38 (aload_1))
                                      (39 (arraylength))
                                      (40 (putfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int)))
                                      (43 (return))
                                      (endofcode 44))
                                   (Exceptions )
                                   (StackMap )))
                        (method "indexOf"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 33)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_2)) 
                                      (2 (iload_2)) ;;at TAG_2
                                      (3 (aload_0)) 
                                      (4 (getfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int))) 
                                      (7 (if_icmpge 31)) ;;to TAG_0
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object"))))) 
                                      (14 (iload_2)) 
                                      (15 (aaload)) 
                                      (16 (aload_1)) 
                                      (17 (invokestatic (methodCP "equalKey" "clojure.lang.PersistentArrayMap" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (20 (ifeq 25)) ;;to TAG_1
                                      (23 (iload_2)) 
                                      (24 (ireturn)) 
                                      (25 (iinc 2 2)) ;;at TAG_1
                                      (28 (goto 2))  ;;to TAG_2
                                      (31 (iconst_m1)) ;;at TAG_0
                                      (32 (ireturn)) 
                                      (endofcode 33))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doAssoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.ITransientMap"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 98)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokespecial (methodCP "indexOf" "clojure.lang.PersistentArrayMap$TransientArrayMap" ((class "java.lang.Object")) int))) 
                                      (5 (istore_3)) 
                                      (6 (iload_3)) 
                                      (7 (iflt 34)) ;;to TAG_0
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object"))))) 
                                      (14 (iload_3)) 
                                      (15 (iconst_1)) 
                                      (16 (iadd)) 
                                      (17 (aaload)) 
                                      (18 (aload_2)) 
                                      (19 (if_acmpeq 96)) ;;to TAG_1
                                      (22 (aload_0)) 
                                      (23 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object"))))) 
                                      (26 (iload_3)) 
                                      (27 (iconst_1)) 
                                      (28 (iadd)) 
                                      (29 (aload_2)) 
                                      (30 (aastore)) 
                                      (31 (goto 96)) ;;to TAG_1
                                      (34 (aload_0)) ;;at TAG_0
                                      (35 (getfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int))) 
                                      (38 (aload_0)) 
                                      (39 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object"))))) 
                                      (42 (arraylength)) 
                                      (43 (if_icmplt 62))  ;;to TAG_2
                                      (46 (aload_0)) 
                                      (47 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object"))))) 
                                      (50 (invokestatic (methodCP "create" "clojure.lang.PersistentHashMap" ((array (class "java.lang.Object"))) (class "clojure.lang.PersistentHashMap")))) 
                                      (53 (invokevirtual (methodCP "asTransient" "clojure.lang.PersistentHashMap" () (class "clojure.lang.PersistentHashMap$TransientHashMap")))) 
                                      (56 (aload_1)) 
                                      (57 (aload_2)) 
                                      (58 (invokevirtual (methodCP "assoc" "clojure.lang.PersistentHashMap$TransientHashMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ITransientMap")))) 
                                      (61 (areturn)) 
                                      (62 (aload_0)) ;;at TAG_2
                                      (63 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object"))))) 
                                      (66 (aload_0)) 
                                      (67 (dup)) 
                                      (68 (getfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int))) 
                                      (71 (dup_x1)) 
                                      (72 (iconst_1)) 
                                      (73 (iadd)) 
                                      (74 (putfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int))) 
                                      (77 (aload_1)) 
                                      (78 (aastore)) 
                                      (79 (aload_0)) 
                                      (80 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object"))))) 
                                      (83 (aload_0)) 
                                      (84 (dup)) 
                                      (85 (getfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int))) 
                                      (88 (dup_x1)) 
                                      (89 (iconst_1)) 
                                      (90 (iadd)) 
                                      (91 (putfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int))) 
                                      (94 (aload_2)) 
                                      (95 (aastore)) 
                                      (96 (aload_0)) ;;at TAG_1
                                      (97 (areturn)) 
                                      (endofcode 98))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doWithout"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.ITransientMap"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 66)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokespecial (methodCP "indexOf" "clojure.lang.PersistentArrayMap$TransientArrayMap" ((class "java.lang.Object")) int))) 
                                      (5 (istore_2)) 
                                      (6 (iload_2)) 
                                      (7 (iflt 64))  ;;to TAG_0
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int))) 
                                      (14 (iconst_2)) 
                                      (15 (if_icmplt 54)) ;;to TAG_1
                                      (18 (aload_0)) 
                                      (19 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object"))))) 
                                      (22 (iload_2)) 
                                      (23 (aload_0)) 
                                      (24 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object"))))) 
                                      (27 (aload_0)) 
                                      (28 (getfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int))) 
                                      (31 (iconst_2)) 
                                      (32 (isub)) 
                                      (33 (aaload)) 
                                      (34 (aastore)) 
                                      (35 (aload_0)) 
                                      (36 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object"))))) 
                                      (39 (iload_2)) 
                                      (40 (iconst_1)) 
                                      (41 (iadd)) 
                                      (42 (aload_0)) 
                                      (43 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object"))))) 
                                      (46 (aload_0)) 
                                      (47 (getfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int))) 
                                      (50 (iconst_1)) 
                                      (51 (isub)) 
                                      (52 (aaload)) 
                                      (53 (aastore)) 
                                      (54 (aload_0)) ;;at TAG_1
                                      (55 (dup)) 
                                      (56 (getfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int))) 
                                      (59 (iconst_2)) 
                                      (60 (isub)) 
                                      (61 (putfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int))) 
                                      (64 (aload_0)) ;;at TAG_0
                                      (65 (areturn)) 
                                      (endofcode 66))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doValAt"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokespecial (methodCP "indexOf" "clojure.lang.PersistentArrayMap$TransientArrayMap" ((class "java.lang.Object")) int))) 
                                      (5 (istore_3)) 
                                      (6 (iload_3)) 
                                      (7 (iflt 19))  ;;to TAG_0
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object"))))) 
                                      (14 (iload_3)) 
                                      (15 (iconst_1)) 
                                      (16 (iadd)) 
                                      (17 (aaload)) 
                                      (18 (areturn)) 
                                      (19 (aload_2)) ;;at TAG_0
                                      (20 (areturn)) 
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doCount"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int)))
                                      (4 (iconst_2))
                                      (5 (idiv))
                                      (6 (ireturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doPersistent"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 40)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "ensureEditable" "clojure.lang.PersistentArrayMap$TransientArrayMap" () void)))
                                      (4 (aload_0))
                                      (5 (aconst_null))
                                      (6 (putfield (fieldCP "owner" "clojure.lang.PersistentArrayMap$TransientArrayMap" (class "java.lang.Thread"))))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int)))
                                      (13 (anewarray (class "java.lang.Object")))
                                      (16 (astore_1))
                                      (17 (aload_0))
                                      (18 (getfield (fieldCP "array" "clojure.lang.PersistentArrayMap$TransientArrayMap" (array (class "java.lang.Object")))))
                                      (21 (iconst_0))
                                      (22 (aload_1))
                                      (23 (iconst_0))
                                      (24 (aload_0))
                                      (25 (getfield (fieldCP "len" "clojure.lang.PersistentArrayMap$TransientArrayMap" int)))
                                      (28 (invokestatic
					(methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void)))
                                      (31 (new (class "clojure.lang.PersistentArrayMap")))
                                      (34 (dup))
                                      (35 (aload_1))
                                      (36 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentArrayMap" ((array (class "java.lang.Object"))) void)))
                                      (39 (areturn))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "ensureEditable"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 38)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "owner" "clojure.lang.PersistentArrayMap$TransientArrayMap" (class "java.lang.Thread")))) 
                                      (4 (invokestatic (methodCP "currentThread" "java.lang.Thread" () (class "java.lang.Thread")))) 
                                      (7 (if_acmpne 11))  ;;to TAG_0
                                      (10 (return)) 
                                      (11 (aload_0)) ;;at TAG_0
                                      (12 (getfield (fieldCP "owner" "clojure.lang.PersistentArrayMap$TransientArrayMap" (class "java.lang.Thread")))) 
                                      (15 (ifnull 28)) ;;to TAG_1
                                      (18 (new (class "java.lang.IllegalAccessError"))) 
                                      (21 (dup)) 
                                      (22 (ldc 0)) ;;STRING:: "Transient used by non-owner thread"
                                      (24 (invokespecial (methodCP "<init>" "java.lang.IllegalAccessError" ((class "java.lang.String")) void))) 
                                      (27 (athrow)) 
                                      (28 (new (class "java.lang.IllegalAccessError"))) ;;at TAG_1
                                      (31 (dup)) 
                                      (32 (ldc 1)) ;;STRING:: "Transient used after persistent! call"
                                      (34 (invokespecial (methodCP "<init>" "java.lang.IllegalAccessError" ((class "java.lang.String")) void))) 
                                      (37 (athrow)) 
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentArrayMap$TransientArrayMap-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentArrayMap$TransientArrayMap*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentArrayMap$TransientArrayMap" . "clojure.lang"))

