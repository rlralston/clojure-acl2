; LispReader$EvalReader-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.LispReader$EvalReader*
 (make-class-def
      '(class "clojure.lang.LispReader$EvalReader"
            "clojure.lang.AFn"
            (constant_pool
                        (STRING  "EvalReader not allowed when *read-eval* is false.")
                        (STRING  ".")
                        (STRING  "Can\nt resolve ")
                        (STRING  "Unsupported #= form"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 7) (code_length . 255)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "READEVAL" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (9 (ifne 18)) ;;to TAG_0
                                      (12 (ldc 0)) ;;STRING:: "EvalReader not allowed when *read-eval* is false."
                                      (14 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (17 (athrow)) 
                                      (18 (aload_1)) ;;at TAG_0
                                      (19 (checkcast (class "java.io.PushbackReader"))) 
                                      (22 (astore_3)) 
                                      (23 (aload_3)) 
                                      (24 (iconst_1)) 
                                      (25 (aconst_null)) 
                                      (26 (iconst_1)) 
                                      (27 (invokestatic (methodCP "read" "clojure.lang.LispReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (30 (astore 4)) 
                                      (32 (aload 4)) 
                                      (34 (instanceof (class "clojure.lang.Symbol"))) 
                                      (37 (ifeq 49)) ;;to TAG_1
                                      (40 (aload 4)) 
                                      (42 (invokevirtual (methodCP "toString" "java.lang.Object" () (class "java.lang.String")))) 
                                      (45 (invokestatic (methodCP "classForName" "clojure.lang.RT" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (48 (areturn)) 
                                      (49 (aload 4)) ;;at TAG_1
                                      (51 (instanceof (class "clojure.lang.IPersistentList"))) 
                                      (54 (ifeq 245))  ;;to TAG_2
                                      (57 (aload 4)) 
                                      (59 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (62 (checkcast (class "clojure.lang.Symbol"))) 
                                      (65 (astore 5)) 
                                      (67 (aload 5)) 
                                      (69 (getstatic (fieldCP "THE_VAR" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (72 (invokevirtual (methodCP "equals" "clojure.lang.Symbol" ((class "java.lang.Object")) boolean))) 
                                      (75 (ifeq 102)) ;;to TAG_3
                                      (78 (aload 4)) 
                                      (80 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (83 (checkcast (class "clojure.lang.Symbol"))) 
                                      (86 (astore 6)) 
                                      (88 (aload 6)) 
                                      (90 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (93 (aload 6)) 
                                      (95 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (98 (invokestatic (methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var")))) 
                                      (101 (areturn)) 
                                      (102 (aload 5)) ;;at TAG_3
                                      (104 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (107 (ldc 1)) ;;STRING:: "."
                                      (109 (invokevirtual (methodCP "endsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (112 (ifeq 153)) ;;to TAG_4
                                      (115 (aload 4)) 
                                      (117 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (120 (invokestatic (methodCP "toArray" "clojure.lang.RT" ((class "java.lang.Object")) (array (class "java.lang.Object"))))) 
                                      (123 (astore 6)) 
                                      (125 (aload 5)) 
                                      (127 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (130 (iconst_0)) 
                                      (131 (aload 5)) 
                                      (133 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (136 (invokevirtual (methodCP "length" "java.lang.String" () int))) 
                                      (139 (iconst_1)) 
                                      (140 (isub)) 
                                      (141 (invokevirtual (methodCP "substring" "java.lang.String" (int int) (class "java.lang.String")))) 
                                      (144 (invokestatic (methodCP "classForName" "clojure.lang.RT" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (147 (aload 6)) 
                                      (149 (invokestatic (methodCP "invokeConstructor" "clojure.lang.Reflector" ((class "java.lang.Class") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (152 (areturn)) 
                                      (153 (aload 5)) ;;at TAG_4
                                      (155 (invokestatic (methodCP "namesStaticMember" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) boolean))) 
                                      (158 (ifeq 187)) ;;to TAG_5
                                      (161 (aload 4)) 
                                      (163 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (166 (invokestatic (methodCP "toArray" "clojure.lang.RT" ((class "java.lang.Object")) (array (class "java.lang.Object"))))) 
                                      (169 (astore 6)) 
                                      (171 (aload 5)) 
                                      (173 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (176 (aload 5)) 
                                      (178 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (181 (aload 6)) 
                                      (183 (invokestatic (methodCP "invokeStaticMethod" "clojure.lang.Reflector" ((class "java.lang.String") (class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (186 (areturn)) 
                                      (187 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) ;;at TAG_5
                                      (190 (aload 5)) 
                                      (192 (invokestatic (methodCP "maybeResolveIn" "clojure.lang.Compiler" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol")) (class "java.lang.Object")))) 
                                      (195 (astore 6)) 
                                      (197 (aload 6)) 
                                      (199 (instanceof (class "clojure.lang.Var"))) 
                                      (202 (ifeq 221)) ;;to TAG_6
                                      (205 (aload 6)) 
                                      (207 (checkcast (class "clojure.lang.IFn"))) 
                                      (210 (aload 4)) 
                                      (212 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (215 (invokeinterface (methodCP "applyTo" "clojure.lang.IFn" ((class "clojure.lang.ISeq")) (class "java.lang.Object")) 2)) 
                                      (220 (areturn)) 
                                      (221 (new (class "java.lang.StringBuilder"))) ;;at TAG_6
                                      (224 (dup)) 
                                      (225 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (228 (ldc 2)) ;;STRING:: "Can\nt resolve "
                                      (230 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (233 (aload 5)) 
                                      (235 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (238 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (241 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (244 (athrow)) 
                                      (245 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_2
                                      (248 (dup)) 
                                      (249 (ldc 3)) ;;STRING:: "Unsupported #= form"
                                      (251 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (254 (athrow)) 
                                      (endofcode 255))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *LispReader$EvalReader-class-table*
  (make-static-class-decls 
   *clojure.lang.LispReader$EvalReader*))

(defconst *package-name-map* 
  ("clojure.lang.LispReader$EvalReader" . "clojure.lang"))

