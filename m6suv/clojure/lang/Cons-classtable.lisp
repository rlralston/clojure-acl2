; Cons-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(include-book "../../model-translation")

(defconst *clojure.lang.Cons*
 (make-class-def
      '(class "clojure.lang.Cons"
            "clojure.lang.ASeq"
            (constant_pool)
            (fields
                        (field "_first" (class "java.lang.Object") (accessflags  *class*  *final*  *private* ) -1)
                        (field "_more" (class "clojure.lang.ISeq") (accessflags  *class*  *final*  *private* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.Object") (class "clojure.lang.ISeq"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
                                        (methodCP "<init>" "clojure.lang.ASeq" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "_first" "clojure.lang.Cons" (class "java.lang.Object"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "_more" "clojure.lang.Cons" (class "clojure.lang.ISeq"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (class "java.lang.Object") (class "clojure.lang.ISeq"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokespecial
                                        (methodCP "<init>" "clojure.lang.ASeq" ((class "clojure.lang.IPersistentMap")) void)))
                                      (5 (aload_0))
                                      (6 (aload_2))
                                      (7 (putfield (fieldCP "_first" "clojure.lang.Cons" (class "java.lang.Object"))))
                                      (10 (aload_0))
                                      (11 (aload_3))
                                      (12 (putfield (fieldCP "_more" "clojure.lang.Cons" (class "clojure.lang.ISeq"))))
                                      (15 (return))
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "first"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "_first" "clojure.lang.Cons" (class "java.lang.Object"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "next"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
                                        (methodCP "more" "clojure.lang.Cons" () (class "clojure.lang.ISeq"))))
                                      (4 (invokeinterface
                                        (methodCP "seq" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "more"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "_more" "clojure.lang.Cons" (class "clojure.lang.ISeq")))) 
                                      (4 (ifnonnull 11))  ;;to TAG_0
                                      (7 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentList" (class "clojure.lang.PersistentList$EmptyList")))) 
                                      (10 (areturn)) 
                                      (11 (aload_0)) ;;at TAG_0
                                      (12 (getfield (fieldCP "_more" "clojure.lang.Cons" (class "clojure.lang.ISeq")))) 
                                      (15 (areturn)) 
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (aload_0))
                                      (2 (getfield (fieldCP "_more" "clojure.lang.Cons" (class "clojure.lang.ISeq"))))
                                      (5 (invokestatic
                                        (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int)))
                                      (8 (iadd))
                                      (9 (ireturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.Cons"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 17)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.Cons")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "_first" "clojure.lang.Cons" (class "java.lang.Object"))))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "_more" "clojure.lang.Cons" (class "clojure.lang.ISeq"))))
                                      (13 (invokespecial
                                        (methodCP "<init>" "clojure.lang.Cons" ((class "clojure.lang.IPersistentMap") (class "java.lang.Object") (class "clojure.lang.ISeq")) void)))
                                      (16 (areturn))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.Obj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
                                        (methodCP "withMeta" "clojure.lang.Cons" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.Cons"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
                                        (methodCP "withMeta" "clojure.lang.Cons" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.Cons"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "java.io.Serializable")
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))#|ACL2s-ToDo-Line|#



;(defconst *Cons-class-table*
;  (make-static-class-decls 
;   *clojure.lang.Cons*))

;(defconst *package-name-map* 
;  ("clojure.lang.Cons" . "clojure.lang"))

