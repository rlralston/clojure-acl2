; AMapEntry-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.AMapEntry*
 (make-class-def
      '(class "clojure.lang.AMapEntry"
            "clojure.lang.APersistentVector"
            (constant_pool)
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentVector" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "nth"
                              (parameters int)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 27)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (ifne 9))  ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (invokevirtual (methodCP "key" "clojure.lang.AMapEntry" () (class "java.lang.Object")))) 
                                      (8 (areturn)) 
                                      (9 (iload_1)) ;;at TAG_0
                                      (10 (iconst_1)) 
                                      (11 (if_icmpne 19)) ;;to TAG_1
                                      (14 (aload_0)) 
                                      (15 (invokevirtual (methodCP "val" "clojure.lang.AMapEntry" () (class "java.lang.Object")))) 
                                      (18 (areturn)) 
                                      (19 (new (class "java.lang.IndexOutOfBoundsException"))) ;;at TAG_1
                                      (22 (dup)) 
                                      (23 (invokespecial (methodCP "<init>" "java.lang.IndexOutOfBoundsException" () void))) 
                                      (26 (athrow)) 
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "asVector"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentVector"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (iconst_2))
                                      (1 (anewarray (class "java.lang.Object")))
                                      (4 (dup))
                                      (5 (iconst_0))
                                      (6 (aload_0))
                                      (7 (invokevirtual
					(methodCP "key" "clojure.lang.AMapEntry" () (class "java.lang.Object"))))
                                      (10 (aastore))
                                      (11 (dup))
                                      (12 (iconst_1))
                                      (13 (aload_0))
                                      (14 (invokevirtual
					(methodCP "val" "clojure.lang.AMapEntry" () (class "java.lang.Object"))))
                                      (17 (aastore))
                                      (18 (invokestatic
					(methodCP "createOwning" "clojure.lang.LazilyPersistentVector" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector"))))
                                      (21 (areturn))
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assocN"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "asVector" "clojure.lang.AMapEntry" () (class "clojure.lang.IPersistentVector"))))
                                      (4 (iload_1))
                                      (5 (aload_2))
                                      (6 (invokeinterface
					(methodCP "assocN" "clojure.lang.IPersistentVector" (int (class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 3))
                                      (11 (areturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_2))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "seq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "asVector" "clojure.lang.AMapEntry" () (class "clojure.lang.IPersistentVector"))))
                                      (4 (invokeinterface
					(methodCP "seq" "clojure.lang.IPersistentVector" () (class "clojure.lang.ISeq")) 1))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "cons"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "asVector" "clojure.lang.AMapEntry" () (class "clojure.lang.IPersistentVector"))))
                                      (4 (aload_1))
                                      (5 (invokeinterface
					(methodCP "cons" "clojure.lang.IPersistentVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 2))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "empty"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pop"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentStack"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 15)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (anewarray (class "java.lang.Object")))
                                      (4 (dup))
                                      (5 (iconst_0))
                                      (6 (aload_0))
                                      (7 (invokevirtual
					(methodCP "key" "clojure.lang.AMapEntry" () (class "java.lang.Object"))))
                                      (10 (aastore))
                                      (11 (invokestatic
					(methodCP "createOwning" "clojure.lang.LazilyPersistentVector" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector"))))
                                      (14 (areturn))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "setValue"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "cons"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "cons" "clojure.lang.AMapEntry" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IMapEntry")
            (accessflags  *abstract*  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))


(defconst *AMapEntry-class-table*
  (make-static-class-decls 
   *clojure.lang.AMapEntry*))

(defconst *package-name-map* 
  ("clojure.lang.AMapEntry" . "clojure.lang"))

