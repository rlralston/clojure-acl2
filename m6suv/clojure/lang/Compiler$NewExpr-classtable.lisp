; Compiler$NewExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$NewExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$NewExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "No matching ctor found for ")
                        (STRING  "Reflection warning, %s:%d:%d - call to %s ctor can\nt be resolved.\n")
                        (STRING  "<init>")
                        (STRING  "Object invokeConstructor(Class,Object[])")
                        (STRING  "Class forName(String)"))
            (fields
                        (field "args" (class "clojure.lang.IPersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "ctor" (class "java.lang.reflect.Constructor") (accessflags  *class*  *final*  *public* ) -1)
                        (field "c" (class "java.lang.Class") (accessflags  *class*  *final*  *public* ) -1)
                        (field "invokeConstructorMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "forNameMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.Class") (class "clojure.lang.IPersistentVector") int int)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 11) (code_length . 260)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "<init>" "java.lang.Object" () void))) 
                                      (4 (aload_0)) 
                                      (5 (aload_2)) 
                                      (6 (putfield (fieldCP "args" "clojure.lang.Compiler$NewExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (9 (aload_0)) 
                                      (10 (aload_1)) 
                                      (11 (putfield (fieldCP "c" "clojure.lang.Compiler$NewExpr" (class "java.lang.Class")))) 
                                      (14 (aload_1)) 
                                      (15 (invokevirtual (methodCP "getConstructors" "java.lang.Class" () (array (class "java.lang.reflect.Constructor"))))) 
                                      (18 (astore 5)) 
                                      (20 (new (class "java.util.ArrayList"))) 
                                      (23 (dup)) 
                                      (24 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (27 (astore 6)) 
                                      (29 (new (class "java.util.ArrayList"))) 
                                      (32 (dup)) 
                                      (33 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (36 (astore 7)) 
                                      (38 (new (class "java.util.ArrayList"))) 
                                      (41 (dup)) 
                                      (42 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (45 (astore 8)) 
                                      (47 (iconst_0)) 
                                      (48 (istore 9)) 
                                      (50 (iload 9)) ;;at TAG_2
                                      (52 (aload 5)) 
                                      (54 (arraylength)) 
                                      (55 (if_icmpge 112)) ;;to TAG_0
                                      (58 (aload 5)) 
                                      (60 (iload 9)) 
                                      (62 (aaload)) 
                                      (63 (astore 10)) 
                                      (65 (aload 10)) 
                                      (67 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Constructor" () (array (class "java.lang.Class"))))) 
                                      (70 (arraylength)) 
                                      (71 (aload_2)) 
                                      (72 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (77 (if_icmpne 106)) ;;to TAG_1
                                      (80 (aload 6)) 
                                      (82 (aload 10)) 
                                      (84 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (87 (pop)) 
                                      (88 (aload 7)) 
                                      (90 (aload 10)) 
                                      (92 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Constructor" () (array (class "java.lang.Class"))))) 
                                      (95 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (98 (pop)) 
                                      (99 (aload 8)) 
                                      (101 (aload_1)) 
                                      (102 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (105 (pop)) 
                                      (106 (iinc 9 1)) ;;at TAG_1
                                      (109 (goto 50))  ;;to TAG_2
                                      (112 (aload 6)) ;;at TAG_0
                                      (114 (invokevirtual (methodCP "isEmpty" "java.util.ArrayList" () boolean))) 
                                      (117 (ifeq 147)) ;;to TAG_3
                                      (120 (new (class "java.lang.IllegalArgumentException"))) 
                                      (123 (dup)) 
                                      (124 (new (class "java.lang.StringBuilder"))) 
                                      (127 (dup)) 
                                      (128 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (131 (ldc 0)) ;;STRING:: "No matching ctor found for "
                                      (133 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (136 (aload_1)) 
                                      (137 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (140 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (143 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (146 (athrow)) 
                                      (147 (iconst_0)) ;;at TAG_3
                                      (148 (istore 9)) 
                                      (150 (aload 6)) 
                                      (152 (invokevirtual (methodCP "size" "java.util.ArrayList" () int))) 
                                      (155 (iconst_1)) 
                                      (156 (if_icmple 173)) ;;to TAG_4
                                      (159 (aload_1)) 
                                      (160 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (163 (aload 7)) 
                                      (165 (aload_2)) 
                                      (166 (aload 8)) 
                                      (168 (invokestatic (methodCP "getMatchingParams" "clojure.lang.Compiler" ((class "java.lang.String") (class "java.util.ArrayList") (class "clojure.lang.IPersistentVector") (class "java.util.List")) int))) 
                                      (171 (istore 9)) 
                                      (173 (aload_0)) ;;at TAG_4
                                      (174 (iload 9)) 
                                      (176 (iflt 192)) ;;to TAG_5
                                      (179 (aload 6)) 
                                      (181 (iload 9)) 
                                      (183 (invokevirtual (methodCP "get" "java.util.ArrayList" (int) (class "java.lang.Object")))) 
                                      (186 (checkcast (class "java.lang.reflect.Constructor"))) 
                                      (189 (goto 193)) ;;to TAG_6
                                      (192 (aconst_null)) ;;at TAG_5
                                      (193 (putfield (fieldCP "ctor" "clojure.lang.Compiler$NewExpr" (class "java.lang.reflect.Constructor")))) ;;at TAG_6
                                      (196 (aload_0)) 
                                      (197 (getfield (fieldCP "ctor" "clojure.lang.Compiler$NewExpr" (class "java.lang.reflect.Constructor")))) 
                                      (200 (ifnonnull 259)) ;;to TAG_7
                                      (203 (getstatic (fieldCP "WARN_ON_REFLECTION" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (206 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (209 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (212 (ifeq 259)) ;;to TAG_7
                                      (215 (invokestatic (methodCP "errPrintWriter" "clojure.lang.RT" () (class "java.io.PrintWriter")))) 
                                      (218 (ldc 1)) ;;STRING:: "Reflection warning, %s:%d:%d - call to %s ctor can\nt be resolved.\n"
                                      (220 (iconst_4)) 
                                      (221 (anewarray (class "java.lang.Object"))) 
                                      (224 (dup)) 
                                      (225 (iconst_0)) 
                                      (226 (getstatic (fieldCP "SOURCE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (229 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (232 (aastore)) 
                                      (233 (dup)) 
                                      (234 (iconst_1)) 
                                      (235 (iload_3)) 
                                      (236 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (239 (aastore)) 
                                      (240 (dup)) 
                                      (241 (iconst_2)) 
                                      (242 (iload 4)) 
                                      (244 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (247 (aastore)) 
                                      (248 (dup)) 
                                      (249 (iconst_3)) 
                                      (250 (aload_1)) 
                                      (251 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (254 (aastore)) 
                                      (255 (invokevirtual (methodCP "format" "java.io.PrintWriter" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.io.PrintWriter")))) 
                                      (258 (pop)) 
                                      (259 (return)) ;;at TAG_7
                                      (endofcode 260))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 96)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "args" "clojure.lang.Compiler$NewExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (4 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (9 (anewarray (class "java.lang.Object"))) 
                                      (12 (astore_1)) 
                                      (13 (iconst_0)) 
                                      (14 (istore_2)) 
                                      (15 (iload_2)) ;;at TAG_1
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "args" "clojure.lang.Compiler$NewExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (20 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (25 (if_icmpge 55)) ;;to TAG_0
                                      (28 (aload_1)) 
                                      (29 (iload_2)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "args" "clojure.lang.Compiler$NewExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (34 (iload_2)) 
                                      (35 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (40 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (43 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (48 (aastore)) 
                                      (49 (iinc 2 1)) 
                                      (52 (goto 15)) ;;to TAG_1
                                      (55 (aload_0)) ;;at TAG_0
                                      (56 (getfield (fieldCP "ctor" "clojure.lang.Compiler$NewExpr" (class "java.lang.reflect.Constructor")))) 
                                      (59 (ifnull 87))  ;;to TAG_2
                                      (62 (aload_0)) ;;at TAG_3
                                      (63 (getfield (fieldCP "ctor" "clojure.lang.Compiler$NewExpr" (class "java.lang.reflect.Constructor")))) 
                                      (66 (aload_0)) 
                                      (67 (getfield (fieldCP "ctor" "clojure.lang.Compiler$NewExpr" (class "java.lang.reflect.Constructor")))) 
                                      (70 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Constructor" () (array (class "java.lang.Class"))))) 
                                      (73 (aload_1)) 
                                      (74 (invokestatic (methodCP "boxArgs" "clojure.lang.Reflector" ((array (class "java.lang.Class")) (array (class "java.lang.Object"))) (array (class "java.lang.Object"))))) 
                                      (77 (invokevirtual (methodCP "newInstance" "java.lang.reflect.Constructor" ((array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (80 (areturn)) ;;at TAG_4
                                      (81 (astore_2)) ;;at TAG_5
                                      (82 (aload_2)) 
                                      (83 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (86 (athrow)) 
                                      (87 (aload_0)) ;;at TAG_2
                                      (88 (getfield (fieldCP "c" "clojure.lang.Compiler$NewExpr" (class "java.lang.Class")))) 
                                      (91 (aload_1)) 
                                      (92 (invokestatic (methodCP "invokeConstructor" "clojure.lang.Reflector" ((class "java.lang.Class") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (95 (areturn)) 
                                      (endofcode 96))
                                   (Exceptions 
                                     (handler 62 80  81 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 6) (code_length . 170)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "ctor" "clojure.lang.Compiler$NewExpr" (class "java.lang.reflect.Constructor")))) 
                                      (4 (ifnull 91)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "c" "clojure.lang.Compiler$NewExpr" (class "java.lang.Class")))) 
                                      (11 (invokestatic (methodCP "getType" "clojure.lang.Compiler" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (14 (astore 4)) 
                                      (16 (aload_3)) 
                                      (17 (aload 4)) 
                                      (19 (invokevirtual (methodCP "newInstance" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (22 (aload_3)) 
                                      (23 (invokevirtual (methodCP "dup" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (26 (aload_2)) 
                                      (27 (aload_3)) 
                                      (28 (aload_0)) 
                                      (29 (getfield (fieldCP "ctor" "clojure.lang.Compiler$NewExpr" (class "java.lang.reflect.Constructor")))) 
                                      (32 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Constructor" () (array (class "java.lang.Class"))))) 
                                      (35 (aload_0)) 
                                      (36 (getfield (fieldCP "args" "clojure.lang.Compiler$NewExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (39 (invokestatic (methodCP "emitTypedArgs" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (array (class "java.lang.Class")) (class "clojure.lang.IPersistentVector")) void))) 
                                      (42 (aload_1)) 
                                      (43 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (46 (if_acmpne 66)) ;;to TAG_1
                                      (49 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (52 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (55 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (58 (astore 5)) 
                                      (60 (aload 5)) 
                                      (62 (aload_3)) 
                                      (63 (invokevirtual (methodCP "emitClearLocals" "clojure.lang.Compiler$ObjMethod" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (66 (aload_3)) ;;at TAG_1
                                      (67 (aload 4)) 
                                      (69 (new (class "clojure.asm.commons.Method"))) 
                                      (72 (dup)) 
                                      (73 (ldc 2)) ;;STRING:: "<init>"
                                      (75 (aload_0)) 
                                      (76 (getfield (fieldCP "ctor" "clojure.lang.Compiler$NewExpr" (class "java.lang.reflect.Constructor")))) 
                                      (79 (invokestatic (methodCP "getConstructorDescriptor" "clojure.asm.Type" ((class "java.lang.reflect.Constructor")) (class "java.lang.String")))) 
                                      (82 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "java.lang.String")) void))) 
                                      (85 (invokevirtual (methodCP "invokeConstructor" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (88 (goto 158))  ;;to TAG_2
                                      (91 (aload_3)) ;;at TAG_0
                                      (92 (aload_0)) 
                                      (93 (getfield (fieldCP "c" "clojure.lang.Compiler$NewExpr" (class "java.lang.Class")))) 
                                      (96 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (99 (invokestatic (methodCP "destubClassName" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (102 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String")) void))) 
                                      (105 (aload_3)) 
                                      (106 (getstatic (fieldCP "CLASS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (109 (getstatic (fieldCP "forNameMethod" "clojure.lang.Compiler$NewExpr" (class "clojure.asm.commons.Method")))) 
                                      (112 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (115 (aload_0)) 
                                      (116 (getfield (fieldCP "args" "clojure.lang.Compiler$NewExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (119 (aload_2)) 
                                      (120 (aload_3)) 
                                      (121 (invokestatic (methodCP "emitArgsAsArray" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.IPersistentVector") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (124 (aload_1)) 
                                      (125 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (128 (if_acmpne 148)) ;;to TAG_3
                                      (131 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (134 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (137 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (140 (astore 4)) 
                                      (142 (aload 4)) 
                                      (144 (aload_3)) 
                                      (145 (invokevirtual (methodCP "emitClearLocals" "clojure.lang.Compiler$ObjMethod" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (148 (aload_3)) ;;at TAG_3
                                      (149 (getstatic (fieldCP "REFLECTOR_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (152 (getstatic (fieldCP "invokeConstructorMethod" "clojure.lang.Compiler$NewExpr" (class "clojure.asm.commons.Method")))) 
                                      (155 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (158 (aload_1)) ;;at TAG_2
                                      (159 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (162 (if_acmpne 169)) ;;to TAG_4
                                      (165 (aload_3)) 
                                      (166 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (169 (return)) ;;at TAG_4
                                      (endofcode 170))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "c" "clojure.lang.Compiler$NewExpr" (class "java.lang.Class"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 17)
                                   (parsedcode
                                      (0 (ldc 3))         ;;STRING:: "Object invokeConstructor(Class,Object[])"
                                      (2 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (5 (putstatic (fieldCP "invokeConstructorMethod" "clojure.lang.Compiler$NewExpr" (class "clojure.asm.commons.Method"))))
                                      (8 (ldc 4))         ;;STRING:: "Class forName(String)"
                                      (10 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (13 (putstatic (fieldCP "forNameMethod" "clojure.lang.Compiler$NewExpr" (class "clojure.asm.commons.Method"))))
                                      (16 (return))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$NewExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$NewExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$NewExpr" . "clojure.lang"))

