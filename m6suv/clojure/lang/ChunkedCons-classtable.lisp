; ChunkedCons-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.ChunkedCons*
 (make-class-def
      '(class "clojure.lang.ChunkedCons"
            "clojure.lang.ASeq"
            (constant_pool)
            (fields
                        (field "chunk" (class "clojure.lang.IChunk") (accessflags  *class*  *final* ) -1)
                        (field "_more" (class "clojure.lang.ISeq") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (class "clojure.lang.IChunk") (class "clojure.lang.ISeq"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokespecial
					(methodCP "<init>" "clojure.lang.ASeq" ((class "clojure.lang.IPersistentMap")) void)))
                                      (5 (aload_0))
                                      (6 (aload_2))
                                      (7 (putfield (fieldCP "chunk" "clojure.lang.ChunkedCons" (class "clojure.lang.IChunk"))))
                                      (10 (aload_0))
                                      (11 (aload_3))
                                      (12 (putfield (fieldCP "_more" "clojure.lang.ChunkedCons" (class "clojure.lang.ISeq"))))
                                      (15 (return))
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IChunk") (class "clojure.lang.ISeq"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aconst_null))
                                      (2 (aload_1))
                                      (3 (aload_2))
                                      (4 (invokespecial
					(methodCP "<init>" "clojure.lang.ChunkedCons" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.IChunk") (class "clojure.lang.ISeq")) void)))
                                      (7 (return))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.Obj"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "_meta" "clojure.lang.ChunkedCons" (class "clojure.lang.IPersistentMap")))) 
                                      (5 (if_acmpeq 25))  ;;to TAG_0
                                      (8 (new (class "clojure.lang.ChunkedCons"))) 
                                      (11 (dup)) 
                                      (12 (aload_1)) 
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "chunk" "clojure.lang.ChunkedCons" (class "clojure.lang.IChunk")))) 
                                      (17 (aload_0)) 
                                      (18 (getfield (fieldCP "_more" "clojure.lang.ChunkedCons" (class "clojure.lang.ISeq")))) 
                                      (21 (invokespecial (methodCP "<init>" "clojure.lang.ChunkedCons" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.IChunk") (class "clojure.lang.ISeq")) void))) 
                                      (24 (areturn)) 
                                      (25 (aload_0)) ;;at TAG_0
                                      (26 (areturn)) 
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "first"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "chunk" "clojure.lang.ChunkedCons" (class "clojure.lang.IChunk"))))
                                      (4 (iconst_0))
                                      (5 (invokeinterface
					(methodCP "nth" "clojure.lang.IChunk" (int) (class "java.lang.Object")) 2))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "next"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 39)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "chunk" "clojure.lang.ChunkedCons" (class "clojure.lang.IChunk")))) 
                                      (4 (invokeinterface (methodCP "count" "clojure.lang.IChunk" () int) 1)) 
                                      (9 (iconst_1)) 
                                      (10 (if_icmple 34))  ;;to TAG_0
                                      (13 (new (class "clojure.lang.ChunkedCons"))) 
                                      (16 (dup)) 
                                      (17 (aload_0)) 
                                      (18 (getfield (fieldCP "chunk" "clojure.lang.ChunkedCons" (class "clojure.lang.IChunk")))) 
                                      (21 (invokeinterface (methodCP "dropFirst" "clojure.lang.IChunk" () (class "clojure.lang.IChunk")) 1)) 
                                      (26 (aload_0)) 
                                      (27 (getfield (fieldCP "_more" "clojure.lang.ChunkedCons" (class "clojure.lang.ISeq")))) 
                                      (30 (invokespecial (methodCP "<init>" "clojure.lang.ChunkedCons" ((class "clojure.lang.IChunk") (class "clojure.lang.ISeq")) void))) 
                                      (33 (areturn)) 
                                      (34 (aload_0)) ;;at TAG_0
                                      (35 (invokevirtual (methodCP "chunkedNext" "clojure.lang.ChunkedCons" () (class "clojure.lang.ISeq")))) 
                                      (38 (areturn)) 
                                      (endofcode 39))
                                   (Exceptions )
                                   (StackMap )))
                        (method "more"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 50)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "chunk" "clojure.lang.ChunkedCons" (class "clojure.lang.IChunk")))) 
                                      (4 (invokeinterface (methodCP "count" "clojure.lang.IChunk" () int) 1)) 
                                      (9 (iconst_1)) 
                                      (10 (if_icmple 34))  ;;to TAG_0
                                      (13 (new (class "clojure.lang.ChunkedCons"))) 
                                      (16 (dup)) 
                                      (17 (aload_0)) 
                                      (18 (getfield (fieldCP "chunk" "clojure.lang.ChunkedCons" (class "clojure.lang.IChunk")))) 
                                      (21 (invokeinterface (methodCP "dropFirst" "clojure.lang.IChunk" () (class "clojure.lang.IChunk")) 1)) 
                                      (26 (aload_0)) 
                                      (27 (getfield (fieldCP "_more" "clojure.lang.ChunkedCons" (class "clojure.lang.ISeq")))) 
                                      (30 (invokespecial (methodCP "<init>" "clojure.lang.ChunkedCons" ((class "clojure.lang.IChunk") (class "clojure.lang.ISeq")) void))) 
                                      (33 (areturn)) 
                                      (34 (aload_0)) ;;at TAG_0
                                      (35 (getfield (fieldCP "_more" "clojure.lang.ChunkedCons" (class "clojure.lang.ISeq")))) 
                                      (38 (ifnonnull 45)) ;;to TAG_1
                                      (41 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentList" (class "clojure.lang.PersistentList$EmptyList")))) 
                                      (44 (areturn)) 
                                      (45 (aload_0)) ;;at TAG_1
                                      (46 (getfield (fieldCP "_more" "clojure.lang.ChunkedCons" (class "clojure.lang.ISeq")))) 
                                      (49 (areturn)) 
                                      (endofcode 50))
                                   (Exceptions )
                                   (StackMap )))
                        (method "chunkedFirst"
                              (parameters )
                              (returntype . (class "clojure.lang.IChunk"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "chunk" "clojure.lang.ChunkedCons" (class "clojure.lang.IChunk"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "chunkedNext"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "chunkedMore" "clojure.lang.ChunkedCons" () (class "clojure.lang.ISeq"))))
                                      (4 (invokeinterface
					(methodCP "seq" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "chunkedMore"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "_more" "clojure.lang.ChunkedCons" (class "clojure.lang.ISeq")))) 
                                      (4 (ifnonnull 11))  ;;to TAG_0
                                      (7 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentList" (class "clojure.lang.PersistentList$EmptyList")))) 
                                      (10 (areturn)) 
                                      (11 (aload_0)) ;;at TAG_0
                                      (12 (getfield (fieldCP "_more" "clojure.lang.ChunkedCons" (class "clojure.lang.ISeq")))) 
                                      (15 (areturn)) 
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.ChunkedCons" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.Obj"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IChunkedSeq")
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *ChunkedCons-class-table*
  (make-static-class-decls 
   *clojure.lang.ChunkedCons*))

(defconst *package-name-map* 
  ("clojure.lang.ChunkedCons" . "clojure.lang"))

