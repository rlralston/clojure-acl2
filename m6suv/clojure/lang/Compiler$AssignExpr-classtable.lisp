; Compiler$AssignExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$AssignExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$AssignExpr"
            "java.lang.Object"
            (constant_pool)
            (fields
                        (field "target" (class "clojure.lang.Compiler$AssignableExpr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "val" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.Compiler$AssignableExpr") (class "clojure.lang.Compiler$Expr"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "target" "clojure.lang.Compiler$AssignExpr" (class "clojure.lang.Compiler$AssignableExpr"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "val" "clojure.lang.Compiler$AssignExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "target" "clojure.lang.Compiler$AssignExpr" (class "clojure.lang.Compiler$AssignableExpr"))))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "val" "clojure.lang.Compiler$AssignExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (8 (invokeinterface
					(methodCP "evalAssign" "clojure.lang.Compiler$AssignableExpr" ((class "clojure.lang.Compiler$Expr")) (class "java.lang.Object")) 2))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 17)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "target" "clojure.lang.Compiler$AssignExpr" (class "clojure.lang.Compiler$AssignableExpr"))))
                                      (4 (aload_1))
                                      (5 (aload_2))
                                      (6 (aload_3))
                                      (7 (aload_0))
                                      (8 (getfield (fieldCP "val" "clojure.lang.Compiler$AssignExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (11 (invokeinterface
					(methodCP "emitAssign" "clojure.lang.Compiler$AssignableExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr")) void) 5))
                                      (16 (return))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "val" "clojure.lang.Compiler$AssignExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (invokeinterface
					(methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1))
                                      (9 (ireturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "val" "clojure.lang.Compiler$AssignExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (invokeinterface
					(methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$AssignExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$AssignExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$AssignExpr" . "clojure.lang"))

