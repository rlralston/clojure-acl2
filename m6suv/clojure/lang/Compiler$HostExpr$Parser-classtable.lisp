; Compiler$HostExpr$Parser-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$HostExpr$Parser*
 (make-class-def
      '(class "clojure.lang.Compiler$HostExpr$Parser"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Malformed member expression, expecting (. target member ...)")
                        (STRING  "Malformed member expression"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 9) (max_locals . 15) (code_length . 558)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (checkcast (class "clojure.lang.ISeq"))) 
                                      (4 (astore_3)) 
                                      (5 (aload_3)) 
                                      (6 (invokestatic (methodCP "length" "clojure.lang.RT" ((class "clojure.lang.ISeq")) int))) 
                                      (9 (iconst_3)) 
                                      (10 (if_icmpge 23)) ;;to TAG_0
                                      (13 (new (class "java.lang.IllegalArgumentException"))) 
                                      (16 (dup)) 
                                      (17 (ldc 0)) ;;STRING:: "Malformed member expression, expecting (. target member ...)"
                                      (19 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (22 (athrow)) 
                                      (23 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (26 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (29 (checkcast (class "java.lang.Integer"))) 
                                      (32 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (35 (istore 4)) 
                                      (37 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (40 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (43 (checkcast (class "java.lang.Integer"))) 
                                      (46 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (49 (istore 5)) 
                                      (51 (getstatic (fieldCP "SOURCE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (54 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (57 (checkcast (class "java.lang.String"))) 
                                      (60 (astore 6)) 
                                      (62 (aload_3)) 
                                      (63 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (66 (iconst_0)) 
                                      (67 (invokestatic (methodCP "access$400" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object") boolean) (class "java.lang.Class")))) 
                                      (70 (astore 7)) 
                                      (72 (aconst_null)) 
                                      (73 (astore 8)) 
                                      (75 (aload 7)) 
                                      (77 (ifnonnull 103)) ;;to TAG_1
                                      (80 (aload_1)) 
                                      (81 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (84 (if_acmpne 91)) ;;to TAG_2
                                      (87 (aload_1)) 
                                      (88 (goto 94)) ;;to TAG_3
                                      (91 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_2
                                      (94 (aload_3)) ;;at TAG_3
                                      (95 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (98 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (101 (astore 8)) 
                                      (103 (aload_3)) ;;at TAG_1
                                      (104 (invokestatic (methodCP "length" "clojure.lang.RT" ((class "clojure.lang.ISeq")) int))) 
                                      (107 (iconst_3)) 
                                      (108 (if_icmpne 125)) ;;to TAG_4
                                      (111 (aload_3)) 
                                      (112 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (115 (instanceof (class "clojure.lang.Symbol"))) 
                                      (118 (ifeq 125)) ;;to TAG_4
                                      (121 (iconst_1)) 
                                      (122 (goto 126)) ;;to TAG_5
                                      (125 (iconst_0)) ;;at TAG_4
                                      (126 (istore 9)) ;;at TAG_5
                                      (128 (iload 9)) 
                                      (130 (ifeq 259)) ;;to TAG_6
                                      (133 (aload_3)) 
                                      (134 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (137 (checkcast (class "clojure.lang.Symbol"))) 
                                      (140 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (143 (iconst_0)) 
                                      (144 (invokevirtual (methodCP "charAt" "java.lang.String" (int) char))) 
                                      (147 (bipush 45)) 
                                      (149 (if_icmpeq 259)) ;;to TAG_6
                                      (152 (aload_3)) 
                                      (153 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (156 (checkcast (class "clojure.lang.Symbol"))) 
                                      (159 (astore 10)) 
                                      (161 (aload 7)) 
                                      (163 (ifnull 199)) ;;to TAG_7
                                      (166 (aload 7)) 
                                      (168 (iconst_0)) 
                                      (169 (aload 10)) 
                                      (171 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (174 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (177 (iconst_1)) 
                                      (178 (invokestatic (methodCP "getMethods" "clojure.lang.Reflector" ((class "java.lang.Class") int (class "java.lang.String") boolean) (class "java.util.List")))) 
                                      (181 (invokeinterface (methodCP "size" "java.util.List" () int) 1)) 
                                      (186 (ifne 193)) ;;to TAG_8
                                      (189 (iconst_1)) 
                                      (190 (goto 194)) ;;to TAG_9
                                      (193 (iconst_0)) ;;at TAG_8
                                      (194 (istore 9)) ;;at TAG_9
                                      (196 (goto 259)) ;;to TAG_6
                                      (199 (aload 8)) ;;at TAG_7
                                      (201 (ifnull 259)) ;;to TAG_6
                                      (204 (aload 8)) 
                                      (206 (invokeinterface (methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1)) 
                                      (211 (ifeq 259)) ;;to TAG_6
                                      (214 (aload 8)) 
                                      (216 (invokeinterface (methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1)) 
                                      (221 (ifnull 259)) ;;to TAG_6
                                      (224 (aload 8)) 
                                      (226 (invokeinterface (methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1)) 
                                      (231 (iconst_0)) 
                                      (232 (aload 10)) 
                                      (234 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (237 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (240 (iconst_0)) 
                                      (241 (invokestatic (methodCP "getMethods" "clojure.lang.Reflector" ((class "java.lang.Class") int (class "java.lang.String") boolean) (class "java.util.List")))) 
                                      (244 (invokeinterface (methodCP "size" "java.util.List" () int) 1)) 
                                      (249 (ifne 256)) ;;to TAG_10
                                      (252 (iconst_1)) 
                                      (253 (goto 257)) ;;to TAG_11
                                      (256 (iconst_0)) ;;at TAG_10
                                      (257 (istore 9)) ;;at TAG_11
                                      (259 (iload 9)) ;;at TAG_6
                                      (261 (ifeq 371)) ;;to TAG_12
                                      (264 (aload_3)) 
                                      (265 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (268 (checkcast (class "clojure.lang.Symbol"))) 
                                      (271 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (274 (iconst_0)) 
                                      (275 (invokevirtual (methodCP "charAt" "java.lang.String" (int) char))) 
                                      (278 (bipush 45)) 
                                      (280 (if_icmpne 303))  ;;to TAG_13
                                      (283 (aload_3)) 
                                      (284 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (287 (checkcast (class "clojure.lang.Symbol"))) 
                                      (290 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (293 (iconst_1)) 
                                      (294 (invokevirtual (methodCP "substring" "java.lang.String" (int) (class "java.lang.String")))) 
                                      (297 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (300 (goto 310)) ;;to TAG_14
                                      (303 (aload_3)) ;;at TAG_13
                                      (304 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (307 (checkcast (class "clojure.lang.Symbol"))) 
                                      (310 (astore 10)) ;;at TAG_14
                                      (312 (aload_3)) 
                                      (313 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (316 (astore 11)) 
                                      (318 (aload 7)) 
                                      (320 (ifnull 347)) ;;to TAG_15
                                      (323 (new (class "clojure.lang.Compiler$StaticFieldExpr"))) 
                                      (326 (dup)) 
                                      (327 (iload 4)) 
                                      (329 (iload 5)) 
                                      (331 (aload 7)) 
                                      (333 (aload 10)) 
                                      (335 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (338 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (341 (aload 11)) 
                                      (343 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$StaticFieldExpr" (int int (class "java.lang.Class") (class "java.lang.String") (class "clojure.lang.Symbol")) void))) 
                                      (346 (areturn)) 
                                      (347 (new (class "clojure.lang.Compiler$InstanceFieldExpr"))) ;;at TAG_15
                                      (350 (dup)) 
                                      (351 (iload 4)) 
                                      (353 (iload 5)) 
                                      (355 (aload 8)) 
                                      (357 (aload 10)) 
                                      (359 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (362 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (365 (aload 11)) 
                                      (367 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$InstanceFieldExpr" (int int (class "clojure.lang.Compiler$Expr") (class "java.lang.String") (class "clojure.lang.Symbol")) void))) 
                                      (370 (areturn)) 
                                      (371 (aload_3)) ;;at TAG_12
                                      (372 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (375 (instanceof (class "clojure.lang.ISeq"))) 
                                      (378 (ifeq 388)) ;;to TAG_16
                                      (381 (aload_3)) 
                                      (382 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (385 (goto 395)) ;;to TAG_17
                                      (388 (aload_3)) ;;at TAG_16
                                      (389 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (392 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (395 (checkcast (class "clojure.lang.ISeq"))) ;;at TAG_17
                                      (398 (astore 10)) 
                                      (400 (aload 10)) 
                                      (402 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (405 (instanceof (class "clojure.lang.Symbol"))) 
                                      (408 (ifne 421)) ;;to TAG_18
                                      (411 (new (class "java.lang.IllegalArgumentException"))) 
                                      (414 (dup)) 
                                      (415 (ldc 1)) ;;STRING:: "Malformed member expression"
                                      (417 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (420 (athrow)) 
                                      (421 (aload 10)) ;;at TAG_18
                                      (423 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (426 (checkcast (class "clojure.lang.Symbol"))) 
                                      (429 (astore 11)) 
                                      (431 (aload_3)) 
                                      (432 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (435 (astore 12)) 
                                      (437 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (440 (astore 13)) 
                                      (442 (aload 10)) 
                                      (444 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (447 (astore 14)) 
                                      (449 (aload 14)) ;;at TAG_22
                                      (451 (ifnull 497)) ;;to TAG_19
                                      (454 (aload 13)) 
                                      (456 (aload_1)) 
                                      (457 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (460 (if_acmpne 467)) ;;to TAG_20
                                      (463 (aload_1)) 
                                      (464 (goto 470)) ;;to TAG_21
                                      (467 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_20
                                      (470 (aload 14)) ;;at TAG_21
                                      (472 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (477 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (480 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (483 (astore 13)) 
                                      (485 (aload 14)) 
                                      (487 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (492 (astore 14)) 
                                      (494 (goto 449)) ;;to TAG_22
                                      (497 (aload 7)) ;;at TAG_19
                                      (499 (ifnull 530)) ;;to TAG_23
                                      (502 (new (class "clojure.lang.Compiler$StaticMethodExpr"))) 
                                      (505 (dup)) 
                                      (506 (aload 6)) 
                                      (508 (iload 4)) 
                                      (510 (iload 5)) 
                                      (512 (aload 12)) 
                                      (514 (aload 7)) 
                                      (516 (aload 11)) 
                                      (518 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (521 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (524 (aload 13)) 
                                      (526 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$StaticMethodExpr" ((class "java.lang.String") int int (class "clojure.lang.Symbol") (class "java.lang.Class") (class "java.lang.String") (class "clojure.lang.IPersistentVector")) void))) 
                                      (529 (areturn)) 
                                      (530 (new (class "clojure.lang.Compiler$InstanceMethodExpr"))) ;;at TAG_23
                                      (533 (dup)) 
                                      (534 (aload 6)) 
                                      (536 (iload 4)) 
                                      (538 (iload 5)) 
                                      (540 (aload 12)) 
                                      (542 (aload 8)) 
                                      (544 (aload 11)) 
                                      (546 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (549 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (552 (aload 13)) 
                                      (554 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$InstanceMethodExpr" ((class "java.lang.String") int int (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") (class "java.lang.String") (class "clojure.lang.IPersistentVector")) void))) 
                                      (557 (areturn)) 
                                      (endofcode 558))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$IParser")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$HostExpr$Parser-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$HostExpr$Parser*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$HostExpr$Parser" . "clojure.lang"))

