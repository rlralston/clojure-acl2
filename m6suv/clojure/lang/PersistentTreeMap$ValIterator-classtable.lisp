; PersistentTreeMap$ValIterator-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentTreeMap$ValIterator*
 (make-class-def
      '(class "clojure.lang.PersistentTreeMap$ValIterator"
            "java.lang.Object"
            (constant_pool)
            (fields
                        (field "it" (class "clojure.lang.PersistentTreeMap$NodeIterator") (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.PersistentTreeMap$NodeIterator"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "it" "clojure.lang.PersistentTreeMap$ValIterator" (class "clojure.lang.PersistentTreeMap$NodeIterator"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasNext"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "it" "clojure.lang.PersistentTreeMap$ValIterator" (class "clojure.lang.PersistentTreeMap$NodeIterator"))))
                                      (4 (invokevirtual
					(methodCP "hasNext" "clojure.lang.PersistentTreeMap$NodeIterator" () boolean)))
                                      (7 (ireturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "next"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "it" "clojure.lang.PersistentTreeMap$ValIterator" (class "clojure.lang.PersistentTreeMap$NodeIterator"))))
                                      (4 (invokevirtual
					(methodCP "next" "clojure.lang.PersistentTreeMap$NodeIterator" () (class "java.lang.Object"))))
                                      (7 (checkcast (class "clojure.lang.PersistentTreeMap$Node")))
                                      (10 (invokevirtual
					(methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object"))))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remove"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "java.util.Iterator")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentTreeMap$ValIterator-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentTreeMap$ValIterator*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentTreeMap$ValIterator" . "clojure.lang"))

