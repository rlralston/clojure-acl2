; Ratio-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.Ratio*
 (make-class-def
      '(class "clojure.lang.Ratio"
            "java.lang.Number"
            (constant_pool
                        (STRING  "/"))
            (fields
                        (field "numerator" (class "java.math.BigInteger") (accessflags  *class*  *final*  *public* ) -1)
                        (field "denominator" (class "java.math.BigInteger") (accessflags  *class*  *final*  *public* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.math.BigInteger") (class "java.math.BigInteger"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Number" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equals"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 51)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnull 49))  ;;to TAG_0
                                      (4 (aload_1)) 
                                      (5 (instanceof (class "clojure.lang.Ratio"))) 
                                      (8 (ifeq 49))  ;;to TAG_0
                                      (11 (aload_1)) 
                                      (12 (checkcast (class "clojure.lang.Ratio"))) 
                                      (15 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (18 (aload_0)) 
                                      (19 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (22 (invokevirtual (methodCP "equals" "java.math.BigInteger" ((class "java.lang.Object")) boolean))) 
                                      (25 (ifeq 49))  ;;to TAG_0
                                      (28 (aload_1)) 
                                      (29 (checkcast (class "clojure.lang.Ratio"))) 
                                      (32 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (35 (aload_0)) 
                                      (36 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (39 (invokevirtual (methodCP "equals" "java.math.BigInteger" ((class "java.lang.Object")) boolean))) 
                                      (42 (ifeq 49))  ;;to TAG_0
                                      (45 (iconst_1)) 
                                      (46 (goto 50)) ;;to TAG_1
                                      (49 (iconst_0)) ;;at TAG_0
                                      (50 (ireturn)) ;;at TAG_1
                                      (endofcode 51))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hashCode"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (4 (invokevirtual
					(methodCP "hashCode" "java.math.BigInteger" () int)))
                                      (7 (aload_0))
                                      (8 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (11 (invokevirtual
					(methodCP "hashCode" "java.math.BigInteger" () int)))
                                      (14 (ixor))
                                      (15 (ireturn))
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toString"
                              (parameters )
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 36)
                                   (parsedcode
                                      (0 (new (class "java.lang.StringBuilder")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.StringBuilder" () void)))
                                      (7 (aload_0))
                                      (8 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (11 (invokevirtual
					(methodCP "toString" "java.math.BigInteger" () (class "java.lang.String"))))
                                      (14 (invokevirtual
					(methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder"))))
                                      (17 (ldc 0))        ;;STRING:: "/"
                                      (19 (invokevirtual
					(methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder"))))
                                      (22 (aload_0))
                                      (23 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (26 (invokevirtual
					(methodCP "toString" "java.math.BigInteger" () (class "java.lang.String"))))
                                      (29 (invokevirtual
					(methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder"))))
                                      (32 (invokevirtual
					(methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String"))))
                                      (35 (areturn))
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap )))
                        (method "intValue"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "doubleValue" "clojure.lang.Ratio" () double)))
                                      (4 (d2i))
                                      (5 (ireturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "longValue"
                              (parameters )
                              (returntype . long)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "bigIntegerValue" "clojure.lang.Ratio" () (class "java.math.BigInteger"))))
                                      (4 (invokevirtual
					(methodCP "longValue" "java.math.BigInteger" () long)))
                                      (7 (lreturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "floatValue"
                              (parameters )
                              (returntype . float)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "doubleValue" "clojure.lang.Ratio" () double)))
                                      (4 (d2f))
                                      (5 (freturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doubleValue"
                              (parameters )
                              (returntype . double)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getstatic (fieldCP "DECIMAL64" "java.math.MathContext" (class "java.math.MathContext"))))
                                      (4 (invokevirtual
					(methodCP "decimalValue" "clojure.lang.Ratio" ((class "java.math.MathContext")) (class "java.math.BigDecimal"))))
                                      (7 (invokevirtual
					(methodCP "doubleValue" "java.math.BigDecimal" () double)))
                                      (10 (dreturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "decimalValue"
                              (parameters )
                              (returntype . (class "java.math.BigDecimal"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getstatic (fieldCP "UNLIMITED" "java.math.MathContext" (class "java.math.MathContext"))))
                                      (4 (invokevirtual
					(methodCP "decimalValue" "clojure.lang.Ratio" ((class "java.math.MathContext")) (class "java.math.BigDecimal"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "decimalValue"
                              (parameters (class "java.math.MathContext"))
                              (returntype . (class "java.math.BigDecimal"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 31)
                                   (parsedcode
                                      (0 (new (class "java.math.BigDecimal")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (8 (invokespecial
					(methodCP "<init>" "java.math.BigDecimal" ((class "java.math.BigInteger")) void)))
                                      (11 (astore_2))
                                      (12 (new (class "java.math.BigDecimal")))
                                      (15 (dup))
                                      (16 (aload_0))
                                      (17 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (20 (invokespecial
					(methodCP "<init>" "java.math.BigDecimal" ((class "java.math.BigInteger")) void)))
                                      (23 (astore_3))
                                      (24 (aload_2))
                                      (25 (aload_3))
                                      (26 (aload_1))
                                      (27 (invokevirtual
					(methodCP "divide" "java.math.BigDecimal" ((class "java.math.BigDecimal") (class "java.math.MathContext")) (class "java.math.BigDecimal"))))
                                      (30 (areturn))
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap )))
                        (method "bigIntegerValue"
                              (parameters )
                              (returntype . (class "java.math.BigInteger"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger"))))
                                      (8 (invokevirtual
					(methodCP "divide" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger"))))
                                      (11 (areturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "compareTo"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (checkcast (class "java.lang.Number")))
                                      (4 (astore_2))
                                      (5 (aload_0))
                                      (6 (aload_2))
                                      (7 (invokestatic
					(methodCP "compare" "clojure.lang.Numbers" ((class "java.lang.Number") (class "java.lang.Number")) int)))
                                      (10 (ireturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "java.lang.Comparable")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))


(defconst *Ratio-class-table*
  (make-static-class-decls 
   *clojure.lang.Ratio*))

(defconst *package-name-map* 
  ("clojure.lang.Ratio" . "clojure.lang"))

