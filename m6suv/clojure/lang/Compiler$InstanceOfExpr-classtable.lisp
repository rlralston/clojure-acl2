; Compiler$InstanceOfExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$InstanceOfExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$InstanceOfExpr"
            "java.lang.Object"
            (constant_pool)
            (fields
                        (field "expr" (class "clojure.lang.Compiler$Expr") (accessflags  *class* ) -1)
                        (field "c" (class "java.lang.Class") (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.Class") (class "clojure.lang.Compiler$Expr"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_2))
                                      (6 (putfield (fieldCP "expr" "clojure.lang.Compiler$InstanceOfExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (9 (aload_0))
                                      (10 (aload_1))
                                      (11 (putfield (fieldCP "c" "clojure.lang.Compiler$InstanceOfExpr" (class "java.lang.Class"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "c" "clojure.lang.Compiler$InstanceOfExpr" (class "java.lang.Class")))) 
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "expr" "clojure.lang.Compiler$InstanceOfExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (8 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (13 (invokevirtual (methodCP "isInstance" "java.lang.Class" ((class "java.lang.Object")) boolean))) 
                                      (16 (ifeq 23))  ;;to TAG_0
                                      (19 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (22 (areturn)) 
                                      (23 (getstatic (fieldCP "F" "clojure.lang.RT" (class "java.lang.Boolean")))) ;;at TAG_0
                                      (26 (areturn)) 
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "canEmitPrimitive"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitUnboxed"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "expr" "clojure.lang.Compiler$InstanceOfExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C"))))
                                      (7 (aload_2))
                                      (8 (aload_3))
                                      (9 (invokeinterface
					(methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4))
                                      (14 (aload_3))
                                      (15 (aload_0))
                                      (16 (getfield (fieldCP "c" "clojure.lang.Compiler$InstanceOfExpr" (class "java.lang.Class"))))
                                      (19 (invokestatic
					(methodCP "getType" "clojure.lang.Compiler" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (22 (invokevirtual
					(methodCP "instanceOf" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void)))
                                      (25 (return))
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (aload_2)) 
                                      (3 (aload_3)) 
                                      (4 (invokevirtual (methodCP "emitUnboxed" "clojure.lang.Compiler$InstanceOfExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (7 (aload_2)) 
                                      (8 (aload_3)) 
                                      (9 (getstatic (fieldCP "TYPE" "java.lang.Boolean" (class "java.lang.Class")))) 
                                      (12 (invokestatic (methodCP "emitBoxReturn" "clojure.lang.Compiler$HostExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class")) void))) 
                                      (15 (aload_1)) 
                                      (16 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (19 (if_acmpne 26))  ;;to TAG_0
                                      (22 (aload_3)) 
                                      (23 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (26 (return)) ;;at TAG_0
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "TYPE" "java.lang.Boolean" (class "java.lang.Class"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr" "clojure.lang.Compiler$MaybePrimitiveExpr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$InstanceOfExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$InstanceOfExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$InstanceOfExpr" . "clojure.lang"))

