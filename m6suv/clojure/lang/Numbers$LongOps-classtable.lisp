; Numbers$LongOps-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(include-book "../../model-translation")

(defconst *clojure.lang.Numbers$LongOps*
 (make-class-def
      '(class "clojure.lang.Numbers$LongOps"
            "java.lang.Object"
            (constant_pool
                        (LONG -9223372036854775808)
                        (LONG 9223372036854775807))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
                    (methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "combine"
                              (parameters (class "clojure.lang.Numbers$Ops"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (aload_0))
                                      (2 (invokeinterface
                    (methodCP "opsWith" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$LongOps")) (class "clojure.lang.Numbers$Ops")) 2))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$LongOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$DoubleOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "DOUBLE_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$DoubleOps"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$RatioOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "RATIO_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$RatioOps"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$BigIntOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "BIGINT_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigIntOps"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$BigDecimalOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "BIGDECIMAL_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigDecimalOps"))))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isZero"
                              (parameters (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (4 (lconst_0)) 
                                      (5 (lcmp)) 
                                      (6 (ifne 13))  ;;to TAG_0
                                      (9 (iconst_1)) 
                                      (10 (goto 14)) ;;to TAG_1
                                      (13 (iconst_0)) ;;at TAG_0
                                      (14 (ireturn)) ;;at TAG_1
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isPos"
                              (parameters (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (4 (lconst_0)) 
                                      (5 (lcmp)) 
                                      (6 (ifle 13))  ;;to TAG_0
                                      (9 (iconst_1)) 
                                      (10 (goto 14)) ;;to TAG_1
                                      (13 (iconst_0)) ;;at TAG_0
                                      (14 (ireturn)) ;;at TAG_1
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isNeg"
                              (parameters (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (4 (lconst_0)) 
                                      (5 (lcmp)) 
                                      (6 (ifge 13))  ;;to TAG_0
                                      (9 (iconst_1)) 
                                      (10 (goto 14)) ;;to TAG_1
                                      (13 (iconst_0)) ;;at TAG_0
                                      (14 (ireturn)) ;;at TAG_1
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokevirtual
                    (methodCP "longValue" "java.lang.Number" () long)))
                                      (4 (aload_2))
                                      (5 (invokevirtual
                    (methodCP "longValue" "java.lang.Number" () long)))
                                      (8 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" (long long) long)))
                                      (11 (invokestatic
                    (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number"))))
                                      (14 (areturn))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addP"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 9) (code_length . 51)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (4 (lstore_3)) 
                                      (5 (aload_2)) 
                                      (6 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (9 (lstore 5)) 
                                      (11 (lload_3)) 
                                      (12 (lload 5)) 
                                      (14 (ladd)) 
                                      (15 (lstore 7)) 
                                      (17 (lload 7)) 
                                      (19 (lload_3)) 
                                      (20 (lxor)) 
                                      (21 (lconst_0)) 
                                      (22 (lcmp)) 
                                      (23 (ifge 45))  ;;to TAG_0
                                      (26 (lload 7)) 
                                      (28 (lload 5)) 
                                      (30 (lxor)) 
                                      (31 (lconst_0)) 
                                      (32 (lcmp)) 
                                      (33 (ifge 45))  ;;to TAG_0
                                      (36 (getstatic (fieldCP "BIGINT_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigIntOps")))) 
                                      (39 (aload_1)) 
                                      (40 (aload_2)) 
                                      (41 (invokevirtual (methodCP "add" "clojure.lang.Numbers$BigIntOps" ((class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number")))) 
                                      (44 (areturn)) 
                                      (45 (lload 7)) ;;at TAG_0
                                      (47 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (50 (areturn)) 
                                      (endofcode 51))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokevirtual
                    (methodCP "longValue" "java.lang.Number" () long)))
                                      (4 (aload_2))
                                      (5 (invokevirtual
                    (methodCP "longValue" "java.lang.Number" () long)))
                                      (8 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" (long long) long)))
                                      (11 (invokestatic
                    (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number"))))
                                      (14 (areturn))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiplyP"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 9) (code_length . 49)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (4 (lstore_3)) 
                                      (5 (aload_2)) 
                                      (6 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (9 (lstore 5)) 
                                      (11 (lload_3)) 
                                      (12 (lload 5)) 
                                      (14 (lmul)) 
                                      (15 (lstore 7)) 
                                      (17 (lload 5)) 
                                      (19 (lconst_0)) 
                                      (20 (lcmp)) 
                                      (21 (ifeq 43))  ;;to TAG_0
                                      (24 (lload 7)) 
                                      (26 (lload 5)) 
                                      (28 (ldiv)) 
                                      (29 (lload_3)) 
                                      (30 (lcmp)) 
                                      (31 (ifeq 43))  ;;to TAG_0
                                      (34 (getstatic (fieldCP "BIGINT_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigIntOps")))) 
                                      (37 (aload_1)) 
                                      (38 (aload_2)) 
                                      (39 (invokevirtual (methodCP "multiply" "clojure.lang.Numbers$BigIntOps" ((class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number")))) 
                                      (42 (areturn)) 
                                      (43 (lload 7)) ;;at TAG_0
                                      (45 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (48 (areturn)) 
                                      (endofcode 49))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gcd"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 21)
                                   (parsedcode
                                      (0 (lload_2)) ;;at TAG_1
                                      (1 (lconst_0)) 
                                      (2 (lcmp)) 
                                      (3 (ifeq 19))  ;;to TAG_0
                                      (6 (lload_0)) 
                                      (7 (lload_2)) 
                                      (8 (lrem)) 
                                      (9 (lstore 4)) 
                                      (11 (lload_2)) 
                                      (12 (lstore_0)) 
                                      (13 (lload 4)) 
                                      (15 (lstore_2)) 
                                      (16 (goto 0)) ;;to TAG_1
                                      (19 (lload_0)) ;;at TAG_0
                                      (20 (lreturn)) 
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 11) (code_length . 87)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (4 (lstore_3)) 
                                      (5 (aload_2)) 
                                      (6 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (9 (lstore 5)) 
                                      (11 (lload_3)) 
                                      (12 (lload 5)) 
                                      (14 (invokestatic (methodCP "gcd" "clojure.lang.Numbers$LongOps" (long long) long))) 
                                      (17 (lstore 7)) 
                                      (19 (lload 7)) 
                                      (21 (lconst_0)) 
                                      (22 (lcmp)) 
                                      (23 (ifne 31)) ;;to TAG_0
                                      (26 (lconst_0)) 
                                      (27 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (30 (areturn)) 
                                      (31 (lload_3)) ;;at TAG_0
                                      (32 (lload 7)) 
                                      (34 (ldiv)) 
                                      (35 (lstore_3)) 
                                      (36 (lload 5)) 
                                      (38 (lload 7)) 
                                      (40 (ldiv)) 
                                      (41 (lstore 9)) 
                                      (43 (lload 9)) 
                                      (45 (lconst_1)) 
                                      (46 (lcmp)) 
                                      (47 (ifne 55)) ;;to TAG_1
                                      (50 (lload_3)) 
                                      (51 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (54 (areturn)) 
                                      (55 (lload 9)) ;;at TAG_1
                                      (57 (lconst_0)) 
                                      (58 (lcmp)) 
                                      (59 (ifge 70))  ;;to TAG_2
                                      (62 (lload_3)) 
                                      (63 (lneg)) 
                                      (64 (lstore_3)) 
                                      (65 (lload 9)) 
                                      (67 (lneg)) 
                                      (68 (lstore 9)) 
                                      (70 (new (class "clojure.lang.Ratio"))) ;;at TAG_2
                                      (73 (dup)) 
                                      (74 (lload_3)) 
                                      (75 (invokestatic (methodCP "valueOf" "java.math.BigInteger" (long) (class "java.math.BigInteger")))) 
                                      (78 (lload 9)) 
                                      (80 (invokestatic (methodCP "valueOf" "java.math.BigInteger" (long) (class "java.math.BigInteger")))) 
                                      (83 (invokespecial (methodCP "<init>" "clojure.lang.Ratio" ((class "java.math.BigInteger") (class "java.math.BigInteger")) void))) 
                                      (86 (areturn)) 
                                      (endofcode 87))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokevirtual
                    (methodCP "longValue" "java.lang.Number" () long)))
                                      (4 (aload_2))
                                      (5 (invokevirtual
                    (methodCP "longValue" "java.lang.Number" () long)))
                                      (8 (ldiv))
                                      (9 (invokestatic
                    (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number"))))
                                      (12 (areturn))
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokevirtual
                    (methodCP "longValue" "java.lang.Number" () long)))
                                      (4 (aload_2))
                                      (5 (invokevirtual
                    (methodCP "longValue" "java.lang.Number" () long)))
                                      (8 (lrem))
                                      (9 (invokestatic
                    (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number"))))
                                      (12 (areturn))
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (4 (aload_2)) 
                                      (5 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (8 (lcmp)) 
                                      (9 (ifne 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (4 (aload_2)) 
                                      (5 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (8 (lcmp)) 
                                      (9 (ifge 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "negate"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokevirtual
                    (methodCP "longValue" "java.lang.Number" () long)))
                                      (4 (lstore_2))
                                      (5 (lload_2))
                                      (6 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" (long) long)))
                                      (9 (invokestatic
                    (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number"))))
                                      (12 (areturn))
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "negateP"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 30)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (4 (lstore_2)) 
                                      (5 (lload_2)) 
                                      (6 (ldc2_w 0)) ;; LONG:: "-9223372036854775808"
                                      (9 (lcmp)) 
                                      (10 (ifle 19))  ;;to TAG_0
                                      (13 (lload_2)) 
                                      (14 (lneg)) 
                                      (15 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (18 (areturn)) 
                                      (19 (lload_2)) ;;at TAG_0
                                      (20 (invokestatic (methodCP "valueOf" "java.math.BigInteger" (long) (class "java.math.BigInteger")))) 
                                      (23 (invokevirtual (methodCP "negate" "java.math.BigInteger" () (class "java.math.BigInteger")))) 
                                      (26 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (29 (areturn)) 
                                      (endofcode 30))
                                   (Exceptions )
                                   (StackMap )))
                        (method "inc"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokevirtual
                    (methodCP "longValue" "java.lang.Number" () long)))
                                      (4 (lstore_2))
                                      (5 (lload_2))
                                      (6 (invokestatic
                    (methodCP "inc" "clojure.lang.Numbers" (long) long)))
                                      (9 (invokestatic
                    (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number"))))
                                      (12 (areturn))
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "incP"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 28)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (4 (lstore_2)) 
                                      (5 (lload_2)) 
                                      (6 (ldc2_w 1)) ;; LONG:: "9223372036854775807"
                                      (9 (lcmp)) 
                                      (10 (ifge 20))  ;;to TAG_0
                                      (13 (lload_2)) 
                                      (14 (lconst_1)) 
                                      (15 (ladd)) 
                                      (16 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (19 (areturn)) 
                                      (20 (getstatic (fieldCP "BIGINT_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigIntOps")))) ;;at TAG_0
                                      (23 (aload_1)) 
                                      (24 (invokevirtual (methodCP "inc" "clojure.lang.Numbers$BigIntOps" ((class "java.lang.Number")) (class "java.lang.Number")))) 
                                      (27 (areturn)) 
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap )))
                        (method "dec"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokevirtual
                    (methodCP "longValue" "java.lang.Number" () long)))
                                      (4 (lstore_2))
                                      (5 (lload_2))
                                      (6 (invokestatic
                    (methodCP "dec" "clojure.lang.Numbers" (long) long)))
                                      (9 (invokestatic
                    (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number"))))
                                      (12 (areturn))
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "decP"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 28)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (4 (lstore_2)) 
                                      (5 (lload_2)) 
                                      (6 (ldc2_w 0)) ;; LONG:: "-9223372036854775808"
                                      (9 (lcmp)) 
                                      (10 (ifle 20))  ;;to TAG_0
                                      (13 (lload_2)) 
                                      (14 (lconst_1)) 
                                      (15 (lsub)) 
                                      (16 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (19 (areturn)) 
                                      (20 (getstatic (fieldCP "BIGINT_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigIntOps")))) ;;at TAG_0
                                      (23 (aload_1)) 
                                      (24 (invokevirtual (methodCP "dec" "clojure.lang.Numbers$BigIntOps" ((class "java.lang.Number")) (class "java.lang.Number")))) 
                                      (27 (areturn)) 
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Numbers$Ops")
            (accessflags  *class*  *final*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))#|ACL2s-ToDo-Line|#



;(defconst *Numbers$LongOps-class-table*
;  (make-static-class-decls 
;   *clojure.lang.Numbers$LongOps*))

;(defconst *package-name-map* 
;  ("clojure.lang.Numbers$LongOps" . "clojure.lang"))

