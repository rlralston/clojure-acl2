; Compiler$CompilerException-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$CompilerException*
 (make-class-def
      '(class "clojure.lang.Compiler$CompilerException"
            "java.lang.RuntimeException"
            (constant_pool)
            (fields
                        (field "source" (class "java.lang.String") (accessflags  *class*  *final*  *public* ) -1)
                        (field "line" int (accessflags  *class*  *final*  *public* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.String") int int (class "java.lang.Throwable"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 28)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (iload_2))
                                      (3 (iload_3))
                                      (4 (aload 4))
                                      (6 (invokevirtual
					(methodCP "toString" "java.lang.Throwable" () (class "java.lang.String"))))
                                      (9 (invokestatic
					(methodCP "errorMsg" "clojure.lang.Compiler" ((class "java.lang.String") int int (class "java.lang.String")) (class "java.lang.String"))))
                                      (12 (aload 4))
                                      (14 (invokespecial
					(methodCP "<init>" "java.lang.RuntimeException" ((class "java.lang.String") (class "java.lang.Throwable")) void)))
                                      (17 (aload_0))
                                      (18 (aload_1))
                                      (19 (putfield (fieldCP "source" "clojure.lang.Compiler$CompilerException" (class "java.lang.String"))))
                                      (22 (aload_0))
                                      (23 (iload_2))
                                      (24 (putfield (fieldCP "line" "clojure.lang.Compiler$CompilerException" int)))
                                      (27 (return))
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toString"
                              (parameters )
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "getMessage" "clojure.lang.Compiler$CompilerException" () (class "java.lang.String"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$CompilerException-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$CompilerException*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$CompilerException" . "clojure.lang"))

