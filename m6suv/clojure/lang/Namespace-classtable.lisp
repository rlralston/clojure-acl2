; Namespace-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.Namespace*
 (make-class-def
      '(class "clojure.lang.Namespace"
            "clojure.lang.AReference"
            (constant_pool
                        (STRING  "Can\nt intern namespace-qualified symbol")
                        (STRING  " already refers to: ")
                        (STRING  " in namespace: ")
                        (STRING  "WARNING: ")
                        (STRING  ", being replaced by: ")
                        (STRING  "Can\nt unintern namespace-qualified symbol")
                        (STRING  "Cannot remove clojure namespace")
                        (STRING  "Expecting Symbol + Namespace")
                        (STRING  "Alias ")
                        (STRING  " already exists in namespace ")
                        (STRING  ", aliasing "))
            (fields
                        (field "name" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *public* ) -1)
                        (field "mappings" (class "java.util.concurrent.atomic.AtomicReference") (accessflags  *class*  *final*  *transient* ) -1)
                        (field "aliases" (class "java.util.concurrent.atomic.AtomicReference") (accessflags  *class*  *final*  *transient* ) -1)
                        (field "namespaces" (class "java.util.concurrent.ConcurrentHashMap") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "toString"
                              (parameters )
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol"))))
                                      (4 (invokevirtual
					(methodCP "toString" "clojure.lang.Symbol" () (class "java.lang.String"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 60)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "meta" "clojure.lang.Symbol" () (class "clojure.lang.IPersistentMap"))))
                                      (5 (invokespecial
					(methodCP "<init>" "clojure.lang.AReference" ((class "clojure.lang.IPersistentMap")) void)))
                                      (8 (aload_0))
                                      (9 (new (class "java.util.concurrent.atomic.AtomicReference")))
                                      (12 (dup))
                                      (13 (invokespecial
					(methodCP "<init>" "java.util.concurrent.atomic.AtomicReference" () void)))
                                      (16 (putfield (fieldCP "mappings" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (19 (aload_0))
                                      (20 (new (class "java.util.concurrent.atomic.AtomicReference")))
                                      (23 (dup))
                                      (24 (invokespecial
					(methodCP "<init>" "java.util.concurrent.atomic.AtomicReference" () void)))
                                      (27 (putfield (fieldCP "aliases" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (30 (aload_0))
                                      (31 (aload_1))
                                      (32 (putfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol"))))
                                      (35 (aload_0))
                                      (36 (getfield (fieldCP "mappings" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (39 (getstatic (fieldCP "DEFAULT_IMPORTS" "clojure.lang.RT" (class "clojure.lang.IPersistentMap"))))
                                      (42 (invokevirtual
					(methodCP "set" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object")) void)))
                                      (45 (aload_0))
                                      (46 (getfield (fieldCP "aliases" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (49 (iconst_0))
                                      (50 (anewarray (class "java.lang.Object")))
                                      (53 (invokestatic
					(methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (56 (invokevirtual
					(methodCP "set" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object")) void)))
                                      (59 (return))
                                      (endofcode 60))
                                   (Exceptions )
                                   (StackMap )))
                        (method "all"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 10)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "namespaces" "clojure.lang.Namespace" (class "java.util.concurrent.ConcurrentHashMap"))))
                                      (3 (invokevirtual
					(methodCP "values" "java.util.concurrent.ConcurrentHashMap" () (class "java.util.Collection"))))
                                      (6 (invokestatic
					(methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq"))))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getName"
                              (parameters )
                              (returntype . (class "clojure.lang.Symbol"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getMappings"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "mappings" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (4 (invokevirtual
					(methodCP "get" "java.util.concurrent.atomic.AtomicReference" () (class "java.lang.Object"))))
                                      (7 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "intern"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "clojure.lang.Var"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 6) (code_length . 161)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (4 (ifnull 17)) ;;to TAG_0
                                      (7 (new (class "java.lang.IllegalArgumentException"))) 
                                      (10 (dup)) 
                                      (11 (ldc 0)) ;;STRING:: "Can\nt intern namespace-qualified symbol"
                                      (13 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (16 (athrow)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (invokevirtual (methodCP "getMappings" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (21 (astore_2)) 
                                      (22 (aconst_null)) 
                                      (23 (astore 4)) 
                                      (25 (aload_2)) ;;at TAG_3
                                      (26 (aload_1)) 
                                      (27 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (32 (dup)) 
                                      (33 (astore_3)) 
                                      (34 (ifnonnull 83)) ;;to TAG_1
                                      (37 (aload 4)) 
                                      (39 (ifnonnull 53))  ;;to TAG_2
                                      (42 (new (class "clojure.lang.Var"))) 
                                      (45 (dup)) 
                                      (46 (aload_0)) 
                                      (47 (aload_1)) 
                                      (48 (invokespecial (methodCP "<init>" "clojure.lang.Var" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol")) void))) 
                                      (51 (astore 4)) 
                                      (53 (aload_2)) ;;at TAG_2
                                      (54 (aload_1)) 
                                      (55 (aload 4)) 
                                      (57 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (62 (astore 5)) 
                                      (64 (aload_0)) 
                                      (65 (getfield (fieldCP "mappings" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (68 (aload_2)) 
                                      (69 (aload 5)) 
                                      (71 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (74 (pop)) 
                                      (75 (aload_0)) 
                                      (76 (invokevirtual (methodCP "getMappings" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (79 (astore_2)) 
                                      (80 (goto 25)) ;;to TAG_3
                                      (83 (aload_3)) ;;at TAG_1
                                      (84 (instanceof (class "clojure.lang.Var"))) 
                                      (87 (ifeq 106)) ;;to TAG_4
                                      (90 (aload_3)) 
                                      (91 (checkcast (class "clojure.lang.Var"))) 
                                      (94 (getfield (fieldCP "ns" "clojure.lang.Var" (class "clojure.lang.Namespace")))) 
                                      (97 (aload_0)) 
                                      (98 (if_acmpne 106)) ;;to TAG_4
                                      (101 (aload_3)) 
                                      (102 (checkcast (class "clojure.lang.Var"))) 
                                      (105 (areturn)) 
                                      (106 (aload 4)) ;;at TAG_4
                                      (108 (ifnonnull 122)) ;;to TAG_5
                                      (111 (new (class "clojure.lang.Var"))) 
                                      (114 (dup)) 
                                      (115 (aload_0)) 
                                      (116 (aload_1)) 
                                      (117 (invokespecial (methodCP "<init>" "clojure.lang.Var" ((class "clojure.lang.Namespace") (class "clojure.lang.Symbol")) void))) 
                                      (120 (astore 4)) 
                                      (122 (aload_0)) ;;at TAG_5
                                      (123 (aload_1)) 
                                      (124 (aload_3)) 
                                      (125 (aload 4)) 
                                      (127 (invokespecial (methodCP "warnOrFailOnReplace" "clojure.lang.Namespace" ((class "clojure.lang.Symbol") (class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (130 (aload_0)) ;;at TAG_7
                                      (131 (getfield (fieldCP "mappings" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (134 (aload_2)) 
                                      (135 (aload_2)) 
                                      (136 (aload_1)) 
                                      (137 (aload 4)) 
                                      (139 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (144 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (147 (ifne 158)) ;;to TAG_6
                                      (150 (aload_0)) 
                                      (151 (invokevirtual (methodCP "getMappings" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (154 (astore_2)) 
                                      (155 (goto 130)) ;;to TAG_7
                                      (158 (aload 4)) ;;at TAG_6
                                      (160 (areturn)) 
                                      (endofcode 161))
                                   (Exceptions )
                                   (StackMap )))
                        (method "warnOrFailOnReplace"
                              (parameters (class "clojure.lang.Symbol") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 130)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (instanceof (class "clojure.lang.Var"))) 
                                      (4 (ifeq 74))  ;;to TAG_0
                                      (7 (aload_2)) 
                                      (8 (checkcast (class "clojure.lang.Var"))) 
                                      (11 (getfield (fieldCP "ns" "clojure.lang.Var" (class "clojure.lang.Namespace")))) 
                                      (14 (astore 4)) 
                                      (16 (aload 4)) 
                                      (18 (aload_0)) 
                                      (19 (if_acmpne 23)) ;;to TAG_1
                                      (22 (return)) 
                                      (23 (aload 4)) ;;at TAG_1
                                      (25 (getstatic (fieldCP "CLOJURE_NS" "clojure.lang.RT" (class "clojure.lang.Namespace")))) 
                                      (28 (if_acmpeq 74))  ;;to TAG_0
                                      (31 (new (class "java.lang.IllegalStateException"))) 
                                      (34 (dup)) 
                                      (35 (new (class "java.lang.StringBuilder"))) 
                                      (38 (dup)) 
                                      (39 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (42 (aload_1)) 
                                      (43 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (46 (ldc 1)) ;;STRING:: " already refers to: "
                                      (48 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (51 (aload_2)) 
                                      (52 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (55 (ldc 2)) ;;STRING:: " in namespace: "
                                      (57 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (60 (aload_0)) 
                                      (61 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (64 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (67 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (70 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (73 (athrow)) 
                                      (74 (invokestatic (methodCP "errPrintWriter" "clojure.lang.RT" () (class "java.io.PrintWriter")))) ;;at TAG_0
                                      (77 (new (class "java.lang.StringBuilder"))) 
                                      (80 (dup)) 
                                      (81 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (84 (ldc 3)) ;;STRING:: "WARNING: "
                                      (86 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (89 (aload_1)) 
                                      (90 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (93 (ldc 1)) ;;STRING:: " already refers to: "
                                      (95 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (98 (aload_2)) 
                                      (99 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (102 (ldc 2)) ;;STRING:: " in namespace: "
                                      (104 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (107 (aload_0)) 
                                      (108 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (111 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (114 (ldc 4)) ;;STRING:: ", being replaced by: "
                                      (116 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (119 (aload_3)) 
                                      (120 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (123 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (126 (invokevirtual (methodCP "println" "java.io.PrintWriter" ((class "java.lang.String")) void))) 
                                      (129 (return)) 
                                      (endofcode 130))
                                   (Exceptions )
                                   (StackMap )))
                        (method "reference"
                              (parameters (class "clojure.lang.Symbol") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 5) (max_locals . 6) (code_length . 110)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (4 (ifnull 17)) ;;to TAG_0
                                      (7 (new (class "java.lang.IllegalArgumentException"))) 
                                      (10 (dup)) 
                                      (11 (ldc 0)) ;;STRING:: "Can\nt intern namespace-qualified symbol"
                                      (13 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (16 (athrow)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (invokevirtual (methodCP "getMappings" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (21 (astore_3)) 
                                      (22 (aload_3)) ;;at TAG_2
                                      (23 (aload_1)) 
                                      (24 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (29 (dup)) 
                                      (30 (astore 4)) 
                                      (32 (ifnonnull 64)) ;;to TAG_1
                                      (35 (aload_3)) 
                                      (36 (aload_1)) 
                                      (37 (aload_2)) 
                                      (38 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (43 (astore 5)) 
                                      (45 (aload_0)) 
                                      (46 (getfield (fieldCP "mappings" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (49 (aload_3)) 
                                      (50 (aload 5)) 
                                      (52 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (55 (pop)) 
                                      (56 (aload_0)) 
                                      (57 (invokevirtual (methodCP "getMappings" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (60 (astore_3)) 
                                      (61 (goto 22))  ;;to TAG_2
                                      (64 (aload 4)) ;;at TAG_1
                                      (66 (aload_2)) 
                                      (67 (if_acmpne 73)) ;;to TAG_3
                                      (70 (aload 4)) 
                                      (72 (areturn)) 
                                      (73 (aload_0)) ;;at TAG_3
                                      (74 (aload_1)) 
                                      (75 (aload 4)) 
                                      (77 (aload_2)) 
                                      (78 (invokespecial (methodCP "warnOrFailOnReplace" "clojure.lang.Namespace" ((class "clojure.lang.Symbol") (class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (81 (aload_0)) ;;at TAG_5
                                      (82 (getfield (fieldCP "mappings" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (85 (aload_3)) 
                                      (86 (aload_3)) 
                                      (87 (aload_1)) 
                                      (88 (aload_2)) 
                                      (89 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (94 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (97 (ifne 108)) ;;to TAG_4
                                      (100 (aload_0)) 
                                      (101 (invokevirtual (methodCP "getMappings" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (104 (astore_3)) 
                                      (105 (goto 81)) ;;to TAG_5
                                      (108 (aload_2)) ;;at TAG_4
                                      (109 (areturn)) 
                                      (endofcode 110))
                                   (Exceptions )
                                   (StackMap )))
                        (method "areDifferentInstancesOfSameClassName"
                              (parameters (class "java.lang.Class") (class "java.lang.Class"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 25)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (if_acmpeq 23))  ;;to TAG_0
                                      (5 (aload_0)) 
                                      (6 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (9 (aload_1)) 
                                      (10 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (13 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (16 (ifeq 23))  ;;to TAG_0
                                      (19 (iconst_1)) 
                                      (20 (goto 24)) ;;to TAG_1
                                      (23 (iconst_0)) ;;at TAG_0
                                      (24 (ireturn)) ;;at TAG_1
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "referenceClass"
                              (parameters (class "clojure.lang.Symbol") (class "java.lang.Class"))
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 142)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (4 (ifnull 17)) ;;to TAG_0
                                      (7 (new (class "java.lang.IllegalArgumentException"))) 
                                      (10 (dup)) 
                                      (11 (ldc 0)) ;;STRING:: "Can\nt intern namespace-qualified symbol"
                                      (13 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (16 (athrow)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (invokevirtual (methodCP "getMappings" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (21 (astore_3)) 
                                      (22 (aload_3)) 
                                      (23 (aload_1)) 
                                      (24 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (29 (checkcast (class "java.lang.Class"))) 
                                      (32 (astore 4)) 
                                      (34 (aload 4)) ;;at TAG_3
                                      (36 (ifnull 48)) ;;to TAG_1
                                      (39 (aload 4)) 
                                      (41 (aload_2)) 
                                      (42 (invokestatic (methodCP "areDifferentInstancesOfSameClassName" "clojure.lang.Namespace" ((class "java.lang.Class") (class "java.lang.Class")) boolean))) 
                                      (45 (ifeq 89))  ;;to TAG_2
                                      (48 (aload_3)) ;;at TAG_1
                                      (49 (aload_1)) 
                                      (50 (aload_2)) 
                                      (51 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (56 (astore 5)) 
                                      (58 (aload_0)) 
                                      (59 (getfield (fieldCP "mappings" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (62 (aload_3)) 
                                      (63 (aload 5)) 
                                      (65 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (68 (pop)) 
                                      (69 (aload_0)) 
                                      (70 (invokevirtual (methodCP "getMappings" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (73 (astore_3)) 
                                      (74 (aload_3)) 
                                      (75 (aload_1)) 
                                      (76 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (81 (checkcast (class "java.lang.Class"))) 
                                      (84 (astore 4)) 
                                      (86 (goto 34)) ;;to TAG_3
                                      (89 (aload 4)) ;;at TAG_2
                                      (91 (aload_2)) 
                                      (92 (if_acmpne 98)) ;;to TAG_4
                                      (95 (aload 4)) 
                                      (97 (areturn)) 
                                      (98 (new (class "java.lang.IllegalStateException"))) ;;at TAG_4
                                      (101 (dup)) 
                                      (102 (new (class "java.lang.StringBuilder"))) 
                                      (105 (dup)) 
                                      (106 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (109 (aload_1)) 
                                      (110 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (113 (ldc 1)) ;;STRING:: " already refers to: "
                                      (115 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (118 (aload 4)) 
                                      (120 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (123 (ldc 2)) ;;STRING:: " in namespace: "
                                      (125 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (128 (aload_0)) 
                                      (129 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (132 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (135 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (138 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (141 (athrow)) 
                                      (endofcode 142))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unmap"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 59)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (4 (ifnull 17)) ;;to TAG_0
                                      (7 (new (class "java.lang.IllegalArgumentException"))) 
                                      (10 (dup)) 
                                      (11 (ldc 5)) ;;STRING:: "Can\nt unintern namespace-qualified symbol"
                                      (13 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (16 (athrow)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (invokevirtual (methodCP "getMappings" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (21 (astore_2)) 
                                      (22 (aload_2)) ;;at TAG_2
                                      (23 (aload_1)) 
                                      (24 (invokeinterface (methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (29 (ifeq 58)) ;;to TAG_1
                                      (32 (aload_2)) 
                                      (33 (aload_1)) 
                                      (34 (invokeinterface (methodCP "without" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 2)) 
                                      (39 (astore_3)) 
                                      (40 (aload_0)) 
                                      (41 (getfield (fieldCP "mappings" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (44 (aload_2)) 
                                      (45 (aload_3)) 
                                      (46 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (49 (pop)) 
                                      (50 (aload_0)) 
                                      (51 (invokevirtual (methodCP "getMappings" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (54 (astore_2)) 
                                      (55 (goto 22))  ;;to TAG_2
                                      (58 (return)) ;;at TAG_1
                                      (endofcode 59))
                                   (Exceptions )
                                   (StackMap )))
                        (method "importClass"
                              (parameters (class "clojure.lang.Symbol") (class "java.lang.Class"))
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokevirtual
					(methodCP "referenceClass" "clojure.lang.Namespace" ((class "clojure.lang.Symbol") (class "java.lang.Class")) (class "java.lang.Class"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "importClass"
                              (parameters (class "java.lang.Class"))
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokevirtual
					(methodCP "getName" "java.lang.Class" () (class "java.lang.String"))))
                                      (4 (astore_2))
                                      (5 (aload_0))
                                      (6 (aload_2))
                                      (7 (aload_2))
                                      (8 (bipush 46))
                                      (10 (invokevirtual
					(methodCP "lastIndexOf" "java.lang.String" (int) int)))
                                      (13 (iconst_1))
                                      (14 (iadd))
                                      (15 (invokevirtual
					(methodCP "substring" "java.lang.String" (int) (class "java.lang.String"))))
                                      (18 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (21 (aload_1))
                                      (22 (invokevirtual
					(methodCP "importClass" "clojure.lang.Namespace" ((class "clojure.lang.Symbol") (class "java.lang.Class")) (class "java.lang.Class"))))
                                      (25 (areturn))
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "refer"
                              (parameters (class "clojure.lang.Symbol") (class "clojure.lang.Var"))
                              (returntype . (class "clojure.lang.Var"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokevirtual
					(methodCP "reference" "clojure.lang.Namespace" ((class "clojure.lang.Symbol") (class "java.lang.Object")) (class "java.lang.Object"))))
                                      (6 (checkcast (class "clojure.lang.Var")))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "findOrCreate"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "clojure.lang.Namespace"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 48)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "namespaces" "clojure.lang.Namespace" (class "java.util.concurrent.ConcurrentHashMap")))) 
                                      (3 (aload_0)) 
                                      (4 (invokevirtual (methodCP "get" "java.util.concurrent.ConcurrentHashMap" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (7 (checkcast (class "clojure.lang.Namespace"))) 
                                      (10 (astore_1)) 
                                      (11 (aload_1)) 
                                      (12 (ifnull 17)) ;;to TAG_0
                                      (15 (aload_1)) 
                                      (16 (areturn)) 
                                      (17 (new (class "clojure.lang.Namespace"))) ;;at TAG_0
                                      (20 (dup)) 
                                      (21 (aload_0)) 
                                      (22 (invokespecial (methodCP "<init>" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) void))) 
                                      (25 (astore_2)) 
                                      (26 (getstatic (fieldCP "namespaces" "clojure.lang.Namespace" (class "java.util.concurrent.ConcurrentHashMap")))) 
                                      (29 (aload_0)) 
                                      (30 (aload_2)) 
                                      (31 (invokevirtual (methodCP "putIfAbsent" "java.util.concurrent.ConcurrentHashMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (34 (checkcast (class "clojure.lang.Namespace"))) 
                                      (37 (astore_1)) 
                                      (38 (aload_1)) 
                                      (39 (ifnonnull 46)) ;;to TAG_1
                                      (42 (aload_2)) 
                                      (43 (goto 47))  ;;to TAG_2
                                      (46 (aload_1)) ;;at TAG_1
                                      (47 (areturn)) ;;at TAG_2
                                      (endofcode 48))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remove"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "clojure.lang.Namespace"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 34)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getstatic (fieldCP "CLOJURE_NS" "clojure.lang.RT" (class "clojure.lang.Namespace")))) 
                                      (4 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (7 (invokevirtual (methodCP "equals" "clojure.lang.Symbol" ((class "java.lang.Object")) boolean))) 
                                      (10 (ifeq 23))  ;;to TAG_0
                                      (13 (new (class "java.lang.IllegalArgumentException"))) 
                                      (16 (dup)) 
                                      (17 (ldc 6)) ;;STRING:: "Cannot remove clojure namespace"
                                      (19 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (22 (athrow)) 
                                      (23 (getstatic (fieldCP "namespaces" "clojure.lang.Namespace" (class "java.util.concurrent.ConcurrentHashMap")))) ;;at TAG_0
                                      (26 (aload_0)) 
                                      (27 (invokevirtual (methodCP "remove" "java.util.concurrent.ConcurrentHashMap" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (30 (checkcast (class "clojure.lang.Namespace"))) 
                                      (33 (areturn)) 
                                      (endofcode 34))
                                   (Exceptions )
                                   (StackMap )))
                        (method "find"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "clojure.lang.Namespace"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "namespaces" "clojure.lang.Namespace" (class "java.util.concurrent.ConcurrentHashMap"))))
                                      (3 (aload_0))
                                      (4 (invokevirtual
					(methodCP "get" "java.util.concurrent.ConcurrentHashMap" ((class "java.lang.Object")) (class "java.lang.Object"))))
                                      (7 (checkcast (class "clojure.lang.Namespace")))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getMapping"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 17)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "mappings" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (4 (invokevirtual
					(methodCP "get" "java.util.concurrent.atomic.AtomicReference" () (class "java.lang.Object"))))
                                      (7 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (10 (aload_1))
                                      (11 (invokeinterface
					(methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2))
                                      (16 (areturn))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "findInternedVar"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "clojure.lang.Var"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 46)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "mappings" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (4 (invokevirtual (methodCP "get" "java.util.concurrent.atomic.AtomicReference" () (class "java.lang.Object")))) 
                                      (7 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (10 (aload_1)) 
                                      (11 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (16 (astore_2)) 
                                      (17 (aload_2)) 
                                      (18 (ifnull 44))  ;;to TAG_0
                                      (21 (aload_2)) 
                                      (22 (instanceof (class "clojure.lang.Var"))) 
                                      (25 (ifeq 44))  ;;to TAG_0
                                      (28 (aload_2)) 
                                      (29 (checkcast (class "clojure.lang.Var"))) 
                                      (32 (getfield (fieldCP "ns" "clojure.lang.Var" (class "clojure.lang.Namespace")))) 
                                      (35 (aload_0)) 
                                      (36 (if_acmpne 44))  ;;to TAG_0
                                      (39 (aload_2)) 
                                      (40 (checkcast (class "clojure.lang.Var"))) 
                                      (43 (areturn)) 
                                      (44 (aconst_null)) ;;at TAG_0
                                      (45 (areturn)) 
                                      (endofcode 46))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getAliases"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "aliases" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (4 (invokevirtual
					(methodCP "get" "java.util.concurrent.atomic.AtomicReference" () (class "java.lang.Object"))))
                                      (7 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lookupAlias"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . (class "clojure.lang.Namespace"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "getAliases" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap"))))
                                      (4 (astore_2))
                                      (5 (aload_2))
                                      (6 (aload_1))
                                      (7 (invokeinterface
					(methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2))
                                      (12 (checkcast (class "clojure.lang.Namespace")))
                                      (15 (areturn))
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addAlias"
                              (parameters (class "clojure.lang.Symbol") (class "clojure.lang.Namespace"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 131)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnull 8)) ;;to TAG_0
                                      (4 (aload_2)) 
                                      (5 (ifnonnull 18)) ;;to TAG_1
                                      (8 (new (class "java.lang.NullPointerException"))) ;;at TAG_0
                                      (11 (dup)) 
                                      (12 (ldc 7)) ;;STRING:: "Expecting Symbol + Namespace"
                                      (14 (invokespecial (methodCP "<init>" "java.lang.NullPointerException" ((class "java.lang.String")) void))) 
                                      (17 (athrow)) 
                                      (18 (aload_0)) ;;at TAG_1
                                      (19 (invokevirtual (methodCP "getAliases" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (22 (astore_3)) 
                                      (23 (aload_3)) ;;at TAG_3
                                      (24 (aload_1)) 
                                      (25 (invokeinterface (methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (30 (ifne 62))  ;;to TAG_2
                                      (33 (aload_3)) 
                                      (34 (aload_1)) 
                                      (35 (aload_2)) 
                                      (36 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (41 (astore 4)) 
                                      (43 (aload_0)) 
                                      (44 (getfield (fieldCP "aliases" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (47 (aload_3)) 
                                      (48 (aload 4)) 
                                      (50 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (53 (pop)) 
                                      (54 (aload_0)) 
                                      (55 (invokevirtual (methodCP "getAliases" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (58 (astore_3)) 
                                      (59 (goto 23)) ;;to TAG_3
                                      (62 (aload_3)) ;;at TAG_2
                                      (63 (aload_1)) 
                                      (64 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (69 (aload_2)) 
                                      (70 (invokevirtual (methodCP "equals" "java.lang.Object" ((class "java.lang.Object")) boolean))) 
                                      (73 (ifne 130)) ;;to TAG_4
                                      (76 (new (class "java.lang.IllegalStateException"))) 
                                      (79 (dup)) 
                                      (80 (new (class "java.lang.StringBuilder"))) 
                                      (83 (dup)) 
                                      (84 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (87 (ldc 8)) ;;STRING:: "Alias "
                                      (89 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (92 (aload_1)) 
                                      (93 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (96 (ldc 9)) ;;STRING:: " already exists in namespace "
                                      (98 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (101 (aload_0)) 
                                      (102 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (105 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (108 (ldc 10)) ;;STRING:: ", aliasing "
                                      (110 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (113 (aload_3)) 
                                      (114 (aload_1)) 
                                      (115 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (120 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (123 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (126 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (129 (athrow)) 
                                      (130 (return)) ;;at TAG_4
                                      (endofcode 131))
                                   (Exceptions )
                                   (StackMap )))
                        (method "removeAlias"
                              (parameters (class "clojure.lang.Symbol"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 42)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "getAliases" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) ;;at TAG_1
                                      (6 (aload_1)) 
                                      (7 (invokeinterface (methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (12 (ifeq 41))  ;;to TAG_0
                                      (15 (aload_2)) 
                                      (16 (aload_1)) 
                                      (17 (invokeinterface (methodCP "without" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 2)) 
                                      (22 (astore_3)) 
                                      (23 (aload_0)) 
                                      (24 (getfield (fieldCP "aliases" "clojure.lang.Namespace" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (27 (aload_2)) 
                                      (28 (aload_3)) 
                                      (29 (invokevirtual (methodCP "compareAndSet" "java.util.concurrent.atomic.AtomicReference" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (32 (pop)) 
                                      (33 (aload_0)) 
                                      (34 (invokevirtual (methodCP "getAliases" "clojure.lang.Namespace" () (class "clojure.lang.IPersistentMap")))) 
                                      (37 (astore_2)) 
                                      (38 (goto 5)) ;;to TAG_1
                                      (41 (return)) ;;at TAG_0
                                      (endofcode 42))
                                   (Exceptions )
                                   (StackMap )))
                        (method "readResolve"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol"))))
                                      (4 (invokestatic
					(methodCP "findOrCreate" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Namespace"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 11)
                                   (parsedcode
                                      (0 (new (class "java.util.concurrent.ConcurrentHashMap")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.util.concurrent.ConcurrentHashMap" () void)))
                                      (7 (putstatic (fieldCP "namespaces" "clojure.lang.Namespace" (class "java.util.concurrent.ConcurrentHashMap"))))
                                      (10 (return))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "java.io.Serializable")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))


(defconst *Namespace-class-table*
  (make-static-class-decls 
   *clojure.lang.Namespace*))

(defconst *package-name-map* 
  ("clojure.lang.Namespace" . "clojure.lang"))

