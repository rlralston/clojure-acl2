; PersistentStructMap$1-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentStructMap$1*
 (make-class-def
      '(class "clojure.lang.PersistentStructMap$1"
            "clojure.lang.AFn"
            (constant_pool
                        (STRING  "Accessor/struct mismatch"))
            (fields
                        (field "val$def" (class "clojure.lang.PersistentStructMap$Def") (accessflags  *class*  *final* ) -1)
                        (field "val$i" int (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.PersistentStructMap$Def") int)
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (putfield (fieldCP "val$def" "clojure.lang.PersistentStructMap$1" (class "clojure.lang.PersistentStructMap$Def"))))
                                      (5 (aload_0))
                                      (6 (iload_2))
                                      (7 (putfield (fieldCP "val$i" "clojure.lang.PersistentStructMap$1" int)))
                                      (10 (aload_0))
                                      (11 (invokespecial
					(methodCP "<init>" "clojure.lang.AFn" () void)))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "clojure.lang.PersistentStructMap"))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) 
                                      (6 (getfield (fieldCP "def" "clojure.lang.PersistentStructMap" (class "clojure.lang.PersistentStructMap$Def")))) 
                                      (9 (aload_0)) 
                                      (10 (getfield (fieldCP "val$def" "clojure.lang.PersistentStructMap$1" (class "clojure.lang.PersistentStructMap$Def")))) 
                                      (13 (if_acmpeq 22))  ;;to TAG_0
                                      (16 (ldc 0)) ;;STRING:: "Accessor/struct mismatch"
                                      (18 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (21 (athrow)) 
                                      (22 (aload_2)) ;;at TAG_0
                                      (23 (getfield (fieldCP "vals" "clojure.lang.PersistentStructMap" (array (class "java.lang.Object"))))) 
                                      (26 (aload_0)) 
                                      (27 (getfield (fieldCP "val$i" "clojure.lang.PersistentStructMap$1" int))) 
                                      (30 (aaload)) 
                                      (31 (areturn)) 
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "EnclosingMethod")
              (attribute "InnerClasses")))))


(defconst *PersistentStructMap$1-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentStructMap$1*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentStructMap$1" . "clojure.lang"))

