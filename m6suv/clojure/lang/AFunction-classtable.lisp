; AFunction-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(include-book "../../model-translation")

(defconst *clojure.lang.AFunction*
 (make-class-def
      '(class "clojure.lang.AFunction"
            "clojure.lang.AFn"
            (constant_pool)
            (fields
                        (field "__methodImplCache" (class "clojure.lang.MethodImplCache") (accessflags  *class*  *public*  *volatile* ) -1))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
                                        (methodCP "<init>" "clojure.lang.AFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "meta"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.AFunction$1")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (invokespecial
                                        (methodCP "<init>" "clojure.lang.AFunction$1" ((class "clojure.lang.AFunction") (class "clojure.lang.IPersistentMap")) void)))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "compare"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 59)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_4
                                      (1 (aload_1)) 
                                      (2 (aload_2)) 
                                      (3 (invokevirtual (methodCP "invoke" "clojure.lang.AFunction" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (6 (astore_3)) 
                                      (7 (aload_3)) 
                                      (8 (instanceof (class "java.lang.Boolean"))) 
                                      (11 (ifeq 41)) ;;to TAG_0
                                      (14 (aload_3)) 
                                      (15 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (18 (ifeq 23)) ;;to TAG_1
                                      (21 (iconst_m1)) 
                                      (22 (ireturn)) ;;at TAG_5
                                      (23 (aload_0)) ;;at TAG_1
                                      (24 (aload_2)) 
                                      (25 (aload_1)) 
                                      (26 (invokevirtual (methodCP "invoke" "clojure.lang.AFunction" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (29 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (32 (ifeq 39))  ;;to TAG_2
                                      (35 (iconst_1)) 
                                      (36 (goto 40)) ;;to TAG_3
                                      (39 (iconst_0)) ;;at TAG_2
                                      (40 (ireturn)) ;;at TAG_3
                                      (41 (aload_3)) ;;at TAG_0
                                      (42 (checkcast (class "java.lang.Number"))) 
                                      (45 (astore 4)) 
                                      (47 (aload 4)) 
                                      (49 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (52 (ireturn)) ;;at TAG_7
                                      (53 (astore_3)) ;;at TAG_6
                                      (54 (aload_3)) 
                                      (55 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (58 (athrow)) 
                                      (endofcode 59))
                                   (Exceptions 
                                     (handler 0 22  53 (class "java.lang.Exception"))
                                     (handler 23 40  53 (class "java.lang.Exception"))
                                     (handler 41 52  53 (class "java.lang.Exception")))
                                   (StackMap ))))
            (interfaces "clojure.lang.IObj" "java.util.Comparator" "clojure.lang.Fn" "java.io.Serializable")
            (accessflags  *abstract*  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))#|ACL2s-ToDo-Line|#



(defconst *AFunction-class-table*
  (make-static-class-decls 
   *clojure.lang.AFunction*))

(defconst *package-name-map* 
  ("clojure.lang.AFunction" . "clojure.lang"))

