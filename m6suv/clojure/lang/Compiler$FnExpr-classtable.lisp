; Compiler$FnExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$FnExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$FnExpr"
            "clojure.lang.Compiler$ObjExpr"
            (constant_pool
                        (STRING  "int getRequiredArity()")
                        (STRING  "once")
                        (STRING  "$")
                        (STRING  ".")
                        (STRING  "_DOT_")
                        (STRING  "__")
                        (STRING  "")
                        (STRING  "fn__")
                        (STRING  "Can\nt have more than 1 variadic overload")
                        (STRING  "Can\nt have 2 overloads with same arity")
                        (STRING  "Can\nt have fixed arity function with more params than variadic function")
                        (STRING  "static fns can\nt be closures")
                        (STRING  "clojure/lang/RestFn")
                        (STRING  "clojure/lang/AFunction"))
            (fields
                        (field "aFnType" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "restFnType" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "variadicMethod" (class "clojure.lang.Compiler$FnMethod") (accessflags  *class* ) -1)
                        (field "methods" (class "clojure.lang.IPersistentCollection") (accessflags  *class* ) -1)
                        (field "hasPrimSigs" boolean (accessflags  *class*  *private* ) -1)
                        (field "hasMeta" boolean (accessflags  *class*  *private* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokespecial
					(methodCP "<init>" "clojure.lang.Compiler$ObjExpr" ((class "java.lang.Object")) void)))
                                      (5 (aload_0))
                                      (6 (aconst_null))
                                      (7 (putfield (fieldCP "variadicMethod" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.Compiler$FnMethod"))))
                                      (10 (return))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "supportsMeta"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "hasMeta" "clojure.lang.Compiler$FnExpr" boolean)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 4)
                                   (parsedcode
                                      (0 (ldc_w ))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitMethods"
                              (parameters (class "clojure.asm.ClassVisitor"))
                              (returntype . void)
                              (accessflags  *class*  *protected* )
                              (code
                                   (max_stack . 7) (max_locals . 4) (code_length . 89)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "methods" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.IPersistentCollection")))) 
                                      (4 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (7 (astore_2)) 
                                      (8 (aload_2)) ;;at TAG_1
                                      (9 (ifnull 38)) ;;to TAG_0
                                      (12 (aload_2)) 
                                      (13 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (18 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (21 (astore_3)) 
                                      (22 (aload_3)) 
                                      (23 (aload_0)) 
                                      (24 (aload_1)) 
                                      (25 (invokevirtual (methodCP "emit" "clojure.lang.Compiler$ObjMethod" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.ClassVisitor")) void))) 
                                      (28 (aload_2)) 
                                      (29 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (34 (astore_2)) 
                                      (35 (goto 8)) ;;to TAG_1
                                      (38 (aload_0)) ;;at TAG_0
                                      (39 (invokevirtual (methodCP "isVariadic" "clojure.lang.Compiler$FnExpr" () boolean))) 
                                      (42 (ifeq 88))  ;;to TAG_2
                                      (45 (new (class "clojure.asm.commons.GeneratorAdapter"))) 
                                      (48 (dup)) 
                                      (49 (iconst_1)) 
                                      (50 (ldc 0)) ;;STRING:: "int getRequiredArity()"
                                      (52 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (55 (aconst_null)) 
                                      (56 (aconst_null)) 
                                      (57 (aload_1)) 
                                      (58 (invokespecial (methodCP "<init>" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.commons.Method") (class "java.lang.String") (array (class "clojure.asm.Type")) (class "clojure.asm.ClassVisitor")) void))) 
                                      (61 (astore_2)) 
                                      (62 (aload_2)) 
                                      (63 (invokevirtual (methodCP "visitCode" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (66 (aload_2)) 
                                      (67 (aload_0)) 
                                      (68 (getfield (fieldCP "variadicMethod" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.Compiler$FnMethod")))) 
                                      (71 (getfield (fieldCP "reqParms" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (74 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (77 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (80 (aload_2)) 
                                      (81 (invokevirtual (methodCP "returnValue" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (84 (aload_2)) 
                                      (85 (invokevirtual (methodCP "endMethod" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (88 (return)) ;;at TAG_2
                                      (endofcode 89))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.ISeq") (class "java.lang.String"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 15) (code_length . 1110)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (astore_3)) 
                                      (2 (new (class "clojure.lang.Compiler$FnExpr"))) 
                                      (5 (dup)) 
                                      (6 (aload_1)) 
                                      (7 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (10 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$FnExpr" ((class "java.lang.Object")) void))) 
                                      (13 (astore 4)) 
                                      (15 (aload 4)) 
                                      (17 (aload_1)) 
                                      (18 (putfield (fieldCP "src" "clojure.lang.Compiler$FnExpr" (class "java.lang.Object")))) 
                                      (21 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (24 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (27 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (30 (astore 5)) 
                                      (32 (aload_1)) 
                                      (33 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (38 (checkcast (class "clojure.lang.IMeta"))) 
                                      (41 (invokeinterface (methodCP "meta" "clojure.lang.IMeta" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (46 (ifnull 75))  ;;to TAG_0
                                      (49 (aload 4)) 
                                      (51 (aload_1)) 
                                      (52 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (57 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (60 (aconst_null)) 
                                      (61 (ldc 1)) ;;STRING:: "once"
                                      (63 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword")))) 
                                      (66 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (69 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (72 (putfield (fieldCP "onceOnly" "clojure.lang.Compiler$FnExpr" boolean))) 
                                      (75 (aload 5)) ;;at TAG_0
                                      (77 (ifnull 109)) ;;to TAG_1
                                      (80 (new (class "java.lang.StringBuilder"))) 
                                      (83 (dup)) 
                                      (84 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (87 (aload 5)) 
                                      (89 (getfield (fieldCP "objx" "clojure.lang.Compiler$ObjMethod" (class "clojure.lang.Compiler$ObjExpr")))) 
                                      (92 (getfield (fieldCP "name" "clojure.lang.Compiler$ObjExpr" (class "java.lang.String")))) 
                                      (95 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (98 (ldc 2)) ;;STRING:: "$"
                                      (100 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (103 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (106 (goto 139)) ;;to TAG_2
                                      (109 (new (class "java.lang.StringBuilder"))) ;;at TAG_1
                                      (112 (dup)) 
                                      (113 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (116 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) 
                                      (119 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (122 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (125 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (128 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (131 (ldc 2)) ;;STRING:: "$"
                                      (133 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (136 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (139 (astore 6)) ;;at TAG_2
                                      (141 (aload_1)) 
                                      (142 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (145 (instanceof (class "clojure.lang.Symbol"))) 
                                      (148 (ifeq 162)) ;;to TAG_3
                                      (151 (aload_1)) 
                                      (152 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (155 (checkcast (class "clojure.lang.Symbol"))) 
                                      (158 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (161 (astore_2)) 
                                      (162 (aload_2)) ;;at TAG_3
                                      (163 (ifnull 227)) ;;to TAG_4
                                      (166 (new (class "java.lang.StringBuilder"))) 
                                      (169 (dup)) 
                                      (170 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (173 (aload_2)) 
                                      (174 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (177 (ldc 3)) ;;STRING:: "."
                                      (179 (ldc 4)) ;;STRING:: "_DOT_"
                                      (181 (invokevirtual (methodCP "replace" "java.lang.String" ((class "java.lang.CharSequence") (class "java.lang.CharSequence")) (class "java.lang.String")))) 
                                      (184 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (187 (aload 5)) 
                                      (189 (ifnull 216)) ;;to TAG_5
                                      (192 (new (class "java.lang.StringBuilder"))) 
                                      (195 (dup)) 
                                      (196 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (199 (ldc 5)) ;;STRING:: "__"
                                      (201 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (204 (invokestatic (methodCP "nextID" "clojure.lang.RT" () int))) 
                                      (207 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (210 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (213 (goto 218)) ;;to TAG_6
                                      (216 (ldc 6)) ;;at TAG_5;;STRING:: ""
                                      (218 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) ;;at TAG_6
                                      (221 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (224 (goto 248)) ;;to TAG_7
                                      (227 (new (class "java.lang.StringBuilder"))) ;;at TAG_4
                                      (230 (dup)) 
                                      (231 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (234 (ldc 7)) ;;STRING:: "fn__"
                                      (236 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (239 (invokestatic (methodCP "nextID" "clojure.lang.RT" () int))) 
                                      (242 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (245 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (248 (astore 7)) ;;at TAG_7
                                      (250 (aload 4)) 
                                      (252 (new (class "java.lang.StringBuilder"))) 
                                      (255 (dup)) 
                                      (256 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (259 (aload 6)) 
                                      (261 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (264 (aload 7)) 
                                      (266 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (269 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (272 (putfield (fieldCP "name" "clojure.lang.Compiler$FnExpr" (class "java.lang.String")))) 
                                      (275 (aload 4)) 
                                      (277 (aload 4)) 
                                      (279 (getfield (fieldCP "name" "clojure.lang.Compiler$FnExpr" (class "java.lang.String")))) 
                                      (282 (bipush 46)) 
                                      (284 (bipush 47)) 
                                      (286 (invokevirtual (methodCP "replace" "java.lang.String" (char char) (class "java.lang.String")))) 
                                      (289 (putfield (fieldCP "internalName" "clojure.lang.Compiler$FnExpr" (class "java.lang.String")))) 
                                      (292 (aload 4)) 
                                      (294 (aload 4)) 
                                      (296 (getfield (fieldCP "internalName" "clojure.lang.Compiler$FnExpr" (class "java.lang.String")))) 
                                      (299 (invokestatic (methodCP "getObjectType" "clojure.asm.Type" ((class "java.lang.String")) (class "clojure.asm.Type")))) 
                                      (302 (putfield (fieldCP "objtype" "clojure.lang.Compiler$FnExpr" (class "clojure.asm.Type")))) 
                                      (305 (new (class "java.util.ArrayList"))) 
                                      (308 (dup)) 
                                      (309 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (312 (astore 8)) 
                                      (314 (bipush 16)) ;;at TAG_40
                                      (316 (anewarray (class "java.lang.Object"))) 
                                      (319 (dup)) 
                                      (320 (iconst_0)) 
                                      (321 (getstatic (fieldCP "CONSTANTS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (324 (aastore)) 
                                      (325 (dup)) 
                                      (326 (iconst_1)) 
                                      (327 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (330 (aastore)) 
                                      (331 (dup)) 
                                      (332 (iconst_2)) 
                                      (333 (getstatic (fieldCP "CONSTANT_IDS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (336 (aastore)) 
                                      (337 (dup)) 
                                      (338 (iconst_3)) 
                                      (339 (new (class "java.util.IdentityHashMap"))) 
                                      (342 (dup)) 
                                      (343 (invokespecial (methodCP "<init>" "java.util.IdentityHashMap" () void))) 
                                      (346 (aastore)) 
                                      (347 (dup)) 
                                      (348 (iconst_4)) 
                                      (349 (getstatic (fieldCP "KEYWORDS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (352 (aastore)) 
                                      (353 (dup)) 
                                      (354 (iconst_5)) 
                                      (355 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (358 (aastore)) 
                                      (359 (dup)) 
                                      (360 (bipush 6)) 
                                      (362 (getstatic (fieldCP "VARS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (365 (aastore)) 
                                      (366 (dup)) 
                                      (367 (bipush 7)) 
                                      (369 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (372 (aastore)) 
                                      (373 (dup)) 
                                      (374 (bipush 8)) 
                                      (376 (getstatic (fieldCP "KEYWORD_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (379 (aastore)) 
                                      (380 (dup)) 
                                      (381 (bipush 9)) 
                                      (383 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (386 (aastore)) 
                                      (387 (dup)) 
                                      (388 (bipush 10)) 
                                      (390 (getstatic (fieldCP "PROTOCOL_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (393 (aastore)) 
                                      (394 (dup)) 
                                      (395 (bipush 11)) 
                                      (397 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (400 (aastore)) 
                                      (401 (dup)) 
                                      (402 (bipush 12)) 
                                      (404 (getstatic (fieldCP "VAR_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (407 (aastore)) 
                                      (408 (dup)) 
                                      (409 (bipush 13)) 
                                      (411 (invokestatic (methodCP "emptyVarCallSites" "clojure.lang.Compiler" () (class "clojure.lang.IPersistentCollection")))) 
                                      (414 (aastore)) 
                                      (415 (dup)) 
                                      (416 (bipush 14)) 
                                      (418 (getstatic (fieldCP "NO_RECUR" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (421 (aastore)) 
                                      (422 (dup)) 
                                      (423 (bipush 15)) 
                                      (425 (aconst_null)) 
                                      (426 (aastore)) 
                                      (427 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (430 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (433 (aload_1)) 
                                      (434 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (437 (instanceof (class "clojure.lang.Symbol"))) 
                                      (440 (ifeq 482)) ;;to TAG_8
                                      (443 (aload_1)) 
                                      (444 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (447 (checkcast (class "clojure.lang.Symbol"))) 
                                      (450 (astore 9)) 
                                      (452 (aload 4)) 
                                      (454 (aload 9)) 
                                      (456 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (459 (putfield (fieldCP "thisName" "clojure.lang.Compiler$FnExpr" (class "java.lang.String")))) 
                                      (462 (aload 4)) 
                                      (464 (iconst_0)) 
                                      (465 (putfield (fieldCP "isStatic" "clojure.lang.Compiler$FnExpr" boolean))) 
                                      (468 (getstatic (fieldCP "FN" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (471 (aload_1)) 
                                      (472 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (475 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (478 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (481 (astore_1)) 
                                      (482 (aload_1)) ;;at TAG_8
                                      (483 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (486 (instanceof (class "clojure.lang.IPersistentVector"))) 
                                      (489 (ifeq 503)) ;;to TAG_9
                                      (492 (getstatic (fieldCP "FN" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (495 (aload_1)) 
                                      (496 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (499 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (502 (astore_1)) 
                                      (503 (aload 4)) ;;at TAG_9
                                      (505 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (508 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (511 (checkcast (class "java.lang.Integer"))) 
                                      (514 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (517 (putfield (fieldCP "line" "clojure.lang.Compiler$FnExpr" int))) 
                                      (520 (aload 4)) 
                                      (522 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (525 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (528 (checkcast (class "java.lang.Integer"))) 
                                      (531 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (534 (putfield (fieldCP "column" "clojure.lang.Compiler$FnExpr" int))) 
                                      (537 (bipush 21)) 
                                      (539 (anewarray (class "clojure.lang.Compiler$FnMethod"))) 
                                      (542 (astore 9)) 
                                      (544 (aconst_null)) 
                                      (545 (astore 10)) 
                                      (547 (aload_1)) 
                                      (548 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (551 (astore 11)) 
                                      (553 (aload 11)) ;;at TAG_16
                                      (555 (ifnull 669)) ;;to TAG_10
                                      (558 (aload 4)) 
                                      (560 (aload 11)) 
                                      (562 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (565 (checkcast (class "clojure.lang.ISeq"))) 
                                      (568 (aload 4)) 
                                      (570 (getfield (fieldCP "isStatic" "clojure.lang.Compiler$FnExpr" boolean))) 
                                      (573 (invokestatic (methodCP "parse" "clojure.lang.Compiler$FnMethod" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.lang.ISeq") boolean) (class "clojure.lang.Compiler$FnMethod")))) 
                                      (576 (astore 12)) 
                                      (578 (aload 12)) 
                                      (580 (invokevirtual (methodCP "isVariadic" "clojure.lang.Compiler$FnMethod" () boolean))) 
                                      (583 (ifeq 604)) ;;to TAG_11
                                      (586 (aload 10)) 
                                      (588 (ifnonnull 598)) ;;to TAG_12
                                      (591 (aload 12)) 
                                      (593 (astore 10)) 
                                      (595 (goto 640)) ;;to TAG_13
                                      (598 (ldc 8)) ;;at TAG_12;;STRING:: "Can\nt have more than 1 variadic overload"
                                      (600 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (603 (athrow)) 
                                      (604 (aload 9)) ;;at TAG_11
                                      (606 (aload 12)) 
                                      (608 (getfield (fieldCP "reqParms" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (611 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (614 (aaload)) 
                                      (615 (ifnonnull 634)) ;;to TAG_14
                                      (618 (aload 9)) 
                                      (620 (aload 12)) 
                                      (622 (getfield (fieldCP "reqParms" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (625 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (628 (aload 12)) 
                                      (630 (aastore)) 
                                      (631 (goto 640)) ;;to TAG_13
                                      (634 (ldc 9)) ;;at TAG_14;;STRING:: "Can\nt have 2 overloads with same arity"
                                      (636 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (639 (athrow)) 
                                      (640 (aload 12)) ;;at TAG_13
                                      (642 (getfield (fieldCP "prim" "clojure.lang.Compiler$FnMethod" (class "java.lang.String")))) 
                                      (645 (ifnull 659)) ;;to TAG_15
                                      (648 (aload 8)) 
                                      (650 (aload 12)) 
                                      (652 (getfield (fieldCP "prim" "clojure.lang.Compiler$FnMethod" (class "java.lang.String")))) 
                                      (655 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (658 (pop)) 
                                      (659 (aload 11)) ;;at TAG_15
                                      (661 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (664 (astore 11)) 
                                      (666 (goto 553)) ;;to TAG_16
                                      (669 (aload 10)) ;;at TAG_10
                                      (671 (ifnull 713)) ;;to TAG_17
                                      (674 (aload 10)) 
                                      (676 (getfield (fieldCP "reqParms" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (679 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (682 (iconst_1)) 
                                      (683 (iadd)) 
                                      (684 (istore 11)) 
                                      (686 (iload 11)) ;;at TAG_19
                                      (688 (bipush 20)) 
                                      (690 (if_icmpgt 713)) ;;to TAG_17
                                      (693 (aload 9)) 
                                      (695 (iload 11)) 
                                      (697 (aaload)) 
                                      (698 (ifnull 707)) ;;to TAG_18
                                      (701 (ldc 10)) ;;STRING:: "Can\nt have fixed arity function with more params than variadic function"
                                      (703 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (706 (athrow)) 
                                      (707 (iinc 11 1)) ;;at TAG_18
                                      (710 (goto 686)) ;;to TAG_19
                                      (713 (aload 4)) ;;at TAG_17
                                      (715 (getfield (fieldCP "isStatic" "clojure.lang.Compiler$FnExpr" boolean))) 
                                      (718 (ifeq 744)) ;;to TAG_20
                                      (721 (aload 4)) 
                                      (723 (getfield (fieldCP "closes" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.IPersistentMap")))) 
                                      (726 (invokeinterface (methodCP "count" "clojure.lang.IPersistentMap" () int) 1)) 
                                      (731 (ifle 744)) ;;to TAG_20
                                      (734 (new (class "java.lang.IllegalArgumentException"))) 
                                      (737 (dup)) 
                                      (738 (ldc 11)) ;;STRING:: "static fns can\nt be closures"
                                      (740 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (743 (athrow)) 
                                      (744 (aconst_null)) ;;at TAG_20
                                      (745 (astore 11)) 
                                      (747 (iconst_0)) 
                                      (748 (istore 12)) 
                                      (750 (iload 12)) ;;at TAG_23
                                      (752 (aload 9)) 
                                      (754 (arraylength)) 
                                      (755 (if_icmpge 784)) ;;to TAG_21
                                      (758 (aload 9)) 
                                      (760 (iload 12)) 
                                      (762 (aaload)) 
                                      (763 (ifnull 778)) ;;to TAG_22
                                      (766 (aload 11)) 
                                      (768 (aload 9)) 
                                      (770 (iload 12)) 
                                      (772 (aaload)) 
                                      (773 (invokestatic (methodCP "conj" "clojure.lang.RT" ((class "clojure.lang.IPersistentCollection") (class "java.lang.Object")) (class "clojure.lang.IPersistentCollection")))) 
                                      (776 (astore 11)) 
                                      (778 (iinc 12 1)) ;;at TAG_22
                                      (781 (goto 750)) ;;to TAG_23
                                      (784 (aload 10)) ;;at TAG_21
                                      (786 (ifnull 798)) ;;to TAG_24
                                      (789 (aload 11)) 
                                      (791 (aload 10)) 
                                      (793 (invokestatic (methodCP "conj" "clojure.lang.RT" ((class "clojure.lang.IPersistentCollection") (class "java.lang.Object")) (class "clojure.lang.IPersistentCollection")))) 
                                      (796 (astore 11)) 
                                      (798 (aload 4)) ;;at TAG_24
                                      (800 (aload 11)) 
                                      (802 (putfield (fieldCP "methods" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.IPersistentCollection")))) 
                                      (805 (aload 4)) 
                                      (807 (aload 10)) 
                                      (809 (putfield (fieldCP "variadicMethod" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.Compiler$FnMethod")))) 
                                      (812 (aload 4)) 
                                      (814 (getstatic (fieldCP "KEYWORDS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (817 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (820 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (823 (putfield (fieldCP "keywords" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.IPersistentMap")))) 
                                      (826 (aload 4)) 
                                      (828 (getstatic (fieldCP "VARS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (831 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (834 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (837 (putfield (fieldCP "vars" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.IPersistentMap")))) 
                                      (840 (aload 4)) 
                                      (842 (getstatic (fieldCP "CONSTANTS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (845 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (848 (checkcast (class "clojure.lang.PersistentVector"))) 
                                      (851 (putfield (fieldCP "constants" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.PersistentVector")))) 
                                      (854 (aload 4)) 
                                      (856 (getstatic (fieldCP "KEYWORD_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (859 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (862 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (865 (putfield (fieldCP "keywordCallsites" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (868 (aload 4)) 
                                      (870 (getstatic (fieldCP "PROTOCOL_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (873 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (876 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (879 (putfield (fieldCP "protocolCallsites" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (882 (aload 4)) 
                                      (884 (getstatic (fieldCP "VAR_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (887 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (890 (checkcast (class "clojure.lang.IPersistentSet"))) 
                                      (893 (putfield (fieldCP "varCallsites" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.IPersistentSet")))) 
                                      (896 (aload 4)) 
                                      (898 (invokestatic (methodCP "nextID" "clojure.lang.RT" () int))) 
                                      (901 (putfield (fieldCP "constantsID" "clojure.lang.Compiler$FnExpr" int))) 
                                      (904 (jsr 918)) ;;to TAG_25
                                      (907 (goto 925)) ;;to TAG_26;;at TAG_41
                                      (910 (astore 13)) ;;at TAG_42
                                      (912 (jsr 918)) ;;to TAG_25
                                      (915 (aload 13)) ;;at TAG_43
                                      (917 (athrow)) 
                                      (918 (astore 14)) ;;at TAG_25
                                      (920 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (923 (ret 14)) 
                                      (925 (aload 4)) ;;at TAG_26
                                      (927 (aload 8)) 
                                      (929 (invokevirtual (methodCP "size" "java.util.ArrayList" () int))) 
                                      (932 (ifle 939)) ;;to TAG_27
                                      (935 (iconst_1)) 
                                      (936 (goto 940)) ;;to TAG_28
                                      (939 (iconst_0)) ;;at TAG_27
                                      (940 (putfield (fieldCP "hasPrimSigs" "clojure.lang.Compiler$FnExpr" boolean))) ;;at TAG_28
                                      (943 (aload_3)) 
                                      (944 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (947 (astore 9)) 
                                      (949 (aload 9)) 
                                      (951 (ifnull 982)) ;;to TAG_29
                                      (954 (aload 9)) 
                                      (956 (getstatic (fieldCP "LINE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (959 (invokeinterface (methodCP "without" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 2)) 
                                      (964 (getstatic (fieldCP "COLUMN_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (967 (invokeinterface (methodCP "without" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 2)) 
                                      (972 (getstatic (fieldCP "FILE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (975 (invokeinterface (methodCP "without" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 2)) 
                                      (980 (astore 9)) 
                                      (982 (aload 4)) ;;at TAG_29
                                      (984 (aload 9)) 
                                      (986 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (989 (ifle 996)) ;;to TAG_30
                                      (992 (iconst_1)) 
                                      (993 (goto 997)) ;;to TAG_31
                                      (996 (iconst_0)) ;;at TAG_30
                                      (997 (putfield (fieldCP "hasMeta" "clojure.lang.Compiler$FnExpr" boolean))) ;;at TAG_31
                                      (1000 (aload 4)) ;;at TAG_44
                                      (1002 (aload 4)) 
                                      (1004 (invokevirtual (methodCP "isVariadic" "clojure.lang.Compiler$FnExpr" () boolean))) 
                                      (1007 (ifeq 1015)) ;;to TAG_32
                                      (1010 (ldc 12)) ;;STRING:: "clojure/lang/RestFn"
                                      (1012 (goto 1017)) ;;to TAG_33
                                      (1015 (ldc 13)) ;;at TAG_32;;STRING:: "clojure/lang/AFunction"
                                      (1017 (aload 8)) ;;at TAG_33
                                      (1019 (invokevirtual (methodCP "size" "java.util.ArrayList" () int))) 
                                      (1022 (ifne 1029)) ;;to TAG_34
                                      (1025 (aconst_null)) 
                                      (1026 (goto 1045)) ;;to TAG_35
                                      (1029 (aload 8)) ;;at TAG_34
                                      (1031 (aload 8)) 
                                      (1033 (invokevirtual (methodCP "size" "java.util.ArrayList" () int))) 
                                      (1036 (anewarray (class "java.lang.String"))) 
                                      (1039 (invokevirtual (methodCP "toArray" "java.util.ArrayList" ((array (class "java.lang.Object"))) (array (class "java.lang.Object"))))) 
                                      (1042 (checkcast (array (class "java.lang.String")))) 
                                      (1045 (aload 4)) ;;at TAG_35
                                      (1047 (getfield (fieldCP "onceOnly" "clojure.lang.Compiler$FnExpr" boolean))) 
                                      (1050 (invokevirtual (methodCP "compile" "clojure.lang.Compiler$FnExpr" ((class "java.lang.String") (array (class "java.lang.String")) boolean) void))) 
                                      (1053 (goto 1064)) ;;to TAG_36;;at TAG_45
                                      (1056 (astore 10)) ;;at TAG_46
                                      (1058 (aload 10)) 
                                      (1060 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (1063 (athrow)) 
                                      (1064 (aload 4)) ;;at TAG_36
                                      (1066 (invokevirtual (methodCP "getCompiledClass" "clojure.lang.Compiler$FnExpr" () (class "java.lang.Class")))) 
                                      (1069 (pop)) 
                                      (1070 (aload 4)) 
                                      (1072 (invokevirtual (methodCP "supportsMeta" "clojure.lang.Compiler$FnExpr" () boolean))) 
                                      (1075 (ifeq 1107)) ;;to TAG_37
                                      (1078 (new (class "clojure.lang.Compiler$MetaExpr"))) 
                                      (1081 (dup)) 
                                      (1082 (aload 4)) 
                                      (1084 (aload_0)) 
                                      (1085 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (1088 (if_acmpne 1095)) ;;to TAG_38
                                      (1091 (aload_0)) 
                                      (1092 (goto 1098)) ;;to TAG_39
                                      (1095 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_38
                                      (1098 (aload 9)) ;;at TAG_39
                                      (1100 (invokestatic (methodCP "parse" "clojure.lang.Compiler$MapExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.IPersistentMap")) (class "clojure.lang.Compiler$Expr")))) 
                                      (1103 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$MetaExpr" ((class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (1106 (areturn)) 
                                      (1107 (aload 4)) ;;at TAG_37
                                      (1109 (areturn)) 
                                      (endofcode 1110))
                                   (Exceptions 
                                     (handler 314 907  910 (class "java.lang.Throwable"))
                                     (handler 910 915  910 (class "java.lang.Throwable"))
                                     (handler 1000 1053  1056 (class "java.io.IOException")))
                                   (StackMap )))
                        (method "variadicMethod"
                              (parameters )
                              (returntype . (class "clojure.lang.Compiler$ObjMethod"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "variadicMethod" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.Compiler$FnMethod"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isVariadic"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "variadicMethod" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.Compiler$FnMethod")))) 
                                      (4 (ifnull 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "methods"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "methods" "clojure.lang.Compiler$FnExpr" (class "clojure.lang.IPersistentCollection"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitForDefn"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C"))))
                                      (4 (aload_1))
                                      (5 (aload_2))
                                      (6 (invokevirtual
					(methodCP "emit" "clojure.lang.Compiler$FnExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void)))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 19)
                                   (parsedcode
                                      (0 (ldc_w ))
                                      (3 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (6 (putstatic (fieldCP "aFnType" "clojure.lang.Compiler$FnExpr" (class "clojure.asm.Type"))))
                                      (9 (ldc_w ))
                                      (12 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (15 (putstatic (fieldCP "restFnType" "clojure.lang.Compiler$FnExpr" (class "clojure.asm.Type"))))
                                      (18 (return))
                                      (endofcode 19))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$FnExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$FnExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$FnExpr" . "clojure.lang"))

