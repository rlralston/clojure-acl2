; Compiler$HostExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$HostExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$HostExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "TRUE")
                        (STRING  "FALSE")
                        (STRING  "Number num(long)")
                        (STRING  "int uncheckedIntCast(Object)")
                        (STRING  "float uncheckedFloatCast(Object)")
                        (STRING  "double uncheckedDoubleCast(Object)")
                        (STRING  "long uncheckedLongCast(Object)")
                        (STRING  "byte uncheckedByteCast(Object)")
                        (STRING  "short uncheckedShortCast(Object)")
                        (STRING  "int intCast(Object)")
                        (STRING  "float floatCast(Object)")
                        (STRING  "double doubleCast(Object)")
                        (STRING  "long longCast(Object)")
                        (STRING  "byte byteCast(Object)")
                        (STRING  "short shortCast(Object)")
                        (STRING  "objects")
                        (STRING  "ints")
                        (STRING  "longs")
                        (STRING  "floats")
                        (STRING  "doubles")
                        (STRING  "chars")
                        (STRING  "shorts")
                        (STRING  "bytes")
                        (STRING  "booleans")
                        (STRING  "int")
                        (STRING  "long")
                        (STRING  "float")
                        (STRING  "double")
                        (STRING  "char")
                        (STRING  "short")
                        (STRING  "byte")
                        (STRING  "boolean")
                        (STRING  "Unable to resolve classname: ")
                        (STRING  "char charValue()")
                        (STRING  "boolean booleanValue()")
                        (STRING  "Character valueOf(char)")
                        (STRING  "Integer valueOf(int)")
                        (STRING  "Long valueOf(long)")
                        (STRING  "Float valueOf(float)")
                        (STRING  "Double valueOf(double)")
                        (STRING  "Short valueOf(short)")
                        (STRING  "Byte valueOf(byte)")
                        (STRING  "int intValue()")
                        (STRING  "long longValue()")
                        (STRING  "float floatValue()")
                        (STRING  "double doubleValue()")
                        (STRING  "byte byteValue()")
                        (STRING  "short shortValue()")
                        (STRING  "clojure.lang.Num from(int)")
                        (STRING  "clojure.lang.Num from(long)")
                        (STRING  "clojure.lang.Num from(double)"))
            (fields
                        (field "BOOLEAN_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "CHAR_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "INTEGER_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "LONG_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "FLOAT_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "DOUBLE_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "SHORT_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "BYTE_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "NUMBER_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "charValueMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "booleanValueMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "charValueOfMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "intValueOfMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "longValueOfMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "floatValueOfMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "doubleValueOfMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "shortValueOfMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "byteValueOfMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "intValueMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "longValueMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "floatValueMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "doubleValueMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "byteValueMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "shortValueMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "fromIntMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "fromLongMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "fromDoubleMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitBoxReturn"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class"))
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 238)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (invokevirtual (methodCP "isPrimitive" "java.lang.Class" () boolean))) 
                                      (4 (ifeq 237)) ;;to TAG_0
                                      (7 (aload_2)) 
                                      (8 (getstatic (fieldCP "TYPE" "java.lang.Boolean" (class "java.lang.Class")))) 
                                      (11 (if_acmpne 77))  ;;to TAG_1
                                      (14 (aload_1)) 
                                      (15 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (18 (astore_3)) 
                                      (19 (aload_1)) 
                                      (20 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (23 (astore 4)) 
                                      (25 (aload_1)) 
                                      (26 (sipush 153)) 
                                      (29 (aload_3)) 
                                      (30 (invokevirtual (methodCP "ifZCmp" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (33 (aload_1)) 
                                      (34 (getstatic (fieldCP "BOOLEAN_OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (37 (ldc 0)) ;;STRING:: "TRUE"
                                      (39 (getstatic (fieldCP "BOOLEAN_OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (42 (invokevirtual (methodCP "getStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "java.lang.String") (class "clojure.asm.Type")) void))) 
                                      (45 (aload_1)) 
                                      (46 (aload 4)) 
                                      (48 (invokevirtual (methodCP "goTo" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (51 (aload_1)) 
                                      (52 (aload_3)) 
                                      (53 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (56 (aload_1)) 
                                      (57 (getstatic (fieldCP "BOOLEAN_OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (60 (ldc 1)) ;;STRING:: "FALSE"
                                      (62 (getstatic (fieldCP "BOOLEAN_OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (65 (invokevirtual (methodCP "getStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "java.lang.String") (class "clojure.asm.Type")) void))) 
                                      (68 (aload_1)) 
                                      (69 (aload 4)) 
                                      (71 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (74 (goto 237)) ;;to TAG_0
                                      (77 (aload_2)) ;;at TAG_1
                                      (78 (getstatic (fieldCP "TYPE" "java.lang.Void" (class "java.lang.Class")))) 
                                      (81 (if_acmpne 98)) ;;to TAG_2
                                      (84 (getstatic (fieldCP "NIL_EXPR" "clojure.lang.Compiler" (class "clojure.lang.Compiler$NilExpr")))) 
                                      (87 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (90 (aload_0)) 
                                      (91 (aload_1)) 
                                      (92 (invokevirtual (methodCP "emit" "clojure.lang.Compiler$NilExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (95 (goto 237)) ;;to TAG_0
                                      (98 (aload_2)) ;;at TAG_2
                                      (99 (getstatic (fieldCP "TYPE" "java.lang.Character" (class "java.lang.Class")))) 
                                      (102 (if_acmpne 118)) ;;to TAG_3
                                      (105 (aload_1)) 
                                      (106 (getstatic (fieldCP "CHAR_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type")))) 
                                      (109 (getstatic (fieldCP "charValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method")))) 
                                      (112 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (115 (goto 237)) ;;to TAG_0
                                      (118 (aload_2)) ;;at TAG_3
                                      (119 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (122 (if_acmpne 138)) ;;to TAG_4
                                      (125 (aload_1)) 
                                      (126 (getstatic (fieldCP "INTEGER_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type")))) 
                                      (129 (getstatic (fieldCP "intValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method")))) 
                                      (132 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (135 (goto 237)) ;;to TAG_0
                                      (138 (aload_2)) ;;at TAG_4
                                      (139 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (142 (if_acmpne 158)) ;;to TAG_5
                                      (145 (aload_1)) 
                                      (146 (getstatic (fieldCP "FLOAT_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type")))) 
                                      (149 (getstatic (fieldCP "floatValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method")))) 
                                      (152 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (155 (goto 237)) ;;to TAG_0
                                      (158 (aload_2)) ;;at TAG_5
                                      (159 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (162 (if_acmpne 178)) ;;to TAG_6
                                      (165 (aload_1)) 
                                      (166 (getstatic (fieldCP "DOUBLE_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type")))) 
                                      (169 (getstatic (fieldCP "doubleValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method")))) 
                                      (172 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (175 (goto 237)) ;;to TAG_0
                                      (178 (aload_2)) ;;at TAG_6
                                      (179 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (182 (if_acmpne 200)) ;;to TAG_7
                                      (185 (aload_1)) 
                                      (186 (invokestatic (methodCP "access$300" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (189 (ldc 2)) ;;STRING:: "Number num(long)"
                                      (191 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (194 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (197 (goto 237)) ;;to TAG_0
                                      (200 (aload_2)) ;;at TAG_7
                                      (201 (getstatic (fieldCP "TYPE" "java.lang.Byte" (class "java.lang.Class")))) 
                                      (204 (if_acmpne 220)) ;;to TAG_8
                                      (207 (aload_1)) 
                                      (208 (getstatic (fieldCP "BYTE_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type")))) 
                                      (211 (getstatic (fieldCP "byteValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method")))) 
                                      (214 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (217 (goto 237)) ;;to TAG_0
                                      (220 (aload_2)) ;;at TAG_8
                                      (221 (getstatic (fieldCP "TYPE" "java.lang.Short" (class "java.lang.Class")))) 
                                      (224 (if_acmpne 237)) ;;to TAG_0
                                      (227 (aload_1)) 
                                      (228 (getstatic (fieldCP "SHORT_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type")))) 
                                      (231 (getstatic (fieldCP "shortValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method")))) 
                                      (234 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (237 (return)) ;;at TAG_0
                                      (endofcode 238))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitUnboxArg"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class"))
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 291)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (invokevirtual (methodCP "isPrimitive" "java.lang.Class" () boolean))) 
                                      (4 (ifeq 282)) ;;to TAG_0
                                      (7 (aload_2)) 
                                      (8 (getstatic (fieldCP "TYPE" "java.lang.Boolean" (class "java.lang.Class")))) 
                                      (11 (if_acmpne 34))  ;;to TAG_1
                                      (14 (aload_1)) 
                                      (15 (getstatic (fieldCP "BOOLEAN_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type")))) 
                                      (18 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (21 (aload_1)) 
                                      (22 (getstatic (fieldCP "BOOLEAN_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type")))) 
                                      (25 (getstatic (fieldCP "booleanValueMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method")))) 
                                      (28 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (31 (goto 290)) ;;to TAG_2
                                      (34 (aload_2)) ;;at TAG_1
                                      (35 (getstatic (fieldCP "TYPE" "java.lang.Character" (class "java.lang.Class")))) 
                                      (38 (if_acmpne 61)) ;;to TAG_3
                                      (41 (aload_1)) 
                                      (42 (getstatic (fieldCP "CHAR_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type")))) 
                                      (45 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (48 (aload_1)) 
                                      (49 (getstatic (fieldCP "CHAR_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type")))) 
                                      (52 (getstatic (fieldCP "charValueMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method")))) 
                                      (55 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (58 (goto 290)) ;;to TAG_2
                                      (61 (aconst_null)) ;;at TAG_3
                                      (62 (astore_3)) 
                                      (63 (aload_1)) 
                                      (64 (getstatic (fieldCP "NUMBER_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type")))) 
                                      (67 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (70 (getstatic (fieldCP "UNCHECKED_MATH" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (73 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (76 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (79 (ifeq 178)) ;;to TAG_4
                                      (82 (aload_2)) 
                                      (83 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (86 (if_acmpne 98)) ;;to TAG_5
                                      (89 (ldc 3)) ;;STRING:: "int uncheckedIntCast(Object)"
                                      (91 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (94 (astore_3)) 
                                      (95 (goto 271)) ;;to TAG_6
                                      (98 (aload_2)) ;;at TAG_5
                                      (99 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (102 (if_acmpne 114)) ;;to TAG_7
                                      (105 (ldc 4)) ;;STRING:: "float uncheckedFloatCast(Object)"
                                      (107 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (110 (astore_3)) 
                                      (111 (goto 271)) ;;to TAG_6
                                      (114 (aload_2)) ;;at TAG_7
                                      (115 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (118 (if_acmpne 130)) ;;to TAG_8
                                      (121 (ldc 5)) ;;STRING:: "double uncheckedDoubleCast(Object)"
                                      (123 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (126 (astore_3)) 
                                      (127 (goto 271)) ;;to TAG_6
                                      (130 (aload_2)) ;;at TAG_8
                                      (131 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (134 (if_acmpne 146)) ;;to TAG_9
                                      (137 (ldc 6)) ;;STRING:: "long uncheckedLongCast(Object)"
                                      (139 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (142 (astore_3)) 
                                      (143 (goto 271)) ;;to TAG_6
                                      (146 (aload_2)) ;;at TAG_9
                                      (147 (getstatic (fieldCP "TYPE" "java.lang.Byte" (class "java.lang.Class")))) 
                                      (150 (if_acmpne 162)) ;;to TAG_10
                                      (153 (ldc 7)) ;;STRING:: "byte uncheckedByteCast(Object)"
                                      (155 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (158 (astore_3)) 
                                      (159 (goto 271)) ;;to TAG_6
                                      (162 (aload_2)) ;;at TAG_10
                                      (163 (getstatic (fieldCP "TYPE" "java.lang.Short" (class "java.lang.Class")))) 
                                      (166 (if_acmpne 271)) ;;to TAG_6
                                      (169 (ldc 8)) ;;STRING:: "short uncheckedShortCast(Object)"
                                      (171 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (174 (astore_3)) 
                                      (175 (goto 271)) ;;to TAG_6
                                      (178 (aload_2)) ;;at TAG_4
                                      (179 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (182 (if_acmpne 194)) ;;to TAG_11
                                      (185 (ldc 9)) ;;STRING:: "int intCast(Object)"
                                      (187 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (190 (astore_3)) 
                                      (191 (goto 271)) ;;to TAG_6
                                      (194 (aload_2)) ;;at TAG_11
                                      (195 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (198 (if_acmpne 210)) ;;to TAG_12
                                      (201 (ldc 10)) ;;STRING:: "float floatCast(Object)"
                                      (203 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (206 (astore_3)) 
                                      (207 (goto 271)) ;;to TAG_6
                                      (210 (aload_2)) ;;at TAG_12
                                      (211 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (214 (if_acmpne 226)) ;;to TAG_13
                                      (217 (ldc 11)) ;;STRING:: "double doubleCast(Object)"
                                      (219 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (222 (astore_3)) 
                                      (223 (goto 271)) ;;to TAG_6
                                      (226 (aload_2)) ;;at TAG_13
                                      (227 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (230 (if_acmpne 242)) ;;to TAG_14
                                      (233 (ldc 12)) ;;STRING:: "long longCast(Object)"
                                      (235 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (238 (astore_3)) 
                                      (239 (goto 271)) ;;to TAG_6
                                      (242 (aload_2)) ;;at TAG_14
                                      (243 (getstatic (fieldCP "TYPE" "java.lang.Byte" (class "java.lang.Class")))) 
                                      (246 (if_acmpne 258)) ;;to TAG_15
                                      (249 (ldc 13)) ;;STRING:: "byte byteCast(Object)"
                                      (251 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (254 (astore_3)) 
                                      (255 (goto 271)) ;;to TAG_6
                                      (258 (aload_2)) ;;at TAG_15
                                      (259 (getstatic (fieldCP "TYPE" "java.lang.Short" (class "java.lang.Class")))) 
                                      (262 (if_acmpne 271)) ;;to TAG_6
                                      (265 (ldc 14)) ;;STRING:: "short shortCast(Object)"
                                      (267 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (270 (astore_3)) 
                                      (271 (aload_1)) ;;at TAG_6
                                      (272 (invokestatic (methodCP "access$200" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (275 (aload_3)) 
                                      (276 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (279 (goto 290)) ;;to TAG_2
                                      (282 (aload_1)) ;;at TAG_0
                                      (283 (aload_2)) 
                                      (284 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (287 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (290 (return)) ;;at TAG_2
                                      (endofcode 291))
                                   (Exceptions )
                                   (StackMap )))
                        (method "maybeClass"
                              (parameters (class "java.lang.Object") boolean)
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 6) (code_length . 155)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Class"))) 
                                      (4 (ifeq 12)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "java.lang.Class"))) 
                                      (11 (areturn)) 
                                      (12 (aconst_null)) ;;at TAG_0
                                      (13 (astore_2)) 
                                      (14 (aload_0)) 
                                      (15 (instanceof (class "clojure.lang.Symbol"))) 
                                      (18 (ifeq 134))  ;;to TAG_1
                                      (21 (aload_0)) 
                                      (22 (checkcast (class "clojure.lang.Symbol"))) 
                                      (25 (astore_3)) 
                                      (26 (aload_3)) 
                                      (27 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (30 (ifnonnull 131)) ;;to TAG_2
                                      (33 (aload_3)) 
                                      (34 (getstatic (fieldCP "COMPILE_STUB_SYM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (37 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (40 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (43 (ifeq 56)) ;;to TAG_3
                                      (46 (getstatic (fieldCP "COMPILE_STUB_CLASS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (49 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (52 (checkcast (class "java.lang.Class"))) 
                                      (55 (areturn)) 
                                      (56 (aload_3)) ;;at TAG_3
                                      (57 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (60 (bipush 46)) 
                                      (62 (invokevirtual (methodCP "indexOf" "java.lang.String" (int) int))) 
                                      (65 (ifgt 81)) ;;to TAG_4
                                      (68 (aload_3)) 
                                      (69 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (72 (iconst_0)) 
                                      (73 (invokevirtual (methodCP "charAt" "java.lang.String" (int) char))) 
                                      (76 (bipush 91)) 
                                      (78 (if_icmpne 92)) ;;to TAG_5
                                      (81 (aload_3)) ;;at TAG_4
                                      (82 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (85 (invokestatic (methodCP "classForName" "clojure.lang.RT" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (88 (astore_2)) 
                                      (89 (goto 131)) ;;to TAG_2
                                      (92 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) ;;at TAG_5
                                      (95 (aload_3)) 
                                      (96 (invokevirtual (methodCP "getMapping" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "java.lang.Object")))) 
                                      (99 (astore 4)) 
                                      (101 (aload 4)) 
                                      (103 (instanceof (class "java.lang.Class"))) 
                                      (106 (ifeq 118)) ;;to TAG_6
                                      (109 (aload 4)) 
                                      (111 (checkcast (class "java.lang.Class"))) 
                                      (114 (astore_2)) 
                                      (115 (goto 131)) ;;to TAG_2
                                      (118 (aload_3)) ;;at TAG_6
                                      (119 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (122 (invokestatic (methodCP "classForName" "clojure.lang.RT" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (125 (astore_2)) 
                                      (126 (goto 131)) ;;to TAG_2;;at TAG_8
                                      (129 (astore 5)) ;;at TAG_9
                                      (131 (goto 153)) ;;to TAG_7;;at TAG_2
                                      (134 (iload_1)) ;;at TAG_1
                                      (135 (ifeq 153)) ;;to TAG_7
                                      (138 (aload_0)) 
                                      (139 (instanceof (class "java.lang.String"))) 
                                      (142 (ifeq 153)) ;;to TAG_7
                                      (145 (aload_0)) 
                                      (146 (checkcast (class "java.lang.String"))) 
                                      (149 (invokestatic (methodCP "classForName" "clojure.lang.RT" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (152 (astore_2)) 
                                      (153 (aload_2)) ;;at TAG_7
                                      (154 (areturn)) 
                                      (endofcode 155))
                                   (Exceptions 
                                     (handler 118 126  129 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "tagToClass"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 378)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (iconst_1)) 
                                      (2 (invokestatic (methodCP "maybeClass" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object") boolean) (class "java.lang.Class")))) 
                                      (5 (astore_1)) 
                                      (6 (aload_0)) 
                                      (7 (instanceof (class "clojure.lang.Symbol"))) 
                                      (10 (ifeq 345)) ;;to TAG_0
                                      (13 (aload_0)) 
                                      (14 (checkcast (class "clojure.lang.Symbol"))) 
                                      (17 (astore_2)) 
                                      (18 (aload_2)) 
                                      (19 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (22 (ifnonnull 345)) ;;to TAG_0
                                      (25 (aload_2)) 
                                      (26 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (29 (ldc 15)) ;;STRING:: "objects"
                                      (31 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (34 (ifeq 44)) ;;to TAG_1
                                      (37 (ldc_w )) 
                                      (40 (astore_1)) 
                                      (41 (goto 345)) ;;to TAG_0
                                      (44 (aload_2)) ;;at TAG_1
                                      (45 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (48 (ldc 16)) ;;STRING:: "ints"
                                      (50 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (53 (ifeq 63)) ;;to TAG_2
                                      (56 (ldc_w )) 
                                      (59 (astore_1)) 
                                      (60 (goto 345)) ;;to TAG_0
                                      (63 (aload_2)) ;;at TAG_2
                                      (64 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (67 (ldc 17)) ;;STRING:: "longs"
                                      (69 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (72 (ifeq 82)) ;;to TAG_3
                                      (75 (ldc_w )) 
                                      (78 (astore_1)) 
                                      (79 (goto 345)) ;;to TAG_0
                                      (82 (aload_2)) ;;at TAG_3
                                      (83 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (86 (ldc 18)) ;;STRING:: "floats"
                                      (88 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (91 (ifeq 101)) ;;to TAG_4
                                      (94 (ldc_w )) 
                                      (97 (astore_1)) 
                                      (98 (goto 345)) ;;to TAG_0
                                      (101 (aload_2)) ;;at TAG_4
                                      (102 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (105 (ldc 19)) ;;STRING:: "doubles"
                                      (107 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (110 (ifeq 120)) ;;to TAG_5
                                      (113 (ldc_w )) 
                                      (116 (astore_1)) 
                                      (117 (goto 345)) ;;to TAG_0
                                      (120 (aload_2)) ;;at TAG_5
                                      (121 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (124 (ldc 20)) ;;STRING:: "chars"
                                      (126 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (129 (ifeq 139)) ;;to TAG_6
                                      (132 (ldc_w )) 
                                      (135 (astore_1)) 
                                      (136 (goto 345)) ;;to TAG_0
                                      (139 (aload_2)) ;;at TAG_6
                                      (140 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (143 (ldc 21)) ;;STRING:: "shorts"
                                      (145 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (148 (ifeq 158)) ;;to TAG_7
                                      (151 (ldc_w )) 
                                      (154 (astore_1)) 
                                      (155 (goto 345)) ;;to TAG_0
                                      (158 (aload_2)) ;;at TAG_7
                                      (159 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (162 (ldc 22)) ;;STRING:: "bytes"
                                      (164 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (167 (ifeq 177)) ;;to TAG_8
                                      (170 (ldc_w )) 
                                      (173 (astore_1)) 
                                      (174 (goto 345)) ;;to TAG_0
                                      (177 (aload_2)) ;;at TAG_8
                                      (178 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (181 (ldc 23)) ;;STRING:: "booleans"
                                      (183 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (186 (ifeq 196)) ;;to TAG_9
                                      (189 (ldc_w )) 
                                      (192 (astore_1)) 
                                      (193 (goto 345)) ;;to TAG_0
                                      (196 (aload_2)) ;;at TAG_9
                                      (197 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (200 (ldc 24)) ;;STRING:: "int"
                                      (202 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (205 (ifeq 215)) ;;to TAG_10
                                      (208 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (211 (astore_1)) 
                                      (212 (goto 345)) ;;to TAG_0
                                      (215 (aload_2)) ;;at TAG_10
                                      (216 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (219 (ldc 25)) ;;STRING:: "long"
                                      (221 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (224 (ifeq 234)) ;;to TAG_11
                                      (227 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (230 (astore_1)) 
                                      (231 (goto 345)) ;;to TAG_0
                                      (234 (aload_2)) ;;at TAG_11
                                      (235 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (238 (ldc 26)) ;;STRING:: "float"
                                      (240 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (243 (ifeq 253)) ;;to TAG_12
                                      (246 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (249 (astore_1)) 
                                      (250 (goto 345)) ;;to TAG_0
                                      (253 (aload_2)) ;;at TAG_12
                                      (254 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (257 (ldc 27)) ;;STRING:: "double"
                                      (259 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (262 (ifeq 272))  ;;to TAG_13
                                      (265 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (268 (astore_1)) 
                                      (269 (goto 345)) ;;to TAG_0
                                      (272 (aload_2)) ;;at TAG_13
                                      (273 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (276 (ldc 28)) ;;STRING:: "char"
                                      (278 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (281 (ifeq 291)) ;;to TAG_14
                                      (284 (getstatic (fieldCP "TYPE" "java.lang.Character" (class "java.lang.Class")))) 
                                      (287 (astore_1)) 
                                      (288 (goto 345)) ;;to TAG_0
                                      (291 (aload_2)) ;;at TAG_14
                                      (292 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (295 (ldc 29)) ;;STRING:: "short"
                                      (297 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (300 (ifeq 310)) ;;to TAG_15
                                      (303 (getstatic (fieldCP "TYPE" "java.lang.Short" (class "java.lang.Class")))) 
                                      (306 (astore_1)) 
                                      (307 (goto 345)) ;;to TAG_0
                                      (310 (aload_2)) ;;at TAG_15
                                      (311 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (314 (ldc 30)) ;;STRING:: "byte"
                                      (316 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (319 (ifeq 329)) ;;to TAG_16
                                      (322 (getstatic (fieldCP "TYPE" "java.lang.Byte" (class "java.lang.Class")))) 
                                      (325 (astore_1)) 
                                      (326 (goto 345)) ;;to TAG_0
                                      (329 (aload_2)) ;;at TAG_16
                                      (330 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (333 (ldc 31)) ;;STRING:: "boolean"
                                      (335 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (338 (ifeq 345)) ;;to TAG_0
                                      (341 (getstatic (fieldCP "TYPE" "java.lang.Boolean" (class "java.lang.Class")))) 
                                      (344 (astore_1)) 
                                      (345 (aload_1)) ;;at TAG_0
                                      (346 (ifnull 351)) ;;to TAG_17
                                      (349 (aload_1)) 
                                      (350 (areturn)) 
                                      (351 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_17
                                      (354 (dup)) 
                                      (355 (new (class "java.lang.StringBuilder"))) 
                                      (358 (dup)) 
                                      (359 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (362 (ldc 32)) ;;STRING:: "Unable to resolve classname: "
                                      (364 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (367 (aload_0)) 
                                      (368 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (371 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (374 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (377 (athrow)) 
                                      (endofcode 378))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$400"
                              (parameters (class "java.lang.Object") boolean)
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (invokestatic
					(methodCP "maybeClass" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object") boolean) (class "java.lang.Class"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 226)
                                   (parsedcode
                                      (0 (ldc_w ))
                                      (3 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (6 (putstatic (fieldCP "BOOLEAN_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type"))))
                                      (9 (ldc_w ))
                                      (12 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (15 (putstatic (fieldCP "CHAR_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type"))))
                                      (18 (ldc_w ))
                                      (21 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (24 (putstatic (fieldCP "INTEGER_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type"))))
                                      (27 (ldc_w ))
                                      (30 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (33 (putstatic (fieldCP "LONG_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type"))))
                                      (36 (ldc_w ))
                                      (39 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (42 (putstatic (fieldCP "FLOAT_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type"))))
                                      (45 (ldc_w ))
                                      (48 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (51 (putstatic (fieldCP "DOUBLE_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type"))))
                                      (54 (ldc_w ))
                                      (57 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (60 (putstatic (fieldCP "SHORT_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type"))))
                                      (63 (ldc_w ))
                                      (66 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (69 (putstatic (fieldCP "BYTE_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type"))))
                                      (72 (ldc_w ))
                                      (75 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (78 (putstatic (fieldCP "NUMBER_TYPE" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.Type"))))
                                      (81 (ldc 33))       ;;STRING:: "char charValue()"
                                      (83 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (86 (putstatic (fieldCP "charValueMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (89 (ldc 34))       ;;STRING:: "boolean booleanValue()"
                                      (91 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (94 (putstatic (fieldCP "booleanValueMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (97 (ldc 35))       ;;STRING:: "Character valueOf(char)"
                                      (99 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (102 (putstatic (fieldCP "charValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (105 (ldc 36))      ;;STRING:: "Integer valueOf(int)"
                                      (107 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (110 (putstatic (fieldCP "intValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (113 (ldc 37))      ;;STRING:: "Long valueOf(long)"
                                      (115 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (118 (putstatic (fieldCP "longValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (121 (ldc 38))      ;;STRING:: "Float valueOf(float)"
                                      (123 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (126 (putstatic (fieldCP "floatValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (129 (ldc 39))      ;;STRING:: "Double valueOf(double)"
                                      (131 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (134 (putstatic (fieldCP "doubleValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (137 (ldc 40))      ;;STRING:: "Short valueOf(short)"
                                      (139 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (142 (putstatic (fieldCP "shortValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (145 (ldc 41))      ;;STRING:: "Byte valueOf(byte)"
                                      (147 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (150 (putstatic (fieldCP "byteValueOfMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (153 (ldc 42))      ;;STRING:: "int intValue()"
                                      (155 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (158 (putstatic (fieldCP "intValueMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (161 (ldc 43))      ;;STRING:: "long longValue()"
                                      (163 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (166 (putstatic (fieldCP "longValueMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (169 (ldc 44))      ;;STRING:: "float floatValue()"
                                      (171 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (174 (putstatic (fieldCP "floatValueMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (177 (ldc 45))      ;;STRING:: "double doubleValue()"
                                      (179 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (182 (putstatic (fieldCP "doubleValueMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (185 (ldc 46))      ;;STRING:: "byte byteValue()"
                                      (187 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (190 (putstatic (fieldCP "byteValueMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (193 (ldc 47))      ;;STRING:: "short shortValue()"
                                      (195 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (198 (putstatic (fieldCP "shortValueMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (201 (ldc 48))      ;;STRING:: "clojure.lang.Num from(int)"
                                      (203 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (206 (putstatic (fieldCP "fromIntMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (209 (ldc 49))      ;;STRING:: "clojure.lang.Num from(long)"
                                      (211 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (214 (putstatic (fieldCP "fromLongMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (217 (ldc 50))      ;;STRING:: "clojure.lang.Num from(double)"
                                      (219 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (222 (putstatic (fieldCP "fromDoubleMethod" "clojure.lang.Compiler$HostExpr" (class "clojure.asm.commons.Method"))))
                                      (225 (return))
                                      (endofcode 226))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr" "clojure.lang.Compiler$MaybePrimitiveExpr")
            (accessflags  *abstract*  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$HostExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$HostExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$HostExpr" . "clojure.lang"))

