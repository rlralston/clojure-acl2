; APersistentVector$SubVector-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.APersistentVector$SubVector*
 (make-class-def
      '(class "clojure.lang.APersistentVector$SubVector"
            "clojure.lang.APersistentVector"
            (constant_pool)
            (fields
                        (field "v" (class "clojure.lang.IPersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "start" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "end" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "_meta" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (class "clojure.lang.IPersistentVector") int int)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 6) (code_length . 63)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "<init>" "clojure.lang.APersistentVector" () void))) 
                                      (4 (aload_0)) 
                                      (5 (aload_1)) 
                                      (6 (putfield (fieldCP "_meta" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentMap")))) 
                                      (9 (aload_2)) 
                                      (10 (instanceof (class "clojure.lang.APersistentVector$SubVector"))) 
                                      (13 (ifeq 46))  ;;to TAG_0
                                      (16 (aload_2)) 
                                      (17 (checkcast (class "clojure.lang.APersistentVector$SubVector"))) 
                                      (20 (astore 5)) 
                                      (22 (iload_3)) 
                                      (23 (aload 5)) 
                                      (25 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (28 (iadd)) 
                                      (29 (istore_3)) 
                                      (30 (iload 4)) 
                                      (32 (aload 5)) 
                                      (34 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (37 (iadd)) 
                                      (38 (istore 4)) 
                                      (40 (aload 5)) 
                                      (42 (getfield (fieldCP "v" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentVector")))) 
                                      (45 (astore_2)) 
                                      (46 (aload_0)) ;;at TAG_0
                                      (47 (aload_2)) 
                                      (48 (putfield (fieldCP "v" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentVector")))) 
                                      (51 (aload_0)) 
                                      (52 (iload_3)) 
                                      (53 (putfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (56 (aload_0)) 
                                      (57 (iload 4)) 
                                      (59 (putfield (fieldCP "end" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (62 (return)) 
                                      (endofcode 63))
                                   (Exceptions )
                                   (StackMap )))
                        (method "iterator"
                              (parameters )
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 19)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "v" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentVector"))))
                                      (4 (checkcast (class "clojure.lang.PersistentVector")))
                                      (7 (aload_0))
                                      (8 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int)))
                                      (11 (aload_0))
                                      (12 (getfield (fieldCP "end" "clojure.lang.APersistentVector$SubVector" int)))
                                      (15 (invokevirtual
					(methodCP "rangedIterator" "clojure.lang.PersistentVector" (int int) (class "java.util.Iterator"))))
                                      (18 (areturn))
                                      (endofcode 19))
                                   (Exceptions )
                                   (StackMap )))
                        (method "nth"
                              (parameters int)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 41)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (4 (iload_1)) 
                                      (5 (iadd)) 
                                      (6 (aload_0)) 
                                      (7 (getfield (fieldCP "end" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (10 (if_icmpge 17))  ;;to TAG_0
                                      (13 (iload_1)) 
                                      (14 (ifge 25)) ;;to TAG_1
                                      (17 (new (class "java.lang.IndexOutOfBoundsException"))) ;;at TAG_0
                                      (20 (dup)) 
                                      (21 (invokespecial (methodCP "<init>" "java.lang.IndexOutOfBoundsException" () void))) 
                                      (24 (athrow)) 
                                      (25 (aload_0)) ;;at TAG_1
                                      (26 (getfield (fieldCP "v" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentVector")))) 
                                      (29 (aload_0)) 
                                      (30 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (33 (iload_1)) 
                                      (34 (iadd)) 
                                      (35 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (40 (areturn)) 
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assocN"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 3) (code_length . 76)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (4 (iload_1)) 
                                      (5 (iadd)) 
                                      (6 (aload_0)) 
                                      (7 (getfield (fieldCP "end" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (10 (if_icmple 21))  ;;to TAG_0
                                      (13 (new (class "java.lang.IndexOutOfBoundsException"))) 
                                      (16 (dup)) 
                                      (17 (invokespecial (methodCP "<init>" "java.lang.IndexOutOfBoundsException" () void))) 
                                      (20 (athrow)) 
                                      (21 (aload_0)) ;;at TAG_0
                                      (22 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (25 (iload_1)) 
                                      (26 (iadd)) 
                                      (27 (aload_0)) 
                                      (28 (getfield (fieldCP "end" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (31 (if_icmpne 40)) ;;to TAG_1
                                      (34 (aload_0)) 
                                      (35 (aload_2)) 
                                      (36 (invokevirtual (methodCP "cons" "clojure.lang.APersistentVector$SubVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")))) 
                                      (39 (areturn)) 
                                      (40 (new (class "clojure.lang.APersistentVector$SubVector"))) ;;at TAG_1
                                      (43 (dup)) 
                                      (44 (aload_0)) 
                                      (45 (getfield (fieldCP "_meta" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentMap")))) 
                                      (48 (aload_0)) 
                                      (49 (getfield (fieldCP "v" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentVector")))) 
                                      (52 (aload_0)) 
                                      (53 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (56 (iload_1)) 
                                      (57 (iadd)) 
                                      (58 (aload_2)) 
                                      (59 (invokeinterface (methodCP "assocN" "clojure.lang.IPersistentVector" (int (class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 3)) 
                                      (64 (aload_0)) 
                                      (65 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (68 (aload_0)) 
                                      (69 (getfield (fieldCP "end" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (72 (invokespecial (methodCP "<init>" "clojure.lang.APersistentVector$SubVector" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.IPersistentVector") int int) void))) 
                                      (75 (areturn)) 
                                      (endofcode 76))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "end" "clojure.lang.APersistentVector$SubVector" int)))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int)))
                                      (8 (isub))
                                      (9 (ireturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "cons"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 2) (code_length . 36)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.APersistentVector$SubVector")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "_meta" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentMap"))))
                                      (8 (aload_0))
                                      (9 (getfield (fieldCP "v" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentVector"))))
                                      (12 (aload_0))
                                      (13 (getfield (fieldCP "end" "clojure.lang.APersistentVector$SubVector" int)))
                                      (16 (aload_1))
                                      (17 (invokeinterface
					(methodCP "assocN" "clojure.lang.IPersistentVector" (int (class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 3))
                                      (22 (aload_0))
                                      (23 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int)))
                                      (26 (aload_0))
                                      (27 (getfield (fieldCP "end" "clojure.lang.APersistentVector$SubVector" int)))
                                      (30 (iconst_1))
                                      (31 (iadd))
                                      (32 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentVector$SubVector" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.IPersistentVector") int int) void)))
                                      (35 (areturn))
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap )))
                        (method "empty"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector"))))
                                      (3 (aload_0))
                                      (4 (invokevirtual
					(methodCP "meta" "clojure.lang.APersistentVector$SubVector" () (class "clojure.lang.IPersistentMap"))))
                                      (7 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentVector" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentVector"))))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pop"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentStack"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 1) (code_length . 43)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "end" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (4 (iconst_1)) 
                                      (5 (isub)) 
                                      (6 (aload_0)) 
                                      (7 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (10 (if_icmpne 17))  ;;to TAG_0
                                      (13 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (16 (areturn)) 
                                      (17 (new (class "clojure.lang.APersistentVector$SubVector"))) ;;at TAG_0
                                      (20 (dup)) 
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "_meta" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentMap")))) 
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "v" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentVector")))) 
                                      (29 (aload_0)) 
                                      (30 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (33 (aload_0)) 
                                      (34 (getfield (fieldCP "end" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (37 (iconst_1)) 
                                      (38 (isub)) 
                                      (39 (invokespecial (methodCP "<init>" "clojure.lang.APersistentVector$SubVector" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.IPersistentVector") int int) void))) 
                                      (42 (areturn)) 
                                      (endofcode 43))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.APersistentVector$SubVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 31)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "_meta" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentMap")))) 
                                      (5 (if_acmpne 10))  ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (areturn)) 
                                      (10 (new (class "clojure.lang.APersistentVector$SubVector"))) ;;at TAG_0
                                      (13 (dup)) 
                                      (14 (aload_1)) 
                                      (15 (aload_0)) 
                                      (16 (getfield (fieldCP "v" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentVector")))) 
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "start" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (23 (aload_0)) 
                                      (24 (getfield (fieldCP "end" "clojure.lang.APersistentVector$SubVector" int))) 
                                      (27 (invokespecial (methodCP "<init>" "clojure.lang.APersistentVector$SubVector" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.IPersistentVector") int int) void))) 
                                      (30 (areturn)) 
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap )))
                        (method "meta"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "_meta" "clojure.lang.APersistentVector$SubVector" (class "clojure.lang.IPersistentMap"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Associative"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokespecial
					(methodCP "assoc" "clojure.lang.APersistentVector" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentVector"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "cons"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "cons" "clojure.lang.APersistentVector$SubVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.APersistentVector$SubVector" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.APersistentVector$SubVector"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IObj")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *APersistentVector$SubVector-class-table*
  (make-static-class-decls 
   *clojure.lang.APersistentVector$SubVector*))

(defconst *package-name-map* 
  ("clojure.lang.APersistentVector$SubVector" . "clojure.lang"))

