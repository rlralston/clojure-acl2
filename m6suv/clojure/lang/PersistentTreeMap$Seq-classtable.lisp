; PersistentTreeMap$Seq-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentTreeMap$Seq*
 (make-class-def
      '(class "clojure.lang.PersistentTreeMap$Seq"
            "clojure.lang.ASeq"
            (constant_pool)
            (fields
                        (field "stack" (class "clojure.lang.ISeq") (accessflags  *class*  *final* ) -1)
                        (field "asc" boolean (accessflags  *class*  *final* ) -1)
                        (field "cnt" int (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.ISeq") boolean)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.ASeq" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "stack" "clojure.lang.PersistentTreeMap$Seq" (class "clojure.lang.ISeq"))))
                                      (9 (aload_0))
                                      (10 (iload_2))
                                      (11 (putfield (fieldCP "asc" "clojure.lang.PersistentTreeMap$Seq" boolean)))
                                      (14 (aload_0))
                                      (15 (iconst_m1))
                                      (16 (putfield (fieldCP "cnt" "clojure.lang.PersistentTreeMap$Seq" int)))
                                      (19 (return))
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.ISeq") boolean int)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.ASeq" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "stack" "clojure.lang.PersistentTreeMap$Seq" (class "clojure.lang.ISeq"))))
                                      (9 (aload_0))
                                      (10 (iload_2))
                                      (11 (putfield (fieldCP "asc" "clojure.lang.PersistentTreeMap$Seq" boolean)))
                                      (14 (aload_0))
                                      (15 (iload_3))
                                      (16 (putfield (fieldCP "cnt" "clojure.lang.PersistentTreeMap$Seq" int)))
                                      (19 (return))
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (class "clojure.lang.ISeq") boolean int)
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokespecial
					(methodCP "<init>" "clojure.lang.ASeq" ((class "clojure.lang.IPersistentMap")) void)))
                                      (5 (aload_0))
                                      (6 (aload_2))
                                      (7 (putfield (fieldCP "stack" "clojure.lang.PersistentTreeMap$Seq" (class "clojure.lang.ISeq"))))
                                      (10 (aload_0))
                                      (11 (iload_3))
                                      (12 (putfield (fieldCP "asc" "clojure.lang.PersistentTreeMap$Seq" boolean)))
                                      (15 (aload_0))
                                      (16 (iload 4))
                                      (18 (putfield (fieldCP "cnt" "clojure.lang.PersistentTreeMap$Seq" int)))
                                      (21 (return))
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node") boolean int)
                              (returntype . (class "clojure.lang.PersistentTreeMap$Seq"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 16)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentTreeMap$Seq")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (aconst_null))
                                      (6 (iload_1))
                                      (7 (invokestatic
					(methodCP "push" "clojure.lang.PersistentTreeMap$Seq" ((class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.ISeq") boolean) (class "clojure.lang.ISeq"))))
                                      (10 (iload_1))
                                      (11 (iload_2))
                                      (12 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap$Seq" ((class "clojure.lang.ISeq") boolean int) void)))
                                      (15 (areturn))
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "push"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.ISeq") boolean)
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 31)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_3
                                      (1 (ifnull 29)) ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (aload_1)) 
                                      (6 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (9 (astore_1)) 
                                      (10 (iload_2)) 
                                      (11 (ifeq 21)) ;;to TAG_1
                                      (14 (aload_0)) 
                                      (15 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (18 (goto 25))  ;;to TAG_2
                                      (21 (aload_0)) ;;at TAG_1
                                      (22 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (25 (astore_0)) ;;at TAG_2
                                      (26 (goto 0)) ;;to TAG_3
                                      (29 (aload_1)) ;;at TAG_0
                                      (30 (areturn)) 
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap )))
                        (method "first"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "stack" "clojure.lang.PersistentTreeMap$Seq" (class "clojure.lang.ISeq"))))
                                      (4 (invokeinterface
					(methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "next"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 3) (code_length . 73)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "stack" "clojure.lang.PersistentTreeMap$Seq" (class "clojure.lang.ISeq")))) 
                                      (4 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (9 (checkcast (class "clojure.lang.PersistentTreeMap$Node"))) 
                                      (12 (astore_1)) 
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "asc" "clojure.lang.PersistentTreeMap$Seq" boolean))) 
                                      (17 (ifeq 27)) ;;to TAG_0
                                      (20 (aload_1)) 
                                      (21 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (24 (goto 31)) ;;to TAG_1
                                      (27 (aload_1)) ;;at TAG_0
                                      (28 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (31 (aload_0)) ;;at TAG_1
                                      (32 (getfield (fieldCP "stack" "clojure.lang.PersistentTreeMap$Seq" (class "clojure.lang.ISeq")))) 
                                      (35 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (40 (aload_0)) 
                                      (41 (getfield (fieldCP "asc" "clojure.lang.PersistentTreeMap$Seq" boolean))) 
                                      (44 (invokestatic (methodCP "push" "clojure.lang.PersistentTreeMap$Seq" ((class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.ISeq") boolean) (class "clojure.lang.ISeq")))) 
                                      (47 (astore_2)) 
                                      (48 (aload_2)) 
                                      (49 (ifnull 71))  ;;to TAG_2
                                      (52 (new (class "clojure.lang.PersistentTreeMap$Seq"))) 
                                      (55 (dup)) 
                                      (56 (aload_2)) 
                                      (57 (aload_0)) 
                                      (58 (getfield (fieldCP "asc" "clojure.lang.PersistentTreeMap$Seq" boolean))) 
                                      (61 (aload_0)) 
                                      (62 (getfield (fieldCP "cnt" "clojure.lang.PersistentTreeMap$Seq" int))) 
                                      (65 (iconst_1)) 
                                      (66 (isub)) 
                                      (67 (invokespecial (methodCP "<init>" "clojure.lang.PersistentTreeMap$Seq" ((class "clojure.lang.ISeq") boolean int) void))) 
                                      (70 (areturn)) 
                                      (71 (aconst_null)) ;;at TAG_2
                                      (72 (areturn)) 
                                      (endofcode 73))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 17)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "cnt" "clojure.lang.PersistentTreeMap$Seq" int))) 
                                      (4 (ifge 12))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (invokespecial (methodCP "count" "clojure.lang.ASeq" () int))) 
                                      (11 (ireturn)) 
                                      (12 (aload_0)) ;;at TAG_0
                                      (13 (getfield (fieldCP "cnt" "clojure.lang.PersistentTreeMap$Seq" int))) 
                                      (16 (ireturn)) 
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.Obj"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 21)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentTreeMap$Seq")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "stack" "clojure.lang.PersistentTreeMap$Seq" (class "clojure.lang.ISeq"))))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "asc" "clojure.lang.PersistentTreeMap$Seq" boolean)))
                                      (13 (aload_0))
                                      (14 (getfield (fieldCP "cnt" "clojure.lang.PersistentTreeMap$Seq" int)))
                                      (17 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap$Seq" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.ISeq") boolean int) void)))
                                      (20 (areturn))
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentTreeMap$Seq" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.Obj"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentTreeMap$Seq-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentTreeMap$Seq*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentTreeMap$Seq" . "clojure.lang"))

