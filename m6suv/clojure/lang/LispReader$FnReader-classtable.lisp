; LispReader$FnReader-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.LispReader$FnReader*
 (make-class-def
      '(class "clojure.lang.LispReader$FnReader"
            "clojure.lang.AFn"
            (constant_pool
                        (STRING  "Nested #()s are not allowed"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 12) (code_length . 227)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "java.io.PushbackReader"))) 
                                      (4 (astore_3)) 
                                      (5 (getstatic (fieldCP "ARG_ENV" "clojure.lang.LispReader" (class "clojure.lang.Var")))) 
                                      (8 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (11 (ifnull 24)) ;;to TAG_0
                                      (14 (new (class "java.lang.IllegalStateException"))) 
                                      (17 (dup)) 
                                      (18 (ldc 0)) ;;STRING:: "Nested #()s are not allowed"
                                      (20 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (23 (athrow)) 
                                      (24 (iconst_2)) ;;at TAG_0
                                      (25 (anewarray (class "java.lang.Object"))) 
                                      (28 (dup)) 
                                      (29 (iconst_0)) 
                                      (30 (getstatic (fieldCP "ARG_ENV" "clojure.lang.LispReader" (class "clojure.lang.Var")))) 
                                      (33 (aastore)) 
                                      (34 (dup)) 
                                      (35 (iconst_1)) 
                                      (36 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentTreeMap" (class "clojure.lang.PersistentTreeMap")))) 
                                      (39 (aastore)) 
                                      (40 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (43 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (46 (aload_3)) 
                                      (47 (bipush 40)) 
                                      (49 (invokestatic (methodCP "unread" "clojure.lang.LispReader" ((class "java.io.PushbackReader") int) void))) 
                                      (52 (aload_3)) 
                                      (53 (iconst_1)) 
                                      (54 (aconst_null)) 
                                      (55 (iconst_1)) 
                                      (56 (invokestatic (methodCP "read" "clojure.lang.LispReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (59 (astore 4)) 
                                      (61 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (64 (astore 5)) 
                                      (66 (getstatic (fieldCP "ARG_ENV" "clojure.lang.LispReader" (class "clojure.lang.Var")))) 
                                      (69 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (72 (checkcast (class "clojure.lang.PersistentTreeMap"))) 
                                      (75 (astore 6)) 
                                      (77 (aload 6)) 
                                      (79 (invokevirtual (methodCP "rseq" "clojure.lang.PersistentTreeMap" () (class "clojure.lang.ISeq")))) 
                                      (82 (astore 7)) 
                                      (84 (aload 7)) 
                                      (86 (ifnull 201)) ;;to TAG_1
                                      (89 (aload 7)) 
                                      (91 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (96 (checkcast (class "java.util.Map$Entry"))) 
                                      (99 (invokeinterface (methodCP "getKey" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (104 (checkcast (class "java.lang.Integer"))) 
                                      (107 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (110 (istore 8)) 
                                      (112 (iload 8)) 
                                      (114 (ifle 166))  ;;to TAG_2
                                      (117 (iconst_1)) 
                                      (118 (istore 9)) 
                                      (120 (iload 9)) ;;at TAG_4
                                      (122 (iload 8)) 
                                      (124 (if_icmpgt 166))  ;;to TAG_2
                                      (127 (aload 6)) 
                                      (129 (iload 9)) 
                                      (131 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (134 (invokevirtual (methodCP "valAt" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (137 (astore 10)) 
                                      (139 (aload 10)) 
                                      (141 (ifnonnull 151)) ;;to TAG_3
                                      (144 (iload 9)) 
                                      (146 (invokestatic (methodCP "garg" "clojure.lang.LispReader" (int) (class "clojure.lang.Symbol")))) 
                                      (149 (astore 10)) 
                                      (151 (aload 5)) ;;at TAG_3
                                      (153 (aload 10)) 
                                      (155 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (158 (astore 5)) 
                                      (160 (iinc 9 1)) 
                                      (163 (goto 120)) ;;to TAG_4
                                      (166 (aload 6)) ;;at TAG_2
                                      (168 (iconst_m1)) 
                                      (169 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (172 (invokevirtual (methodCP "valAt" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (175 (astore 9)) 
                                      (177 (aload 9)) 
                                      (179 (ifnull 201)) ;;to TAG_1
                                      (182 (aload 5)) 
                                      (184 (getstatic (fieldCP "_AMP_" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (187 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (190 (astore 5)) 
                                      (192 (aload 5)) 
                                      (194 (aload 9)) 
                                      (196 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (199 (astore 5)) 
                                      (201 (getstatic (fieldCP "FN" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) ;;at TAG_1
                                      (204 (aload 5)) 
                                      (206 (aload 4)) 
                                      (208 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (211 (astore 8)) 
                                      (213 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) ;;at TAG_5
                                      (216 (aload 8)) 
                                      (218 (areturn)) 
                                      (219 (astore 11)) ;;at TAG_6
                                      (221 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) ;;at TAG_7
                                      (224 (aload 11)) 
                                      (226 (athrow)) 
                                      (endofcode 227))
                                   (Exceptions 
                                     (handler 24 213  219 (class "java.lang.Throwable"))
                                     (handler 219 221  219 (class "java.lang.Throwable")))
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *LispReader$FnReader-class-table*
  (make-static-class-decls 
   *clojure.lang.LispReader$FnReader*))

(defconst *package-name-map* 
  ("clojure.lang.LispReader$FnReader" . "clojure.lang"))

