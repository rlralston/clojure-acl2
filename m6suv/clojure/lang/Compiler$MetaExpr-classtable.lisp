; Compiler$MetaExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$MetaExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$MetaExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "clojure.lang.IObj withMeta(clojure.lang.IPersistentMap)"))
            (fields
                        (field "expr" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "meta" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "IOBJ_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "withMetaMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "expr" "clojure.lang.Compiler$MetaExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "meta" "clojure.lang.Compiler$MetaExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 30)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "expr" "clojure.lang.Compiler$MetaExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (invokeinterface
					(methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1))
                                      (9 (checkcast (class "clojure.lang.IObj")))
                                      (12 (aload_0))
                                      (13 (getfield (fieldCP "meta" "clojure.lang.Compiler$MetaExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (16 (invokeinterface
					(methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1))
                                      (21 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (24 (invokeinterface
					(methodCP "withMeta" "clojure.lang.IObj" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")) 2))
                                      (29 (areturn))
                                      (endofcode 30))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 64)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "expr" "clojure.lang.Compiler$MetaExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (4 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (7 (aload_2)) 
                                      (8 (aload_3)) 
                                      (9 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (14 (aload_3)) 
                                      (15 (getstatic (fieldCP "IOBJ_TYPE" "clojure.lang.Compiler$MetaExpr" (class "clojure.asm.Type")))) 
                                      (18 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "meta" "clojure.lang.Compiler$MetaExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (25 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (28 (aload_2)) 
                                      (29 (aload_3)) 
                                      (30 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (35 (aload_3)) 
                                      (36 (getstatic (fieldCP "IPERSISTENTMAP_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (39 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (42 (aload_3)) 
                                      (43 (getstatic (fieldCP "IOBJ_TYPE" "clojure.lang.Compiler$MetaExpr" (class "clojure.asm.Type")))) 
                                      (46 (getstatic (fieldCP "withMetaMethod" "clojure.lang.Compiler$MetaExpr" (class "clojure.asm.commons.Method")))) 
                                      (49 (invokevirtual (methodCP "invokeInterface" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (52 (aload_1)) 
                                      (53 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (56 (if_acmpne 63))  ;;to TAG_0
                                      (59 (aload_3)) 
                                      (60 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (63 (return)) ;;at TAG_0
                                      (endofcode 64))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "expr" "clojure.lang.Compiler$MetaExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (invokeinterface
					(methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1))
                                      (9 (ireturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "expr" "clojure.lang.Compiler$MetaExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (invokeinterface
					(methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 18)
                                   (parsedcode
                                      (0 (ldc_w ))
                                      (3 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (6 (putstatic (fieldCP "IOBJ_TYPE" "clojure.lang.Compiler$MetaExpr" (class "clojure.asm.Type"))))
                                      (9 (ldc 0))         ;;STRING:: "clojure.lang.IObj withMeta(clojure.lang.IPersistentMap)"
                                      (11 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (14 (putstatic (fieldCP "withMetaMethod" "clojure.lang.Compiler$MetaExpr" (class "clojure.asm.commons.Method"))))
                                      (17 (return))
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$MetaExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$MetaExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$MetaExpr" . "clojure.lang"))

