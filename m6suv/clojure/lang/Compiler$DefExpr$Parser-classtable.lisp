; Compiler$DefExpr$Parser-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$DefExpr$Parser*
 (make-class-def
      '(class "clojure.lang.Compiler$DefExpr$Parser"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Too many arguments to def")
                        (STRING  "Too few arguments to def")
                        (STRING  "First argument to def must be a Symbol")
                        (STRING  "Can\nt refer to qualified var that doesn\nt exist")
                        (STRING  "Can\nt create defs outside of current ns")
                        (STRING  "*")
                        (STRING  "Warning: %1$s not declared dynamic and thus is not dynamically rebindable, but its name suggests otherwise. Please either indicate ^:dynamic %1$s or change the name. (%2$s:%3$d)\n")
                        (STRING  "NO_SOURCE_FILE"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 10) (max_locals . 10) (code_length . 538)
                                   (parsedcode
                                      (0 (aconst_null)) 
                                      (1 (astore_3)) 
                                      (2 (aload_2)) 
                                      (3 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (6 (iconst_4)) 
                                      (7 (if_icmpne 44)) ;;to TAG_0
                                      (10 (aload_2)) 
                                      (11 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (14 (instanceof (class "java.lang.String"))) 
                                      (17 (ifeq 44)) ;;to TAG_0
                                      (20 (aload_2)) 
                                      (21 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (24 (checkcast (class "java.lang.String"))) 
                                      (27 (astore_3)) 
                                      (28 (aload_2)) 
                                      (29 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (32 (aload_2)) 
                                      (33 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (36 (aload_2)) 
                                      (37 (invokestatic (methodCP "fourth" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (40 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (43 (astore_2)) 
                                      (44 (aload_2)) ;;at TAG_0
                                      (45 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (48 (iconst_3)) 
                                      (49 (if_icmple 58)) ;;to TAG_1
                                      (52 (ldc 0)) ;;STRING:: "Too many arguments to def"
                                      (54 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (57 (athrow)) 
                                      (58 (aload_2)) ;;at TAG_1
                                      (59 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (62 (iconst_2)) 
                                      (63 (if_icmpge 72)) ;;to TAG_2
                                      (66 (ldc 1)) ;;STRING:: "Too few arguments to def"
                                      (68 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (71 (athrow)) 
                                      (72 (aload_2)) ;;at TAG_2
                                      (73 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (76 (instanceof (class "clojure.lang.Symbol"))) 
                                      (79 (ifne 88)) ;;to TAG_3
                                      (82 (ldc 2)) ;;STRING:: "First argument to def must be a Symbol"
                                      (84 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (87 (athrow)) 
                                      (88 (aload_2)) ;;at TAG_3
                                      (89 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (92 (checkcast (class "clojure.lang.Symbol"))) 
                                      (95 (astore 4)) 
                                      (97 (aload 4)) 
                                      (99 (iconst_1)) 
                                      (100 (invokestatic (methodCP "lookupVar" "clojure.lang.Compiler" ((class "clojure.lang.Symbol") boolean) (class "clojure.lang.Var")))) 
                                      (103 (astore 5)) 
                                      (105 (aload 5)) 
                                      (107 (ifnonnull 116)) ;;to TAG_4
                                      (110 (ldc 3)) ;;STRING:: "Can\nt refer to qualified var that doesn\nt exist"
                                      (112 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (115 (athrow)) 
                                      (116 (aload 5)) ;;at TAG_4
                                      (118 (getfield (fieldCP "ns" "clojure.lang.Var" (class "clojure.lang.Namespace")))) 
                                      (121 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) 
                                      (124 (invokevirtual (methodCP "equals" "java.lang.Object" ((class "java.lang.Object")) boolean))) 
                                      (127 (ifne 157)) ;;to TAG_5
                                      (130 (aload 4)) 
                                      (132 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (135 (ifnonnull 151)) ;;to TAG_6
                                      (138 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) 
                                      (141 (aload 4)) 
                                      (143 (invokevirtual (methodCP "intern" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "clojure.lang.Var")))) 
                                      (146 (astore 5)) 
                                      (148 (goto 157)) ;;to TAG_5
                                      (151 (ldc 4)) ;;at TAG_6;;STRING:: "Can\nt create defs outside of current ns"
                                      (153 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (156 (athrow)) 
                                      (157 (aload 4)) ;;at TAG_5
                                      (159 (invokevirtual (methodCP "meta" "clojure.lang.Symbol" () (class "clojure.lang.IPersistentMap")))) 
                                      (162 (astore 6)) 
                                      (164 (aload 6)) 
                                      (166 (getstatic (fieldCP "dynamicKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (169 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (172 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (175 (istore 7)) 
                                      (177 (iload 7)) 
                                      (179 (ifeq 188)) ;;to TAG_7
                                      (182 (aload 5)) 
                                      (184 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" () (class "clojure.lang.Var")))) 
                                      (187 (pop)) 
                                      (188 (iload 7)) ;;at TAG_7
                                      (190 (ifne 267)) ;;to TAG_8
                                      (193 (aload 4)) 
                                      (195 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (198 (ldc 5)) ;;STRING:: "*"
                                      (200 (invokevirtual (methodCP "startsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (203 (ifeq 267)) ;;to TAG_8
                                      (206 (aload 4)) 
                                      (208 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (211 (ldc 5)) ;;STRING:: "*"
                                      (213 (invokevirtual (methodCP "endsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (216 (ifeq 267)) ;;to TAG_8
                                      (219 (aload 4)) 
                                      (221 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (224 (invokevirtual (methodCP "length" "java.lang.String" () int))) 
                                      (227 (iconst_1)) 
                                      (228 (if_icmple 267)) ;;to TAG_8
                                      (231 (invokestatic (methodCP "errPrintWriter" "clojure.lang.RT" () (class "java.io.PrintWriter")))) 
                                      (234 (ldc 6)) ;;STRING:: "Warning: %1$s not declared dynamic and thus is not dynamically rebindable, but its name suggests otherwise. Please either indicate ^:dynamic %1$s or change the name. (%2$s:%3$d)\n"
                                      (236 (iconst_3)) 
                                      (237 (anewarray (class "java.lang.Object"))) 
                                      (240 (dup)) 
                                      (241 (iconst_0)) 
                                      (242 (aload 4)) 
                                      (244 (aastore)) 
                                      (245 (dup)) 
                                      (246 (iconst_1)) 
                                      (247 (getstatic (fieldCP "SOURCE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (250 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (253 (aastore)) 
                                      (254 (dup)) 
                                      (255 (iconst_2)) 
                                      (256 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (259 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (262 (aastore)) 
                                      (263 (invokevirtual (methodCP "format" "java.io.PrintWriter" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.io.PrintWriter")))) 
                                      (266 (pop)) 
                                      (267 (aload 6)) ;;at TAG_8
                                      (269 (getstatic (fieldCP "arglistsKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (272 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (275 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (278 (ifeq 321)) ;;to TAG_9
                                      (281 (aload 5)) 
                                      (283 (invokevirtual (methodCP "meta" "clojure.lang.Var" () (class "clojure.lang.IPersistentMap")))) 
                                      (286 (astore 8)) 
                                      (288 (aload 8)) 
                                      (290 (getstatic (fieldCP "arglistsKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (293 (aload 6)) 
                                      (295 (getstatic (fieldCP "arglistsKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (298 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (303 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (306 (invokestatic (methodCP "assoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative")))) 
                                      (309 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (312 (astore 8)) 
                                      (314 (aload 5)) 
                                      (316 (aload 8)) 
                                      (318 (invokevirtual (methodCP "setMeta" "clojure.lang.Var" ((class "clojure.lang.IPersistentMap")) void))) 
                                      (321 (getstatic (fieldCP "SOURCE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_9
                                      (324 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (327 (astore 8)) 
                                      (329 (aload 8)) 
                                      (331 (ifnonnull 339)) ;;to TAG_10
                                      (334 (ldc 7)) ;;STRING:: "NO_SOURCE_FILE"
                                      (336 (goto 341)) ;;to TAG_11
                                      (339 (aload 8)) ;;at TAG_10
                                      (341 (astore 8)) ;;at TAG_11
                                      (343 (aload 6)) 
                                      (345 (getstatic (fieldCP "LINE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (348 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (351 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (354 (invokestatic (methodCP "assoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative")))) 
                                      (357 (getstatic (fieldCP "COLUMN_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (360 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (363 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (366 (invokeinterface (methodCP "assoc" "clojure.lang.Associative" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative")) 3)) 
                                      (371 (getstatic (fieldCP "FILE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (374 (aload 8)) 
                                      (376 (invokeinterface (methodCP "assoc" "clojure.lang.Associative" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative")) 3)) 
                                      (381 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (384 (astore 6)) 
                                      (386 (aload_3)) 
                                      (387 (ifnull 404)) ;;to TAG_12
                                      (390 (aload 6)) 
                                      (392 (getstatic (fieldCP "DOC_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (395 (aload_3)) 
                                      (396 (invokestatic (methodCP "assoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative")))) 
                                      (399 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (402 (astore 6)) 
                                      (404 (aload 6)) ;;at TAG_12
                                      (406 (invokestatic (methodCP "elideMeta" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (409 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (412 (astore 6)) 
                                      (414 (aload 6)) 
                                      (416 (invokeinterface (methodCP "count" "clojure.lang.IPersistentMap" () int) 1)) 
                                      (421 (ifne 428))  ;;to TAG_13
                                      (424 (aconst_null)) 
                                      (425 (goto 447)) ;;to TAG_14
                                      (428 (aload_1)) ;;at TAG_13
                                      (429 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (432 (if_acmpne 439)) ;;to TAG_15
                                      (435 (aload_1)) 
                                      (436 (goto 442)) ;;to TAG_16
                                      (439 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_15
                                      (442 (aload 6)) ;;at TAG_16
                                      (444 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (447 (astore 9)) ;;at TAG_14
                                      (449 (new (class "clojure.lang.Compiler$DefExpr"))) 
                                      (452 (dup)) 
                                      (453 (getstatic (fieldCP "SOURCE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (456 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (459 (checkcast (class "java.lang.String"))) 
                                      (462 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (465 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (468 (checkcast (class "java.lang.Integer"))) 
                                      (471 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (474 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (477 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (480 (checkcast (class "java.lang.Integer"))) 
                                      (483 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (486 (aload 5)) 
                                      (488 (aload_1)) 
                                      (489 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (492 (if_acmpne 499)) ;;to TAG_17
                                      (495 (aload_1)) 
                                      (496 (goto 502)) ;;to TAG_18
                                      (499 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_17
                                      (502 (aload_2)) ;;at TAG_18
                                      (503 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (506 (aload 5)) 
                                      (508 (getfield (fieldCP "sym" "clojure.lang.Var" (class "clojure.lang.Symbol")))) 
                                      (511 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (514 (invokestatic (methodCP "access$100" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object") (class "java.lang.String")) (class "clojure.lang.Compiler$Expr")))) 
                                      (517 (aload 9)) 
                                      (519 (aload_2)) 
                                      (520 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (523 (iconst_3)) 
                                      (524 (if_icmpne 531)) ;;to TAG_19
                                      (527 (iconst_1)) 
                                      (528 (goto 532)) ;;to TAG_20
                                      (531 (iconst_0)) ;;at TAG_19
                                      (532 (iload 7)) ;;at TAG_20
                                      (534 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$DefExpr" ((class "java.lang.String") int int (class "clojure.lang.Var") (class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr") boolean boolean) void))) 
                                      (537 (areturn)) 
                                      (endofcode 538))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$IParser")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$DefExpr$Parser-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$DefExpr$Parser*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$DefExpr$Parser" . "clojure.lang"))

