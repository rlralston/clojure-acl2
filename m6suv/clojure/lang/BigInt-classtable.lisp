; BigInt-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(include-book "../../model-translation")

(defconst *clojure.lang.BigInt*
 (make-class-def
      '(class "clojure.lang.BigInt"
            "java.lang.Number"
            (constant_pool)
            (fields
                        (field "lpart" long (accessflags  *class*  *final*  *public* ) -1)
                        (field "bipart" (class "java.math.BigInteger") (accessflags  *class*  *final*  *public* ) -1)
                        (field "ZERO" (class "clojure.lang.BigInt") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "ONE" (class "clojure.lang.BigInt") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "hashCode"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 1) (code_length . 29)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 21))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (11 (aload_0)) 
                                      (12 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (15 (bipush 32)) 
                                      (17 (lushr)) 
                                      (18 (lxor)) 
                                      (19 (l2i)) 
                                      (20 (ireturn)) 
                                      (21 (aload_0)) ;;at TAG_0
                                      (22 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (25 (invokevirtual (methodCP "hashCode" "java.math.BigInteger" () int))) 
                                      (28 (ireturn)) 
                                      (endofcode 29))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equals"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 80)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (if_acmpne 7)) ;;to TAG_0
                                      (5 (iconst_1)) 
                                      (6 (ireturn)) 
                                      (7 (aload_1)) ;;at TAG_0
                                      (8 (instanceof (class "clojure.lang.BigInt"))) 
                                      (11 (ifeq 78)) ;;to TAG_1
                                      (14 (aload_1)) 
                                      (15 (checkcast (class "clojure.lang.BigInt"))) 
                                      (18 (astore_2)) 
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (23 (ifnonnull 51))  ;;to TAG_2
                                      (26 (aload_2)) 
                                      (27 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (30 (ifnonnull 49)) ;;to TAG_3
                                      (33 (aload_0)) 
                                      (34 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (37 (aload_2)) 
                                      (38 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (41 (lcmp)) 
                                      (42 (ifne 49)) ;;to TAG_3
                                      (45 (iconst_1)) 
                                      (46 (goto 50)) ;;to TAG_4
                                      (49 (iconst_0)) ;;at TAG_3
                                      (50 (ireturn)) ;;at TAG_4
                                      (51 (aload_2)) ;;at TAG_2
                                      (52 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (55 (ifnull 76)) ;;to TAG_5
                                      (58 (aload_0)) 
                                      (59 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (62 (aload_2)) 
                                      (63 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (66 (invokevirtual (methodCP "equals" "java.math.BigInteger" ((class "java.lang.Object")) boolean))) 
                                      (69 (ifeq 76)) ;;to TAG_5
                                      (72 (iconst_1)) 
                                      (73 (goto 77)) ;;to TAG_6
                                      (76 (iconst_0)) ;;at TAG_5
                                      (77 (ireturn)) ;;at TAG_6
                                      (78 (iconst_0)) ;;at TAG_1
                                      (79 (ireturn)) 
                                      (endofcode 80))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters long (class "java.math.BigInteger"))
                              (returntype . void)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
                    (methodCP "<init>" "java.lang.Number" () void)))
                                      (4 (aload_0))
                                      (5 (lload_1))
                                      (6 (putfield (fieldCP "lpart" "clojure.lang.BigInt" long)))
                                      (9 (aload_0))
                                      (10 (aload_3))
                                      (11 (putfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "fromBigInteger"
                              (parameters (class "java.math.BigInteger"))
                              (returntype . (class "clojure.lang.BigInt"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 1) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "bitLength" "java.math.BigInteger" () int))) 
                                      (4 (bipush 64)) 
                                      (6 (if_icmpge 22))  ;;to TAG_0
                                      (9 (new (class "clojure.lang.BigInt"))) 
                                      (12 (dup)) 
                                      (13 (aload_0)) 
                                      (14 (invokevirtual (methodCP "longValue" "java.math.BigInteger" () long))) 
                                      (17 (aconst_null)) 
                                      (18 (invokespecial (methodCP "<init>" "clojure.lang.BigInt" (long (class "java.math.BigInteger")) void))) 
                                      (21 (areturn)) 
                                      (22 (new (class "clojure.lang.BigInt"))) ;;at TAG_0
                                      (25 (dup)) 
                                      (26 (lconst_0)) 
                                      (27 (aload_0)) 
                                      (28 (invokespecial (methodCP "<init>" "clojure.lang.BigInt" (long (class "java.math.BigInteger")) void))) 
                                      (31 (areturn)) 
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "fromLong"
                              (parameters long)
                              (returntype . (class "clojure.lang.BigInt"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.BigInt")))
                                      (3 (dup))
                                      (4 (lload_0))
                                      (5 (aconst_null))
                                      (6 (invokespecial
                    (methodCP "<init>" "clojure.lang.BigInt" (long (class "java.math.BigInteger")) void)))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toBigInteger"
                              (parameters )
                              (returntype . (class "java.math.BigInteger"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 15))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (11 (invokestatic (methodCP "valueOf" "java.math.BigInteger" (long) (class "java.math.BigInteger")))) 
                                      (14 (areturn)) 
                                      (15 (aload_0)) ;;at TAG_0
                                      (16 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (19 (areturn)) 
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toBigDecimal"
                              (parameters )
                              (returntype . (class "java.math.BigDecimal"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 15))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (11 (invokestatic (methodCP "valueOf" "java.math.BigDecimal" (long) (class "java.math.BigDecimal")))) 
                                      (14 (areturn)) 
                                      (15 (new (class "java.math.BigDecimal"))) ;;at TAG_0
                                      (18 (dup)) 
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (23 (invokespecial (methodCP "<init>" "java.math.BigDecimal" ((class "java.math.BigInteger")) void))) 
                                      (26 (areturn)) 
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "intValue"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 13))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (11 (l2i)) 
                                      (12 (ireturn)) 
                                      (13 (aload_0)) ;;at TAG_0
                                      (14 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (17 (invokevirtual (methodCP "intValue" "java.math.BigInteger" () int))) 
                                      (20 (ireturn)) 
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "longValue"
                              (parameters )
                              (returntype . long)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 12))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (11 (lreturn)) 
                                      (12 (aload_0)) ;;at TAG_0
                                      (13 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (16 (invokevirtual (methodCP "longValue" "java.math.BigInteger" () long))) 
                                      (19 (lreturn)) 
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "floatValue"
                              (parameters )
                              (returntype . float)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 13))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (11 (l2f)) 
                                      (12 (freturn)) 
                                      (13 (aload_0)) ;;at TAG_0
                                      (14 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (17 (invokevirtual (methodCP "floatValue" "java.math.BigInteger" () float))) 
                                      (20 (freturn)) 
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doubleValue"
                              (parameters )
                              (returntype . double)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 13))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (11 (l2d)) 
                                      (12 (dreturn)) 
                                      (13 (aload_0)) ;;at TAG_0
                                      (14 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (17 (invokevirtual (methodCP "doubleValue" "java.math.BigInteger" () double))) 
                                      (20 (dreturn)) 
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "byteValue"
                              (parameters )
                              (returntype . byte)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 14))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (11 (l2i)) 
                                      (12 (i2b)) 
                                      (13 (ireturn)) 
                                      (14 (aload_0)) ;;at TAG_0
                                      (15 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (18 (invokevirtual (methodCP "byteValue" "java.math.BigInteger" () byte))) 
                                      (21 (ireturn)) 
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shortValue"
                              (parameters )
                              (returntype . short)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 14))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (11 (l2i)) 
                                      (12 (i2s)) 
                                      (13 (ireturn)) 
                                      (14 (aload_0)) ;;at TAG_0
                                      (15 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (18 (invokevirtual (methodCP "shortValue" "java.math.BigInteger" () short))) 
                                      (21 (ireturn)) 
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valueOf"
                              (parameters long)
                              (returntype . (class "clojure.lang.BigInt"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.BigInt")))
                                      (3 (dup))
                                      (4 (lload_0))
                                      (5 (aconst_null))
                                      (6 (invokespecial
                    (methodCP "<init>" "clojure.lang.BigInt" (long (class "java.math.BigInteger")) void)))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toString"
                              (parameters )
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 23)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 15))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (11 (invokestatic (methodCP "valueOf" "java.lang.String" (long) (class "java.lang.String")))) 
                                      (14 (areturn)) 
                                      (15 (aload_0)) ;;at TAG_0
                                      (16 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (19 (invokevirtual (methodCP "toString" "java.math.BigInteger" () (class "java.lang.String")))) 
                                      (22 (areturn)) 
                                      (endofcode 23))
                                   (Exceptions )
                                   (StackMap )))
                        (method "bitLength"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
                    (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger"))))
                                      (4 (invokevirtual
                    (methodCP "bitLength" "java.math.BigInteger" () int)))
                                      (7 (ireturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters (class "clojure.lang.BigInt"))
                              (returntype . (class "clojure.lang.BigInt"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 66)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 51))  ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (11 (ifnonnull 51))  ;;to TAG_0
                                      (14 (aload_0)) 
                                      (15 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (18 (aload_1)) 
                                      (19 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (22 (ladd)) 
                                      (23 (lstore_2)) 
                                      (24 (lload_2)) 
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (29 (lxor)) 
                                      (30 (lconst_0)) 
                                      (31 (lcmp)) 
                                      (32 (ifge 46)) ;;to TAG_1
                                      (35 (lload_2)) 
                                      (36 (aload_1)) 
                                      (37 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (40 (lxor)) 
                                      (41 (lconst_0)) 
                                      (42 (lcmp)) 
                                      (43 (iflt 51))  ;;to TAG_0
                                      (46 (lload_2)) ;;at TAG_1
                                      (47 (invokestatic (methodCP "valueOf" "clojure.lang.BigInt" (long) (class "clojure.lang.BigInt")))) 
                                      (50 (areturn)) 
                                      (51 (aload_0)) ;;at TAG_0
                                      (52 (invokevirtual (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger")))) 
                                      (55 (aload_1)) 
                                      (56 (invokevirtual (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger")))) 
                                      (59 (invokevirtual (methodCP "add" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger")))) 
                                      (62 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (65 (areturn)) 
                                      (endofcode 66))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters (class "clojure.lang.BigInt"))
                              (returntype . (class "clojure.lang.BigInt"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 67)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 52))  ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (11 (ifnonnull 52))  ;;to TAG_0
                                      (14 (aload_0)) 
                                      (15 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (18 (aload_1)) 
                                      (19 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (22 (lmul)) 
                                      (23 (lstore_2)) 
                                      (24 (aload_1)) 
                                      (25 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (28 (lconst_0)) 
                                      (29 (lcmp)) 
                                      (30 (ifeq 47)) ;;to TAG_1
                                      (33 (lload_2)) 
                                      (34 (aload_1)) 
                                      (35 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (38 (ldiv)) 
                                      (39 (aload_0)) 
                                      (40 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (43 (lcmp)) 
                                      (44 (ifne 52))  ;;to TAG_0
                                      (47 (lload_2)) ;;at TAG_1
                                      (48 (invokestatic (methodCP "valueOf" "clojure.lang.BigInt" (long) (class "clojure.lang.BigInt")))) 
                                      (51 (areturn)) 
                                      (52 (aload_0)) ;;at TAG_0
                                      (53 (invokevirtual (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger")))) 
                                      (56 (aload_1)) 
                                      (57 (invokevirtual (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger")))) 
                                      (60 (invokevirtual (methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger")))) 
                                      (63 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (66 (areturn)) 
                                      (endofcode 67))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters (class "clojure.lang.BigInt"))
                              (returntype . (class "clojure.lang.BigInt"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 42)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 27))  ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (11 (ifnonnull 27))  ;;to TAG_0
                                      (14 (aload_0)) 
                                      (15 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (18 (aload_1)) 
                                      (19 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (22 (ldiv)) 
                                      (23 (invokestatic (methodCP "valueOf" "clojure.lang.BigInt" (long) (class "clojure.lang.BigInt")))) 
                                      (26 (areturn)) 
                                      (27 (aload_0)) ;;at TAG_0
                                      (28 (invokevirtual (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger")))) 
                                      (31 (aload_1)) 
                                      (32 (invokevirtual (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger")))) 
                                      (35 (invokevirtual (methodCP "divide" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger")))) 
                                      (38 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (41 (areturn)) 
                                      (endofcode 42))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters (class "clojure.lang.BigInt"))
                              (returntype . (class "clojure.lang.BigInt"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 42)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 27))  ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (11 (ifnonnull 27))  ;;to TAG_0
                                      (14 (aload_0)) 
                                      (15 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (18 (aload_1)) 
                                      (19 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (22 (lrem)) 
                                      (23 (invokestatic (methodCP "valueOf" "clojure.lang.BigInt" (long) (class "clojure.lang.BigInt")))) 
                                      (26 (areturn)) 
                                      (27 (aload_0)) ;;at TAG_0
                                      (28 (invokevirtual (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger")))) 
                                      (31 (aload_1)) 
                                      (32 (invokevirtual (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger")))) 
                                      (35 (invokevirtual (methodCP "remainder" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger")))) 
                                      (38 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (41 (areturn)) 
                                      (endofcode 42))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters (class "clojure.lang.BigInt"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 52)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 32)) ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (11 (ifnonnull 32)) ;;to TAG_0
                                      (14 (aload_0)) 
                                      (15 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (18 (aload_1)) 
                                      (19 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (22 (lcmp)) 
                                      (23 (ifge 30)) ;;to TAG_1
                                      (26 (iconst_1)) 
                                      (27 (goto 31))  ;;to TAG_2
                                      (30 (iconst_0)) ;;at TAG_1
                                      (31 (ireturn)) ;;at TAG_2
                                      (32 (aload_0)) ;;at TAG_0
                                      (33 (invokevirtual (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger")))) 
                                      (36 (aload_1)) 
                                      (37 (invokevirtual (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger")))) 
                                      (40 (invokevirtual (methodCP "compareTo" "java.math.BigInteger" ((class "java.math.BigInteger")) int))) 
                                      (43 (ifge 50)) ;;to TAG_3
                                      (46 (iconst_1)) 
                                      (47 (goto 51)) ;;to TAG_4
                                      (50 (iconst_0)) ;;at TAG_3
                                      (51 (ireturn)) ;;at TAG_4
                                      (endofcode 52))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 0) (code_length . 25)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.BigInt")))
                                      (3 (dup))
                                      (4 (lconst_0))
                                      (5 (aconst_null))
                                      (6 (invokespecial
                    (methodCP "<init>" "clojure.lang.BigInt" (long (class "java.math.BigInteger")) void)))
                                      (9 (putstatic (fieldCP "ZERO" "clojure.lang.BigInt" (class "clojure.lang.BigInt"))))
                                      (12 (new (class "clojure.lang.BigInt")))
                                      (15 (dup))
                                      (16 (lconst_1))
                                      (17 (aconst_null))
                                      (18 (invokespecial
                    (methodCP "<init>" "clojure.lang.BigInt" (long (class "java.math.BigInteger")) void)))
                                      (21 (putstatic (fieldCP "ONE" "clojure.lang.BigInt" (class "clojure.lang.BigInt"))))
                                      (24 (return))
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))#|ACL2s-ToDo-Line|#



;(defconst *BigInt-class-table*
;  (make-static-class-decls 
;   *clojure.lang.BigInt*))

;(defconst *package-name-map* 
;  ("clojure.lang.BigInt" . "clojure.lang"))

