; Compiler$CaseExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$CaseExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$CaseExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Unexpected switch type: ")
                        (STRING  "Unexpected test type: ")
                        (STRING  "Performance warning, %s:%d:%d - hash collision of some case test constants; if selected, those entries will be tested sequentially.\n")
                        (STRING  "Can\nt eval case")
                        (STRING  "Performance warning, %s:%d:%d - case has int tests, but tested expression is not primitive.\n")
                        (STRING  "int intValue()")
                        (STRING  "int hash(Object)")
                        (STRING  "int hashCode()")
                        (STRING  "boolean equiv(Object, Object)")
                        (STRING  "compact")
                        (STRING  "sparse")
                        (STRING  "hash-identity")
                        (STRING  "hash-equiv")
                        (STRING  "int"))
            (fields
                        (field "expr" (class "clojure.lang.Compiler$LocalBindingExpr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "shift" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "mask" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "low" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "high" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "defaultExpr" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "tests" (class "java.util.SortedMap") (accessflags  *class*  *final*  *public* ) -1)
                        (field "thens" (class "java.util.HashMap") (accessflags  *class*  *final*  *public* ) -1)
                        (field "switchType" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public* ) -1)
                        (field "testType" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public* ) -1)
                        (field "skipCheck" (class "java.util.Set") (accessflags  *class*  *final*  *public* ) -1)
                        (field "returnType" (class "java.lang.Class") (accessflags  *class*  *final*  *public* ) -1)
                        (field "line" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "column" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "NUMBER_TYPE" (class "clojure.asm.Type") (accessflags  *class*  *final*  *static* ) -1)
                        (field "intValueMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "hashMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "hashCodeMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "equivMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "compactKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "sparseKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "hashIdentityKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "hashEquivKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1)
                        (field "intKey" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters int int (class "clojure.lang.Compiler$LocalBindingExpr") int int int int (class "clojure.lang.Compiler$Expr") (class "java.util.SortedMap") (class "java.util.HashMap") (class "clojure.lang.Keyword") (class "clojure.lang.Keyword") (class "java.util.Set"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 15) (code_length . 265)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "<init>" "java.lang.Object" () void))) 
                                      (4 (aload_0)) 
                                      (5 (aload_3)) 
                                      (6 (putfield (fieldCP "expr" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Compiler$LocalBindingExpr")))) 
                                      (9 (aload_0)) 
                                      (10 (iload 4)) 
                                      (12 (putfield (fieldCP "shift" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (15 (aload_0)) 
                                      (16 (iload 5)) 
                                      (18 (putfield (fieldCP "mask" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (21 (aload_0)) 
                                      (22 (iload 6)) 
                                      (24 (putfield (fieldCP "low" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (27 (aload_0)) 
                                      (28 (iload 7)) 
                                      (30 (putfield (fieldCP "high" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (33 (aload_0)) 
                                      (34 (aload 8)) 
                                      (36 (putfield (fieldCP "defaultExpr" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (39 (aload_0)) 
                                      (40 (aload 9)) 
                                      (42 (putfield (fieldCP "tests" "clojure.lang.Compiler$CaseExpr" (class "java.util.SortedMap")))) 
                                      (45 (aload_0)) 
                                      (46 (aload 10)) 
                                      (48 (putfield (fieldCP "thens" "clojure.lang.Compiler$CaseExpr" (class "java.util.HashMap")))) 
                                      (51 (aload_0)) 
                                      (52 (iload_1)) 
                                      (53 (putfield (fieldCP "line" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (56 (aload_0)) 
                                      (57 (iload_2)) 
                                      (58 (putfield (fieldCP "column" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (61 (aload 11)) 
                                      (63 (getstatic (fieldCP "compactKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (66 (if_acmpeq 105)) ;;to TAG_0
                                      (69 (aload 11)) 
                                      (71 (getstatic (fieldCP "sparseKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (74 (if_acmpeq 105)) ;;to TAG_0
                                      (77 (new (class "java.lang.IllegalArgumentException"))) 
                                      (80 (dup)) 
                                      (81 (new (class "java.lang.StringBuilder"))) 
                                      (84 (dup)) 
                                      (85 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (88 (ldc 0)) ;;STRING:: "Unexpected switch type: "
                                      (90 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (93 (aload 11)) 
                                      (95 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (98 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (101 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (104 (athrow)) 
                                      (105 (aload_0)) ;;at TAG_0
                                      (106 (aload 11)) 
                                      (108 (putfield (fieldCP "switchType" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (111 (aload 12)) 
                                      (113 (getstatic (fieldCP "intKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (116 (if_acmpeq 163)) ;;to TAG_1
                                      (119 (aload 12)) 
                                      (121 (getstatic (fieldCP "hashEquivKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (124 (if_acmpeq 163)) ;;to TAG_1
                                      (127 (aload 12)) 
                                      (129 (getstatic (fieldCP "hashIdentityKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (132 (if_acmpeq 163)) ;;to TAG_1
                                      (135 (new (class "java.lang.IllegalArgumentException"))) 
                                      (138 (dup)) 
                                      (139 (new (class "java.lang.StringBuilder"))) 
                                      (142 (dup)) 
                                      (143 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (146 (ldc 1)) ;;STRING:: "Unexpected test type: "
                                      (148 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (151 (aload 11)) 
                                      (153 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (156 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (159 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (162 (athrow)) 
                                      (163 (aload_0)) ;;at TAG_1
                                      (164 (aload 12)) 
                                      (166 (putfield (fieldCP "testType" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (169 (aload_0)) 
                                      (170 (aload 13)) 
                                      (172 (putfield (fieldCP "skipCheck" "clojure.lang.Compiler$CaseExpr" (class "java.util.Set")))) 
                                      (175 (new (class "java.util.ArrayList"))) 
                                      (178 (dup)) 
                                      (179 (aload 10)) 
                                      (181 (invokevirtual (methodCP "values" "java.util.HashMap" () (class "java.util.Collection")))) 
                                      (184 (invokespecial (methodCP "<init>" "java.util.ArrayList" ((class "java.util.Collection")) void))) 
                                      (187 (astore 14)) 
                                      (189 (aload 14)) 
                                      (191 (aload 8)) 
                                      (193 (invokeinterface (methodCP "add" "java.util.Collection" ((class "java.lang.Object")) boolean) 2)) 
                                      (198 (pop)) 
                                      (199 (aload_0)) 
                                      (200 (aload 14)) 
                                      (202 (invokestatic (methodCP "maybeJavaClass" "clojure.lang.Compiler" ((class "java.util.Collection")) (class "java.lang.Class")))) 
                                      (205 (putfield (fieldCP "returnType" "clojure.lang.Compiler$CaseExpr" (class "java.lang.Class")))) 
                                      (208 (aload 13)) 
                                      (210 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (213 (ifle 264))  ;;to TAG_2
                                      (216 (getstatic (fieldCP "WARN_ON_REFLECTION" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (219 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (222 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (225 (ifeq 264))  ;;to TAG_2
                                      (228 (invokestatic (methodCP "errPrintWriter" "clojure.lang.RT" () (class "java.io.PrintWriter")))) 
                                      (231 (ldc 2)) ;;STRING:: "Performance warning, %s:%d:%d - hash collision of some case test constants; if selected, those entries will be tested sequentially.\n"
                                      (233 (iconst_3)) 
                                      (234 (anewarray (class "java.lang.Object"))) 
                                      (237 (dup)) 
                                      (238 (iconst_0)) 
                                      (239 (getstatic (fieldCP "SOURCE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (242 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (245 (aastore)) 
                                      (246 (dup)) 
                                      (247 (iconst_1)) 
                                      (248 (iload_1)) 
                                      (249 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (252 (aastore)) 
                                      (253 (dup)) 
                                      (254 (iconst_2)) 
                                      (255 (iload_2)) 
                                      (256 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (259 (aastore)) 
                                      (260 (invokevirtual (methodCP "format" "java.io.PrintWriter" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.io.PrintWriter")))) 
                                      (263 (pop)) 
                                      (264 (return)) ;;at TAG_2
                                      (endofcode 265))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "returnType" "clojure.lang.Compiler$CaseExpr" (class "java.lang.Class")))) 
                                      (4 (ifnull 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "canEmitPrimitive"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "returnType" "clojure.lang.Compiler$CaseExpr" (class "java.lang.Class"))))
                                      (4 (invokestatic
					(methodCP "isPrimitive" "clojure.lang.Util" ((class "java.lang.Class")) boolean)))
                                      (7 (ireturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "returnType" "clojure.lang.Compiler$CaseExpr" (class "java.lang.Class"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (ldc 3))         ;;STRING:: "Can\nt eval case"
                                      (6 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void)))
                                      (9 (athrow))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (aload_3))
                                      (4 (iconst_0))
                                      (5 (invokevirtual
					(methodCP "doEmit" "clojure.lang.Compiler$CaseExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") boolean) void)))
                                      (8 (return))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitUnboxed"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (aload_3))
                                      (4 (iconst_1))
                                      (5 (invokevirtual
					(methodCP "doEmit" "clojure.lang.Compiler$CaseExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") boolean) void)))
                                      (8 (return))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doEmit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") boolean)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 12) (code_length . 528)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (4 (astore 5)) 
                                      (6 (aload_3)) 
                                      (7 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (10 (astore 6)) 
                                      (12 (new (class "java.util.TreeMap"))) 
                                      (15 (dup)) 
                                      (16 (invokespecial (methodCP "<init>" "java.util.TreeMap" () void))) 
                                      (19 (astore 7)) 
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "tests" "clojure.lang.Compiler$CaseExpr" (class "java.util.SortedMap")))) 
                                      (25 (invokeinterface (methodCP "keySet" "java.util.SortedMap" () (class "java.util.Set")) 1)) 
                                      (30 (invokeinterface (methodCP "iterator" "java.util.Set" () (class "java.util.Iterator")) 1)) 
                                      (35 (astore 8)) 
                                      (37 (aload 8)) ;;at TAG_1
                                      (39 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (44 (ifeq 76)) ;;to TAG_0
                                      (47 (aload 8)) 
                                      (49 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (54 (checkcast (class "java.lang.Integer"))) 
                                      (57 (astore 9)) 
                                      (59 (aload 7)) 
                                      (61 (aload 9)) 
                                      (63 (aload_3)) 
                                      (64 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (67 (invokeinterface (methodCP "put" "java.util.SortedMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (72 (pop)) 
                                      (73 (goto 37)) ;;to TAG_1
                                      (76 (aload_3)) ;;at TAG_0
                                      (77 (aload_0)) 
                                      (78 (getfield (fieldCP "line" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (81 (aload_3)) 
                                      (82 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (85 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (88 (aload_0)) 
                                      (89 (getfield (fieldCP "expr" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Compiler$LocalBindingExpr")))) 
                                      (92 (invokestatic (methodCP "maybePrimitiveType" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$Expr")) (class "java.lang.Class")))) 
                                      (95 (astore 8)) 
                                      (97 (aload 8)) 
                                      (99 (ifnonnull 106)) ;;to TAG_2
                                      (102 (aconst_null)) 
                                      (103 (goto 111)) ;;to TAG_3
                                      (106 (aload 8)) ;;at TAG_2
                                      (108 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (111 (astore 9)) ;;at TAG_3
                                      (113 (aload_0)) 
                                      (114 (getfield (fieldCP "testType" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (117 (getstatic (fieldCP "intKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (120 (if_acmpne 136)) ;;to TAG_4
                                      (123 (aload_0)) 
                                      (124 (aload_2)) 
                                      (125 (aload_3)) 
                                      (126 (aload 9)) 
                                      (128 (aload 5)) 
                                      (130 (invokespecial (methodCP "emitExprForInts" "clojure.lang.Compiler$CaseExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.asm.Type") (class "clojure.asm.Label")) void))) 
                                      (133 (goto 142)) ;;to TAG_5
                                      (136 (aload_0)) ;;at TAG_4
                                      (137 (aload_2)) 
                                      (138 (aload_3)) 
                                      (139 (invokespecial (methodCP "emitExprForHashes" "clojure.lang.Compiler$CaseExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (142 (aload_0)) ;;at TAG_5
                                      (143 (getfield (fieldCP "switchType" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (146 (getstatic (fieldCP "sparseKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (149 (if_acmpne 210)) ;;to TAG_6
                                      (152 (aload 7)) 
                                      (154 (invokeinterface (methodCP "size" "java.util.SortedMap" () int) 1)) 
                                      (159 (anewarray (class "clojure.asm.Label"))) 
                                      (162 (astore 10)) 
                                      (164 (aload 7)) 
                                      (166 (invokeinterface (methodCP "values" "java.util.SortedMap" () (class "java.util.Collection")) 1)) 
                                      (171 (aload 10)) 
                                      (173 (invokeinterface (methodCP "toArray" "java.util.Collection" ((array (class "java.lang.Object"))) (array (class "java.lang.Object"))) 2)) 
                                      (178 (checkcast (array (class "clojure.asm.Label")))) 
                                      (181 (astore 10)) 
                                      (183 (aload_0)) 
                                      (184 (getfield (fieldCP "tests" "clojure.lang.Compiler$CaseExpr" (class "java.util.SortedMap")))) 
                                      (187 (invokeinterface (methodCP "keySet" "java.util.SortedMap" () (class "java.util.Set")) 1)) 
                                      (192 (invokestatic (methodCP "int_array" "clojure.lang.Numbers" ((class "java.lang.Object")) (array int)))) 
                                      (195 (astore 11)) 
                                      (197 (aload_3)) 
                                      (198 (aload 5)) 
                                      (200 (aload 11)) 
                                      (202 (aload 10)) 
                                      (204 (invokevirtual (methodCP "visitLookupSwitchInsn" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label") (array int) (array (class "clojure.asm.Label"))) void))) 
                                      (207 (goto 308)) ;;to TAG_7
                                      (210 (aload_0)) ;;at TAG_6
                                      (211 (getfield (fieldCP "high" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (214 (aload_0)) 
                                      (215 (getfield (fieldCP "low" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (218 (isub)) 
                                      (219 (iconst_1)) 
                                      (220 (iadd)) 
                                      (221 (anewarray (class "clojure.asm.Label"))) 
                                      (224 (astore 10)) 
                                      (226 (aload_0)) 
                                      (227 (getfield (fieldCP "low" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (230 (istore 11)) 
                                      (232 (iload 11)) ;;at TAG_11
                                      (234 (aload_0)) 
                                      (235 (getfield (fieldCP "high" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (238 (if_icmpgt 292)) ;;to TAG_8
                                      (241 (aload 10)) 
                                      (243 (iload 11)) 
                                      (245 (aload_0)) 
                                      (246 (getfield (fieldCP "low" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (249 (isub)) 
                                      (250 (aload 7)) 
                                      (252 (iload 11)) 
                                      (254 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (257 (invokeinterface (methodCP "containsKey" "java.util.SortedMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (262 (ifeq 283)) ;;to TAG_9
                                      (265 (aload 7)) 
                                      (267 (iload 11)) 
                                      (269 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (272 (invokeinterface (methodCP "get" "java.util.SortedMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (277 (checkcast (class "clojure.asm.Label"))) 
                                      (280 (goto 285)) ;;to TAG_10
                                      (283 (aload 5)) ;;at TAG_9
                                      (285 (aastore)) ;;at TAG_10
                                      (286 (iinc 11 1)) 
                                      (289 (goto 232)) ;;to TAG_11
                                      (292 (aload_3)) ;;at TAG_8
                                      (293 (aload_0)) 
                                      (294 (getfield (fieldCP "low" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (297 (aload_0)) 
                                      (298 (getfield (fieldCP "high" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (301 (aload 5)) 
                                      (303 (aload 10)) 
                                      (305 (invokevirtual (methodCP "visitTableSwitchInsn" "clojure.asm.commons.GeneratorAdapter" (int int (class "clojure.asm.Label") (array (class "clojure.asm.Label"))) void))) 
                                      (308 (aload 7)) ;;at TAG_7
                                      (310 (invokeinterface (methodCP "keySet" "java.util.SortedMap" () (class "java.util.Set")) 1)) 
                                      (315 (invokeinterface (methodCP "iterator" "java.util.Set" () (class "java.util.Iterator")) 1)) 
                                      (320 (astore 10)) 
                                      (322 (aload 10)) ;;at TAG_16
                                      (324 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (329 (ifeq 493)) ;;to TAG_12
                                      (332 (aload 10)) 
                                      (334 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (339 (checkcast (class "java.lang.Integer"))) 
                                      (342 (astore 11)) 
                                      (344 (aload_3)) 
                                      (345 (aload 7)) 
                                      (347 (aload 11)) 
                                      (349 (invokeinterface (methodCP "get" "java.util.SortedMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (354 (checkcast (class "clojure.asm.Label"))) 
                                      (357 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (360 (aload_0)) 
                                      (361 (getfield (fieldCP "testType" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (364 (getstatic (fieldCP "intKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (367 (if_acmpne 411))  ;;to TAG_13
                                      (370 (aload_0)) 
                                      (371 (aload_2)) 
                                      (372 (aload_3)) 
                                      (373 (aload 9)) 
                                      (375 (aload_0)) 
                                      (376 (getfield (fieldCP "tests" "clojure.lang.Compiler$CaseExpr" (class "java.util.SortedMap")))) 
                                      (379 (aload 11)) 
                                      (381 (invokeinterface (methodCP "get" "java.util.SortedMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (386 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (389 (aload_0)) 
                                      (390 (getfield (fieldCP "thens" "clojure.lang.Compiler$CaseExpr" (class "java.util.HashMap")))) 
                                      (393 (aload 11)) 
                                      (395 (invokevirtual (methodCP "get" "java.util.HashMap" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (398 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (401 (aload 5)) 
                                      (403 (iload 4)) 
                                      (405 (invokespecial (methodCP "emitThenForInts" "clojure.lang.Compiler$CaseExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.asm.Type") (class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr") (class "clojure.asm.Label") boolean) void))) 
                                      (408 (goto 484)) ;;to TAG_14
                                      (411 (aload_0)) ;;at TAG_13
                                      (412 (getfield (fieldCP "skipCheck" "clojure.lang.Compiler$CaseExpr" (class "java.util.Set")))) 
                                      (415 (aload 11)) 
                                      (417 (invokestatic (methodCP "contains" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (420 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (423 (if_acmpne 448)) ;;to TAG_15
                                      (426 (aload_2)) 
                                      (427 (aload_3)) 
                                      (428 (aload_0)) 
                                      (429 (getfield (fieldCP "thens" "clojure.lang.Compiler$CaseExpr" (class "java.util.HashMap")))) 
                                      (432 (aload 11)) 
                                      (434 (invokevirtual (methodCP "get" "java.util.HashMap" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (437 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (440 (iload 4)) 
                                      (442 (invokestatic (methodCP "emitExpr" "clojure.lang.Compiler$CaseExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr") boolean) void))) 
                                      (445 (goto 484)) ;;to TAG_14
                                      (448 (aload_0)) ;;at TAG_15
                                      (449 (aload_2)) 
                                      (450 (aload_3)) 
                                      (451 (aload_0)) 
                                      (452 (getfield (fieldCP "tests" "clojure.lang.Compiler$CaseExpr" (class "java.util.SortedMap")))) 
                                      (455 (aload 11)) 
                                      (457 (invokeinterface (methodCP "get" "java.util.SortedMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (462 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (465 (aload_0)) 
                                      (466 (getfield (fieldCP "thens" "clojure.lang.Compiler$CaseExpr" (class "java.util.HashMap")))) 
                                      (469 (aload 11)) 
                                      (471 (invokevirtual (methodCP "get" "java.util.HashMap" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (474 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (477 (aload 5)) 
                                      (479 (iload 4)) 
                                      (481 (invokespecial (methodCP "emitThenForHashes" "clojure.lang.Compiler$CaseExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr") (class "clojure.asm.Label") boolean) void))) 
                                      (484 (aload_3)) ;;at TAG_14
                                      (485 (aload 6)) 
                                      (487 (invokevirtual (methodCP "goTo" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (490 (goto 322)) ;;to TAG_16
                                      (493 (aload_3)) ;;at TAG_12
                                      (494 (aload 5)) 
                                      (496 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (499 (aload_2)) 
                                      (500 (aload_3)) 
                                      (501 (aload_0)) 
                                      (502 (getfield (fieldCP "defaultExpr" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (505 (iload 4)) 
                                      (507 (invokestatic (methodCP "emitExpr" "clojure.lang.Compiler$CaseExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr") boolean) void))) 
                                      (510 (aload_3)) 
                                      (511 (aload 6)) 
                                      (513 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (516 (aload_1)) 
                                      (517 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (520 (if_acmpne 527)) ;;to TAG_17
                                      (523 (aload_3)) 
                                      (524 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (527 (return)) ;;at TAG_17
                                      (endofcode 528))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isShiftMasked"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "mask" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (4 (ifeq 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitShiftMask"
                              (parameters (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 36)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "isShiftMasked" "clojure.lang.Compiler$CaseExpr" () boolean))) 
                                      (4 (ifeq 35))  ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (aload_0)) 
                                      (9 (getfield (fieldCP "shift" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (12 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (15 (aload_1)) 
                                      (16 (bipush 122)) 
                                      (18 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (21 (aload_1)) 
                                      (22 (aload_0)) 
                                      (23 (getfield (fieldCP "mask" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (26 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (29 (aload_1)) 
                                      (30 (bipush 126)) 
                                      (32 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (35 (return)) ;;at TAG_0
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitExprForInts"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.asm.Type") (class "clojure.asm.Label"))
                              (returntype . void)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 6) (max_locals . 5) (code_length . 186)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (ifnonnull 123)) ;;to TAG_0
                                      (4 (getstatic (fieldCP "WARN_ON_REFLECTION" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (7 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (10 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (13 (ifeq 58)) ;;to TAG_1
                                      (16 (invokestatic (methodCP "errPrintWriter" "clojure.lang.RT" () (class "java.io.PrintWriter")))) 
                                      (19 (ldc 4)) ;;STRING:: "Performance warning, %s:%d:%d - case has int tests, but tested expression is not primitive.\n"
                                      (21 (iconst_3)) 
                                      (22 (anewarray (class "java.lang.Object"))) 
                                      (25 (dup)) 
                                      (26 (iconst_0)) 
                                      (27 (getstatic (fieldCP "SOURCE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (30 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (33 (aastore)) 
                                      (34 (dup)) 
                                      (35 (iconst_1)) 
                                      (36 (aload_0)) 
                                      (37 (getfield (fieldCP "line" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (40 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (43 (aastore)) 
                                      (44 (dup)) 
                                      (45 (iconst_2)) 
                                      (46 (aload_0)) 
                                      (47 (getfield (fieldCP "column" "clojure.lang.Compiler$CaseExpr" int))) 
                                      (50 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (53 (aastore)) 
                                      (54 (invokevirtual (methodCP "format" "java.io.PrintWriter" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.io.PrintWriter")))) 
                                      (57 (pop)) 
                                      (58 (aload_0)) ;;at TAG_1
                                      (59 (getfield (fieldCP "expr" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Compiler$LocalBindingExpr")))) 
                                      (62 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (65 (aload_1)) 
                                      (66 (aload_2)) 
                                      (67 (invokevirtual (methodCP "emit" "clojure.lang.Compiler$LocalBindingExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (70 (aload_2)) 
                                      (71 (getstatic (fieldCP "NUMBER_TYPE" "clojure.lang.Compiler$CaseExpr" (class "clojure.asm.Type")))) 
                                      (74 (invokevirtual (methodCP "instanceOf" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (77 (aload_2)) 
                                      (78 (sipush 153)) 
                                      (81 (aload 4)) 
                                      (83 (invokevirtual (methodCP "ifZCmp" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (86 (aload_0)) 
                                      (87 (getfield (fieldCP "expr" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Compiler$LocalBindingExpr")))) 
                                      (90 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (93 (aload_1)) 
                                      (94 (aload_2)) 
                                      (95 (invokevirtual (methodCP "emit" "clojure.lang.Compiler$LocalBindingExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (98 (aload_2)) 
                                      (99 (getstatic (fieldCP "NUMBER_TYPE" "clojure.lang.Compiler$CaseExpr" (class "clojure.asm.Type")))) 
                                      (102 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (105 (aload_2)) 
                                      (106 (getstatic (fieldCP "NUMBER_TYPE" "clojure.lang.Compiler$CaseExpr" (class "clojure.asm.Type")))) 
                                      (109 (getstatic (fieldCP "intValueMethod" "clojure.lang.Compiler$CaseExpr" (class "clojure.asm.commons.Method")))) 
                                      (112 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (115 (aload_0)) 
                                      (116 (aload_2)) 
                                      (117 (invokespecial (methodCP "emitShiftMask" "clojure.lang.Compiler$CaseExpr" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (120 (goto 185))  ;;to TAG_2
                                      (123 (aload_3)) ;;at TAG_0
                                      (124 (getstatic (fieldCP "LONG_TYPE" "clojure.asm.Type" (class "clojure.asm.Type")))) 
                                      (127 (if_acmpeq 151)) ;;to TAG_3
                                      (130 (aload_3)) 
                                      (131 (getstatic (fieldCP "INT_TYPE" "clojure.asm.Type" (class "clojure.asm.Type")))) 
                                      (134 (if_acmpeq 151)) ;;to TAG_3
                                      (137 (aload_3)) 
                                      (138 (getstatic (fieldCP "SHORT_TYPE" "clojure.asm.Type" (class "clojure.asm.Type")))) 
                                      (141 (if_acmpeq 151)) ;;to TAG_3
                                      (144 (aload_3)) 
                                      (145 (getstatic (fieldCP "BYTE_TYPE" "clojure.asm.Type" (class "clojure.asm.Type")))) 
                                      (148 (if_acmpne 179)) ;;to TAG_4
                                      (151 (aload_0)) ;;at TAG_3
                                      (152 (getfield (fieldCP "expr" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Compiler$LocalBindingExpr")))) 
                                      (155 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (158 (aload_1)) 
                                      (159 (aload_2)) 
                                      (160 (invokevirtual (methodCP "emitUnboxed" "clojure.lang.Compiler$LocalBindingExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (163 (aload_2)) 
                                      (164 (aload_3)) 
                                      (165 (getstatic (fieldCP "INT_TYPE" "clojure.asm.Type" (class "clojure.asm.Type")))) 
                                      (168 (invokevirtual (methodCP "cast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.Type")) void))) 
                                      (171 (aload_0)) 
                                      (172 (aload_2)) 
                                      (173 (invokespecial (methodCP "emitShiftMask" "clojure.lang.Compiler$CaseExpr" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (176 (goto 185))  ;;to TAG_2
                                      (179 (aload_2)) ;;at TAG_4
                                      (180 (aload 4)) 
                                      (182 (invokevirtual (methodCP "goTo" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (185 (return)) ;;at TAG_2
                                      (endofcode 186))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitThenForInts"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.asm.Type") (class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr") (class "clojure.asm.Label") boolean)
                              (returntype . void)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 8) (code_length . 207)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (ifnonnull 59)) ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "expr" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Compiler$LocalBindingExpr")))) 
                                      (8 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (11 (aload_1)) 
                                      (12 (aload_2)) 
                                      (13 (invokevirtual (methodCP "emit" "clojure.lang.Compiler$LocalBindingExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (16 (aload 4)) 
                                      (18 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (21 (aload_1)) 
                                      (22 (aload_2)) 
                                      (23 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (28 (aload_2)) 
                                      (29 (getstatic (fieldCP "UTIL_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (32 (getstatic (fieldCP "equivMethod" "clojure.lang.Compiler$CaseExpr" (class "clojure.asm.commons.Method")))) 
                                      (35 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (38 (aload_2)) 
                                      (39 (sipush 153)) 
                                      (42 (aload 6)) 
                                      (44 (invokevirtual (methodCP "ifZCmp" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (47 (aload_1)) 
                                      (48 (aload_2)) 
                                      (49 (aload 5)) 
                                      (51 (iload 7)) 
                                      (53 (invokestatic (methodCP "emitExpr" "clojure.lang.Compiler$CaseExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr") boolean) void))) 
                                      (56 (goto 206)) ;;to TAG_1
                                      (59 (aload_3)) ;;at TAG_0
                                      (60 (getstatic (fieldCP "LONG_TYPE" "clojure.asm.Type" (class "clojure.asm.Type")))) 
                                      (63 (if_acmpne 115))  ;;to TAG_2
                                      (66 (aload 4)) 
                                      (68 (checkcast (class "clojure.lang.Compiler$NumberExpr"))) 
                                      (71 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (74 (aload_1)) 
                                      (75 (aload_2)) 
                                      (76 (invokevirtual (methodCP "emitUnboxed" "clojure.lang.Compiler$NumberExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (79 (aload_0)) 
                                      (80 (getfield (fieldCP "expr" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Compiler$LocalBindingExpr")))) 
                                      (83 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (86 (aload_1)) 
                                      (87 (aload_2)) 
                                      (88 (invokevirtual (methodCP "emitUnboxed" "clojure.lang.Compiler$LocalBindingExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (91 (aload_2)) 
                                      (92 (getstatic (fieldCP "LONG_TYPE" "clojure.asm.Type" (class "clojure.asm.Type")))) 
                                      (95 (sipush 154)) 
                                      (98 (aload 6)) 
                                      (100 (invokevirtual (methodCP "ifCmp" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") int (class "clojure.asm.Label")) void))) 
                                      (103 (aload_1)) 
                                      (104 (aload_2)) 
                                      (105 (aload 5)) 
                                      (107 (iload 7)) 
                                      (109 (invokestatic (methodCP "emitExpr" "clojure.lang.Compiler$CaseExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr") boolean) void))) 
                                      (112 (goto 206)) ;;to TAG_1
                                      (115 (aload_3)) ;;at TAG_2
                                      (116 (getstatic (fieldCP "INT_TYPE" "clojure.asm.Type" (class "clojure.asm.Type")))) 
                                      (119 (if_acmpeq 136)) ;;to TAG_3
                                      (122 (aload_3)) 
                                      (123 (getstatic (fieldCP "SHORT_TYPE" "clojure.asm.Type" (class "clojure.asm.Type")))) 
                                      (126 (if_acmpeq 136)) ;;to TAG_3
                                      (129 (aload_3)) 
                                      (130 (getstatic (fieldCP "BYTE_TYPE" "clojure.asm.Type" (class "clojure.asm.Type")))) 
                                      (133 (if_acmpne 200)) ;;to TAG_4
                                      (136 (aload_0)) ;;at TAG_3
                                      (137 (invokespecial (methodCP "isShiftMasked" "clojure.lang.Compiler$CaseExpr" () boolean))) 
                                      (140 (ifeq 188)) ;;to TAG_5
                                      (143 (aload 4)) 
                                      (145 (checkcast (class "clojure.lang.Compiler$NumberExpr"))) 
                                      (148 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (151 (aload_1)) 
                                      (152 (aload_2)) 
                                      (153 (invokevirtual (methodCP "emitUnboxed" "clojure.lang.Compiler$NumberExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (156 (aload_0)) 
                                      (157 (getfield (fieldCP "expr" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Compiler$LocalBindingExpr")))) 
                                      (160 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (163 (aload_1)) 
                                      (164 (aload_2)) 
                                      (165 (invokevirtual (methodCP "emitUnboxed" "clojure.lang.Compiler$LocalBindingExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (168 (aload_2)) 
                                      (169 (aload_3)) 
                                      (170 (getstatic (fieldCP "LONG_TYPE" "clojure.asm.Type" (class "clojure.asm.Type")))) 
                                      (173 (invokevirtual (methodCP "cast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.Type")) void))) 
                                      (176 (aload_2)) 
                                      (177 (getstatic (fieldCP "LONG_TYPE" "clojure.asm.Type" (class "clojure.asm.Type")))) 
                                      (180 (sipush 154)) 
                                      (183 (aload 6)) 
                                      (185 (invokevirtual (methodCP "ifCmp" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") int (class "clojure.asm.Label")) void))) 
                                      (188 (aload_1)) ;;at TAG_5
                                      (189 (aload_2)) 
                                      (190 (aload 5)) 
                                      (192 (iload 7)) 
                                      (194 (invokestatic (methodCP "emitExpr" "clojure.lang.Compiler$CaseExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr") boolean) void))) 
                                      (197 (goto 206)) ;;to TAG_1
                                      (200 (aload_2)) ;;at TAG_4
                                      (201 (aload 6)) 
                                      (203 (invokevirtual (methodCP "goTo" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (206 (return)) ;;at TAG_1
                                      (endofcode 207))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitExprForHashes"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 28)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "expr" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Compiler$LocalBindingExpr"))))
                                      (4 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C"))))
                                      (7 (aload_1))
                                      (8 (aload_2))
                                      (9 (invokevirtual
					(methodCP "emit" "clojure.lang.Compiler$LocalBindingExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void)))
                                      (12 (aload_2))
                                      (13 (getstatic (fieldCP "UTIL_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type"))))
                                      (16 (getstatic (fieldCP "hashMethod" "clojure.lang.Compiler$CaseExpr" (class "clojure.asm.commons.Method"))))
                                      (19 (invokevirtual
					(methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void)))
                                      (22 (aload_0))
                                      (23 (aload_2))
                                      (24 (invokespecial
					(methodCP "emitShiftMask" "clojure.lang.Compiler$CaseExpr" ((class "clojure.asm.commons.GeneratorAdapter")) void)))
                                      (27 (return))
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitThenForHashes"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr") (class "clojure.asm.Label") boolean)
                              (returntype . void)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 7) (code_length . 74)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "expr" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Compiler$LocalBindingExpr")))) 
                                      (4 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (7 (aload_1)) 
                                      (8 (aload_2)) 
                                      (9 (invokevirtual (methodCP "emit" "clojure.lang.Compiler$LocalBindingExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (12 (aload_3)) 
                                      (13 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (16 (aload_1)) 
                                      (17 (aload_2)) 
                                      (18 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (23 (aload_0)) 
                                      (24 (getfield (fieldCP "testType" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (27 (getstatic (fieldCP "hashIdentityKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword")))) 
                                      (30 (if_acmpne 45))  ;;to TAG_0
                                      (33 (aload_2)) 
                                      (34 (sipush 166)) 
                                      (37 (aload 5)) 
                                      (39 (invokevirtual (methodCP "visitJumpInsn" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (42 (goto 64)) ;;to TAG_1
                                      (45 (aload_2)) ;;at TAG_0
                                      (46 (getstatic (fieldCP "UTIL_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (49 (getstatic (fieldCP "equivMethod" "clojure.lang.Compiler$CaseExpr" (class "clojure.asm.commons.Method")))) 
                                      (52 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (55 (aload_2)) 
                                      (56 (sipush 153)) 
                                      (59 (aload 5)) 
                                      (61 (invokevirtual (methodCP "ifZCmp" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (64 (aload_1)) ;;at TAG_1
                                      (65 (aload_2)) 
                                      (66 (aload 4)) 
                                      (68 (iload 6)) 
                                      (70 (invokestatic (methodCP "emitExpr" "clojure.lang.Compiler$CaseExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr") boolean) void))) 
                                      (73 (return)) 
                                      (endofcode 74))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitExpr"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr") boolean)
                              (returntype . void)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 40)
                                   (parsedcode
                                      (0 (iload_3)) 
                                      (1 (ifeq 28))  ;;to TAG_0
                                      (4 (aload_2)) 
                                      (5 (instanceof (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (8 (ifeq 28))  ;;to TAG_0
                                      (11 (aload_2)) 
                                      (12 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (15 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (18 (aload_0)) 
                                      (19 (aload_1)) 
                                      (20 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (25 (goto 39)) ;;to TAG_1
                                      (28 (aload_2)) ;;at TAG_0
                                      (29 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (32 (aload_0)) 
                                      (33 (aload_1)) 
                                      (34 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (39 (return)) ;;at TAG_1
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 87)
                                   (parsedcode
                                      (0 (ldc_w ))
                                      (3 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (6 (putstatic (fieldCP "NUMBER_TYPE" "clojure.lang.Compiler$CaseExpr" (class "clojure.asm.Type"))))
                                      (9 (ldc 5))         ;;STRING:: "int intValue()"
                                      (11 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (14 (putstatic (fieldCP "intValueMethod" "clojure.lang.Compiler$CaseExpr" (class "clojure.asm.commons.Method"))))
                                      (17 (ldc 6))        ;;STRING:: "int hash(Object)"
                                      (19 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (22 (putstatic (fieldCP "hashMethod" "clojure.lang.Compiler$CaseExpr" (class "clojure.asm.commons.Method"))))
                                      (25 (ldc 7))        ;;STRING:: "int hashCode()"
                                      (27 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (30 (putstatic (fieldCP "hashCodeMethod" "clojure.lang.Compiler$CaseExpr" (class "clojure.asm.commons.Method"))))
                                      (33 (ldc 8))        ;;STRING:: "boolean equiv(Object, Object)"
                                      (35 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (38 (putstatic (fieldCP "equivMethod" "clojure.lang.Compiler$CaseExpr" (class "clojure.asm.commons.Method"))))
                                      (41 (aconst_null))
                                      (42 (ldc 9))        ;;STRING:: "compact"
                                      (44 (invokestatic
					(methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (47 (putstatic (fieldCP "compactKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword"))))
                                      (50 (aconst_null))
                                      (51 (ldc 10))       ;;STRING:: "sparse"
                                      (53 (invokestatic
					(methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (56 (putstatic (fieldCP "sparseKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword"))))
                                      (59 (aconst_null))
                                      (60 (ldc 11))       ;;STRING:: "hash-identity"
                                      (62 (invokestatic
					(methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (65 (putstatic (fieldCP "hashIdentityKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword"))))
                                      (68 (aconst_null))
                                      (69 (ldc 12))       ;;STRING:: "hash-equiv"
                                      (71 (invokestatic
					(methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (74 (putstatic (fieldCP "hashEquivKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword"))))
                                      (77 (aconst_null))
                                      (78 (ldc 13))       ;;STRING:: "int"
                                      (80 (invokestatic
					(methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (83 (putstatic (fieldCP "intKey" "clojure.lang.Compiler$CaseExpr" (class "clojure.lang.Keyword"))))
                                      (86 (return))
                                      (endofcode 87))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr" "clojure.lang.Compiler$MaybePrimitiveExpr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$CaseExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$CaseExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$CaseExpr" . "clojure.lang"))

