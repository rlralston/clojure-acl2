; ArrayChunk-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.ArrayChunk*
 (make-class-def
      '(class "clojure.lang.ArrayChunk"
            "java.lang.Object"
            (constant_pool
                        (STRING  "dropFirst of empty chunk"))
            (fields
                        (field "array" (array (class "java.lang.Object")) (accessflags  *class*  *final* ) -1)
                        (field "off" int (accessflags  *class*  *final* ) -1)
                        (field "end" int (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (iconst_0))
                                      (3 (aload_1))
                                      (4 (arraylength))
                                      (5 (invokespecial
					(methodCP "<init>" "clojure.lang.ArrayChunk" ((array (class "java.lang.Object")) int int) void)))
                                      (8 (return))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (array (class "java.lang.Object")) int)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (iload_2))
                                      (3 (aload_1))
                                      (4 (arraylength))
                                      (5 (invokespecial
					(methodCP "<init>" "clojure.lang.ArrayChunk" ((array (class "java.lang.Object")) int int) void)))
                                      (8 (return))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (array (class "java.lang.Object")) int int)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "array" "clojure.lang.ArrayChunk" (array (class "java.lang.Object")))))
                                      (9 (aload_0))
                                      (10 (iload_2))
                                      (11 (putfield (fieldCP "off" "clojure.lang.ArrayChunk" int)))
                                      (14 (aload_0))
                                      (15 (iload_3))
                                      (16 (putfield (fieldCP "end" "clojure.lang.ArrayChunk" int)))
                                      (19 (return))
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "nth"
                              (parameters int)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "array" "clojure.lang.ArrayChunk" (array (class "java.lang.Object")))))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "off" "clojure.lang.ArrayChunk" int)))
                                      (8 (iload_1))
                                      (9 (iadd))
                                      (10 (aaload))
                                      (11 (areturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "nth"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 20)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (iflt 18))  ;;to TAG_0
                                      (4 (iload_1)) 
                                      (5 (aload_0)) 
                                      (6 (invokevirtual (methodCP "count" "clojure.lang.ArrayChunk" () int))) 
                                      (9 (if_icmpge 18))  ;;to TAG_0
                                      (12 (aload_0)) 
                                      (13 (iload_1)) 
                                      (14 (invokevirtual (methodCP "nth" "clojure.lang.ArrayChunk" (int) (class "java.lang.Object")))) 
                                      (17 (areturn)) 
                                      (18 (aload_2)) ;;at TAG_0
                                      (19 (areturn)) 
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "end" "clojure.lang.ArrayChunk" int)))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "off" "clojure.lang.ArrayChunk" int)))
                                      (8 (isub))
                                      (9 (ireturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "dropFirst"
                              (parameters )
                              (returntype . (class "clojure.lang.IChunk"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 1) (code_length . 43)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "off" "clojure.lang.ArrayChunk" int))) 
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "end" "clojure.lang.ArrayChunk" int))) 
                                      (8 (if_icmpne 21))  ;;to TAG_0
                                      (11 (new (class "java.lang.IllegalStateException"))) 
                                      (14 (dup)) 
                                      (15 (ldc 0)) ;;STRING:: "dropFirst of empty chunk"
                                      (17 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (20 (athrow)) 
                                      (21 (new (class "clojure.lang.ArrayChunk"))) ;;at TAG_0
                                      (24 (dup)) 
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "array" "clojure.lang.ArrayChunk" (array (class "java.lang.Object"))))) 
                                      (29 (aload_0)) 
                                      (30 (getfield (fieldCP "off" "clojure.lang.ArrayChunk" int))) 
                                      (33 (iconst_1)) 
                                      (34 (iadd)) 
                                      (35 (aload_0)) 
                                      (36 (getfield (fieldCP "end" "clojure.lang.ArrayChunk" int))) 
                                      (39 (invokespecial (methodCP "<init>" "clojure.lang.ArrayChunk" ((array (class "java.lang.Object")) int int) void))) 
                                      (42 (areturn)) 
                                      (endofcode 43))
                                   (Exceptions )
                                   (StackMap )))
                        (method "reduce"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 75)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aload_2)) 
                                      (2 (aload_0)) 
                                      (3 (getfield (fieldCP "array" "clojure.lang.ArrayChunk" (array (class "java.lang.Object"))))) 
                                      (6 (aload_0)) 
                                      (7 (getfield (fieldCP "off" "clojure.lang.ArrayChunk" int))) 
                                      (10 (aaload)) 
                                      (11 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (16 (astore_3)) 
                                      (17 (aload_3)) 
                                      (18 (invokestatic (methodCP "isReduced" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (21 (ifeq 26)) ;;to TAG_0
                                      (24 (aload_3)) 
                                      (25 (areturn)) 
                                      (26 (aload_0)) ;;at TAG_0
                                      (27 (getfield (fieldCP "off" "clojure.lang.ArrayChunk" int))) 
                                      (30 (iconst_1)) 
                                      (31 (iadd)) 
                                      (32 (istore 4)) 
                                      (34 (iload 4)) ;;at TAG_3
                                      (36 (aload_0)) 
                                      (37 (getfield (fieldCP "end" "clojure.lang.ArrayChunk" int))) 
                                      (40 (if_icmpge 73)) ;;to TAG_1
                                      (43 (aload_1)) 
                                      (44 (aload_3)) 
                                      (45 (aload_0)) 
                                      (46 (getfield (fieldCP "array" "clojure.lang.ArrayChunk" (array (class "java.lang.Object"))))) 
                                      (49 (iload 4)) 
                                      (51 (aaload)) 
                                      (52 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (57 (astore_3)) 
                                      (58 (aload_3)) 
                                      (59 (invokestatic (methodCP "isReduced" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (62 (ifeq 67))  ;;to TAG_2
                                      (65 (aload_3)) 
                                      (66 (areturn)) 
                                      (67 (iinc 4 1)) ;;at TAG_2
                                      (70 (goto 34)) ;;to TAG_3
                                      (73 (aload_3)) ;;at TAG_1
                                      (74 (areturn)) 
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IChunk" "java.io.Serializable")
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))


(defconst *ArrayChunk-class-table*
  (make-static-class-decls 
   *clojure.lang.ArrayChunk*))

(defconst *package-name-map* 
  ("clojure.lang.ArrayChunk" . "clojure.lang"))

