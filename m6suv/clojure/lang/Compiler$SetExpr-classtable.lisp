; Compiler$SetExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.Compiler$SetExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$SetExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "clojure.lang.IPersistentSet set(Object[])"))
            (fields
                        (field "keys" (class "clojure.lang.IPersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "setMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentVector"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "keys" "clojure.lang.Compiler$SetExpr" (class "clojure.lang.IPersistentVector"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 60)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "keys" "clojure.lang.Compiler$SetExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (4 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (9 (anewarray (class "java.lang.Object"))) 
                                      (12 (astore_1)) 
                                      (13 (iconst_0)) 
                                      (14 (istore_2)) 
                                      (15 (iload_2)) ;;at TAG_1
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "keys" "clojure.lang.Compiler$SetExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (20 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (25 (if_icmpge 55))  ;;to TAG_0
                                      (28 (aload_1)) 
                                      (29 (iload_2)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "keys" "clojure.lang.Compiler$SetExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (34 (iload_2)) 
                                      (35 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (40 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (43 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (48 (aastore)) 
                                      (49 (iinc 2 1)) 
                                      (52 (goto 15)) ;;to TAG_1
                                      (55 (aload_1)) ;;at TAG_0
                                      (56 (invokestatic (methodCP "set" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentSet")))) 
                                      (59 (areturn)) 
                                      (endofcode 60))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 31)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "keys" "clojure.lang.Compiler$SetExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (4 (aload_2)) 
                                      (5 (aload_3)) 
                                      (6 (invokestatic (methodCP "emitArgsAsArray" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.IPersistentVector") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (9 (aload_3)) 
                                      (10 (invokestatic (methodCP "access$200" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (13 (getstatic (fieldCP "setMethod" "clojure.lang.Compiler$SetExpr" (class "clojure.asm.commons.Method")))) 
                                      (16 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (19 (aload_1)) 
                                      (20 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (23 (if_acmpne 30))  ;;to TAG_0
                                      (26 (aload_3)) 
                                      (27 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (30 (return)) ;;at TAG_0
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 4)
                                   (parsedcode
                                      (0 (ldc_w ))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.IPersistentSet"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 8) (code_length . 215)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (3 (astore_2)) 
                                      (4 (iconst_1)) 
                                      (5 (istore_3)) 
                                      (6 (aload_1)) 
                                      (7 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (10 (astore 4)) 
                                      (12 (aload 4)) ;;at TAG_4
                                      (14 (ifnull 78)) ;;to TAG_0
                                      (17 (aload 4)) 
                                      (19 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (24 (astore 5)) 
                                      (26 (aload_0)) 
                                      (27 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (30 (if_acmpne 37))  ;;to TAG_1
                                      (33 (aload_0)) 
                                      (34 (goto 40)) ;;to TAG_2
                                      (37 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_1
                                      (40 (aload 5)) ;;at TAG_2
                                      (42 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (45 (astore 6)) 
                                      (47 (aload_2)) 
                                      (48 (aload 6)) 
                                      (50 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 2)) 
                                      (55 (astore_2)) 
                                      (56 (aload 6)) 
                                      (58 (instanceof (class "clojure.lang.Compiler$LiteralExpr"))) 
                                      (61 (ifne 66)) ;;to TAG_3
                                      (64 (iconst_0)) 
                                      (65 (istore_3)) 
                                      (66 (aload 4)) ;;at TAG_3
                                      (68 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (73 (astore 4)) 
                                      (75 (goto 12)) ;;to TAG_4
                                      (78 (new (class "clojure.lang.Compiler$SetExpr"))) ;;at TAG_0
                                      (81 (dup)) 
                                      (82 (aload_2)) 
                                      (83 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$SetExpr" ((class "clojure.lang.IPersistentVector")) void))) 
                                      (86 (astore 4)) 
                                      (88 (aload_1)) 
                                      (89 (instanceof (class "clojure.lang.IObj"))) 
                                      (92 (ifeq 143)) ;;to TAG_5
                                      (95 (aload_1)) 
                                      (96 (checkcast (class "clojure.lang.IObj"))) 
                                      (99 (invokeinterface (methodCP "meta" "clojure.lang.IObj" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (104 (ifnull 143)) ;;to TAG_5
                                      (107 (new (class "clojure.lang.Compiler$MetaExpr"))) 
                                      (110 (dup)) 
                                      (111 (aload 4)) 
                                      (113 (aload_0)) 
                                      (114 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (117 (if_acmpne 124)) ;;to TAG_6
                                      (120 (aload_0)) 
                                      (121 (goto 127)) ;;to TAG_7
                                      (124 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_6
                                      (127 (aload_1)) ;;at TAG_7
                                      (128 (checkcast (class "clojure.lang.IObj"))) 
                                      (131 (invokeinterface (methodCP "meta" "clojure.lang.IObj" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (136 (invokestatic (methodCP "parse" "clojure.lang.Compiler$MapExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.IPersistentMap")) (class "clojure.lang.Compiler$Expr")))) 
                                      (139 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$MetaExpr" ((class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (142 (areturn)) 
                                      (143 (iload_3)) ;;at TAG_5
                                      (144 (ifeq 212)) ;;to TAG_8
                                      (147 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashSet" (class "clojure.lang.PersistentHashSet")))) 
                                      (150 (astore 5)) 
                                      (152 (iconst_0)) 
                                      (153 (istore 6)) 
                                      (155 (iload 6)) ;;at TAG_10
                                      (157 (aload_2)) 
                                      (158 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (163 (if_icmpge 202)) ;;to TAG_9
                                      (166 (aload_2)) 
                                      (167 (iload 6)) 
                                      (169 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (174 (checkcast (class "clojure.lang.Compiler$LiteralExpr"))) 
                                      (177 (astore 7)) 
                                      (179 (aload 5)) 
                                      (181 (aload 7)) 
                                      (183 (invokevirtual (methodCP "val" "clojure.lang.Compiler$LiteralExpr" () (class "java.lang.Object")))) 
                                      (186 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentSet" ((class "java.lang.Object")) (class "clojure.lang.IPersistentCollection")) 2)) 
                                      (191 (checkcast (class "clojure.lang.IPersistentSet"))) 
                                      (194 (astore 5)) 
                                      (196 (iinc 6 1)) 
                                      (199 (goto 155)) ;;to TAG_10
                                      (202 (new (class "clojure.lang.Compiler$ConstantExpr"))) ;;at TAG_9
                                      (205 (dup)) 
                                      (206 (aload 5)) 
                                      (208 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$ConstantExpr" ((class "java.lang.Object")) void))) 
                                      (211 (areturn)) 
                                      (212 (aload 4)) ;;at TAG_8
                                      (214 (areturn)) 
                                      (endofcode 215))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 9)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.lang.IPersistentSet set(Object[])"
                                      (2 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (5 (putstatic (fieldCP "setMethod" "clojure.lang.Compiler$SetExpr" (class "clojure.asm.commons.Method"))))
                                      (8 (return))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$SetExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$SetExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$SetExpr" . "clojure.lang"))

