; PersistentHashMap$ArrayNode$Seq-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentHashMap$ArrayNode$Seq*
 (make-class-def
      '(class "clojure.lang.PersistentHashMap$ArrayNode$Seq"
            "clojure.lang.ASeq"
            (constant_pool)
            (fields
                        (field "nodes" (array (class "clojure.lang.PersistentHashMap$INode")) (accessflags  *class*  *final* ) -1)
                        (field "i" int (accessflags  *class*  *final* ) -1)
                        (field "s" (class "clojure.lang.ISeq") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "create"
                              (parameters (array (class "clojure.lang.PersistentHashMap$INode")))
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (aload_0))
                                      (2 (iconst_0))
                                      (3 (aconst_null))
                                      (4 (invokestatic
					(methodCP "create" "clojure.lang.PersistentHashMap$ArrayNode$Seq" ((class "clojure.lang.IPersistentMap") (array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.ISeq")) (class "clojure.lang.ISeq"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (class "clojure.lang.IPersistentMap") (array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.ISeq"))
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 6) (code_length . 73)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (ifnull 16)) ;;to TAG_0
                                      (4 (new (class "clojure.lang.PersistentHashMap$ArrayNode$Seq"))) 
                                      (7 (dup)) 
                                      (8 (aload_0)) 
                                      (9 (aload_1)) 
                                      (10 (iload_2)) 
                                      (11 (aload_3)) 
                                      (12 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$ArrayNode$Seq" ((class "clojure.lang.IPersistentMap") (array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.ISeq")) void))) 
                                      (15 (areturn)) 
                                      (16 (iload_2)) ;;at TAG_0
                                      (17 (istore 4)) 
                                      (19 (iload 4)) ;;at TAG_3
                                      (21 (aload_1)) 
                                      (22 (arraylength)) 
                                      (23 (if_icmpge 71)) ;;to TAG_1
                                      (26 (aload_1)) 
                                      (27 (iload 4)) 
                                      (29 (aaload)) 
                                      (30 (ifnull 65))  ;;to TAG_2
                                      (33 (aload_1)) 
                                      (34 (iload 4)) 
                                      (36 (aaload)) 
                                      (37 (invokeinterface (methodCP "nodeSeq" "clojure.lang.PersistentHashMap$INode" () (class "clojure.lang.ISeq")) 1)) 
                                      (42 (astore 5)) 
                                      (44 (aload 5)) 
                                      (46 (ifnull 65))  ;;to TAG_2
                                      (49 (new (class "clojure.lang.PersistentHashMap$ArrayNode$Seq"))) 
                                      (52 (dup)) 
                                      (53 (aload_0)) 
                                      (54 (aload_1)) 
                                      (55 (iload 4)) 
                                      (57 (iconst_1)) 
                                      (58 (iadd)) 
                                      (59 (aload 5)) 
                                      (61 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$ArrayNode$Seq" ((class "clojure.lang.IPersistentMap") (array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.ISeq")) void))) 
                                      (64 (areturn)) 
                                      (65 (iinc 4 1)) ;;at TAG_2
                                      (68 (goto 19)) ;;to TAG_3
                                      (71 (aconst_null)) ;;at TAG_1
                                      (72 (areturn)) 
                                      (endofcode 73))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.ISeq"))
                              (returntype . void)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokespecial
					(methodCP "<init>" "clojure.lang.ASeq" ((class "clojure.lang.IPersistentMap")) void)))
                                      (5 (aload_0))
                                      (6 (aload_2))
                                      (7 (putfield (fieldCP "nodes" "clojure.lang.PersistentHashMap$ArrayNode$Seq" (array (class "clojure.lang.PersistentHashMap$INode")))))
                                      (10 (aload_0))
                                      (11 (iload_3))
                                      (12 (putfield (fieldCP "i" "clojure.lang.PersistentHashMap$ArrayNode$Seq" int)))
                                      (15 (aload_0))
                                      (16 (aload 4))
                                      (18 (putfield (fieldCP "s" "clojure.lang.PersistentHashMap$ArrayNode$Seq" (class "clojure.lang.ISeq"))))
                                      (21 (return))
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.Obj"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 21)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentHashMap$ArrayNode$Seq")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "nodes" "clojure.lang.PersistentHashMap$ArrayNode$Seq" (array (class "clojure.lang.PersistentHashMap$INode")))))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "i" "clojure.lang.PersistentHashMap$ArrayNode$Seq" int)))
                                      (13 (aload_0))
                                      (14 (getfield (fieldCP "s" "clojure.lang.PersistentHashMap$ArrayNode$Seq" (class "clojure.lang.ISeq"))))
                                      (17 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentHashMap$ArrayNode$Seq" ((class "clojure.lang.IPersistentMap") (array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.ISeq")) void)))
                                      (20 (areturn))
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "first"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "s" "clojure.lang.PersistentHashMap$ArrayNode$Seq" (class "clojure.lang.ISeq"))))
                                      (4 (invokeinterface
					(methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "next"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (aload_0))
                                      (2 (getfield (fieldCP "nodes" "clojure.lang.PersistentHashMap$ArrayNode$Seq" (array (class "clojure.lang.PersistentHashMap$INode")))))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "i" "clojure.lang.PersistentHashMap$ArrayNode$Seq" int)))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "s" "clojure.lang.PersistentHashMap$ArrayNode$Seq" (class "clojure.lang.ISeq"))))
                                      (13 (invokeinterface
					(methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1))
                                      (18 (invokestatic
					(methodCP "create" "clojure.lang.PersistentHashMap$ArrayNode$Seq" ((class "clojure.lang.IPersistentMap") (array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.ISeq")) (class "clojure.lang.ISeq"))))
                                      (21 (areturn))
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentHashMap$ArrayNode$Seq" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.Obj"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentHashMap$ArrayNode$Seq-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentHashMap$ArrayNode$Seq*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentHashMap$ArrayNode$Seq" . "clojure.lang"))

