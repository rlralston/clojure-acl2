; Util-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:53 CDT 2014.
;

(defconst *clojure.lang.Util*
 (make-class-def
      '(class "clojure.lang.Util"
            "java.lang.Object"
            (constant_pool
                        (INT -1640531527))
            (fields
                        (field "equivNull" (class "clojure.lang.Util$EquivPred") (accessflags  *class*  *static* ) -1)
                        (field "equivEquals" (class "clojure.lang.Util$EquivPred") (accessflags  *class*  *static* ) -1)
                        (field "equivNumber" (class "clojure.lang.Util$EquivPred") (accessflags  *class*  *static* ) -1)
                        (field "equivColl" (class "clojure.lang.Util$EquivPred") (accessflags  *class*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 65)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (if_acmpne 7)) ;;to TAG_0
                                      (5 (iconst_1)) 
                                      (6 (ireturn)) 
                                      (7 (aload_0)) ;;at TAG_0
                                      (8 (ifnull 63)) ;;to TAG_1
                                      (11 (aload_0)) 
                                      (12 (instanceof (class "java.lang.Number"))) 
                                      (15 (ifeq 37))  ;;to TAG_2
                                      (18 (aload_1)) 
                                      (19 (instanceof (class "java.lang.Number"))) 
                                      (22 (ifeq 37))  ;;to TAG_2
                                      (25 (aload_0)) 
                                      (26 (checkcast (class "java.lang.Number"))) 
                                      (29 (aload_1)) 
                                      (30 (checkcast (class "java.lang.Number"))) 
                                      (33 (invokestatic (methodCP "equal" "clojure.lang.Numbers" ((class "java.lang.Number") (class "java.lang.Number")) boolean))) 
                                      (36 (ireturn)) 
                                      (37 (aload_0)) ;;at TAG_2
                                      (38 (instanceof (class "clojure.lang.IPersistentCollection"))) 
                                      (41 (ifne 51)) ;;to TAG_3
                                      (44 (aload_1)) 
                                      (45 (instanceof (class "clojure.lang.IPersistentCollection"))) 
                                      (48 (ifeq 57)) ;;to TAG_4
                                      (51 (aload_0)) ;;at TAG_3
                                      (52 (aload_1)) 
                                      (53 (invokestatic (methodCP "pcequiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (56 (ireturn)) 
                                      (57 (aload_0)) ;;at TAG_4
                                      (58 (aload_1)) 
                                      (59 (invokevirtual (methodCP "equals" "java.lang.Object" ((class "java.lang.Object")) boolean))) 
                                      (62 (ireturn)) 
                                      (63 (iconst_0)) ;;at TAG_1
                                      (64 (ireturn)) 
                                      (endofcode 65))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equivPred"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Util$EquivPred"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 59)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnonnull 8)) ;;to TAG_0
                                      (4 (getstatic (fieldCP "equivNull" "clojure.lang.Util" (class "clojure.lang.Util$EquivPred")))) 
                                      (7 (areturn)) 
                                      (8 (aload_0)) ;;at TAG_0
                                      (9 (instanceof (class "java.lang.Number"))) 
                                      (12 (ifeq 19)) ;;to TAG_1
                                      (15 (getstatic (fieldCP "equivNumber" "clojure.lang.Util" (class "clojure.lang.Util$EquivPred")))) 
                                      (18 (areturn)) 
                                      (19 (aload_0)) ;;at TAG_1
                                      (20 (instanceof (class "java.lang.String"))) 
                                      (23 (ifne 33))  ;;to TAG_2
                                      (26 (aload_0)) 
                                      (27 (instanceof (class "clojure.lang.Symbol"))) 
                                      (30 (ifeq 37)) ;;to TAG_3
                                      (33 (getstatic (fieldCP "equivEquals" "clojure.lang.Util" (class "clojure.lang.Util$EquivPred")))) ;;at TAG_2
                                      (36 (areturn)) 
                                      (37 (aload_0)) ;;at TAG_3
                                      (38 (instanceof (class "java.util.Collection"))) 
                                      (41 (ifne 51)) ;;to TAG_4
                                      (44 (aload_0)) 
                                      (45 (instanceof (class "java.util.Map"))) 
                                      (48 (ifeq 55)) ;;to TAG_5
                                      (51 (getstatic (fieldCP "equivColl" "clojure.lang.Util" (class "clojure.lang.Util$EquivPred")))) ;;at TAG_4
                                      (54 (areturn)) 
                                      (55 (getstatic (fieldCP "equivEquals" "clojure.lang.Util" (class "clojure.lang.Util$EquivPred")))) ;;at TAG_5
                                      (58 (areturn)) 
                                      (endofcode 59))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters long long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (lcmp)) 
                                      (3 (ifne 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Object") long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
					(methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters long (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
					(methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters double double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (dload_2)) 
                                      (2 (dcmpl)) 
                                      (3 (ifne 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Object") double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (dload_1))
                                      (2 (invokestatic
					(methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double"))))
                                      (5 (invokestatic
					(methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters double (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (invokestatic
					(methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
					(methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters boolean boolean)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 11)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (iload_1)) 
                                      (2 (if_icmpne 9))  ;;to TAG_0
                                      (5 (iconst_1)) 
                                      (6 (goto 10)) ;;to TAG_1
                                      (9 (iconst_0)) ;;at TAG_0
                                      (10 (ireturn)) ;;at TAG_1
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Object") boolean)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (invokestatic
					(methodCP "valueOf" "java.lang.Boolean" (boolean) (class "java.lang.Boolean"))))
                                      (5 (invokestatic
					(methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters boolean (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 9)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (invokestatic
					(methodCP "valueOf" "java.lang.Boolean" (boolean) (class "java.lang.Boolean"))))
                                      (4 (aload_1))
                                      (5 (invokestatic
					(methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters char char)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 11)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (iload_1)) 
                                      (2 (if_icmpne 9))  ;;to TAG_0
                                      (5 (iconst_1)) 
                                      (6 (goto 10)) ;;to TAG_1
                                      (9 (iconst_0)) ;;at TAG_0
                                      (10 (ireturn)) ;;at TAG_1
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pcequiv"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 29)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "clojure.lang.IPersistentCollection"))) 
                                      (4 (ifeq 18))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "clojure.lang.IPersistentCollection"))) 
                                      (11 (aload_1)) 
                                      (12 (invokeinterface (methodCP "equiv" "clojure.lang.IPersistentCollection" ((class "java.lang.Object")) boolean) 2)) 
                                      (17 (ireturn)) 
                                      (18 (aload_1)) ;;at TAG_0
                                      (19 (checkcast (class "clojure.lang.IPersistentCollection"))) 
                                      (22 (aload_0)) 
                                      (23 (invokeinterface (methodCP "equiv" "clojure.lang.IPersistentCollection" ((class "java.lang.Object")) boolean) 2)) 
                                      (28 (ireturn)) 
                                      (endofcode 29))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equals"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 25)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (if_acmpne 7)) ;;to TAG_0
                                      (5 (iconst_1)) 
                                      (6 (ireturn)) 
                                      (7 (aload_0)) ;;at TAG_0
                                      (8 (ifnull 23)) ;;to TAG_1
                                      (11 (aload_0)) 
                                      (12 (aload_1)) 
                                      (13 (invokevirtual (methodCP "equals" "java.lang.Object" ((class "java.lang.Object")) boolean))) 
                                      (16 (ifeq 23)) ;;to TAG_1
                                      (19 (iconst_1)) 
                                      (20 (goto 24))  ;;to TAG_2
                                      (23 (iconst_0)) ;;at TAG_1
                                      (24 (ireturn)) ;;at TAG_2
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "identical"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (if_acmpne 9))  ;;to TAG_0
                                      (5 (iconst_1)) 
                                      (6 (goto 10)) ;;to TAG_1
                                      (9 (iconst_0)) ;;at TAG_0
                                      (10 (ireturn)) ;;at TAG_1
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "classOf"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnull 9))  ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (invokevirtual (methodCP "getClass" "java.lang.Object" () (class "java.lang.Class")))) 
                                      (8 (areturn)) 
                                      (9 (aconst_null)) ;;at TAG_0
                                      (10 (areturn)) 
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "compare"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 49)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (if_acmpne 7)) ;;to TAG_0
                                      (5 (iconst_0)) 
                                      (6 (ireturn)) 
                                      (7 (aload_0)) ;;at TAG_0
                                      (8 (ifnull 47)) ;;to TAG_1
                                      (11 (aload_1)) 
                                      (12 (ifnonnull 17))  ;;to TAG_2
                                      (15 (iconst_1)) 
                                      (16 (ireturn)) 
                                      (17 (aload_0)) ;;at TAG_2
                                      (18 (instanceof (class "java.lang.Number"))) 
                                      (21 (ifeq 36)) ;;to TAG_3
                                      (24 (aload_0)) 
                                      (25 (checkcast (class "java.lang.Number"))) 
                                      (28 (aload_1)) 
                                      (29 (checkcast (class "java.lang.Number"))) 
                                      (32 (invokestatic (methodCP "compare" "clojure.lang.Numbers" ((class "java.lang.Number") (class "java.lang.Number")) int))) 
                                      (35 (ireturn)) 
                                      (36 (aload_0)) ;;at TAG_3
                                      (37 (checkcast (class "java.lang.Comparable"))) 
                                      (40 (aload_1)) 
                                      (41 (invokeinterface (methodCP "compareTo" "java.lang.Comparable" ((class "java.lang.Object")) int) 2)) 
                                      (46 (ireturn)) 
                                      (47 (iconst_m1)) ;;at TAG_1
                                      (48 (ireturn)) 
                                      (endofcode 49))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hash"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnonnull 6))  ;;to TAG_0
                                      (4 (iconst_0)) 
                                      (5 (ireturn)) 
                                      (6 (aload_0)) ;;at TAG_0
                                      (7 (invokevirtual (methodCP "hashCode" "java.lang.Object" () int))) 
                                      (10 (ireturn)) 
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasheq"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 41)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnonnull 6)) ;;to TAG_0
                                      (4 (iconst_0)) 
                                      (5 (ireturn)) 
                                      (6 (aload_0)) ;;at TAG_0
                                      (7 (instanceof (class "clojure.lang.IHashEq"))) 
                                      (10 (ifeq 21)) ;;to TAG_1
                                      (13 (aload_0)) 
                                      (14 (checkcast (class "clojure.lang.IHashEq"))) 
                                      (17 (invokestatic (methodCP "dohasheq" "clojure.lang.Util" ((class "clojure.lang.IHashEq")) int))) 
                                      (20 (ireturn)) 
                                      (21 (aload_0)) ;;at TAG_1
                                      (22 (instanceof (class "java.lang.Number"))) 
                                      (25 (ifeq 36))  ;;to TAG_2
                                      (28 (aload_0)) 
                                      (29 (checkcast (class "java.lang.Number"))) 
                                      (32 (invokestatic (methodCP "hasheq" "clojure.lang.Numbers" ((class "java.lang.Number")) int))) 
                                      (35 (ireturn)) 
                                      (36 (aload_0)) ;;at TAG_2
                                      (37 (invokevirtual (methodCP "hashCode" "java.lang.Object" () int))) 
                                      (40 (ireturn)) 
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap )))
                        (method "dohasheq"
                              (parameters (class "clojure.lang.IHashEq"))
                              (returntype . int)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokeinterface
					(methodCP "hasheq" "clojure.lang.IHashEq" () int) 1))
                                      (6 (ireturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hashCombine"
                              (parameters int int)
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 18)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (iload_1))
                                      (2 (ldc 0))         ;;INT:: "-1640531527"
                                      (4 (iadd))
                                      (5 (iload_0))
                                      (6 (bipush 6))
                                      (8 (ishl))
                                      (9 (iadd))
                                      (10 (iload_0))
                                      (11 (iconst_2))
                                      (12 (ishr))
                                      (13 (iadd))
                                      (14 (ixor))
                                      (15 (istore_0))
                                      (16 (iload_0))
                                      (17 (ireturn))
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isPrimitive"
                              (parameters (class "java.lang.Class"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 24)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnull 22))  ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (invokevirtual (methodCP "isPrimitive" "java.lang.Class" () boolean))) 
                                      (8 (ifeq 22))  ;;to TAG_0
                                      (11 (aload_0)) 
                                      (12 (getstatic (fieldCP "TYPE" "java.lang.Void" (class "java.lang.Class")))) 
                                      (15 (if_acmpeq 22))  ;;to TAG_0
                                      (18 (iconst_1)) 
                                      (19 (goto 23)) ;;to TAG_1
                                      (22 (iconst_0)) ;;at TAG_0
                                      (23 (ireturn)) ;;at TAG_1
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isInteger"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 34)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Integer"))) 
                                      (4 (ifne 28)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (instanceof (class "java.lang.Long"))) 
                                      (11 (ifne 28)) ;;to TAG_0
                                      (14 (aload_0)) 
                                      (15 (instanceof (class "clojure.lang.BigInt"))) 
                                      (18 (ifne 28)) ;;to TAG_0
                                      (21 (aload_0)) 
                                      (22 (instanceof (class "java.math.BigInteger"))) 
                                      (25 (ifeq 32)) ;;to TAG_1
                                      (28 (iconst_1)) ;;at TAG_0
                                      (29 (goto 33))  ;;to TAG_2
                                      (32 (iconst_0)) ;;at TAG_1
                                      (33 (ireturn)) ;;at TAG_2
                                      (endofcode 34))
                                   (Exceptions )
                                   (StackMap )))
                        (method "ret1"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "ret1"
                              (parameters (class "clojure.lang.ISeq") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "clearCache"
                              (parameters (class "java.lang.ref.ReferenceQueue") (class "java.util.concurrent.ConcurrentHashMap"))
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 87)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "poll" "java.lang.ref.ReferenceQueue" () (class "java.lang.ref.Reference")))) 
                                      (4 (ifnull 86)) ;;to TAG_0
                                      (7 (aload_0)) ;;at TAG_2
                                      (8 (invokevirtual (methodCP "poll" "java.lang.ref.ReferenceQueue" () (class "java.lang.ref.Reference")))) 
                                      (11 (ifnull 17)) ;;to TAG_1
                                      (14 (goto 7))  ;;to TAG_2
                                      (17 (aload_1)) ;;at TAG_1
                                      (18 (invokevirtual (methodCP "entrySet" "java.util.concurrent.ConcurrentHashMap" () (class "java.util.Set")))) 
                                      (21 (invokeinterface (methodCP "iterator" "java.util.Set" () (class "java.util.Iterator")) 1)) 
                                      (26 (astore_2)) 
                                      (27 (aload_2)) ;;at TAG_4
                                      (28 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (33 (ifeq 86)) ;;to TAG_0
                                      (36 (aload_2)) 
                                      (37 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (42 (checkcast (class "java.util.Map$Entry"))) 
                                      (45 (astore_3)) 
                                      (46 (aload_3)) 
                                      (47 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (52 (checkcast (class "java.lang.ref.Reference"))) 
                                      (55 (astore 4)) 
                                      (57 (aload 4)) 
                                      (59 (ifnull 83)) ;;to TAG_3
                                      (62 (aload 4)) 
                                      (64 (invokevirtual (methodCP "get" "java.lang.ref.Reference" () (class "java.lang.Object")))) 
                                      (67 (ifnonnull 83)) ;;to TAG_3
                                      (70 (aload_1)) 
                                      (71 (aload_3)) 
                                      (72 (invokeinterface (methodCP "getKey" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (77 (aload 4)) 
                                      (79 (invokevirtual (methodCP "remove" "java.util.concurrent.ConcurrentHashMap" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (82 (pop)) 
                                      (83 (goto 27)) ;;to TAG_4;;at TAG_3
                                      (86 (return)) ;;at TAG_0
                                      (endofcode 87))
                                   (Exceptions )
                                   (StackMap )))
                        (method "runtimeException"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.lang.RuntimeException"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (new (class "java.lang.RuntimeException")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (invokespecial
					(methodCP "<init>" "java.lang.RuntimeException" ((class "java.lang.String")) void)))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "runtimeException"
                              (parameters (class "java.lang.String") (class "java.lang.Throwable"))
                              (returntype . (class "java.lang.RuntimeException"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "java.lang.RuntimeException")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (invokespecial
					(methodCP "<init>" "java.lang.RuntimeException" ((class "java.lang.String") (class "java.lang.Throwable")) void)))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "sneakyThrow"
                              (parameters (class "java.lang.Throwable"))
                              (returntype . (class "java.lang.RuntimeException"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnonnull 12))  ;;to TAG_0
                                      (4 (new (class "java.lang.NullPointerException"))) 
                                      (7 (dup)) 
                                      (8 (invokespecial (methodCP "<init>" "java.lang.NullPointerException" () void))) 
                                      (11 (athrow)) 
                                      (12 (aload_0)) ;;at TAG_0
                                      (13 (invokestatic (methodCP "sneakyThrow0" "clojure.lang.Util" ((class "java.lang.Throwable")) void))) 
                                      (16 (aconst_null)) 
                                      (17 (areturn)) 
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "sneakyThrow0"
                              (parameters (class "java.lang.Throwable"))
                              (returntype . void)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (athrow))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 41)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.Util$1")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "clojure.lang.Util$1" () void)))
                                      (7 (putstatic (fieldCP "equivNull" "clojure.lang.Util" (class "clojure.lang.Util$EquivPred"))))
                                      (10 (new (class "clojure.lang.Util$2")))
                                      (13 (dup))
                                      (14 (invokespecial
					(methodCP "<init>" "clojure.lang.Util$2" () void)))
                                      (17 (putstatic (fieldCP "equivEquals" "clojure.lang.Util" (class "clojure.lang.Util$EquivPred"))))
                                      (20 (new (class "clojure.lang.Util$3")))
                                      (23 (dup))
                                      (24 (invokespecial
					(methodCP "<init>" "clojure.lang.Util$3" () void)))
                                      (27 (putstatic (fieldCP "equivNumber" "clojure.lang.Util" (class "clojure.lang.Util$EquivPred"))))
                                      (30 (new (class "clojure.lang.Util$4")))
                                      (33 (dup))
                                      (34 (invokespecial
					(methodCP "<init>" "clojure.lang.Util$4" () void)))
                                      (37 (putstatic (fieldCP "equivColl" "clojure.lang.Util" (class "clojure.lang.Util$EquivPred"))))
                                      (40 (return))
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Util-class-table*
  (make-static-class-decls 
   *clojure.lang.Util*))

(defconst *package-name-map* 
  ("clojure.lang.Util" . "clojure.lang"))

