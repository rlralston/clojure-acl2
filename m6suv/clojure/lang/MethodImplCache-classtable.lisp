; MethodImplCache-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.MethodImplCache*
 (make-class-def
      '(class "clojure.lang.MethodImplCache"
            "java.lang.Object"
            (constant_pool)
            (fields
                        (field "protocol" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *final*  *public* ) -1)
                        (field "methodk" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public* ) -1)
                        (field "shift" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "mask" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "table" (array (class "java.lang.Object")) (accessflags  *class*  *final*  *public* ) -1)
                        (field "map" (class "java.util.Map") (accessflags  *class*  *final*  *public* ) -1)
                        (field "mre" (class "clojure.lang.MethodImplCache$Entry") (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (class "clojure.lang.Keyword"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (iconst_0))
                                      (4 (iconst_0))
                                      (5 (getstatic (fieldCP "EMPTY_ARRAY" "clojure.lang.RT" (array (class "java.lang.Object")))))
                                      (8 (invokespecial
					(methodCP "<init>" "clojure.lang.MethodImplCache" ((class "clojure.lang.IPersistentMap") (class "clojure.lang.Keyword") int int (array (class "java.lang.Object"))) void)))
                                      (11 (return))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (class "clojure.lang.Keyword") int int (array (class "java.lang.Object")))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 6) (code_length . 42)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aconst_null))
                                      (6 (putfield (fieldCP "mre" "clojure.lang.MethodImplCache" (class "clojure.lang.MethodImplCache$Entry"))))
                                      (9 (aload_0))
                                      (10 (aload_1))
                                      (11 (putfield (fieldCP "protocol" "clojure.lang.MethodImplCache" (class "clojure.lang.IPersistentMap"))))
                                      (14 (aload_0))
                                      (15 (aload_2))
                                      (16 (putfield (fieldCP "methodk" "clojure.lang.MethodImplCache" (class "clojure.lang.Keyword"))))
                                      (19 (aload_0))
                                      (20 (iload_3))
                                      (21 (putfield (fieldCP "shift" "clojure.lang.MethodImplCache" int)))
                                      (24 (aload_0))
                                      (25 (iload 4))
                                      (27 (putfield (fieldCP "mask" "clojure.lang.MethodImplCache" int)))
                                      (30 (aload_0))
                                      (31 (aload 5))
                                      (33 (putfield (fieldCP "table" "clojure.lang.MethodImplCache" (array (class "java.lang.Object")))))
                                      (36 (aload_0))
                                      (37 (aconst_null))
                                      (38 (putfield (fieldCP "map" "clojure.lang.MethodImplCache" (class "java.util.Map"))))
                                      (41 (return))
                                      (endofcode 42))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (class "clojure.lang.Keyword") (class "java.util.Map"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 40)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aconst_null))
                                      (6 (putfield (fieldCP "mre" "clojure.lang.MethodImplCache" (class "clojure.lang.MethodImplCache$Entry"))))
                                      (9 (aload_0))
                                      (10 (aload_1))
                                      (11 (putfield (fieldCP "protocol" "clojure.lang.MethodImplCache" (class "clojure.lang.IPersistentMap"))))
                                      (14 (aload_0))
                                      (15 (aload_2))
                                      (16 (putfield (fieldCP "methodk" "clojure.lang.MethodImplCache" (class "clojure.lang.Keyword"))))
                                      (19 (aload_0))
                                      (20 (iconst_0))
                                      (21 (putfield (fieldCP "shift" "clojure.lang.MethodImplCache" int)))
                                      (24 (aload_0))
                                      (25 (iconst_0))
                                      (26 (putfield (fieldCP "mask" "clojure.lang.MethodImplCache" int)))
                                      (29 (aload_0))
                                      (30 (aconst_null))
                                      (31 (putfield (fieldCP "table" "clojure.lang.MethodImplCache" (array (class "java.lang.Object")))))
                                      (34 (aload_0))
                                      (35 (aload_3))
                                      (36 (putfield (fieldCP "map" "clojure.lang.MethodImplCache" (class "java.util.Map"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "fnFor"
                              (parameters (class "java.lang.Class"))
                              (returntype . (class "clojure.lang.IFn"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 28)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "mre" "clojure.lang.MethodImplCache" (class "clojure.lang.MethodImplCache$Entry")))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) 
                                      (6 (ifnull 22))  ;;to TAG_0
                                      (9 (aload_2)) 
                                      (10 (getfield (fieldCP "c" "clojure.lang.MethodImplCache$Entry" (class "java.lang.Class")))) 
                                      (13 (aload_1)) 
                                      (14 (if_acmpne 22))  ;;to TAG_0
                                      (17 (aload_2)) 
                                      (18 (getfield (fieldCP "fn" "clojure.lang.MethodImplCache$Entry" (class "clojure.lang.IFn")))) 
                                      (21 (areturn)) 
                                      (22 (aload_0)) ;;at TAG_0
                                      (23 (aload_1)) 
                                      (24 (invokevirtual (methodCP "findFnFor" "clojure.lang.MethodImplCache" ((class "java.lang.Class")) (class "clojure.lang.IFn")))) 
                                      (27 (areturn)) 
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap )))
                        (method "findFnFor"
                              (parameters (class "java.lang.Class"))
                              (returntype . (class "clojure.lang.IFn"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 107)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "map" "clojure.lang.MethodImplCache" (class "java.util.Map")))) 
                                      (4 (ifnull 39)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "map" "clojure.lang.MethodImplCache" (class "java.util.Map")))) 
                                      (11 (aload_1)) 
                                      (12 (invokeinterface (methodCP "get" "java.util.Map" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (17 (checkcast (class "clojure.lang.MethodImplCache$Entry"))) 
                                      (20 (astore_2)) 
                                      (21 (aload_0)) 
                                      (22 (aload_2)) 
                                      (23 (putfield (fieldCP "mre" "clojure.lang.MethodImplCache" (class "clojure.lang.MethodImplCache$Entry")))) 
                                      (26 (aload_2)) 
                                      (27 (ifnull 37)) ;;to TAG_1
                                      (30 (aload_2)) 
                                      (31 (getfield (fieldCP "fn" "clojure.lang.MethodImplCache$Entry" (class "clojure.lang.IFn")))) 
                                      (34 (goto 38))  ;;to TAG_2
                                      (37 (aconst_null)) ;;at TAG_1
                                      (38 (areturn)) ;;at TAG_2
                                      (39 (aload_1)) ;;at TAG_0
                                      (40 (invokestatic (methodCP "hash" "clojure.lang.Util" ((class "java.lang.Object")) int))) 
                                      (43 (aload_0)) 
                                      (44 (getfield (fieldCP "shift" "clojure.lang.MethodImplCache" int))) 
                                      (47 (ishr)) 
                                      (48 (aload_0)) 
                                      (49 (getfield (fieldCP "mask" "clojure.lang.MethodImplCache" int))) 
                                      (52 (iand)) 
                                      (53 (iconst_1)) 
                                      (54 (ishl)) 
                                      (55 (istore_2)) 
                                      (56 (iload_2)) 
                                      (57 (aload_0)) 
                                      (58 (getfield (fieldCP "table" "clojure.lang.MethodImplCache" (array (class "java.lang.Object"))))) 
                                      (61 (arraylength)) 
                                      (62 (if_icmpge 105)) ;;to TAG_3
                                      (65 (aload_0)) 
                                      (66 (getfield (fieldCP "table" "clojure.lang.MethodImplCache" (array (class "java.lang.Object"))))) 
                                      (69 (iload_2)) 
                                      (70 (aaload)) 
                                      (71 (aload_1)) 
                                      (72 (if_acmpne 105)) ;;to TAG_3
                                      (75 (aload_0)) 
                                      (76 (getfield (fieldCP "table" "clojure.lang.MethodImplCache" (array (class "java.lang.Object"))))) 
                                      (79 (iload_2)) 
                                      (80 (iconst_1)) 
                                      (81 (iadd)) 
                                      (82 (aaload)) 
                                      (83 (checkcast (class "clojure.lang.MethodImplCache$Entry"))) 
                                      (86 (astore_3)) 
                                      (87 (aload_0)) 
                                      (88 (aload_3)) 
                                      (89 (putfield (fieldCP "mre" "clojure.lang.MethodImplCache" (class "clojure.lang.MethodImplCache$Entry")))) 
                                      (92 (aload_3)) 
                                      (93 (ifnull 103)) ;;to TAG_4
                                      (96 (aload_3)) 
                                      (97 (getfield (fieldCP "fn" "clojure.lang.MethodImplCache$Entry" (class "clojure.lang.IFn")))) 
                                      (100 (goto 104)) ;;to TAG_5
                                      (103 (aconst_null)) ;;at TAG_4
                                      (104 (areturn)) ;;at TAG_5
                                      (105 (aconst_null)) ;;at TAG_3
                                      (106 (areturn)) 
                                      (endofcode 107))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *MethodImplCache-class-table*
  (make-static-class-decls 
   *clojure.lang.MethodImplCache*))

(defconst *package-name-map* 
  ("clojure.lang.MethodImplCache" . "clojure.lang"))

