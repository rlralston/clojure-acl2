; PersistentTreeMap$Node-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentTreeMap$Node*
 (make-class-def
      '(class "clojure.lang.PersistentTreeMap$Node"
            "clojure.lang.AMapEntry"
            (constant_pool)
            (fields
                        (field "key" (class "java.lang.Object") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AMapEntry" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "key"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "val"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getKey"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "key" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getValue"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "left"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "right"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addLeft"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *abstract*  *class* )
                              (code))
                        (method "addRight"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *abstract*  *class* )
                              (code))
                        (method "removeLeft"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *abstract*  *class* )
                              (code))
                        (method "removeRight"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *abstract*  *class* )
                              (code))
                        (method "blacken"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *abstract*  *class* )
                              (code))
                        (method "redden"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *abstract*  *class* )
                              (code))
                        (method "balanceLeft"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 17)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object"))))
                                      (4 (aload_1))
                                      (5 (invokevirtual
					(methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object"))))
                                      (8 (aload_0))
                                      (9 (aload_1))
                                      (10 (invokevirtual
					(methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (13 (invokestatic
					(methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black"))))
                                      (16 (areturn))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "balanceRight"
                              (parameters (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 17)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$Node" (class "java.lang.Object"))))
                                      (4 (aload_1))
                                      (5 (invokevirtual
					(methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object"))))
                                      (8 (aload_1))
                                      (9 (invokevirtual
					(methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (12 (aload_0))
                                      (13 (invokestatic
					(methodCP "black" "clojure.lang.PersistentTreeMap" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) (class "clojure.lang.PersistentTreeMap$Black"))))
                                      (16 (areturn))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "replace"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *abstract*  *class* )
                              (code))
                        (method "kvreduce"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 70)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (4 (ifnull 26)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (invokevirtual (methodCP "left" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (11 (aload_1)) 
                                      (12 (aload_2)) 
                                      (13 (invokevirtual (methodCP "kvreduce" "clojure.lang.PersistentTreeMap$Node" ((class "clojure.lang.IFn") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (16 (astore_2)) 
                                      (17 (aload_2)) 
                                      (18 (invokestatic (methodCP "isReduced" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (21 (ifeq 26)) ;;to TAG_0
                                      (24 (aload_2)) 
                                      (25 (areturn)) 
                                      (26 (aload_1)) ;;at TAG_0
                                      (27 (aload_2)) 
                                      (28 (aload_0)) 
                                      (29 (invokevirtual (methodCP "key" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (32 (aload_0)) 
                                      (33 (invokevirtual (methodCP "val" "clojure.lang.PersistentTreeMap$Node" () (class "java.lang.Object")))) 
                                      (36 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (41 (astore_2)) 
                                      (42 (aload_2)) 
                                      (43 (invokestatic (methodCP "isReduced" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (46 (ifeq 51)) ;;to TAG_1
                                      (49 (aload_2)) 
                                      (50 (areturn)) 
                                      (51 (aload_0)) ;;at TAG_1
                                      (52 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (55 (ifnull 68))  ;;to TAG_2
                                      (58 (aload_0)) 
                                      (59 (invokevirtual (methodCP "right" "clojure.lang.PersistentTreeMap$Node" () (class "clojure.lang.PersistentTreeMap$Node")))) 
                                      (62 (aload_1)) 
                                      (63 (aload_2)) 
                                      (64 (invokevirtual (methodCP "kvreduce" "clojure.lang.PersistentTreeMap$Node" ((class "clojure.lang.IFn") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (67 (astore_2)) 
                                      (68 (aload_2)) ;;at TAG_2
                                      (69 (areturn)) 
                                      (endofcode 70))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *abstract*  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentTreeMap$Node-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentTreeMap$Node*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentTreeMap$Node" . "clojure.lang"))

