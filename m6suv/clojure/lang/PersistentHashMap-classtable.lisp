; PersistentHashMap-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentHashMap*
 (make-class-def
      '(class "clojure.lang.PersistentHashMap"
            "clojure.lang.APersistentMap"
            (constant_pool
                        (STRING  "Duplicate key: ")
                        (STRING  "No value supplied for key: %s")
                        (STRING  "Key already present"))
            (fields
                        (field "count" int (accessflags  *class*  *final* ) -1)
                        (field "root" (class "clojure.lang.PersistentHashMap$INode") (accessflags  *class*  *final* ) -1)
                        (field "hasNull" boolean (accessflags  *class*  *final* ) -1)
                        (field "nullValue" (class "java.lang.Object") (accessflags  *class*  *final* ) -1)
                        (field "_meta" (class "clojure.lang.IPersistentMap") (accessflags  *class*  *final* ) -1)
                        (field "EMPTY" (class "clojure.lang.PersistentHashMap") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "NOT_FOUND" (class "java.lang.Object") (accessflags  *class*  *final*  *private*  *static* ) -1))
            (methods
                        (method "create"
                              (parameters (class "java.util.Map"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 72)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (3 (invokevirtual (methodCP "asTransient" "clojure.lang.PersistentHashMap" () (class "clojure.lang.PersistentHashMap$TransientHashMap")))) 
                                      (6 (astore_1)) 
                                      (7 (aload_0)) 
                                      (8 (invokeinterface (methodCP "entrySet" "java.util.Map" () (class "java.util.Set")) 1)) 
                                      (13 (invokeinterface (methodCP "iterator" "java.util.Set" () (class "java.util.Iterator")) 1)) 
                                      (18 (astore_2)) 
                                      (19 (aload_2)) ;;at TAG_1
                                      (20 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (25 (ifeq 65))  ;;to TAG_0
                                      (28 (aload_2)) 
                                      (29 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (34 (astore_3)) 
                                      (35 (aload_3)) 
                                      (36 (checkcast (class "java.util.Map$Entry"))) 
                                      (39 (astore 4)) 
                                      (41 (aload_1)) 
                                      (42 (aload 4)) 
                                      (44 (invokeinterface (methodCP "getKey" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (49 (aload 4)) 
                                      (51 (invokeinterface (methodCP "getValue" "java.util.Map$Entry" () (class "java.lang.Object")) 1)) 
                                      (56 (invokeinterface (methodCP "assoc" "clojure.lang.ITransientMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ITransientMap")) 3)) 
                                      (61 (astore_1)) 
                                      (62 (goto 19)) ;;to TAG_1
                                      (65 (aload_1)) ;;at TAG_0
                                      (66 (invokeinterface (methodCP "persistent" "clojure.lang.ITransientMap" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (71 (areturn)) 
                                      (endofcode 72))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (class "clojure.lang.PersistentHashMap"))
                              (accessflags  *class*  *public*  *static*  *transient* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 46)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (3 (invokevirtual (methodCP "asTransient" "clojure.lang.PersistentHashMap" () (class "clojure.lang.PersistentHashMap$TransientHashMap")))) 
                                      (6 (astore_1)) 
                                      (7 (iconst_0)) 
                                      (8 (istore_2)) 
                                      (9 (iload_2)) ;;at TAG_1
                                      (10 (aload_0)) 
                                      (11 (arraylength)) 
                                      (12 (if_icmpge 36))  ;;to TAG_0
                                      (15 (aload_1)) 
                                      (16 (aload_0)) 
                                      (17 (iload_2)) 
                                      (18 (aaload)) 
                                      (19 (aload_0)) 
                                      (20 (iload_2)) 
                                      (21 (iconst_1)) 
                                      (22 (iadd)) 
                                      (23 (aaload)) 
                                      (24 (invokeinterface (methodCP "assoc" "clojure.lang.ITransientMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ITransientMap")) 3)) 
                                      (29 (astore_1)) 
                                      (30 (iinc 2 2)) 
                                      (33 (goto 9)) ;;to TAG_1
                                      (36 (aload_1)) ;;at TAG_0
                                      (37 (invokeinterface (methodCP "persistent" "clojure.lang.ITransientMap" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (42 (checkcast (class "clojure.lang.PersistentHashMap"))) 
                                      (45 (areturn)) 
                                      (endofcode 46))
                                   (Exceptions )
                                   (StackMap )))
                        (method "createWithCheck"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (class "clojure.lang.PersistentHashMap"))
                              (accessflags  *class*  *public*  *static*  *transient* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 89)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (3 (invokevirtual (methodCP "asTransient" "clojure.lang.PersistentHashMap" () (class "clojure.lang.PersistentHashMap$TransientHashMap")))) 
                                      (6 (astore_1)) 
                                      (7 (iconst_0)) 
                                      (8 (istore_2)) 
                                      (9 (iload_2)) ;;at TAG_2
                                      (10 (aload_0)) 
                                      (11 (arraylength)) 
                                      (12 (if_icmpge 79)) ;;to TAG_0
                                      (15 (aload_1)) 
                                      (16 (aload_0)) 
                                      (17 (iload_2)) 
                                      (18 (aaload)) 
                                      (19 (aload_0)) 
                                      (20 (iload_2)) 
                                      (21 (iconst_1)) 
                                      (22 (iadd)) 
                                      (23 (aaload)) 
                                      (24 (invokeinterface (methodCP "assoc" "clojure.lang.ITransientMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ITransientMap")) 3)) 
                                      (29 (astore_1)) 
                                      (30 (aload_1)) 
                                      (31 (invokeinterface (methodCP "count" "clojure.lang.ITransientMap" () int) 1)) 
                                      (36 (iload_2)) 
                                      (37 (iconst_2)) 
                                      (38 (idiv)) 
                                      (39 (iconst_1)) 
                                      (40 (iadd)) 
                                      (41 (if_icmpeq 73)) ;;to TAG_1
                                      (44 (new (class "java.lang.IllegalArgumentException"))) 
                                      (47 (dup)) 
                                      (48 (new (class "java.lang.StringBuilder"))) 
                                      (51 (dup)) 
                                      (52 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (55 (ldc 0)) ;;STRING:: "Duplicate key: "
                                      (57 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (60 (aload_0)) 
                                      (61 (iload_2)) 
                                      (62 (aaload)) 
                                      (63 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (66 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (69 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (72 (athrow)) 
                                      (73 (iinc 2 2)) ;;at TAG_1
                                      (76 (goto 9))  ;;to TAG_2
                                      (79 (aload_1)) ;;at TAG_0
                                      (80 (invokeinterface (methodCP "persistent" "clojure.lang.ITransientMap" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (85 (checkcast (class "clojure.lang.PersistentHashMap"))) 
                                      (88 (areturn)) 
                                      (endofcode 89))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (class "clojure.lang.ISeq"))
                              (returntype . (class "clojure.lang.PersistentHashMap"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 2) (code_length . 88)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (3 (invokevirtual (methodCP "asTransient" "clojure.lang.PersistentHashMap" () (class "clojure.lang.PersistentHashMap$TransientHashMap")))) 
                                      (6 (astore_1)) 
                                      (7 (aload_0)) ;;at TAG_2
                                      (8 (ifnull 78)) ;;to TAG_0
                                      (11 (aload_0)) 
                                      (12 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (17 (ifnonnull 46)) ;;to TAG_1
                                      (20 (new (class "java.lang.IllegalArgumentException"))) 
                                      (23 (dup)) 
                                      (24 (ldc 1)) ;;STRING:: "No value supplied for key: %s"
                                      (26 (iconst_1)) 
                                      (27 (anewarray (class "java.lang.Object"))) 
                                      (30 (dup)) 
                                      (31 (iconst_0)) 
                                      (32 (aload_0)) 
                                      (33 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (38 (aastore)) 
                                      (39 (invokestatic (methodCP "format" "java.lang.String" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.String")))) 
                                      (42 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (45 (athrow)) 
                                      (46 (aload_1)) ;;at TAG_1
                                      (47 (aload_0)) 
                                      (48 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (53 (aload_0)) 
                                      (54 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (57 (invokeinterface (methodCP "assoc" "clojure.lang.ITransientMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ITransientMap")) 3)) 
                                      (62 (astore_1)) 
                                      (63 (aload_0)) 
                                      (64 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (69 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (74 (astore_0)) 
                                      (75 (goto 7))  ;;to TAG_2
                                      (78 (aload_1)) ;;at TAG_0
                                      (79 (invokeinterface (methodCP "persistent" "clojure.lang.ITransientMap" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (84 (checkcast (class "clojure.lang.PersistentHashMap"))) 
                                      (87 (areturn)) 
                                      (endofcode 88))
                                   (Exceptions )
                                   (StackMap )))
                        (method "createWithCheck"
                              (parameters (class "clojure.lang.ISeq"))
                              (returntype . (class "clojure.lang.PersistentHashMap"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 3) (code_length . 137)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (3 (invokevirtual (methodCP "asTransient" "clojure.lang.PersistentHashMap" () (class "clojure.lang.PersistentHashMap$TransientHashMap")))) 
                                      (6 (astore_1)) 
                                      (7 (iconst_0)) 
                                      (8 (istore_2)) 
                                      (9 (aload_0)) ;;at TAG_3
                                      (10 (ifnull 127)) ;;to TAG_0
                                      (13 (aload_0)) 
                                      (14 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (19 (ifnonnull 48)) ;;to TAG_1
                                      (22 (new (class "java.lang.IllegalArgumentException"))) 
                                      (25 (dup)) 
                                      (26 (ldc 1)) ;;STRING:: "No value supplied for key: %s"
                                      (28 (iconst_1)) 
                                      (29 (anewarray (class "java.lang.Object"))) 
                                      (32 (dup)) 
                                      (33 (iconst_0)) 
                                      (34 (aload_0)) 
                                      (35 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (40 (aastore)) 
                                      (41 (invokestatic (methodCP "format" "java.lang.String" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.String")))) 
                                      (44 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (47 (athrow)) 
                                      (48 (aload_1)) ;;at TAG_1
                                      (49 (aload_0)) 
                                      (50 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (55 (aload_0)) 
                                      (56 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (59 (invokeinterface (methodCP "assoc" "clojure.lang.ITransientMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ITransientMap")) 3)) 
                                      (64 (astore_1)) 
                                      (65 (aload_1)) 
                                      (66 (invokeinterface (methodCP "count" "clojure.lang.ITransientMap" () int) 1)) 
                                      (71 (iload_2)) 
                                      (72 (iconst_1)) 
                                      (73 (iadd)) 
                                      (74 (if_icmpeq 109))  ;;to TAG_2
                                      (77 (new (class "java.lang.IllegalArgumentException"))) 
                                      (80 (dup)) 
                                      (81 (new (class "java.lang.StringBuilder"))) 
                                      (84 (dup)) 
                                      (85 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (88 (ldc 0)) ;;STRING:: "Duplicate key: "
                                      (90 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (93 (aload_0)) 
                                      (94 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (99 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (102 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (105 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (108 (athrow)) 
                                      (109 (aload_0)) ;;at TAG_2
                                      (110 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (115 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (120 (astore_0)) 
                                      (121 (iinc 2 1)) 
                                      (124 (goto 9)) ;;to TAG_3
                                      (127 (aload_1)) ;;at TAG_0
                                      (128 (invokeinterface (methodCP "persistent" "clojure.lang.ITransientMap" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (133 (checkcast (class "clojure.lang.PersistentHashMap"))) 
                                      (136 (areturn)) 
                                      (endofcode 137))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (class "clojure.lang.IPersistentMap") (array (class "java.lang.Object")))
                              (returntype . (class "clojure.lang.PersistentHashMap"))
                              (accessflags  *class*  *public*  *static*  *transient* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokestatic
					(methodCP "create" "clojure.lang.PersistentHashMap" ((array (class "java.lang.Object"))) (class "clojure.lang.PersistentHashMap"))))
                                      (4 (aload_0))
                                      (5 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentHashMap" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentHashMap"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters int (class "clojure.lang.PersistentHashMap$INode") boolean (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 31)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentMap" () void)))
                                      (4 (aload_0))
                                      (5 (iload_1))
                                      (6 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap" int)))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode"))))
                                      (14 (aload_0))
                                      (15 (iload_3))
                                      (16 (putfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean)))
                                      (19 (aload_0))
                                      (20 (aload 4))
                                      (22 (putfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap" (class "java.lang.Object"))))
                                      (25 (aload_0))
                                      (26 (aconst_null))
                                      (27 (putfield (fieldCP "_meta" "clojure.lang.PersistentHashMap" (class "clojure.lang.IPersistentMap"))))
                                      (30 (return))
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") int (class "clojure.lang.PersistentHashMap$INode") boolean (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 6) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentMap" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "_meta" "clojure.lang.PersistentHashMap" (class "clojure.lang.IPersistentMap"))))
                                      (9 (aload_0))
                                      (10 (iload_2))
                                      (11 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap" int)))
                                      (14 (aload_0))
                                      (15 (aload_3))
                                      (16 (putfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode"))))
                                      (19 (aload_0))
                                      (20 (iload 4))
                                      (22 (putfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean)))
                                      (25 (aload_0))
                                      (26 (aload 5))
                                      (28 (putfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap" (class "java.lang.Object"))))
                                      (31 (return))
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hash"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
					(methodCP "hasheq" "clojure.lang.Util" ((class "java.lang.Object")) int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "containsKey"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 50)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnonnull 9)) ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean))) 
                                      (8 (ireturn)) 
                                      (9 (aload_0)) ;;at TAG_0
                                      (10 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (13 (ifnull 48)) ;;to TAG_1
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (20 (iconst_0)) 
                                      (21 (aload_1)) 
                                      (22 (invokestatic (methodCP "hash" "clojure.lang.PersistentHashMap" ((class "java.lang.Object")) int))) 
                                      (25 (aload_1)) 
                                      (26 (getstatic (fieldCP "NOT_FOUND" "clojure.lang.PersistentHashMap" (class "java.lang.Object")))) 
                                      (29 (invokeinterface (methodCP "find" "clojure.lang.PersistentHashMap$INode" (int int (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (34 (getstatic (fieldCP "NOT_FOUND" "clojure.lang.PersistentHashMap" (class "java.lang.Object")))) 
                                      (37 (if_acmpeq 44))  ;;to TAG_2
                                      (40 (iconst_1)) 
                                      (41 (goto 49)) ;;to TAG_3
                                      (44 (iconst_0)) ;;at TAG_2
                                      (45 (goto 49)) ;;to TAG_3
                                      (48 (iconst_0)) ;;at TAG_1
                                      (49 (ireturn)) ;;at TAG_3
                                      (endofcode 50))
                                   (Exceptions )
                                   (StackMap )))
                        (method "entryAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IMapEntry"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 55)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnonnull 28)) ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean))) 
                                      (8 (ifeq 26)) ;;to TAG_1
                                      (11 (new (class "clojure.lang.MapEntry"))) 
                                      (14 (dup)) 
                                      (15 (aconst_null)) 
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap" (class "java.lang.Object")))) 
                                      (20 (invokespecial (methodCP "<init>" "clojure.lang.MapEntry" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (23 (goto 27))  ;;to TAG_2
                                      (26 (aconst_null)) ;;at TAG_1
                                      (27 (areturn)) ;;at TAG_2
                                      (28 (aload_0)) ;;at TAG_0
                                      (29 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (32 (ifnull 53)) ;;to TAG_3
                                      (35 (aload_0)) 
                                      (36 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (39 (iconst_0)) 
                                      (40 (aload_1)) 
                                      (41 (invokestatic (methodCP "hash" "clojure.lang.PersistentHashMap" ((class "java.lang.Object")) int))) 
                                      (44 (aload_1)) 
                                      (45 (invokeinterface (methodCP "find" "clojure.lang.PersistentHashMap$INode" (int int (class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 4)) 
                                      (50 (goto 54)) ;;to TAG_4
                                      (53 (aconst_null)) ;;at TAG_3
                                      (54 (areturn)) ;;at TAG_4
                                      (endofcode 55))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 5) (code_length . 153)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnonnull 59)) ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean))) 
                                      (8 (ifeq 21))  ;;to TAG_1
                                      (11 (aload_2)) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap" (class "java.lang.Object")))) 
                                      (16 (if_acmpne 21))  ;;to TAG_1
                                      (19 (aload_0)) 
                                      (20 (areturn)) 
                                      (21 (new (class "clojure.lang.PersistentHashMap"))) ;;at TAG_1
                                      (24 (dup)) 
                                      (25 (aload_0)) 
                                      (26 (invokevirtual (methodCP "meta" "clojure.lang.PersistentHashMap" () (class "clojure.lang.IPersistentMap")))) 
                                      (29 (aload_0)) 
                                      (30 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean))) 
                                      (33 (ifeq 43)) ;;to TAG_2
                                      (36 (aload_0)) 
                                      (37 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap" int))) 
                                      (40 (goto 49)) ;;to TAG_3
                                      (43 (aload_0)) ;;at TAG_2
                                      (44 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap" int))) 
                                      (47 (iconst_1)) 
                                      (48 (iadd)) 
                                      (49 (aload_0)) ;;at TAG_3
                                      (50 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (53 (iconst_1)) 
                                      (54 (aload_2)) 
                                      (55 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap" ((class "clojure.lang.IPersistentMap") int (class "clojure.lang.PersistentHashMap$INode") boolean (class "java.lang.Object")) void))) 
                                      (58 (areturn)) 
                                      (59 (new (class "clojure.lang.Box"))) ;;at TAG_0
                                      (62 (dup)) 
                                      (63 (aconst_null)) 
                                      (64 (invokespecial (methodCP "<init>" "clojure.lang.Box" ((class "java.lang.Object")) void))) 
                                      (67 (astore_3)) 
                                      (68 (aload_0)) 
                                      (69 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (72 (ifnonnull 81)) ;;to TAG_4
                                      (75 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap$BitmapIndexedNode" (class "clojure.lang.PersistentHashMap$BitmapIndexedNode")))) 
                                      (78 (goto 85)) ;;to TAG_5
                                      (81 (aload_0)) ;;at TAG_4
                                      (82 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (85 (iconst_0)) ;;at TAG_5
                                      (86 (aload_1)) 
                                      (87 (invokestatic (methodCP "hash" "clojure.lang.PersistentHashMap" ((class "java.lang.Object")) int))) 
                                      (90 (aload_1)) 
                                      (91 (aload_2)) 
                                      (92 (aload_3)) 
                                      (93 (invokeinterface (methodCP "assoc" "clojure.lang.PersistentHashMap$INode" (int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")) 6)) 
                                      (98 (astore 4)) 
                                      (100 (aload 4)) 
                                      (102 (aload_0)) 
                                      (103 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (106 (if_acmpne 111)) ;;to TAG_6
                                      (109 (aload_0)) 
                                      (110 (areturn)) 
                                      (111 (new (class "clojure.lang.PersistentHashMap"))) ;;at TAG_6
                                      (114 (dup)) 
                                      (115 (aload_0)) 
                                      (116 (invokevirtual (methodCP "meta" "clojure.lang.PersistentHashMap" () (class "clojure.lang.IPersistentMap")))) 
                                      (119 (aload_3)) 
                                      (120 (getfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (123 (ifnonnull 133)) ;;to TAG_7
                                      (126 (aload_0)) 
                                      (127 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap" int))) 
                                      (130 (goto 139)) ;;to TAG_8
                                      (133 (aload_0)) ;;at TAG_7
                                      (134 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap" int))) 
                                      (137 (iconst_1)) 
                                      (138 (iadd)) 
                                      (139 (aload 4)) ;;at TAG_8
                                      (141 (aload_0)) 
                                      (142 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean))) 
                                      (145 (aload_0)) 
                                      (146 (getfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap" (class "java.lang.Object")))) 
                                      (149 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap" ((class "clojure.lang.IPersistentMap") int (class "clojure.lang.PersistentHashMap$INode") boolean (class "java.lang.Object")) void))) 
                                      (152 (areturn)) 
                                      (endofcode 153))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valAt"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 48)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnonnull 20)) ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean))) 
                                      (8 (ifeq 18)) ;;to TAG_1
                                      (11 (aload_0)) 
                                      (12 (getfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap" (class "java.lang.Object")))) 
                                      (15 (goto 19))  ;;to TAG_2
                                      (18 (aload_2)) ;;at TAG_1
                                      (19 (areturn)) ;;at TAG_2
                                      (20 (aload_0)) ;;at TAG_0
                                      (21 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (24 (ifnull 46)) ;;to TAG_3
                                      (27 (aload_0)) 
                                      (28 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (31 (iconst_0)) 
                                      (32 (aload_1)) 
                                      (33 (invokestatic (methodCP "hash" "clojure.lang.PersistentHashMap" ((class "java.lang.Object")) int))) 
                                      (36 (aload_1)) 
                                      (37 (aload_2)) 
                                      (38 (invokeinterface (methodCP "find" "clojure.lang.PersistentHashMap$INode" (int int (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (43 (goto 47)) ;;to TAG_4
                                      (46 (aload_2)) ;;at TAG_3
                                      (47 (areturn)) ;;at TAG_4
                                      (endofcode 48))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aconst_null))
                                      (3 (invokevirtual
					(methodCP "valAt" "clojure.lang.PersistentHashMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assocEx"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokevirtual (methodCP "containsKey" "clojure.lang.PersistentHashMap" ((class "java.lang.Object")) boolean))) 
                                      (5 (ifeq 14))  ;;to TAG_0
                                      (8 (ldc 2)) ;;STRING:: "Key already present"
                                      (10 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (13 (athrow)) 
                                      (14 (aload_0)) ;;at TAG_0
                                      (15 (aload_1)) 
                                      (16 (aload_2)) 
                                      (17 (invokevirtual (methodCP "assoc" "clojure.lang.PersistentHashMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (20 (areturn)) 
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "without"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 3) (code_length . 101)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ifnonnull 39)) ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean))) 
                                      (8 (ifeq 37)) ;;to TAG_1
                                      (11 (new (class "clojure.lang.PersistentHashMap"))) 
                                      (14 (dup)) 
                                      (15 (aload_0)) 
                                      (16 (invokevirtual (methodCP "meta" "clojure.lang.PersistentHashMap" () (class "clojure.lang.IPersistentMap")))) 
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap" int))) 
                                      (23 (iconst_1)) 
                                      (24 (isub)) 
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (29 (iconst_0)) 
                                      (30 (aconst_null)) 
                                      (31 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap" ((class "clojure.lang.IPersistentMap") int (class "clojure.lang.PersistentHashMap$INode") boolean (class "java.lang.Object")) void))) 
                                      (34 (goto 38))  ;;to TAG_2
                                      (37 (aload_0)) ;;at TAG_1
                                      (38 (areturn)) ;;at TAG_2
                                      (39 (aload_0)) ;;at TAG_0
                                      (40 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (43 (ifnonnull 48)) ;;to TAG_3
                                      (46 (aload_0)) 
                                      (47 (areturn)) 
                                      (48 (aload_0)) ;;at TAG_3
                                      (49 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (52 (iconst_0)) 
                                      (53 (aload_1)) 
                                      (54 (invokestatic (methodCP "hash" "clojure.lang.PersistentHashMap" ((class "java.lang.Object")) int))) 
                                      (57 (aload_1)) 
                                      (58 (invokeinterface (methodCP "without" "clojure.lang.PersistentHashMap$INode" (int int (class "java.lang.Object")) (class "clojure.lang.PersistentHashMap$INode")) 4)) 
                                      (63 (astore_2)) 
                                      (64 (aload_2)) 
                                      (65 (aload_0)) 
                                      (66 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (69 (if_acmpne 74)) ;;to TAG_4
                                      (72 (aload_0)) 
                                      (73 (areturn)) 
                                      (74 (new (class "clojure.lang.PersistentHashMap"))) ;;at TAG_4
                                      (77 (dup)) 
                                      (78 (aload_0)) 
                                      (79 (invokevirtual (methodCP "meta" "clojure.lang.PersistentHashMap" () (class "clojure.lang.IPersistentMap")))) 
                                      (82 (aload_0)) 
                                      (83 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap" int))) 
                                      (86 (iconst_1)) 
                                      (87 (isub)) 
                                      (88 (aload_2)) 
                                      (89 (aload_0)) 
                                      (90 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean))) 
                                      (93 (aload_0)) 
                                      (94 (getfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap" (class "java.lang.Object")))) 
                                      (97 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap" ((class "clojure.lang.IPersistentMap") int (class "clojure.lang.PersistentHashMap$INode") boolean (class "java.lang.Object")) void))) 
                                      (100 (areturn)) 
                                      (endofcode 101))
                                   (Exceptions )
                                   (StackMap )))
                        (method "iterator"
                              (parameters )
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 12)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.SeqIterator")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (invokevirtual
					(methodCP "seq" "clojure.lang.PersistentHashMap" () (class "clojure.lang.ISeq"))))
                                      (8 (invokespecial
					(methodCP "<init>" "clojure.lang.SeqIterator" ((class "clojure.lang.ISeq")) void)))
                                      (11 (areturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "kvreduce"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 62)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean))) 
                                      (4 (ifeq 22)) ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (aload_2)) 
                                      (9 (aconst_null)) 
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap" (class "java.lang.Object")))) 
                                      (14 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (19 (goto 23)) ;;to TAG_1
                                      (22 (aload_2)) ;;at TAG_0
                                      (23 (astore_2)) ;;at TAG_1
                                      (24 (aload_2)) 
                                      (25 (invokestatic (methodCP "isReduced" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (28 (ifeq 41))  ;;to TAG_2
                                      (31 (aload_2)) 
                                      (32 (checkcast (class "clojure.lang.IDeref"))) 
                                      (35 (invokeinterface (methodCP "deref" "clojure.lang.IDeref" () (class "java.lang.Object")) 1)) 
                                      (40 (areturn)) 
                                      (41 (aload_0)) ;;at TAG_2
                                      (42 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (45 (ifnull 60)) ;;to TAG_3
                                      (48 (aload_0)) 
                                      (49 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (52 (aload_1)) 
                                      (53 (aload_2)) 
                                      (54 (invokeinterface (methodCP "kvreduce" "clojure.lang.PersistentHashMap$INode" ((class "clojure.lang.IFn") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (59 (areturn)) 
                                      (60 (aload_2)) ;;at TAG_3
                                      (61 (areturn)) 
                                      (endofcode 62))
                                   (Exceptions )
                                   (StackMap )))
                        (method "fold"
                              (parameters long (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 10) (code_length . 29)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentHashMap$1")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (aload_3))
                                      (6 (aload 4))
                                      (8 (aload 6))
                                      (10 (aload 7))
                                      (12 (aload 8))
                                      (14 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentHashMap$1" ((class "clojure.lang.PersistentHashMap") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn")) void)))
                                      (17 (astore 9))
                                      (19 (aload 5))
                                      (21 (aload 9))
                                      (23 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2))
                                      (28 (areturn))
                                      (endofcode 29))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap" int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "seq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 53)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (4 (ifnull 19)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (11 (invokeinterface (methodCP "nodeSeq" "clojure.lang.PersistentHashMap$INode" () (class "clojure.lang.ISeq")) 1)) 
                                      (16 (goto 20)) ;;to TAG_1
                                      (19 (aconst_null)) ;;at TAG_0
                                      (20 (astore_1)) ;;at TAG_1
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean))) 
                                      (25 (ifeq 51))  ;;to TAG_2
                                      (28 (new (class "clojure.lang.Cons"))) 
                                      (31 (dup)) 
                                      (32 (new (class "clojure.lang.MapEntry"))) 
                                      (35 (dup)) 
                                      (36 (aconst_null)) 
                                      (37 (aload_0)) 
                                      (38 (getfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap" (class "java.lang.Object")))) 
                                      (41 (invokespecial (methodCP "<init>" "clojure.lang.MapEntry" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (44 (aload_1)) 
                                      (45 (invokespecial (methodCP "<init>" "clojure.lang.Cons" ((class "java.lang.Object") (class "clojure.lang.ISeq")) void))) 
                                      (48 (goto 52)) ;;to TAG_3
                                      (51 (aload_1)) ;;at TAG_2
                                      (52 (areturn)) ;;at TAG_3
                                      (endofcode 53))
                                   (Exceptions )
                                   (StackMap )))
                        (method "empty"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentCollection"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap"))))
                                      (3 (aload_0))
                                      (4 (invokevirtual
					(methodCP "meta" "clojure.lang.PersistentHashMap" () (class "clojure.lang.IPersistentMap"))))
                                      (7 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentHashMap" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentHashMap"))))
                                      (10 (areturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "mask"
                              (parameters int int)
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 7)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (iload_1))
                                      (2 (iushr))
                                      (3 (bipush 31))
                                      (5 (iand))
                                      (6 (ireturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.PersistentHashMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 2) (code_length . 25)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentHashMap")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap" int)))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "root" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap$INode"))))
                                      (13 (aload_0))
                                      (14 (getfield (fieldCP "hasNull" "clojure.lang.PersistentHashMap" boolean)))
                                      (17 (aload_0))
                                      (18 (getfield (fieldCP "nullValue" "clojure.lang.PersistentHashMap" (class "java.lang.Object"))))
                                      (21 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentHashMap" ((class "clojure.lang.IPersistentMap") int (class "clojure.lang.PersistentHashMap$INode") boolean (class "java.lang.Object")) void)))
                                      (24 (areturn))
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "asTransient"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentHashMap$TransientHashMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentHashMap$TransientHashMap")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentHashMap$TransientHashMap" ((class "clojure.lang.PersistentHashMap")) void)))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "meta"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "_meta" "clojure.lang.PersistentHashMap" (class "clojure.lang.IPersistentMap"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "cloneAndSet"
                              (parameters (array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.PersistentHashMap$INode"))
                              (returntype . (array (class "clojure.lang.PersistentHashMap$INode")))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "clone" "clojure.lang.PersistentHashMap$INode[]" () (class "java.lang.Object"))))
                                      (4 (checkcast (array (class "clojure.lang.PersistentHashMap$INode"))))
                                      (7 (astore_3))
                                      (8 (aload_3))
                                      (9 (iload_1))
                                      (10 (aload_2))
                                      (11 (aastore))
                                      (12 (aload_3))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "cloneAndSet"
                              (parameters (array (class "java.lang.Object")) int (class "java.lang.Object"))
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "clone" "java.lang.Object[]" () (class "java.lang.Object"))))
                                      (4 (checkcast (array (class "java.lang.Object"))))
                                      (7 (astore_3))
                                      (8 (aload_3))
                                      (9 (iload_1))
                                      (10 (aload_2))
                                      (11 (aastore))
                                      (12 (aload_3))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "cloneAndSet"
                              (parameters (array (class "java.lang.Object")) int (class "java.lang.Object") int (class "java.lang.Object"))
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 6) (code_length . 23)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "clone" "java.lang.Object[]" () (class "java.lang.Object"))))
                                      (4 (checkcast (array (class "java.lang.Object"))))
                                      (7 (astore 5))
                                      (9 (aload 5))
                                      (11 (iload_1))
                                      (12 (aload_2))
                                      (13 (aastore))
                                      (14 (aload 5))
                                      (16 (iload_3))
                                      (17 (aload 4))
                                      (19 (aastore))
                                      (20 (aload 5))
                                      (22 (areturn))
                                      (endofcode 23))
                                   (Exceptions )
                                   (StackMap )))
                        (method "removePair"
                              (parameters (array (class "java.lang.Object")) int)
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 3) (code_length . 39)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (arraylength))
                                      (2 (iconst_2))
                                      (3 (isub))
                                      (4 (anewarray (class "java.lang.Object")))
                                      (7 (astore_2))
                                      (8 (aload_0))
                                      (9 (iconst_0))
                                      (10 (aload_2))
                                      (11 (iconst_0))
                                      (12 (iconst_2))
                                      (13 (iload_1))
                                      (14 (imul))
                                      (15 (invokestatic
					(methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void)))
                                      (18 (aload_0))
                                      (19 (iconst_2))
                                      (20 (iload_1))
                                      (21 (iconst_1))
                                      (22 (iadd))
                                      (23 (imul))
                                      (24 (aload_2))
                                      (25 (iconst_2))
                                      (26 (iload_1))
                                      (27 (imul))
                                      (28 (aload_2))
                                      (29 (arraylength))
                                      (30 (iconst_2))
                                      (31 (iload_1))
                                      (32 (imul))
                                      (33 (isub))
                                      (34 (invokestatic
					(methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void)))
                                      (37 (aload_2))
                                      (38 (areturn))
                                      (endofcode 39))
                                   (Exceptions )
                                   (StackMap )))
                        (method "createNode"
                              (parameters int (class "java.lang.Object") (class "java.lang.Object") int (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 9) (max_locals . 9) (code_length . 96)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "hash" "clojure.lang.PersistentHashMap" ((class "java.lang.Object")) int))) 
                                      (4 (istore 6)) 
                                      (6 (iload 6)) 
                                      (8 (iload_3)) 
                                      (9 (if_icmpne 46))  ;;to TAG_0
                                      (12 (new (class "clojure.lang.PersistentHashMap$HashCollisionNode"))) 
                                      (15 (dup)) 
                                      (16 (aconst_null)) 
                                      (17 (iload 6)) 
                                      (19 (iconst_2)) 
                                      (20 (iconst_4)) 
                                      (21 (anewarray (class "java.lang.Object"))) 
                                      (24 (dup)) 
                                      (25 (iconst_0)) 
                                      (26 (aload_1)) 
                                      (27 (aastore)) 
                                      (28 (dup)) 
                                      (29 (iconst_1)) 
                                      (30 (aload_2)) 
                                      (31 (aastore)) 
                                      (32 (dup)) 
                                      (33 (iconst_2)) 
                                      (34 (aload 4)) 
                                      (36 (aastore)) 
                                      (37 (dup)) 
                                      (38 (iconst_3)) 
                                      (39 (aload 5)) 
                                      (41 (aastore)) 
                                      (42 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference") int int (array (class "java.lang.Object"))) void))) 
                                      (45 (areturn)) 
                                      (46 (new (class "clojure.lang.Box"))) ;;at TAG_0
                                      (49 (dup)) 
                                      (50 (aconst_null)) 
                                      (51 (invokespecial (methodCP "<init>" "clojure.lang.Box" ((class "java.lang.Object")) void))) 
                                      (54 (astore 7)) 
                                      (56 (new (class "java.util.concurrent.atomic.AtomicReference"))) 
                                      (59 (dup)) 
                                      (60 (invokespecial (methodCP "<init>" "java.util.concurrent.atomic.AtomicReference" () void))) 
                                      (63 (astore 8)) 
                                      (65 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap$BitmapIndexedNode" (class "clojure.lang.PersistentHashMap$BitmapIndexedNode")))) 
                                      (68 (aload 8)) 
                                      (70 (iload_0)) 
                                      (71 (iload 6)) 
                                      (73 (aload_1)) 
                                      (74 (aload_2)) 
                                      (75 (aload 7)) 
                                      (77 (invokevirtual (methodCP "assoc" "clojure.lang.PersistentHashMap$BitmapIndexedNode" ((class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (80 (aload 8)) 
                                      (82 (iload_0)) 
                                      (83 (iload_3)) 
                                      (84 (aload 4)) 
                                      (86 (aload 5)) 
                                      (88 (aload 7)) 
                                      (90 (invokeinterface (methodCP "assoc" "clojure.lang.PersistentHashMap$INode" ((class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")) 7)) 
                                      (95 (areturn)) 
                                      (endofcode 96))
                                   (Exceptions )
                                   (StackMap )))
                        (method "createNode"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int (class "java.lang.Object") (class "java.lang.Object") int (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 9) (max_locals . 9) (code_length . 87)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (invokestatic (methodCP "hash" "clojure.lang.PersistentHashMap" ((class "java.lang.Object")) int))) 
                                      (4 (istore 7)) 
                                      (6 (iload 7)) 
                                      (8 (iload 4)) 
                                      (10 (if_icmpne 47))  ;;to TAG_0
                                      (13 (new (class "clojure.lang.PersistentHashMap$HashCollisionNode"))) 
                                      (16 (dup)) 
                                      (17 (aconst_null)) 
                                      (18 (iload 7)) 
                                      (20 (iconst_2)) 
                                      (21 (iconst_4)) 
                                      (22 (anewarray (class "java.lang.Object"))) 
                                      (25 (dup)) 
                                      (26 (iconst_0)) 
                                      (27 (aload_2)) 
                                      (28 (aastore)) 
                                      (29 (dup)) 
                                      (30 (iconst_1)) 
                                      (31 (aload_3)) 
                                      (32 (aastore)) 
                                      (33 (dup)) 
                                      (34 (iconst_2)) 
                                      (35 (aload 5)) 
                                      (37 (aastore)) 
                                      (38 (dup)) 
                                      (39 (iconst_3)) 
                                      (40 (aload 6)) 
                                      (42 (aastore)) 
                                      (43 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference") int int (array (class "java.lang.Object"))) void))) 
                                      (46 (areturn)) 
                                      (47 (new (class "clojure.lang.Box"))) ;;at TAG_0
                                      (50 (dup)) 
                                      (51 (aconst_null)) 
                                      (52 (invokespecial (methodCP "<init>" "clojure.lang.Box" ((class "java.lang.Object")) void))) 
                                      (55 (astore 8)) 
                                      (57 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap$BitmapIndexedNode" (class "clojure.lang.PersistentHashMap$BitmapIndexedNode")))) 
                                      (60 (aload_0)) 
                                      (61 (iload_1)) 
                                      (62 (iload 7)) 
                                      (64 (aload_2)) 
                                      (65 (aload_3)) 
                                      (66 (aload 8)) 
                                      (68 (invokevirtual (methodCP "assoc" "clojure.lang.PersistentHashMap$BitmapIndexedNode" ((class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (71 (aload_0)) 
                                      (72 (iload_1)) 
                                      (73 (iload 4)) 
                                      (75 (aload 5)) 
                                      (77 (aload 6)) 
                                      (79 (aload 8)) 
                                      (81 (invokeinterface (methodCP "assoc" "clojure.lang.PersistentHashMap$INode" ((class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")) 7)) 
                                      (86 (areturn)) 
                                      (endofcode 87))
                                   (Exceptions )
                                   (StackMap )))
                        (method "bitpos"
                              (parameters int int)
                              (returntype . int)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (iload_0))
                                      (2 (iload_1))
                                      (3 (invokestatic
					(methodCP "mask" "clojure.lang.PersistentHashMap" (int int) int)))
                                      (6 (ishl))
                                      (7 (ireturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Associative"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokevirtual
					(methodCP "assoc" "clojure.lang.PersistentHashMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "asTransient"
                              (parameters )
                              (returntype . (class "clojure.lang.ITransientCollection"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "asTransient" "clojure.lang.PersistentHashMap" () (class "clojure.lang.PersistentHashMap$TransientHashMap"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentHashMap" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.PersistentHashMap"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$000"
                              (parameters (array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.PersistentHashMap$INode"))
                              (returntype . (array (class "clojure.lang.PersistentHashMap$INode")))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (aload_2))
                                      (3 (invokestatic
					(methodCP "cloneAndSet" "clojure.lang.PersistentHashMap" ((array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.PersistentHashMap$INode")) (array (class "clojure.lang.PersistentHashMap$INode")))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$100"
                              (parameters int int)
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (iload_1))
                                      (2 (invokestatic
					(methodCP "bitpos" "clojure.lang.PersistentHashMap" (int int) int)))
                                      (5 (ireturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$200"
                              (parameters (array (class "java.lang.Object")) int (class "java.lang.Object"))
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (aload_2))
                                      (3 (invokestatic
					(methodCP "cloneAndSet" "clojure.lang.PersistentHashMap" ((array (class "java.lang.Object")) int (class "java.lang.Object")) (array (class "java.lang.Object")))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$300"
                              (parameters int (class "java.lang.Object") (class "java.lang.Object") int (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 6) (code_length . 12)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (iload_3))
                                      (4 (aload 4))
                                      (6 (aload 5))
                                      (8 (invokestatic
					(methodCP "createNode" "clojure.lang.PersistentHashMap" (int (class "java.lang.Object") (class "java.lang.Object") int (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.PersistentHashMap$INode"))))
                                      (11 (areturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$400"
                              (parameters (array (class "java.lang.Object")) int (class "java.lang.Object") int (class "java.lang.Object"))
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (aload_2))
                                      (3 (iload_3))
                                      (4 (aload 4))
                                      (6 (invokestatic
					(methodCP "cloneAndSet" "clojure.lang.PersistentHashMap" ((array (class "java.lang.Object")) int (class "java.lang.Object") int (class "java.lang.Object")) (array (class "java.lang.Object")))))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$500"
                              (parameters (array (class "java.lang.Object")) int)
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (invokestatic
					(methodCP "removePair" "clojure.lang.PersistentHashMap" ((array (class "java.lang.Object")) int) (array (class "java.lang.Object")))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$600"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int (class "java.lang.Object") (class "java.lang.Object") int (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 7) (max_locals . 7) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (aload_2))
                                      (3 (aload_3))
                                      (4 (iload 4))
                                      (6 (aload 5))
                                      (8 (aload 6))
                                      (10 (invokestatic
					(methodCP "createNode" "clojure.lang.PersistentHashMap" ((class "java.util.concurrent.atomic.AtomicReference") int (class "java.lang.Object") (class "java.lang.Object") int (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.PersistentHashMap$INode"))))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 0) (code_length . 25)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentHashMap")))
                                      (3 (dup))
                                      (4 (iconst_0))
                                      (5 (aconst_null))
                                      (6 (iconst_0))
                                      (7 (aconst_null))
                                      (8 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentHashMap" (int (class "clojure.lang.PersistentHashMap$INode") boolean (class "java.lang.Object")) void)))
                                      (11 (putstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap"))))
                                      (14 (new (class "java.lang.Object")))
                                      (17 (dup))
                                      (18 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (21 (putstatic (fieldCP "NOT_FOUND" "clojure.lang.PersistentHashMap" (class "java.lang.Object"))))
                                      (24 (return))
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IEditableCollection" "clojure.lang.IObj")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentHashMap-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentHashMap*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentHashMap" . "clojure.lang"))

