; Compiler$TryExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.Compiler$TryExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$TryExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Can\nt eval try")
                        (STRING  "Ljava/lang/Object;"))
            (fields
                        (field "tryExpr" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "finallyExpr" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "catchExprs" (class "clojure.lang.PersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "retLocal" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "finallyLocal" int (accessflags  *class*  *final*  *public* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.Compiler$Expr") (class "clojure.lang.PersistentVector") (class "clojure.lang.Compiler$Expr") int int)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 6) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "tryExpr" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "catchExprs" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.PersistentVector"))))
                                      (14 (aload_0))
                                      (15 (aload_3))
                                      (16 (putfield (fieldCP "finallyExpr" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (19 (aload_0))
                                      (20 (iload 4))
                                      (22 (putfield (fieldCP "retLocal" "clojure.lang.Compiler$TryExpr" int)))
                                      (25 (aload_0))
                                      (26 (iload 5))
                                      (28 (putfield (fieldCP "finallyLocal" "clojure.lang.Compiler$TryExpr" int)))
                                      (31 (return))
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (ldc 0))         ;;STRING:: "Can\nt eval try"
                                      (6 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void)))
                                      (9 (athrow))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 11) (code_length . 593)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (4 (astore 4)) 
                                      (6 (aload_3)) 
                                      (7 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (10 (astore 5)) 
                                      (12 (aload_3)) 
                                      (13 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (16 (astore 6)) 
                                      (18 (aload_3)) 
                                      (19 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (22 (astore 7)) 
                                      (24 (aload_3)) 
                                      (25 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (28 (astore 8)) 
                                      (30 (iconst_0)) 
                                      (31 (istore 9)) 
                                      (33 (iload 9)) ;;at TAG_1
                                      (35 (aload_0)) 
                                      (36 (getfield (fieldCP "catchExprs" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.PersistentVector")))) 
                                      (39 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (42 (if_icmpge 83)) ;;to TAG_0
                                      (45 (aload_0)) 
                                      (46 (getfield (fieldCP "catchExprs" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.PersistentVector")))) 
                                      (49 (iload 9)) 
                                      (51 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector" (int) (class "java.lang.Object")))) 
                                      (54 (checkcast (class "clojure.lang.Compiler$TryExpr$CatchClause"))) 
                                      (57 (astore 10)) 
                                      (59 (aload 10)) 
                                      (61 (aload_3)) 
                                      (62 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (65 (putfield (fieldCP "label" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.asm.Label")))) 
                                      (68 (aload 10)) 
                                      (70 (aload_3)) 
                                      (71 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (74 (putfield (fieldCP "endLabel" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.asm.Label")))) 
                                      (77 (iinc 9 1)) 
                                      (80 (goto 33))  ;;to TAG_1
                                      (83 (aload_3)) ;;at TAG_0
                                      (84 (aload 4)) 
                                      (86 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (89 (aload_0)) 
                                      (90 (getfield (fieldCP "tryExpr" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (93 (aload_1)) 
                                      (94 (aload_2)) 
                                      (95 (aload_3)) 
                                      (96 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (101 (aload_1)) 
                                      (102 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (105 (if_acmpeq 124)) ;;to TAG_2
                                      (108 (aload_3)) 
                                      (109 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (112 (bipush 54)) 
                                      (114 (invokevirtual (methodCP "getOpcode" "clojure.asm.Type" (int) int))) 
                                      (117 (aload_0)) 
                                      (118 (getfield (fieldCP "retLocal" "clojure.lang.Compiler$TryExpr" int))) 
                                      (121 (invokevirtual (methodCP "visitVarInsn" "clojure.asm.commons.GeneratorAdapter" (int int) void))) 
                                      (124 (aload_3)) ;;at TAG_2
                                      (125 (aload 5)) 
                                      (127 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (130 (aload_0)) 
                                      (131 (getfield (fieldCP "finallyExpr" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (134 (ifnull 151)) ;;to TAG_3
                                      (137 (aload_0)) 
                                      (138 (getfield (fieldCP "finallyExpr" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (141 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (144 (aload_2)) 
                                      (145 (aload_3)) 
                                      (146 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (151 (aload_3)) ;;at TAG_3
                                      (152 (aload 7)) 
                                      (154 (invokevirtual (methodCP "goTo" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (157 (iconst_0)) 
                                      (158 (istore 9)) 
                                      (160 (iload 9)) ;;at TAG_7
                                      (162 (aload_0)) 
                                      (163 (getfield (fieldCP "catchExprs" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.PersistentVector")))) 
                                      (166 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (169 (if_icmpge 293)) ;;to TAG_4
                                      (172 (aload_0)) 
                                      (173 (getfield (fieldCP "catchExprs" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.PersistentVector")))) 
                                      (176 (iload 9)) 
                                      (178 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector" (int) (class "java.lang.Object")))) 
                                      (181 (checkcast (class "clojure.lang.Compiler$TryExpr$CatchClause"))) 
                                      (184 (astore 10)) 
                                      (186 (aload_3)) 
                                      (187 (aload 10)) 
                                      (189 (getfield (fieldCP "label" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.asm.Label")))) 
                                      (192 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (195 (aload_3)) 
                                      (196 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (199 (bipush 54)) 
                                      (201 (invokevirtual (methodCP "getOpcode" "clojure.asm.Type" (int) int))) 
                                      (204 (aload 10)) 
                                      (206 (getfield (fieldCP "lb" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (209 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (212 (invokevirtual (methodCP "visitVarInsn" "clojure.asm.commons.GeneratorAdapter" (int int) void))) 
                                      (215 (aload 10)) 
                                      (217 (getfield (fieldCP "handler" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.lang.Compiler$Expr")))) 
                                      (220 (aload_1)) 
                                      (221 (aload_2)) 
                                      (222 (aload_3)) 
                                      (223 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (228 (aload_1)) 
                                      (229 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (232 (if_acmpeq 251)) ;;to TAG_5
                                      (235 (aload_3)) 
                                      (236 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (239 (bipush 54)) 
                                      (241 (invokevirtual (methodCP "getOpcode" "clojure.asm.Type" (int) int))) 
                                      (244 (aload_0)) 
                                      (245 (getfield (fieldCP "retLocal" "clojure.lang.Compiler$TryExpr" int))) 
                                      (248 (invokevirtual (methodCP "visitVarInsn" "clojure.asm.commons.GeneratorAdapter" (int int) void))) 
                                      (251 (aload_3)) ;;at TAG_5
                                      (252 (aload 10)) 
                                      (254 (getfield (fieldCP "endLabel" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.asm.Label")))) 
                                      (257 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (260 (aload_0)) 
                                      (261 (getfield (fieldCP "finallyExpr" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (264 (ifnull 281)) ;;to TAG_6
                                      (267 (aload_0)) 
                                      (268 (getfield (fieldCP "finallyExpr" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (271 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (274 (aload_2)) 
                                      (275 (aload_3)) 
                                      (276 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (281 (aload_3)) ;;at TAG_6
                                      (282 (aload 7)) 
                                      (284 (invokevirtual (methodCP "goTo" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (287 (iinc 9 1)) 
                                      (290 (goto 160)) ;;to TAG_7
                                      (293 (aload_0)) ;;at TAG_4
                                      (294 (getfield (fieldCP "finallyExpr" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (297 (ifnull 356)) ;;to TAG_8
                                      (300 (aload_3)) 
                                      (301 (aload 8)) 
                                      (303 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (306 (aload_3)) 
                                      (307 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (310 (bipush 54)) 
                                      (312 (invokevirtual (methodCP "getOpcode" "clojure.asm.Type" (int) int))) 
                                      (315 (aload_0)) 
                                      (316 (getfield (fieldCP "finallyLocal" "clojure.lang.Compiler$TryExpr" int))) 
                                      (319 (invokevirtual (methodCP "visitVarInsn" "clojure.asm.commons.GeneratorAdapter" (int int) void))) 
                                      (322 (aload_0)) 
                                      (323 (getfield (fieldCP "finallyExpr" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (326 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (329 (aload_2)) 
                                      (330 (aload_3)) 
                                      (331 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (336 (aload_3)) 
                                      (337 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (340 (bipush 21)) 
                                      (342 (invokevirtual (methodCP "getOpcode" "clojure.asm.Type" (int) int))) 
                                      (345 (aload_0)) 
                                      (346 (getfield (fieldCP "finallyLocal" "clojure.lang.Compiler$TryExpr" int))) 
                                      (349 (invokevirtual (methodCP "visitVarInsn" "clojure.asm.commons.GeneratorAdapter" (int int) void))) 
                                      (352 (aload_3)) 
                                      (353 (invokevirtual (methodCP "throwException" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (356 (aload_3)) ;;at TAG_8
                                      (357 (aload 7)) 
                                      (359 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (362 (aload_1)) 
                                      (363 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (366 (if_acmpeq 385)) ;;to TAG_9
                                      (369 (aload_3)) 
                                      (370 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (373 (bipush 21)) 
                                      (375 (invokevirtual (methodCP "getOpcode" "clojure.asm.Type" (int) int))) 
                                      (378 (aload_0)) 
                                      (379 (getfield (fieldCP "retLocal" "clojure.lang.Compiler$TryExpr" int))) 
                                      (382 (invokevirtual (methodCP "visitVarInsn" "clojure.asm.commons.GeneratorAdapter" (int int) void))) 
                                      (385 (aload_3)) ;;at TAG_9
                                      (386 (aload 6)) 
                                      (388 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (391 (iconst_0)) 
                                      (392 (istore 9)) 
                                      (394 (iload 9)) ;;at TAG_11
                                      (396 (aload_0)) 
                                      (397 (getfield (fieldCP "catchExprs" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.PersistentVector")))) 
                                      (400 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (403 (if_icmpge 454)) ;;to TAG_10
                                      (406 (aload_0)) 
                                      (407 (getfield (fieldCP "catchExprs" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.PersistentVector")))) 
                                      (410 (iload 9)) 
                                      (412 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector" (int) (class "java.lang.Object")))) 
                                      (415 (checkcast (class "clojure.lang.Compiler$TryExpr$CatchClause"))) 
                                      (418 (astore 10)) 
                                      (420 (aload_3)) 
                                      (421 (aload 4)) 
                                      (423 (aload 5)) 
                                      (425 (aload 10)) 
                                      (427 (getfield (fieldCP "label" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.asm.Label")))) 
                                      (430 (aload 10)) 
                                      (432 (getfield (fieldCP "c" "clojure.lang.Compiler$TryExpr$CatchClause" (class "java.lang.Class")))) 
                                      (435 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (438 (bipush 46)) 
                                      (440 (bipush 47)) 
                                      (442 (invokevirtual (methodCP "replace" "java.lang.String" (char char) (class "java.lang.String")))) 
                                      (445 (invokevirtual (methodCP "visitTryCatchBlock" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label") (class "clojure.asm.Label") (class "clojure.asm.Label") (class "java.lang.String")) void))) 
                                      (448 (iinc 9 1)) 
                                      (451 (goto 394)) ;;to TAG_11
                                      (454 (aload_0)) ;;at TAG_10
                                      (455 (getfield (fieldCP "finallyExpr" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (458 (ifnull 524)) ;;to TAG_12
                                      (461 (aload_3)) 
                                      (462 (aload 4)) 
                                      (464 (aload 5)) 
                                      (466 (aload 8)) 
                                      (468 (aconst_null)) 
                                      (469 (invokevirtual (methodCP "visitTryCatchBlock" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label") (class "clojure.asm.Label") (class "clojure.asm.Label") (class "java.lang.String")) void))) 
                                      (472 (iconst_0)) 
                                      (473 (istore 9)) 
                                      (475 (iload 9)) ;;at TAG_13
                                      (477 (aload_0)) 
                                      (478 (getfield (fieldCP "catchExprs" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.PersistentVector")))) 
                                      (481 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (484 (if_icmpge 524)) ;;to TAG_12
                                      (487 (aload_0)) 
                                      (488 (getfield (fieldCP "catchExprs" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.PersistentVector")))) 
                                      (491 (iload 9)) 
                                      (493 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector" (int) (class "java.lang.Object")))) 
                                      (496 (checkcast (class "clojure.lang.Compiler$TryExpr$CatchClause"))) 
                                      (499 (astore 10)) 
                                      (501 (aload_3)) 
                                      (502 (aload 10)) 
                                      (504 (getfield (fieldCP "label" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.asm.Label")))) 
                                      (507 (aload 10)) 
                                      (509 (getfield (fieldCP "endLabel" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.asm.Label")))) 
                                      (512 (aload 8)) 
                                      (514 (aconst_null)) 
                                      (515 (invokevirtual (methodCP "visitTryCatchBlock" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label") (class "clojure.asm.Label") (class "clojure.asm.Label") (class "java.lang.String")) void))) 
                                      (518 (iinc 9 1)) 
                                      (521 (goto 475)) ;;to TAG_13
                                      (524 (iconst_0)) ;;at TAG_12
                                      (525 (istore 9)) 
                                      (527 (iload 9)) ;;at TAG_15
                                      (529 (aload_0)) 
                                      (530 (getfield (fieldCP "catchExprs" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.PersistentVector")))) 
                                      (533 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (536 (if_icmpge 592)) ;;to TAG_14
                                      (539 (aload_0)) 
                                      (540 (getfield (fieldCP "catchExprs" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.PersistentVector")))) 
                                      (543 (iload 9)) 
                                      (545 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector" (int) (class "java.lang.Object")))) 
                                      (548 (checkcast (class "clojure.lang.Compiler$TryExpr$CatchClause"))) 
                                      (551 (astore 10)) 
                                      (553 (aload_3)) 
                                      (554 (aload 10)) 
                                      (556 (getfield (fieldCP "lb" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (559 (getfield (fieldCP "name" "clojure.lang.Compiler$LocalBinding" (class "java.lang.String")))) 
                                      (562 (ldc 1)) ;;STRING:: "Ljava/lang/Object;"
                                      (564 (aconst_null)) 
                                      (565 (aload 10)) 
                                      (567 (getfield (fieldCP "label" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.asm.Label")))) 
                                      (570 (aload 10)) 
                                      (572 (getfield (fieldCP "endLabel" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.asm.Label")))) 
                                      (575 (aload 10)) 
                                      (577 (getfield (fieldCP "lb" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (580 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (583 (invokevirtual (methodCP "visitLocalVariable" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "clojure.asm.Label") (class "clojure.asm.Label") int) void))) 
                                      (586 (iinc 9 1)) 
                                      (589 (goto 527)) ;;to TAG_15
                                      (592 (return)) ;;at TAG_14
                                      (endofcode 593))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "tryExpr" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (invokeinterface
					(methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1))
                                      (9 (ireturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "tryExpr" "clojure.lang.Compiler$TryExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (4 (invokeinterface
					(methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$TryExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$TryExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$TryExpr" . "clojure.lang"))

