; Compiler$TryExpr$CatchClause-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.Compiler$TryExpr$CatchClause*
 (make-class-def
      '(class "clojure.lang.Compiler$TryExpr$CatchClause"
            "java.lang.Object"
            (constant_pool)
            (fields
                        (field "c" (class "java.lang.Class") (accessflags  *class*  *final*  *public* ) -1)
                        (field "lb" (class "clojure.lang.Compiler$LocalBinding") (accessflags  *class*  *final*  *public* ) -1)
                        (field "handler" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "label" (class "clojure.asm.Label") (accessflags  *class* ) -1)
                        (field "endLabel" (class "clojure.asm.Label") (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.Class") (class "clojure.lang.Compiler$LocalBinding") (class "clojure.lang.Compiler$Expr"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "c" "clojure.lang.Compiler$TryExpr$CatchClause" (class "java.lang.Class"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "lb" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.lang.Compiler$LocalBinding"))))
                                      (14 (aload_0))
                                      (15 (aload_3))
                                      (16 (putfield (fieldCP "handler" "clojure.lang.Compiler$TryExpr$CatchClause" (class "clojure.lang.Compiler$Expr"))))
                                      (19 (return))
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$TryExpr$CatchClause-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$TryExpr$CatchClause*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$TryExpr$CatchClause" . "clojure.lang"))

