; Compiler$InvokeExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$InvokeExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$InvokeExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "No method of interface: ")
                        (STRING  " found for function: ")
                        (STRING  " of protocol: ")
                        (STRING  " (The protocol method may have been defined before and removed.)")
                        (STRING  "No single method: ")
                        (STRING  " of interface: ")
                        (STRING  "Class classOf(Object)")
                        (STRING  "Object getRawRoot()")
                        (STRING  "invoke")
                        (STRING  ".invokePrim")
                        (STRING  "on")
                        (STRING  "method-map"))
            (fields
                        (field "fexpr" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "tag" (class "java.lang.Object") (accessflags  *class*  *final*  *public* ) -1)
                        (field "args" (class "clojure.lang.IPersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "line" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "column" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "source" (class "java.lang.String") (accessflags  *class*  *final*  *public* ) -1)
                        (field "isProtocol" boolean (accessflags  *class*  *public* ) -1)
                        (field "isDirect" boolean (accessflags  *class*  *public* ) -1)
                        (field "siteIndex" int (accessflags  *class*  *public* ) -1)
                        (field "protocolOn" (class "java.lang.Class") (accessflags  *class*  *public* ) -1)
                        (field "onMethod" (class "java.lang.reflect.Method") (accessflags  *class*  *public* ) -1)
                        (field "onKey" (class "clojure.lang.Keyword") (accessflags  *class*  *static* ) -1)
                        (field "methodMapKey" (class "clojure.lang.Keyword") (accessflags  *class*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.String") int int (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") (class "clojure.lang.IPersistentVector"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 14) (code_length . 542)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "<init>" "java.lang.Object" () void))) 
                                      (4 (aload_0)) 
                                      (5 (iconst_0)) 
                                      (6 (putfield (fieldCP "isProtocol" "clojure.lang.Compiler$InvokeExpr" boolean))) 
                                      (9 (aload_0)) 
                                      (10 (iconst_0)) 
                                      (11 (putfield (fieldCP "isDirect" "clojure.lang.Compiler$InvokeExpr" boolean))) 
                                      (14 (aload_0)) 
                                      (15 (iconst_m1)) 
                                      (16 (putfield (fieldCP "siteIndex" "clojure.lang.Compiler$InvokeExpr" int))) 
                                      (19 (aload_0)) 
                                      (20 (aload_1)) 
                                      (21 (putfield (fieldCP "source" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.String")))) 
                                      (24 (aload_0)) 
                                      (25 (aload 5)) 
                                      (27 (putfield (fieldCP "fexpr" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (30 (aload_0)) 
                                      (31 (aload 6)) 
                                      (33 (putfield (fieldCP "args" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (36 (aload_0)) 
                                      (37 (iload_2)) 
                                      (38 (putfield (fieldCP "line" "clojure.lang.Compiler$InvokeExpr" int))) 
                                      (41 (aload_0)) 
                                      (42 (iload_3)) 
                                      (43 (putfield (fieldCP "column" "clojure.lang.Compiler$InvokeExpr" int))) 
                                      (46 (aload 5)) 
                                      (48 (instanceof (class "clojure.lang.Compiler$VarExpr"))) 
                                      (51 (ifeq 378)) ;;to TAG_0
                                      (54 (aload 5)) 
                                      (56 (checkcast (class "clojure.lang.Compiler$VarExpr"))) 
                                      (59 (getfield (fieldCP "var" "clojure.lang.Compiler$VarExpr" (class "clojure.lang.Var")))) 
                                      (62 (astore 7)) 
                                      (64 (aload 7)) 
                                      (66 (invokevirtual (methodCP "meta" "clojure.lang.Var" () (class "clojure.lang.IPersistentMap")))) 
                                      (69 (getstatic (fieldCP "protocolKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (72 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (75 (checkcast (class "clojure.lang.Var"))) 
                                      (78 (astore 8)) 
                                      (80 (aload 8)) 
                                      (82 (ifnull 378)) ;;to TAG_0
                                      (85 (getstatic (fieldCP "PROTOCOL_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (88 (invokevirtual (methodCP "isBound" "clojure.lang.Var" () boolean))) 
                                      (91 (ifeq 378)) ;;to TAG_0
                                      (94 (aload_0)) 
                                      (95 (iconst_1)) 
                                      (96 (putfield (fieldCP "isProtocol" "clojure.lang.Compiler$InvokeExpr" boolean))) 
                                      (99 (aload_0)) 
                                      (100 (aload 5)) 
                                      (102 (checkcast (class "clojure.lang.Compiler$VarExpr"))) 
                                      (105 (getfield (fieldCP "var" "clojure.lang.Compiler$VarExpr" (class "clojure.lang.Var")))) 
                                      (108 (invokestatic (methodCP "access$1100" "clojure.lang.Compiler" ((class "clojure.lang.Var")) int))) 
                                      (111 (putfield (fieldCP "siteIndex" "clojure.lang.Compiler$InvokeExpr" int))) 
                                      (114 (aload 8)) 
                                      (116 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (119 (getstatic (fieldCP "onKey" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.Keyword")))) 
                                      (122 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (125 (astore 9)) 
                                      (127 (aload_0)) 
                                      (128 (aload 9)) 
                                      (130 (iconst_0)) 
                                      (131 (invokestatic (methodCP "access$400" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object") boolean) (class "java.lang.Class")))) 
                                      (134 (putfield (fieldCP "protocolOn" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Class")))) 
                                      (137 (aload_0)) 
                                      (138 (getfield (fieldCP "protocolOn" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Class")))) 
                                      (141 (ifnull 378)) ;;to TAG_0
                                      (144 (aload 8)) 
                                      (146 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (149 (getstatic (fieldCP "methodMapKey" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.Keyword")))) 
                                      (152 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (155 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (158 (astore 10)) 
                                      (160 (aload 10)) 
                                      (162 (aload 7)) 
                                      (164 (getfield (fieldCP "sym" "clojure.lang.Var" (class "clojure.lang.Symbol")))) 
                                      (167 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "clojure.lang.Symbol")) (class "clojure.lang.Keyword")))) 
                                      (170 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (175 (checkcast (class "clojure.lang.Keyword"))) 
                                      (178 (astore 11)) 
                                      (180 (aload 11)) 
                                      (182 (ifnonnull 249))  ;;to TAG_1
                                      (185 (new (class "java.lang.IllegalArgumentException"))) 
                                      (188 (dup)) 
                                      (189 (new (class "java.lang.StringBuilder"))) 
                                      (192 (dup)) 
                                      (193 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (196 (ldc 0)) ;;STRING:: "No method of interface: "
                                      (198 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (201 (aload_0)) 
                                      (202 (getfield (fieldCP "protocolOn" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Class")))) 
                                      (205 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (208 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (211 (ldc 1)) ;;STRING:: " found for function: "
                                      (213 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (216 (aload 7)) 
                                      (218 (getfield (fieldCP "sym" "clojure.lang.Var" (class "clojure.lang.Symbol")))) 
                                      (221 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (224 (ldc 2)) ;;STRING:: " of protocol: "
                                      (226 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (229 (aload 8)) 
                                      (231 (getfield (fieldCP "sym" "clojure.lang.Var" (class "clojure.lang.Symbol")))) 
                                      (234 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (237 (ldc 3)) ;;STRING:: " (The protocol method may have been defined before and removed.)"
                                      (239 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (242 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (245 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (248 (athrow)) 
                                      (249 (aload 11)) ;;at TAG_1
                                      (251 (getfield (fieldCP "sym" "clojure.lang.Keyword" (class "clojure.lang.Symbol")))) 
                                      (254 (invokevirtual (methodCP "toString" "clojure.lang.Symbol" () (class "java.lang.String")))) 
                                      (257 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (260 (astore 12)) 
                                      (262 (aload_0)) 
                                      (263 (getfield (fieldCP "protocolOn" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Class")))) 
                                      (266 (aload 6)) 
                                      (268 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (273 (iconst_1)) 
                                      (274 (isub)) 
                                      (275 (aload 12)) 
                                      (277 (iconst_0)) 
                                      (278 (invokestatic (methodCP "getMethods" "clojure.lang.Reflector" ((class "java.lang.Class") int (class "java.lang.String") boolean) (class "java.util.List")))) 
                                      (281 (astore 13)) 
                                      (283 (aload 13)) 
                                      (285 (invokeinterface (methodCP "size" "java.util.List" () int) 1)) 
                                      (290 (iconst_1)) 
                                      (291 (if_icmpeq 363)) ;;to TAG_2
                                      (294 (new (class "java.lang.IllegalArgumentException"))) 
                                      (297 (dup)) 
                                      (298 (new (class "java.lang.StringBuilder"))) 
                                      (301 (dup)) 
                                      (302 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (305 (ldc 4)) ;;STRING:: "No single method: "
                                      (307 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (310 (aload 12)) 
                                      (312 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (315 (ldc 5)) ;;STRING:: " of interface: "
                                      (317 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (320 (aload_0)) 
                                      (321 (getfield (fieldCP "protocolOn" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Class")))) 
                                      (324 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (327 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (330 (ldc 1)) ;;STRING:: " found for function: "
                                      (332 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (335 (aload 7)) 
                                      (337 (getfield (fieldCP "sym" "clojure.lang.Var" (class "clojure.lang.Symbol")))) 
                                      (340 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (343 (ldc 2)) ;;STRING:: " of protocol: "
                                      (345 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (348 (aload 8)) 
                                      (350 (getfield (fieldCP "sym" "clojure.lang.Var" (class "clojure.lang.Symbol")))) 
                                      (353 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (356 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (359 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (362 (athrow)) 
                                      (363 (aload_0)) ;;at TAG_2
                                      (364 (aload 13)) 
                                      (366 (iconst_0)) 
                                      (367 (invokeinterface (methodCP "get" "java.util.List" (int) (class "java.lang.Object")) 2)) 
                                      (372 (checkcast (class "java.lang.reflect.Method"))) 
                                      (375 (putfield (fieldCP "onMethod" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.reflect.Method")))) 
                                      (378 (aload 4)) ;;at TAG_0
                                      (380 (ifnull 392)) ;;to TAG_3
                                      (383 (aload_0)) 
                                      (384 (aload 4)) 
                                      (386 (putfield (fieldCP "tag" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Object")))) 
                                      (389 (goto 541)) ;;to TAG_4
                                      (392 (aload 5)) ;;at TAG_3
                                      (394 (instanceof (class "clojure.lang.Compiler$VarExpr"))) 
                                      (397 (ifeq 536)) ;;to TAG_5
                                      (400 (aload 5)) 
                                      (402 (checkcast (class "clojure.lang.Compiler$VarExpr"))) 
                                      (405 (getfield (fieldCP "var" "clojure.lang.Compiler$VarExpr" (class "clojure.lang.Var")))) 
                                      (408 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (411 (getstatic (fieldCP "arglistsKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (414 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (417 (astore 7)) 
                                      (419 (aconst_null)) 
                                      (420 (astore 8)) 
                                      (422 (aload 7)) 
                                      (424 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (427 (astore 9)) 
                                      (429 (aload 9)) ;;at TAG_9
                                      (431 (ifnull 511)) ;;to TAG_6
                                      (434 (aload 9)) 
                                      (436 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (441 (checkcast (class "clojure.lang.APersistentVector"))) 
                                      (444 (astore 10)) 
                                      (446 (aload 10)) 
                                      (448 (getstatic (fieldCP "_AMP_" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (451 (invokevirtual (methodCP "indexOf" "clojure.lang.APersistentVector" ((class "java.lang.Object")) int))) 
                                      (454 (istore 11)) 
                                      (456 (aload 6)) 
                                      (458 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (463 (aload 10)) 
                                      (465 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (468 (if_icmpeq 489)) ;;to TAG_7
                                      (471 (iload 11)) 
                                      (473 (iconst_m1)) 
                                      (474 (if_icmple 499)) ;;to TAG_8
                                      (477 (aload 6)) 
                                      (479 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (484 (iload 11)) 
                                      (486 (if_icmplt 499)) ;;to TAG_8
                                      (489 (aload 10)) ;;at TAG_7
                                      (491 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (494 (astore 8)) 
                                      (496 (goto 511)) ;;to TAG_6
                                      (499 (aload 9)) ;;at TAG_8
                                      (501 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (506 (astore 9)) 
                                      (508 (goto 429)) ;;to TAG_9
                                      (511 (aload_0)) ;;at TAG_6
                                      (512 (aload 8)) 
                                      (514 (ifnonnull 528)) ;;to TAG_10
                                      (517 (aload 5)) 
                                      (519 (checkcast (class "clojure.lang.Compiler$VarExpr"))) 
                                      (522 (getfield (fieldCP "tag" "clojure.lang.Compiler$VarExpr" (class "java.lang.Object")))) 
                                      (525 (goto 530)) ;;to TAG_11
                                      (528 (aload 8)) ;;at TAG_10
                                      (530 (putfield (fieldCP "tag" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Object")))) ;;at TAG_11
                                      (533 (goto 541)) ;;to TAG_4
                                      (536 (aload_0)) ;;at TAG_5
                                      (537 (aconst_null)) 
                                      (538 (putfield (fieldCP "tag" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Object")))) 
                                      (541 (return)) ;;at TAG_4
                                      (endofcode 542))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 112)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_3
                                      (1 (getfield (fieldCP "fexpr" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (4 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (9 (checkcast (class "clojure.lang.IFn"))) 
                                      (12 (astore_1)) 
                                      (13 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (16 (astore_2)) 
                                      (17 (iconst_0)) 
                                      (18 (istore_3)) 
                                      (19 (iload_3)) ;;at TAG_1
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "args" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (24 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (29 (if_icmpge 61)) ;;to TAG_0
                                      (32 (aload_2)) 
                                      (33 (aload_0)) 
                                      (34 (getfield (fieldCP "args" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (37 (iload_3)) 
                                      (38 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (43 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (46 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (51 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (54 (astore_2)) 
                                      (55 (iinc 3 1)) 
                                      (58 (goto 19)) ;;to TAG_1
                                      (61 (aload_1)) ;;at TAG_0
                                      (62 (aload_2)) 
                                      (63 (aconst_null)) 
                                      (64 (dup)) 
                                      (65 (astore_2)) 
                                      (66 (invokestatic (methodCP "ret1" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (69 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (72 (invokeinterface (methodCP "applyTo" "clojure.lang.IFn" ((class "clojure.lang.ISeq")) (class "java.lang.Object")) 2)) 
                                      (77 (areturn)) ;;at TAG_4
                                      (78 (astore_1)) ;;at TAG_5
                                      (79 (aload_1)) 
                                      (80 (instanceof (class "clojure.lang.Compiler$CompilerException"))) 
                                      (83 (ifne 107))  ;;to TAG_2
                                      (86 (new (class "clojure.lang.Compiler$CompilerException"))) 
                                      (89 (dup)) 
                                      (90 (aload_0)) 
                                      (91 (getfield (fieldCP "source" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.String")))) 
                                      (94 (aload_0)) 
                                      (95 (getfield (fieldCP "line" "clojure.lang.Compiler$InvokeExpr" int))) 
                                      (98 (aload_0)) 
                                      (99 (getfield (fieldCP "column" "clojure.lang.Compiler$InvokeExpr" int))) 
                                      (102 (aload_1)) 
                                      (103 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$CompilerException" ((class "java.lang.String") int int (class "java.lang.Throwable")) void))) 
                                      (106 (athrow)) 
                                      (107 (aload_1)) ;;at TAG_2
                                      (108 (checkcast (class "clojure.lang.Compiler$CompilerException"))) 
                                      (111 (athrow)) 
                                      (endofcode 112))
                                   (Exceptions 
                                     (handler 0 77  78 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 70)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "line" "clojure.lang.Compiler$InvokeExpr" int))) 
                                      (5 (aload_3)) 
                                      (6 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (9 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "isProtocol" "clojure.lang.Compiler$InvokeExpr" boolean))) 
                                      (16 (ifeq 29)) ;;to TAG_0
                                      (19 (aload_0)) 
                                      (20 (aload_1)) 
                                      (21 (aload_2)) 
                                      (22 (aload_3)) 
                                      (23 (invokevirtual (methodCP "emitProto" "clojure.lang.Compiler$InvokeExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (26 (goto 58)) ;;to TAG_1
                                      (29 (aload_0)) ;;at TAG_0
                                      (30 (getfield (fieldCP "fexpr" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (33 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (36 (aload_2)) 
                                      (37 (aload_3)) 
                                      (38 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (43 (aload_3)) 
                                      (44 (invokestatic (methodCP "access$1200" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (47 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (50 (aload_0)) 
                                      (51 (iconst_0)) 
                                      (52 (aload_1)) 
                                      (53 (aload_2)) 
                                      (54 (aload_3)) 
                                      (55 (invokevirtual (methodCP "emitArgsAndCall" "clojure.lang.Compiler$InvokeExpr" (int (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (58 (aload_1)) ;;at TAG_1
                                      (59 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (62 (if_acmpne 69))  ;;to TAG_2
                                      (65 (aload_3)) 
                                      (66 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (69 (return)) ;;at TAG_2
                                      (endofcode 70))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitProto"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 10) (code_length . 350)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (4 (astore 4)) 
                                      (6 (aload_3)) 
                                      (7 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (10 (astore 5)) 
                                      (12 (aload_3)) 
                                      (13 (invokevirtual (methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (16 (astore 6)) 
                                      (18 (aload_0)) 
                                      (19 (getfield (fieldCP "fexpr" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (22 (checkcast (class "clojure.lang.Compiler$VarExpr"))) 
                                      (25 (getfield (fieldCP "var" "clojure.lang.Compiler$VarExpr" (class "clojure.lang.Var")))) 
                                      (28 (astore 7)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "args" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (34 (iconst_0)) 
                                      (35 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (40 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (43 (astore 8)) 
                                      (45 (aload 8)) 
                                      (47 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (50 (aload_2)) 
                                      (51 (aload_3)) 
                                      (52 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (57 (aload_3)) 
                                      (58 (invokevirtual (methodCP "dup" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (61 (aload_3)) 
                                      (62 (getstatic (fieldCP "UTIL_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (65 (ldc 6)) ;;STRING:: "Class classOf(Object)"
                                      (67 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (70 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (73 (aload_3)) 
                                      (74 (invokevirtual (methodCP "loadThis" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (77 (aload_3)) 
                                      (78 (aload_2)) 
                                      (79 (getfield (fieldCP "objtype" "clojure.lang.Compiler$ObjExpr" (class "clojure.asm.Type")))) 
                                      (82 (aload_2)) 
                                      (83 (aload_0)) 
                                      (84 (getfield (fieldCP "siteIndex" "clojure.lang.Compiler$InvokeExpr" int))) 
                                      (87 (invokevirtual (methodCP "cachedClassName" "clojure.lang.Compiler$ObjExpr" (int) (class "java.lang.String")))) 
                                      (90 (getstatic (fieldCP "CLASS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (93 (invokevirtual (methodCP "getField" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "java.lang.String") (class "clojure.asm.Type")) void))) 
                                      (96 (aload_3)) 
                                      (97 (sipush 165)) 
                                      (100 (aload 5)) 
                                      (102 (invokevirtual (methodCP "visitJumpInsn" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (105 (aload_0)) 
                                      (106 (getfield (fieldCP "protocolOn" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Class")))) 
                                      (109 (ifnull 136)) ;;to TAG_0
                                      (112 (aload_3)) 
                                      (113 (invokevirtual (methodCP "dup" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (116 (aload_3)) 
                                      (117 (aload_0)) 
                                      (118 (getfield (fieldCP "protocolOn" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Class")))) 
                                      (121 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (124 (invokevirtual (methodCP "instanceOf" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (127 (aload_3)) 
                                      (128 (sipush 154)) 
                                      (131 (aload 4)) 
                                      (133 (invokevirtual (methodCP "ifZCmp" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (136 (aload_3)) ;;at TAG_0
                                      (137 (invokevirtual (methodCP "dup" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (140 (aload_3)) 
                                      (141 (getstatic (fieldCP "UTIL_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (144 (ldc 6)) ;;STRING:: "Class classOf(Object)"
                                      (146 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (149 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (152 (aload_3)) 
                                      (153 (invokevirtual (methodCP "loadThis" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (156 (aload_3)) 
                                      (157 (invokevirtual (methodCP "swap" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (160 (aload_3)) 
                                      (161 (aload_2)) 
                                      (162 (getfield (fieldCP "objtype" "clojure.lang.Compiler$ObjExpr" (class "clojure.asm.Type")))) 
                                      (165 (aload_2)) 
                                      (166 (aload_0)) 
                                      (167 (getfield (fieldCP "siteIndex" "clojure.lang.Compiler$InvokeExpr" int))) 
                                      (170 (invokevirtual (methodCP "cachedClassName" "clojure.lang.Compiler$ObjExpr" (int) (class "java.lang.String")))) 
                                      (173 (getstatic (fieldCP "CLASS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (176 (invokevirtual (methodCP "putField" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "java.lang.String") (class "clojure.asm.Type")) void))) 
                                      (179 (aload_3)) 
                                      (180 (aload 5)) 
                                      (182 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (185 (aload_2)) 
                                      (186 (aload_3)) 
                                      (187 (aload 7)) 
                                      (189 (invokevirtual (methodCP "emitVar" "clojure.lang.Compiler$ObjExpr" ((class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Var")) void))) 
                                      (192 (aload_3)) 
                                      (193 (invokestatic (methodCP "access$000" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (196 (ldc 7)) ;;STRING:: "Object getRawRoot()"
                                      (198 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (201 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (204 (aload_3)) 
                                      (205 (invokevirtual (methodCP "swap" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (208 (aload_0)) 
                                      (209 (iconst_1)) 
                                      (210 (aload_1)) 
                                      (211 (aload_2)) 
                                      (212 (aload_3)) 
                                      (213 (invokevirtual (methodCP "emitArgsAndCall" "clojure.lang.Compiler$InvokeExpr" (int (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (216 (aload_3)) 
                                      (217 (aload 6)) 
                                      (219 (invokevirtual (methodCP "goTo" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (222 (aload_3)) 
                                      (223 (aload 4)) 
                                      (225 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (228 (aload_0)) 
                                      (229 (getfield (fieldCP "protocolOn" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Class")))) 
                                      (232 (ifnull 343)) ;;to TAG_1
                                      (235 (aload_2)) 
                                      (236 (aload_3)) 
                                      (237 (aload_0)) 
                                      (238 (getfield (fieldCP "onMethod" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.reflect.Method")))) 
                                      (241 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Method" () (array (class "java.lang.Class"))))) 
                                      (244 (aload_0)) 
                                      (245 (getfield (fieldCP "args" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (248 (iconst_1)) 
                                      (249 (aload_0)) 
                                      (250 (getfield (fieldCP "args" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (253 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (258 (invokestatic (methodCP "subvec" "clojure.lang.RT" ((class "clojure.lang.IPersistentVector") int int) (class "clojure.lang.IPersistentVector")))) 
                                      (261 (invokestatic (methodCP "emitTypedArgs" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (array (class "java.lang.Class")) (class "clojure.lang.IPersistentVector")) void))) 
                                      (264 (aload_1)) 
                                      (265 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (268 (if_acmpne 288))  ;;to TAG_2
                                      (271 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (274 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (277 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (280 (astore 9)) 
                                      (282 (aload 9)) 
                                      (284 (aload_3)) 
                                      (285 (invokevirtual (methodCP "emitClearLocals" "clojure.lang.Compiler$ObjMethod" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (288 (new (class "clojure.asm.commons.Method"))) ;;at TAG_2
                                      (291 (dup)) 
                                      (292 (aload_0)) 
                                      (293 (getfield (fieldCP "onMethod" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.reflect.Method")))) 
                                      (296 (invokevirtual (methodCP "getName" "java.lang.reflect.Method" () (class "java.lang.String")))) 
                                      (299 (aload_0)) 
                                      (300 (getfield (fieldCP "onMethod" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.reflect.Method")))) 
                                      (303 (invokestatic (methodCP "getReturnType" "clojure.asm.Type" ((class "java.lang.reflect.Method")) (class "clojure.asm.Type")))) 
                                      (306 (aload_0)) 
                                      (307 (getfield (fieldCP "onMethod" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.reflect.Method")))) 
                                      (310 (invokestatic (methodCP "getArgumentTypes" "clojure.asm.Type" ((class "java.lang.reflect.Method")) (array (class "clojure.asm.Type"))))) 
                                      (313 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (316 (astore 9)) 
                                      (318 (aload_3)) 
                                      (319 (aload_0)) 
                                      (320 (getfield (fieldCP "protocolOn" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Class")))) 
                                      (323 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (326 (aload 9)) 
                                      (328 (invokevirtual (methodCP "invokeInterface" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (331 (aload_2)) 
                                      (332 (aload_3)) 
                                      (333 (aload_0)) 
                                      (334 (getfield (fieldCP "onMethod" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.reflect.Method")))) 
                                      (337 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (340 (invokestatic (methodCP "emitBoxReturn" "clojure.lang.Compiler$HostExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class")) void))) 
                                      (343 (aload_3)) ;;at TAG_1
                                      (344 (aload 6)) 
                                      (346 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void))) 
                                      (349 (return)) 
                                      (endofcode 350))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitArgsAndCall"
                              (parameters int (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 9) (max_locals . 7) (code_length . 190)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (istore 5)) 
                                      (3 (iload 5)) ;;at TAG_1
                                      (5 (bipush 20)) 
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "args" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (11 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (16 (invokestatic (methodCP "min" "java.lang.Math" (int int) int))) 
                                      (19 (if_icmpge 57)) ;;to TAG_0
                                      (22 (aload_0)) 
                                      (23 (getfield (fieldCP "args" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (26 (iload 5)) 
                                      (28 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (33 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (36 (astore 6)) 
                                      (38 (aload 6)) 
                                      (40 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (43 (aload_3)) 
                                      (44 (aload 4)) 
                                      (46 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (51 (iinc 5 1)) 
                                      (54 (goto 3)) ;;to TAG_1
                                      (57 (aload_0)) ;;at TAG_0
                                      (58 (getfield (fieldCP "args" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (61 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (66 (bipush 20)) 
                                      (68 (if_icmple 126))  ;;to TAG_2
                                      (71 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (74 (astore 5)) 
                                      (76 (bipush 20)) 
                                      (78 (istore 6)) 
                                      (80 (iload 6)) ;;at TAG_4
                                      (82 (aload_0)) 
                                      (83 (getfield (fieldCP "args" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (86 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (91 (if_icmpge 118)) ;;to TAG_3
                                      (94 (aload 5)) 
                                      (96 (aload_0)) 
                                      (97 (getfield (fieldCP "args" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (100 (iload 6)) 
                                      (102 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (107 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (110 (astore 5)) 
                                      (112 (iinc 6 1)) 
                                      (115 (goto 80)) ;;to TAG_4
                                      (118 (aload 5)) ;;at TAG_3
                                      (120 (aload_3)) 
                                      (121 (aload 4)) 
                                      (123 (invokestatic (methodCP "emitArgsAsArray" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.IPersistentVector") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (126 (aload_2)) ;;at TAG_2
                                      (127 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (130 (if_acmpne 151)) ;;to TAG_5
                                      (133 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (136 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (139 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (142 (astore 5)) 
                                      (144 (aload 5)) 
                                      (146 (aload 4)) 
                                      (148 (invokevirtual (methodCP "emitClearLocals" "clojure.lang.Compiler$ObjMethod" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (151 (aload 4)) ;;at TAG_5
                                      (153 (invokestatic (methodCP "access$1200" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (156 (new (class "clojure.asm.commons.Method"))) 
                                      (159 (dup)) 
                                      (160 (ldc 8)) ;;STRING:: "invoke"
                                      (162 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (165 (invokestatic (methodCP "access$1300" "clojure.lang.Compiler" () (array (array (class "clojure.asm.Type")))))) 
                                      (168 (bipush 21)) 
                                      (170 (aload_0)) 
                                      (171 (getfield (fieldCP "args" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (174 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (179 (invokestatic (methodCP "min" "java.lang.Math" (int int) int))) 
                                      (182 (aaload)) 
                                      (183 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (186 (invokevirtual (methodCP "invokeInterface" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (189 (return)) 
                                      (endofcode 190))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tag" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Object")))) 
                                      (4 (ifnull 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "tag" "clojure.lang.Compiler$InvokeExpr" (class "java.lang.Object"))))
                                      (4 (invokestatic
					(methodCP "tagToClass" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object")) (class "java.lang.Class"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.ISeq"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 8) (max_locals . 9) (code_length . 420)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (4 (if_acmpeq 11)) ;;to TAG_0
                                      (7 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (10 (astore_0)) 
                                      (11 (aload_0)) ;;at TAG_0
                                      (12 (aload_1)) 
                                      (13 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (18 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (21 (astore_2)) 
                                      (22 (aload_2)) 
                                      (23 (instanceof (class "clojure.lang.Compiler$VarExpr"))) 
                                      (26 (ifeq 85)) ;;to TAG_1
                                      (29 (aload_2)) 
                                      (30 (checkcast (class "clojure.lang.Compiler$VarExpr"))) 
                                      (33 (getfield (fieldCP "var" "clojure.lang.Compiler$VarExpr" (class "clojure.lang.Var")))) 
                                      (36 (getstatic (fieldCP "INSTANCE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (39 (invokevirtual (methodCP "equals" "java.lang.Object" ((class "java.lang.Object")) boolean))) 
                                      (42 (ifeq 85)) ;;to TAG_1
                                      (45 (aload_1)) 
                                      (46 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (49 (instanceof (class "clojure.lang.Symbol"))) 
                                      (52 (ifeq 85)) ;;to TAG_1
                                      (55 (aload_1)) 
                                      (56 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (59 (iconst_0)) 
                                      (60 (invokestatic (methodCP "access$400" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object") boolean) (class "java.lang.Class")))) 
                                      (63 (astore_3)) 
                                      (64 (aload_3)) 
                                      (65 (ifnull 85)) ;;to TAG_1
                                      (68 (new (class "clojure.lang.Compiler$InstanceOfExpr"))) 
                                      (71 (dup)) 
                                      (72 (aload_3)) 
                                      (73 (aload_0)) 
                                      (74 (aload_1)) 
                                      (75 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (78 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (81 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$InstanceOfExpr" ((class "java.lang.Class") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (84 (areturn)) 
                                      (85 (aload_2)) ;;at TAG_1
                                      (86 (instanceof (class "clojure.lang.Compiler$VarExpr"))) 
                                      (89 (ifeq 242))  ;;to TAG_2
                                      (92 (aload_0)) 
                                      (93 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (96 (if_acmpeq 242))  ;;to TAG_2
                                      (99 (aload_2)) 
                                      (100 (checkcast (class "clojure.lang.Compiler$VarExpr"))) 
                                      (103 (getfield (fieldCP "var" "clojure.lang.Compiler$VarExpr" (class "clojure.lang.Var")))) 
                                      (106 (astore_3)) 
                                      (107 (aload_3)) 
                                      (108 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (111 (getstatic (fieldCP "arglistsKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (114 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (117 (astore 4)) 
                                      (119 (aload_1)) 
                                      (120 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (125 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (128 (istore 5)) 
                                      (130 (aload 4)) 
                                      (132 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (135 (astore 6)) 
                                      (137 (aload 6)) ;;at TAG_4
                                      (139 (ifnull 242))  ;;to TAG_2
                                      (142 (aload 6)) 
                                      (144 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (149 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (152 (astore 7)) 
                                      (154 (aload 7)) 
                                      (156 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (161 (iload 5)) 
                                      (163 (if_icmpne 230)) ;;to TAG_3
                                      (166 (aload 7)) 
                                      (168 (invokestatic (methodCP "primInterface" "clojure.lang.Compiler$FnMethod" ((class "clojure.lang.IPersistentVector")) (class "java.lang.String")))) 
                                      (171 (astore 8)) 
                                      (173 (aload 8)) 
                                      (175 (ifnull 242))  ;;to TAG_2
                                      (178 (aload_0)) 
                                      (179 (ldc 9)) ;;STRING:: ".invokePrim"
                                      (181 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (184 (aload_1)) 
                                      (185 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (190 (checkcast (class "clojure.lang.Symbol"))) 
                                      (193 (iconst_2)) 
                                      (194 (anewarray (class "java.lang.Object"))) 
                                      (197 (dup)) 
                                      (198 (iconst_0)) 
                                      (199 (getstatic (fieldCP "TAG_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (202 (aastore)) 
                                      (203 (dup)) 
                                      (204 (iconst_1)) 
                                      (205 (aload 8)) 
                                      (207 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (210 (aastore)) 
                                      (211 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (214 (invokevirtual (methodCP "withMeta" "clojure.lang.Symbol" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")))) 
                                      (217 (aload_1)) 
                                      (218 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (223 (invokestatic (methodCP "listStar" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.ISeq")) (class "clojure.lang.ISeq")))) 
                                      (226 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (229 (areturn)) 
                                      (230 (aload 6)) ;;at TAG_3
                                      (232 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (237 (astore 6)) 
                                      (239 (goto 137)) ;;to TAG_4
                                      (242 (aload_2)) ;;at TAG_2
                                      (243 (instanceof (class "clojure.lang.Compiler$KeywordExpr"))) 
                                      (246 (ifeq 325)) ;;to TAG_5
                                      (249 (aload_1)) 
                                      (250 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (253 (iconst_2)) 
                                      (254 (if_icmpne 325)) ;;to TAG_5
                                      (257 (getstatic (fieldCP "KEYWORD_CALLSITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (260 (invokevirtual (methodCP "isBound" "clojure.lang.Var" () boolean))) 
                                      (263 (ifeq 325)) ;;to TAG_5
                                      (266 (aload_0)) 
                                      (267 (aload_1)) 
                                      (268 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (271 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (274 (astore_3)) 
                                      (275 (new (class "clojure.lang.Compiler$KeywordInvokeExpr"))) 
                                      (278 (dup)) 
                                      (279 (getstatic (fieldCP "SOURCE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (282 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (285 (checkcast (class "java.lang.String"))) 
                                      (288 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (291 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (294 (checkcast (class "java.lang.Integer"))) 
                                      (297 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (300 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (303 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (306 (checkcast (class "java.lang.Integer"))) 
                                      (309 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (312 (aload_1)) 
                                      (313 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (316 (aload_2)) 
                                      (317 (checkcast (class "clojure.lang.Compiler$KeywordExpr"))) 
                                      (320 (aload_3)) 
                                      (321 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$KeywordInvokeExpr" ((class "java.lang.String") int int (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$KeywordExpr") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (324 (areturn)) 
                                      (325 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) ;;at TAG_5
                                      (328 (astore_3)) 
                                      (329 (aload_1)) 
                                      (330 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (335 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (338 (astore 4)) 
                                      (340 (aload 4)) ;;at TAG_7
                                      (342 (ifnull 373)) ;;to TAG_6
                                      (345 (aload_3)) 
                                      (346 (aload_0)) 
                                      (347 (aload 4)) 
                                      (349 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (354 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (357 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (360 (astore_3)) 
                                      (361 (aload 4)) 
                                      (363 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (368 (astore 4)) 
                                      (370 (goto 340)) ;;to TAG_7
                                      (373 (new (class "clojure.lang.Compiler$InvokeExpr"))) ;;at TAG_6
                                      (376 (dup)) 
                                      (377 (getstatic (fieldCP "SOURCE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (380 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (383 (checkcast (class "java.lang.String"))) 
                                      (386 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (389 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (392 (checkcast (class "java.lang.Integer"))) 
                                      (395 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (398 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (401 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (404 (checkcast (class "java.lang.Integer"))) 
                                      (407 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (410 (aload_1)) 
                                      (411 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (414 (aload_2)) 
                                      (415 (aload_3)) 
                                      (416 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$InvokeExpr" ((class "java.lang.String") int int (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") (class "clojure.lang.IPersistentVector")) void))) 
                                      (419 (areturn)) 
                                      (endofcode 420))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 17)
                                   (parsedcode
                                      (0 (ldc 10))        ;;STRING:: "on"
                                      (2 (invokestatic
					(methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (5 (putstatic (fieldCP "onKey" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.Keyword"))))
                                      (8 (ldc 11))        ;;STRING:: "method-map"
                                      (10 (invokestatic
					(methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (13 (putstatic (fieldCP "methodMapKey" "clojure.lang.Compiler$InvokeExpr" (class "clojure.lang.Keyword"))))
                                      (16 (return))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$InvokeExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$InvokeExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$InvokeExpr" . "clojure.lang"))

