; Compiler$StaticFieldExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.Compiler$StaticFieldExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$StaticFieldExpr"
            "clojure.lang.Compiler$FieldExpr"
            (constant_pool)
            (fields
                        (field "fieldName" (class "java.lang.String") (accessflags  *class*  *final*  *public* ) -1)
                        (field "c" (class "java.lang.Class") (accessflags  *class*  *final*  *public* ) -1)
                        (field "field" (class "java.lang.reflect.Field") (accessflags  *class*  *final*  *public* ) -1)
                        (field "tag" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *public* ) -1)
                        (field "line" int (accessflags  *class*  *final* ) -1)
                        (field "column" int (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters int int (class "java.lang.Class") (class "java.lang.String") (class "clojure.lang.Symbol"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 7) (code_length . 53)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$FieldExpr" () void))) 
                                      (4 (aload_0)) 
                                      (5 (aload 4)) 
                                      (7 (putfield (fieldCP "fieldName" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.String")))) 
                                      (10 (aload_0)) 
                                      (11 (iload_1)) 
                                      (12 (putfield (fieldCP "line" "clojure.lang.Compiler$StaticFieldExpr" int))) 
                                      (15 (aload_0)) 
                                      (16 (iload_2)) 
                                      (17 (putfield (fieldCP "column" "clojure.lang.Compiler$StaticFieldExpr" int))) 
                                      (20 (aload_0)) 
                                      (21 (aload_3)) 
                                      (22 (putfield (fieldCP "c" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.Class")))) 
                                      (25 (aload_0)) ;;at TAG_1
                                      (26 (aload_3)) 
                                      (27 (aload 4)) 
                                      (29 (invokevirtual (methodCP "getField" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.reflect.Field")))) 
                                      (32 (putfield (fieldCP "field" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.reflect.Field")))) 
                                      (35 (goto 46)) ;;to TAG_0;;at TAG_2
                                      (38 (astore 6)) ;;at TAG_3
                                      (40 (aload 6)) 
                                      (42 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (45 (athrow)) 
                                      (46 (aload_0)) ;;at TAG_0
                                      (47 (aload 5)) 
                                      (49 (putfield (fieldCP "tag" "clojure.lang.Compiler$StaticFieldExpr" (class "clojure.lang.Symbol")))) 
                                      (52 (return)) 
                                      (endofcode 53))
                                   (Exceptions 
                                     (handler 25 35  38 (class "java.lang.NoSuchFieldException")))
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "c" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.Class"))))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "fieldName" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.String"))))
                                      (8 (invokestatic
					(methodCP "getStaticField" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.String")) (class "java.lang.Object"))))
                                      (11 (areturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "canEmitPrimitive"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "field" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.reflect.Field"))))
                                      (4 (invokevirtual
					(methodCP "getType" "java.lang.reflect.Field" () (class "java.lang.Class"))))
                                      (7 (invokestatic
					(methodCP "isPrimitive" "clojure.lang.Util" ((class "java.lang.Class")) boolean)))
                                      (10 (ireturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitUnboxed"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 38)
                                   (parsedcode
                                      (0 (aload_3))
                                      (1 (aload_0))
                                      (2 (getfield (fieldCP "line" "clojure.lang.Compiler$StaticFieldExpr" int)))
                                      (5 (aload_3))
                                      (6 (invokevirtual
					(methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label"))))
                                      (9 (invokevirtual
					(methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void)))
                                      (12 (aload_3))
                                      (13 (aload_0))
                                      (14 (getfield (fieldCP "c" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.Class"))))
                                      (17 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (20 (aload_0))
                                      (21 (getfield (fieldCP "fieldName" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.String"))))
                                      (24 (aload_0))
                                      (25 (getfield (fieldCP "field" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.reflect.Field"))))
                                      (28 (invokevirtual
					(methodCP "getType" "java.lang.reflect.Field" () (class "java.lang.Class"))))
                                      (31 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (34 (invokevirtual
					(methodCP "getStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "java.lang.String") (class "clojure.asm.Type")) void)))
                                      (37 (return))
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 61)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "line" "clojure.lang.Compiler$StaticFieldExpr" int))) 
                                      (5 (aload_3)) 
                                      (6 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (9 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (12 (aload_3)) 
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "c" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.Class")))) 
                                      (17 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "fieldName" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.String")))) 
                                      (24 (aload_0)) 
                                      (25 (getfield (fieldCP "field" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.reflect.Field")))) 
                                      (28 (invokevirtual (methodCP "getType" "java.lang.reflect.Field" () (class "java.lang.Class")))) 
                                      (31 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (34 (invokevirtual (methodCP "getStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "java.lang.String") (class "clojure.asm.Type")) void))) 
                                      (37 (aload_2)) 
                                      (38 (aload_3)) 
                                      (39 (aload_0)) 
                                      (40 (getfield (fieldCP "field" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.reflect.Field")))) 
                                      (43 (invokevirtual (methodCP "getType" "java.lang.reflect.Field" () (class "java.lang.Class")))) 
                                      (46 (invokestatic (methodCP "emitBoxReturn" "clojure.lang.Compiler$HostExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class")) void))) 
                                      (49 (aload_1)) 
                                      (50 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (53 (if_acmpne 60))  ;;to TAG_0
                                      (56 (aload_3)) 
                                      (57 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (60 (return)) ;;at TAG_0
                                      (endofcode 61))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 25)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tag" "clojure.lang.Compiler$StaticFieldExpr" (class "clojure.lang.Symbol")))) 
                                      (4 (ifnull 17))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "tag" "clojure.lang.Compiler$StaticFieldExpr" (class "clojure.lang.Symbol")))) 
                                      (11 (invokestatic (methodCP "tagToClass" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (14 (goto 24)) ;;to TAG_1
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (getfield (fieldCP "field" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.reflect.Field")))) 
                                      (21 (invokevirtual (methodCP "getType" "java.lang.reflect.Field" () (class "java.lang.Class")))) 
                                      (24 (areturn)) ;;at TAG_1
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "evalAssign"
                              (parameters (class "clojure.lang.Compiler$Expr"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "c" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.Class"))))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "fieldName" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.String"))))
                                      (8 (aload_1))
                                      (9 (invokeinterface
					(methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1))
                                      (14 (invokestatic
					(methodCP "setStaticField" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.String") (class "java.lang.Object")) (class "java.lang.Object"))))
                                      (17 (areturn))
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitAssign"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 77)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "line" "clojure.lang.Compiler$StaticFieldExpr" int))) 
                                      (5 (aload_3)) 
                                      (6 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (9 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (12 (aload 4)) 
                                      (14 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (17 (aload_2)) 
                                      (18 (aload_3)) 
                                      (19 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (24 (aload_3)) 
                                      (25 (invokevirtual (methodCP "dup" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (28 (aload_2)) 
                                      (29 (aload_3)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "field" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.reflect.Field")))) 
                                      (34 (invokevirtual (methodCP "getType" "java.lang.reflect.Field" () (class "java.lang.Class")))) 
                                      (37 (invokestatic (methodCP "emitUnboxArg" "clojure.lang.Compiler$HostExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class")) void))) 
                                      (40 (aload_3)) 
                                      (41 (aload_0)) 
                                      (42 (getfield (fieldCP "c" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.Class")))) 
                                      (45 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (48 (aload_0)) 
                                      (49 (getfield (fieldCP "fieldName" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.String")))) 
                                      (52 (aload_0)) 
                                      (53 (getfield (fieldCP "field" "clojure.lang.Compiler$StaticFieldExpr" (class "java.lang.reflect.Field")))) 
                                      (56 (invokevirtual (methodCP "getType" "java.lang.reflect.Field" () (class "java.lang.Class")))) 
                                      (59 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (62 (invokevirtual (methodCP "putStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "java.lang.String") (class "clojure.asm.Type")) void))) 
                                      (65 (aload_1)) 
                                      (66 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (69 (if_acmpne 76))  ;;to TAG_0
                                      (72 (aload_3)) 
                                      (73 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (76 (return)) ;;at TAG_0
                                      (endofcode 77))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$AssignableExpr")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$StaticFieldExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$StaticFieldExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$StaticFieldExpr" . "clojure.lang"))

