; PersistentTreeMap$BlackBranchVal-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentTreeMap$BlackBranchVal*
 (make-class-def
      '(class "clojure.lang.PersistentTreeMap$BlackBranchVal"
            "clojure.lang.PersistentTreeMap$BlackBranch"
            (constant_pool)
            (fields
                        (field "val" (class "java.lang.Object") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_3))
                                      (3 (aload 4))
                                      (5 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap$BlackBranch" ((class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) void)))
                                      (8 (aload_0))
                                      (9 (aload_2))
                                      (10 (putfield (fieldCP "val" "clojure.lang.PersistentTreeMap$BlackBranchVal" (class "java.lang.Object"))))
                                      (13 (return))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "val"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "val" "clojure.lang.PersistentTreeMap$BlackBranchVal" (class "java.lang.Object"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "redden"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentTreeMap$Node"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 6) (max_locals . 1) (code_length . 24)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentTreeMap$RedBranchVal")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "key" "clojure.lang.PersistentTreeMap$BlackBranchVal" (class "java.lang.Object"))))
                                      (8 (aload_0))
                                      (9 (getfield (fieldCP "val" "clojure.lang.PersistentTreeMap$BlackBranchVal" (class "java.lang.Object"))))
                                      (12 (aload_0))
                                      (13 (getfield (fieldCP "left" "clojure.lang.PersistentTreeMap$BlackBranchVal" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (16 (aload_0))
                                      (17 (getfield (fieldCP "right" "clojure.lang.PersistentTreeMap$BlackBranchVal" (class "clojure.lang.PersistentTreeMap$Node"))))
                                      (20 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentTreeMap$RedBranchVal" ((class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.PersistentTreeMap$Node") (class "clojure.lang.PersistentTreeMap$Node")) void)))
                                      (23 (areturn))
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentTreeMap$BlackBranchVal-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentTreeMap$BlackBranchVal*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentTreeMap$BlackBranchVal" . "clojure.lang"))

