; Compiler$TryExpr$Parser-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.Compiler$TryExpr$Parser*
 (make-class-def
      '(class "clojure.lang.Compiler$TryExpr$Parser"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Only catch or finally clause can follow catch in try expression")
                        (STRING  "Unable to resolve classname: ")
                        (STRING  "Bad binding form, expected symbol, got: ")
                        (STRING  "Can\nt bind qualified name:")
                        (STRING  "finally clause must be last in try expression"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 25) (code_length . 699)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (checkcast (class "clojure.lang.ISeq"))) 
                                      (4 (astore_3)) 
                                      (5 (aload_1)) 
                                      (6 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (9 (if_acmpeq 30))  ;;to TAG_0
                                      (12 (aload_1)) 
                                      (13 (getstatic (fieldCP "FNONCE" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (16 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (19 (aload_3)) 
                                      (20 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (23 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (26 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (29 (areturn)) 
                                      (30 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) ;;at TAG_0
                                      (33 (astore 4)) 
                                      (35 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (38 (astore 5)) 
                                      (40 (aconst_null)) 
                                      (41 (astore 6)) 
                                      (43 (aconst_null)) 
                                      (44 (astore 7)) 
                                      (46 (iconst_0)) 
                                      (47 (istore 8)) 
                                      (49 (invokestatic (methodCP "access$800" "clojure.lang.Compiler" () int))) 
                                      (52 (istore 9)) 
                                      (54 (invokestatic (methodCP "access$800" "clojure.lang.Compiler" () int))) 
                                      (57 (istore 10)) 
                                      (59 (aload_3)) 
                                      (60 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (65 (astore 11)) 
                                      (67 (aload 11)) ;;at TAG_19
                                      (69 (ifnull 612)) ;;to TAG_1
                                      (72 (aload 11)) 
                                      (74 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (79 (astore 12)) 
                                      (81 (aload 12)) 
                                      (83 (instanceof (class "clojure.lang.ISeq"))) 
                                      (86 (ifeq 102)) ;;to TAG_2
                                      (89 (aload 12)) 
                                      (91 (checkcast (class "clojure.lang.ISeq"))) 
                                      (94 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (99 (goto 103)) ;;to TAG_3
                                      (102 (aconst_null)) ;;at TAG_2
                                      (103 (astore 13)) ;;at TAG_3
                                      (105 (aload 13)) 
                                      (107 (getstatic (fieldCP "CATCH" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (110 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (113 (ifne 150)) ;;to TAG_4
                                      (116 (aload 13)) 
                                      (118 (getstatic (fieldCP "FINALLY" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (121 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (124 (ifne 150)) ;;to TAG_4
                                      (127 (iload 8)) 
                                      (129 (ifeq 138)) ;;to TAG_5
                                      (132 (ldc 0)) ;;STRING:: "Only catch or finally clause can follow catch in try expression"
                                      (134 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (137 (athrow)) 
                                      (138 (aload 4)) ;;at TAG_5
                                      (140 (aload 12)) 
                                      (142 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (145 (astore 4)) 
                                      (147 (goto 600)) ;;to TAG_6
                                      (150 (aload 6)) ;;at TAG_4
                                      (152 (ifnonnull 217)) ;;to TAG_7
                                      (155 (iconst_2)) ;;at TAG_22
                                      (156 (anewarray (class "java.lang.Object"))) 
                                      (159 (dup)) 
                                      (160 (iconst_0)) 
                                      (161 (getstatic (fieldCP "NO_RECUR" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (164 (aastore)) 
                                      (165 (dup)) 
                                      (166 (iconst_1)) 
                                      (167 (iconst_1)) 
                                      (168 (invokestatic (methodCP "valueOf" "java.lang.Boolean" (boolean) (class "java.lang.Boolean")))) 
                                      (171 (aastore)) 
                                      (172 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (175 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (178 (new (class "clojure.lang.Compiler$BodyExpr$Parser"))) 
                                      (181 (dup)) 
                                      (182 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$BodyExpr$Parser" () void))) 
                                      (185 (aload_1)) 
                                      (186 (aload 4)) 
                                      (188 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (191 (invokevirtual (methodCP "parse" "clojure.lang.Compiler$BodyExpr$Parser" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (194 (astore 6)) 
                                      (196 (jsr 210)) ;;to TAG_8
                                      (199 (goto 217)) ;;to TAG_7;;at TAG_23
                                      (202 (astore 14)) ;;at TAG_24
                                      (204 (jsr 210)) ;;to TAG_8
                                      (207 (aload 14)) ;;at TAG_25
                                      (209 (athrow)) 
                                      (210 (astore 15)) ;;at TAG_8
                                      (212 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (215 (ret 15)) 
                                      (217 (aload 13)) ;;at TAG_7
                                      (219 (getstatic (fieldCP "CATCH" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (222 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (225 (ifeq 521)) ;;to TAG_9
                                      (228 (aload 12)) 
                                      (230 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (233 (iconst_0)) 
                                      (234 (invokestatic (methodCP "access$400" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object") boolean) (class "java.lang.Class")))) 
                                      (237 (astore 14)) 
                                      (239 (aload 14)) 
                                      (241 (ifnonnull 275)) ;;to TAG_10
                                      (244 (new (class "java.lang.IllegalArgumentException"))) 
                                      (247 (dup)) 
                                      (248 (new (class "java.lang.StringBuilder"))) 
                                      (251 (dup)) 
                                      (252 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (255 (ldc 1)) ;;STRING:: "Unable to resolve classname: "
                                      (257 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (260 (aload 12)) 
                                      (262 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (265 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (268 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (271 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (274 (athrow)) 
                                      (275 (aload 12)) ;;at TAG_10
                                      (277 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (280 (instanceof (class "clojure.lang.Symbol"))) 
                                      (283 (ifne 317)) ;;to TAG_11
                                      (286 (new (class "java.lang.IllegalArgumentException"))) 
                                      (289 (dup)) 
                                      (290 (new (class "java.lang.StringBuilder"))) 
                                      (293 (dup)) 
                                      (294 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (297 (ldc 2)) ;;STRING:: "Bad binding form, expected symbol, got: "
                                      (299 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (302 (aload 12)) 
                                      (304 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (307 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (310 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (313 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (316 (athrow)) 
                                      (317 (aload 12)) ;;at TAG_11
                                      (319 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (322 (checkcast (class "clojure.lang.Symbol"))) 
                                      (325 (astore 15)) 
                                      (327 (aload 15)) 
                                      (329 (invokevirtual (methodCP "getNamespace" "clojure.lang.Symbol" () (class "java.lang.String")))) 
                                      (332 (ifnull 359)) ;;to TAG_12
                                      (335 (new (class "java.lang.StringBuilder"))) 
                                      (338 (dup)) 
                                      (339 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (342 (ldc 3)) ;;STRING:: "Can\nt bind qualified name:"
                                      (344 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (347 (aload 15)) 
                                      (349 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (352 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (355 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (358 (athrow)) 
                                      (359 (bipush 6)) ;;at TAG_12
                                      (361 (anewarray (class "java.lang.Object"))) 
                                      (364 (dup)) 
                                      (365 (iconst_0)) 
                                      (366 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (369 (aastore)) 
                                      (370 (dup)) 
                                      (371 (iconst_1)) 
                                      (372 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (375 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (378 (aastore)) 
                                      (379 (dup)) 
                                      (380 (iconst_2)) 
                                      (381 (getstatic (fieldCP "NEXT_LOCAL_NUM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (384 (aastore)) 
                                      (385 (dup)) 
                                      (386 (iconst_3)) 
                                      (387 (getstatic (fieldCP "NEXT_LOCAL_NUM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (390 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (393 (aastore)) 
                                      (394 (dup)) 
                                      (395 (iconst_4)) 
                                      (396 (getstatic (fieldCP "IN_CATCH_FINALLY" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (399 (aastore)) 
                                      (400 (dup)) 
                                      (401 (iconst_5)) 
                                      (402 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (405 (aastore)) 
                                      (406 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (409 (astore 16)) 
                                      (411 (aload 16)) ;;at TAG_26
                                      (413 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (416 (aload 15)) 
                                      (418 (aload 12)) 
                                      (420 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (423 (instanceof (class "clojure.lang.Symbol"))) 
                                      (426 (ifeq 437)) ;;to TAG_13
                                      (429 (aload 12)) 
                                      (431 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (434 (goto 438)) ;;to TAG_14
                                      (437 (aconst_null)) ;;at TAG_13
                                      (438 (checkcast (class "clojure.lang.Symbol"))) ;;at TAG_14
                                      (441 (aconst_null)) 
                                      (442 (iconst_0)) 
                                      (443 (invokestatic (methodCP "access$900" "clojure.lang.Compiler" ((class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") boolean) (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (446 (astore 17)) 
                                      (448 (new (class "clojure.lang.Compiler$BodyExpr$Parser"))) 
                                      (451 (dup)) 
                                      (452 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$BodyExpr$Parser" () void))) 
                                      (455 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (458 (aload 12)) 
                                      (460 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (463 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (466 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (469 (invokevirtual (methodCP "parse" "clojure.lang.Compiler$BodyExpr$Parser" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (472 (astore 18)) 
                                      (474 (aload 5)) 
                                      (476 (new (class "clojure.lang.Compiler$TryExpr$CatchClause"))) 
                                      (479 (dup)) 
                                      (480 (aload 14)) 
                                      (482 (aload 17)) 
                                      (484 (aload 18)) 
                                      (486 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$TryExpr$CatchClause" ((class "java.lang.Class") (class "clojure.lang.Compiler$LocalBinding") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (489 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (492 (astore 5)) 
                                      (494 (jsr 508)) ;;to TAG_15
                                      (497 (goto 515)) ;;to TAG_16;;at TAG_27
                                      (500 (astore 19)) ;;at TAG_28
                                      (502 (jsr 508)) ;;to TAG_15
                                      (505 (aload 19)) ;;at TAG_29
                                      (507 (athrow)) 
                                      (508 (astore 20)) ;;at TAG_15
                                      (510 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (513 (ret 20)) 
                                      (515 (iconst_1)) ;;at TAG_16
                                      (516 (istore 8)) 
                                      (518 (goto 600)) ;;to TAG_6
                                      (521 (aload 11)) ;;at TAG_9
                                      (523 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (528 (ifnull 537)) ;;to TAG_17
                                      (531 (ldc 4)) ;;STRING:: "finally clause must be last in try expression"
                                      (533 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (536 (athrow)) 
                                      (537 (iconst_2)) ;;at TAG_17
                                      (538 (anewarray (class "java.lang.Object"))) 
                                      (541 (dup)) 
                                      (542 (iconst_0)) 
                                      (543 (getstatic (fieldCP "IN_CATCH_FINALLY" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (546 (aastore)) 
                                      (547 (dup)) 
                                      (548 (iconst_1)) 
                                      (549 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (552 (aastore)) 
                                      (553 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (556 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (559 (new (class "clojure.lang.Compiler$BodyExpr$Parser"))) 
                                      (562 (dup)) 
                                      (563 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$BodyExpr$Parser" () void))) 
                                      (566 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (569 (aload 12)) 
                                      (571 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (574 (invokevirtual (methodCP "parse" "clojure.lang.Compiler$BodyExpr$Parser" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (577 (astore 7)) 
                                      (579 (jsr 593)) ;;to TAG_18
                                      (582 (goto 600)) ;;to TAG_6;;at TAG_30
                                      (585 (astore 21)) ;;at TAG_31
                                      (587 (jsr 593)) ;;to TAG_18
                                      (590 (aload 21)) ;;at TAG_32
                                      (592 (athrow)) 
                                      (593 (astore 22)) ;;at TAG_18
                                      (595 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (598 (ret 22)) 
                                      (600 (aload 11)) ;;at TAG_6
                                      (602 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (607 (astore 11)) 
                                      (609 (goto 67)) ;;to TAG_19
                                      (612 (aload 6)) ;;at TAG_1
                                      (614 (ifnonnull 681)) ;;to TAG_20
                                      (617 (iconst_2)) ;;at TAG_33
                                      (618 (anewarray (class "java.lang.Object"))) 
                                      (621 (dup)) 
                                      (622 (iconst_0)) 
                                      (623 (getstatic (fieldCP "NO_RECUR" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (626 (aastore)) 
                                      (627 (dup)) 
                                      (628 (iconst_1)) 
                                      (629 (iconst_1)) 
                                      (630 (invokestatic (methodCP "valueOf" "java.lang.Boolean" (boolean) (class "java.lang.Boolean")))) 
                                      (633 (aastore)) 
                                      (634 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (637 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (640 (new (class "clojure.lang.Compiler$BodyExpr$Parser"))) 
                                      (643 (dup)) 
                                      (644 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$BodyExpr$Parser" () void))) 
                                      (647 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (650 (aload 4)) 
                                      (652 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (655 (invokevirtual (methodCP "parse" "clojure.lang.Compiler$BodyExpr$Parser" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (658 (astore 6)) 
                                      (660 (jsr 674)) ;;to TAG_21
                                      (663 (goto 681)) ;;to TAG_20;;at TAG_34
                                      (666 (astore 23)) ;;at TAG_35
                                      (668 (jsr 674)) ;;to TAG_21
                                      (671 (aload 23)) ;;at TAG_36
                                      (673 (athrow)) 
                                      (674 (astore 24)) ;;at TAG_21
                                      (676 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (679 (ret 24)) 
                                      (681 (new (class "clojure.lang.Compiler$TryExpr"))) ;;at TAG_20
                                      (684 (dup)) 
                                      (685 (aload 6)) 
                                      (687 (aload 5)) 
                                      (689 (aload 7)) 
                                      (691 (iload 9)) 
                                      (693 (iload 10)) 
                                      (695 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$TryExpr" ((class "clojure.lang.Compiler$Expr") (class "clojure.lang.PersistentVector") (class "clojure.lang.Compiler$Expr") int int) void))) 
                                      (698 (areturn)) 
                                      (endofcode 699))
                                   (Exceptions 
                                     (handler 155 199  202 (class "java.lang.Throwable"))
                                     (handler 202 207  202 (class "java.lang.Throwable"))
                                     (handler 411 497  500 (class "java.lang.Throwable"))
                                     (handler 500 505  500 (class "java.lang.Throwable"))
                                     (handler 537 582  585 (class "java.lang.Throwable"))
                                     (handler 585 590  585 (class "java.lang.Throwable"))
                                     (handler 617 663  666 (class "java.lang.Throwable"))
                                     (handler 666 671  666 (class "java.lang.Throwable")))
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$IParser")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$TryExpr$Parser-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$TryExpr$Parser*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$TryExpr$Parser" . "clojure.lang"))

