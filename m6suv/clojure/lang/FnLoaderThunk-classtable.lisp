; FnLoaderThunk-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.FnLoaderThunk*
 (make-class-def
      '(class "clojure.lang.FnLoaderThunk"
            "clojure.lang.RestFn"
            (constant_pool)
            (fields
                        (field "v" (class "clojure.lang.Var") (accessflags  *class*  *final* ) -1)
                        (field "loader" (class "java.lang.ClassLoader") (accessflags  *class*  *final* ) -1)
                        (field "fnClassName" (class "java.lang.String") (accessflags  *class*  *final* ) -1)
                        (field "fn" (class "clojure.lang.IFn") (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.Var") (class "java.lang.String"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 33)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.RestFn" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "v" "clojure.lang.FnLoaderThunk" (class "clojure.lang.Var"))))
                                      (9 (aload_0))
                                      (10 (getstatic (fieldCP "FN_LOADER_VAR" "clojure.lang.RT" (class "clojure.lang.Var"))))
                                      (13 (invokevirtual
					(methodCP "get" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (16 (checkcast (class "java.lang.ClassLoader")))
                                      (19 (putfield (fieldCP "loader" "clojure.lang.FnLoaderThunk" (class "java.lang.ClassLoader"))))
                                      (22 (aload_0))
                                      (23 (aload_2))
                                      (24 (putfield (fieldCP "fnClassName" "clojure.lang.FnLoaderThunk" (class "java.lang.String"))))
                                      (27 (aload_0))
                                      (28 (aconst_null))
                                      (29 (putfield (fieldCP "fn" "clojure.lang.FnLoaderThunk" (class "clojure.lang.IFn"))))
                                      (32 (return))
                                      (endofcode 33))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "load" "clojure.lang.FnLoaderThunk" () void)))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "fn" "clojure.lang.FnLoaderThunk" (class "clojure.lang.IFn"))))
                                      (8 (aload_1))
                                      (9 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2))
                                      (14 (areturn))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "load" "clojure.lang.FnLoaderThunk" () void)))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "fn" "clojure.lang.FnLoaderThunk" (class "clojure.lang.IFn"))))
                                      (8 (aload_1))
                                      (9 (aload_2))
                                      (10 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3))
                                      (15 (areturn))
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 17)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "load" "clojure.lang.FnLoaderThunk" () void)))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "fn" "clojure.lang.FnLoaderThunk" (class "clojure.lang.IFn"))))
                                      (8 (aload_1))
                                      (9 (aload_2))
                                      (10 (aload_3))
                                      (11 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4))
                                      (16 (areturn))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doInvoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *protected* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "load" "clojure.lang.FnLoaderThunk" () void)))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "fn" "clojure.lang.FnLoaderThunk" (class "clojure.lang.IFn"))))
                                      (8 (aload_1))
                                      (9 (checkcast (class "clojure.lang.ISeq")))
                                      (12 (invokeinterface
					(methodCP "applyTo" "clojure.lang.IFn" ((class "clojure.lang.ISeq")) (class "java.lang.Object")) 2))
                                      (17 (areturn))
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "load"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 50)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "fn" "clojure.lang.FnLoaderThunk" (class "clojure.lang.IFn")))) 
                                      (4 (ifnonnull 49)) ;;to TAG_0
                                      (7 (aload_0)) ;;at TAG_2
                                      (8 (aload_0)) 
                                      (9 (getfield (fieldCP "fnClassName" "clojure.lang.FnLoaderThunk" (class "java.lang.String")))) 
                                      (12 (iconst_1)) 
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "loader" "clojure.lang.FnLoaderThunk" (class "java.lang.ClassLoader")))) 
                                      (17 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String") boolean (class "java.lang.ClassLoader")) (class "java.lang.Class")))) 
                                      (20 (invokevirtual (methodCP "newInstance" "java.lang.Class" () (class "java.lang.Object")))) 
                                      (23 (checkcast (class "clojure.lang.IFn"))) 
                                      (26 (putfield (fieldCP "fn" "clojure.lang.FnLoaderThunk" (class "clojure.lang.IFn")))) 
                                      (29 (goto 38)) ;;to TAG_1;;at TAG_3
                                      (32 (astore_1)) ;;at TAG_4
                                      (33 (aload_1)) 
                                      (34 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (37 (athrow)) 
                                      (38 (aload_0)) ;;at TAG_1
                                      (39 (getfield (fieldCP "v" "clojure.lang.FnLoaderThunk" (class "clojure.lang.Var")))) 
                                      (42 (aload_0)) 
                                      (43 (getfield (fieldCP "fn" "clojure.lang.FnLoaderThunk" (class "clojure.lang.IFn")))) 
                                      (46 (putfield (fieldCP "root" "clojure.lang.Var" (class "java.lang.Object")))) 
                                      (49 (return)) ;;at TAG_0
                                      (endofcode 50))
                                   (Exceptions 
                                     (handler 7 29  32 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "getRequiredArity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_0))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 2)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "meta"
                              (parameters )
                              (returntype . (class "clojure.lang.IPersistentMap"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))


(defconst *FnLoaderThunk-class-table*
  (make-static-class-decls 
   *clojure.lang.FnLoaderThunk*))

(defconst *package-name-map* 
  ("clojure.lang.FnLoaderThunk" . "clojure.lang"))

