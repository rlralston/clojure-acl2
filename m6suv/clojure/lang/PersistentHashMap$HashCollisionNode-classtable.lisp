; PersistentHashMap$HashCollisionNode-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentHashMap$HashCollisionNode*
 (make-class-def
      '(class "clojure.lang.PersistentHashMap$HashCollisionNode"
            "java.lang.Object"
            (constant_pool)
            (fields
                        (field "hash" int (accessflags  *class*  *final* ) -1)
                        (field "count" int (accessflags  *class* ) -1)
                        (field "array" (array (class "java.lang.Object")) (accessflags  *class* ) -1)
                        (field "edit" (class "java.util.concurrent.atomic.AtomicReference") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int int (array (class "java.lang.Object")))
                              (returntype . void)
                              (accessflags  *class*  *transient* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "edit" "clojure.lang.PersistentHashMap$HashCollisionNode" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (9 (aload_0))
                                      (10 (iload_2))
                                      (11 (putfield (fieldCP "hash" "clojure.lang.PersistentHashMap$HashCollisionNode" int)))
                                      (14 (aload_0))
                                      (15 (iload_3))
                                      (16 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int)))
                                      (19 (aload_0))
                                      (20 (aload 4))
                                      (22 (putfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object")))))
                                      (25 (return))
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 8) (code_length . 180)
                                   (parsedcode
                                      (0 (iload_2)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "hash" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (5 (if_icmpne 141)) ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (aload_3)) 
                                      (10 (invokevirtual (methodCP "findIndex" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.lang.Object")) int))) 
                                      (13 (istore 6)) 
                                      (15 (iload 6)) 
                                      (17 (iconst_m1)) 
                                      (18 (if_icmpeq 64)) ;;to TAG_1
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (25 (iload 6)) 
                                      (27 (iconst_1)) 
                                      (28 (iadd)) 
                                      (29 (aaload)) 
                                      (30 (aload 4)) 
                                      (32 (if_acmpne 37))  ;;to TAG_2
                                      (35 (aload_0)) 
                                      (36 (areturn)) 
                                      (37 (new (class "clojure.lang.PersistentHashMap$HashCollisionNode"))) ;;at TAG_2
                                      (40 (dup)) 
                                      (41 (aconst_null)) 
                                      (42 (iload_2)) 
                                      (43 (aload_0)) 
                                      (44 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (47 (aload_0)) 
                                      (48 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (51 (iload 6)) 
                                      (53 (iconst_1)) 
                                      (54 (iadd)) 
                                      (55 (aload 4)) 
                                      (57 (invokestatic (methodCP "access$200" "clojure.lang.PersistentHashMap" ((array (class "java.lang.Object")) int (class "java.lang.Object")) (array (class "java.lang.Object"))))) 
                                      (60 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference") int int (array (class "java.lang.Object"))) void))) 
                                      (63 (areturn)) 
                                      (64 (aload_0)) ;;at TAG_1
                                      (65 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (68 (arraylength)) 
                                      (69 (iconst_2)) 
                                      (70 (iadd)) 
                                      (71 (anewarray (class "java.lang.Object"))) 
                                      (74 (astore 7)) 
                                      (76 (aload_0)) 
                                      (77 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (80 (iconst_0)) 
                                      (81 (aload 7)) 
                                      (83 (iconst_0)) 
                                      (84 (aload_0)) 
                                      (85 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (88 (arraylength)) 
                                      (89 (invokestatic (methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void))) 
                                      (92 (aload 7)) 
                                      (94 (aload_0)) 
                                      (95 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (98 (arraylength)) 
                                      (99 (aload_3)) 
                                      (100 (aastore)) 
                                      (101 (aload 7)) 
                                      (103 (aload_0)) 
                                      (104 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (107 (arraylength)) 
                                      (108 (iconst_1)) 
                                      (109 (iadd)) 
                                      (110 (aload 4)) 
                                      (112 (aastore)) 
                                      (113 (aload 5)) 
                                      (115 (aload 5)) 
                                      (117 (putfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (120 (new (class "clojure.lang.PersistentHashMap$HashCollisionNode"))) 
                                      (123 (dup)) 
                                      (124 (aload_0)) 
                                      (125 (getfield (fieldCP "edit" "clojure.lang.PersistentHashMap$HashCollisionNode" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (128 (iload_2)) 
                                      (129 (aload_0)) 
                                      (130 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (133 (iconst_1)) 
                                      (134 (iadd)) 
                                      (135 (aload 7)) 
                                      (137 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference") int int (array (class "java.lang.Object"))) void))) 
                                      (140 (areturn)) 
                                      (141 (new (class "clojure.lang.PersistentHashMap$BitmapIndexedNode"))) ;;at TAG_0
                                      (144 (dup)) 
                                      (145 (aconst_null)) 
                                      (146 (aload_0)) 
                                      (147 (getfield (fieldCP "hash" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (150 (iload_1)) 
                                      (151 (invokestatic (methodCP "access$100" "clojure.lang.PersistentHashMap" (int int) int))) 
                                      (154 (iconst_2)) 
                                      (155 (anewarray (class "java.lang.Object"))) 
                                      (158 (dup)) 
                                      (159 (iconst_0)) 
                                      (160 (aconst_null)) 
                                      (161 (aastore)) 
                                      (162 (dup)) 
                                      (163 (iconst_1)) 
                                      (164 (aload_0)) 
                                      (165 (aastore)) 
                                      (166 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$BitmapIndexedNode" ((class "java.util.concurrent.atomic.AtomicReference") int (array (class "java.lang.Object"))) void))) 
                                      (169 (iload_1)) 
                                      (170 (iload_2)) 
                                      (171 (aload_3)) 
                                      (172 (aload 4)) 
                                      (174 (aload 5)) 
                                      (176 (invokevirtual (methodCP "assoc" "clojure.lang.PersistentHashMap$BitmapIndexedNode" (int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (179 (areturn)) 
                                      (endofcode 180))
                                   (Exceptions )
                                   (StackMap )))
                        (method "without"
                              (parameters int int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 5) (code_length . 52)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_3)) 
                                      (2 (invokevirtual (methodCP "findIndex" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.lang.Object")) int))) 
                                      (5 (istore 4)) 
                                      (7 (iload 4)) 
                                      (9 (iconst_m1)) 
                                      (10 (if_icmpne 15))  ;;to TAG_0
                                      (13 (aload_0)) 
                                      (14 (areturn)) 
                                      (15 (aload_0)) ;;at TAG_0
                                      (16 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (19 (iconst_1)) 
                                      (20 (if_icmpne 25)) ;;to TAG_1
                                      (23 (aconst_null)) 
                                      (24 (areturn)) 
                                      (25 (new (class "clojure.lang.PersistentHashMap$HashCollisionNode"))) ;;at TAG_1
                                      (28 (dup)) 
                                      (29 (aconst_null)) 
                                      (30 (iload_2)) 
                                      (31 (aload_0)) 
                                      (32 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (35 (iconst_1)) 
                                      (36 (isub)) 
                                      (37 (aload_0)) 
                                      (38 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (41 (iload 4)) 
                                      (43 (iconst_2)) 
                                      (44 (idiv)) 
                                      (45 (invokestatic (methodCP "access$500" "clojure.lang.PersistentHashMap" ((array (class "java.lang.Object")) int) (array (class "java.lang.Object"))))) 
                                      (48 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference") int int (array (class "java.lang.Object"))) void))) 
                                      (51 (areturn)) 
                                      (endofcode 52))
                                   (Exceptions )
                                   (StackMap )))
                        (method "find"
                              (parameters int int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IMapEntry"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 5) (code_length . 54)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_3)) 
                                      (2 (invokevirtual (methodCP "findIndex" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.lang.Object")) int))) 
                                      (5 (istore 4)) 
                                      (7 (iload 4)) 
                                      (9 (ifge 14))  ;;to TAG_0
                                      (12 (aconst_null)) 
                                      (13 (areturn)) 
                                      (14 (aload_3)) ;;at TAG_0
                                      (15 (aload_0)) 
                                      (16 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (19 (iload 4)) 
                                      (21 (aaload)) 
                                      (22 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (25 (ifeq 52)) ;;to TAG_1
                                      (28 (new (class "clojure.lang.MapEntry"))) 
                                      (31 (dup)) 
                                      (32 (aload_0)) 
                                      (33 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (36 (iload 4)) 
                                      (38 (aaload)) 
                                      (39 (aload_0)) 
                                      (40 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (43 (iload 4)) 
                                      (45 (iconst_1)) 
                                      (46 (iadd)) 
                                      (47 (aaload)) 
                                      (48 (invokespecial (methodCP "<init>" "clojure.lang.MapEntry" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (51 (areturn)) 
                                      (52 (aconst_null)) ;;at TAG_1
                                      (53 (areturn)) 
                                      (endofcode 54))
                                   (Exceptions )
                                   (StackMap )))
                        (method "find"
                              (parameters int int (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 6) (code_length . 42)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_3)) 
                                      (2 (invokevirtual (methodCP "findIndex" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.lang.Object")) int))) 
                                      (5 (istore 5)) 
                                      (7 (iload 5)) 
                                      (9 (ifge 15))  ;;to TAG_0
                                      (12 (aload 4)) 
                                      (14 (areturn)) 
                                      (15 (aload_3)) ;;at TAG_0
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (20 (iload 5)) 
                                      (22 (aaload)) 
                                      (23 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (26 (ifeq 39)) ;;to TAG_1
                                      (29 (aload_0)) 
                                      (30 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (33 (iload 5)) 
                                      (35 (iconst_1)) 
                                      (36 (iadd)) 
                                      (37 (aaload)) 
                                      (38 (areturn)) 
                                      (39 (aload 4)) ;;at TAG_1
                                      (41 (areturn)) 
                                      (endofcode 42))
                                   (Exceptions )
                                   (StackMap )))
                        (method "nodeSeq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object")))))
                                      (4 (invokestatic
					(methodCP "create" "clojure.lang.PersistentHashMap$NodeSeq" ((array (class "java.lang.Object"))) (class "clojure.lang.ISeq"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "kvreduce"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object")))))
                                      (4 (aload_1))
                                      (5 (aload_2))
                                      (6 (invokestatic
					(methodCP "kvreduce" "clojure.lang.PersistentHashMap$NodeSeq" ((array (class "java.lang.Object")) (class "clojure.lang.IFn") (class "java.lang.Object")) (class "java.lang.Object"))))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "fold"
                              (parameters (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 6) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object")))))
                                      (4 (aload_2))
                                      (5 (aload_1))
                                      (6 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1))
                                      (11 (invokestatic
					(methodCP "kvreduce" "clojure.lang.PersistentHashMap$NodeSeq" ((array (class "java.lang.Object")) (class "clojure.lang.IFn") (class "java.lang.Object")) (class "java.lang.Object"))))
                                      (14 (areturn))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "findIndex"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 35)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_2)) 
                                      (2 (iload_2)) ;;at TAG_2
                                      (3 (iconst_2)) 
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (8 (imul)) 
                                      (9 (if_icmpge 33)) ;;to TAG_0
                                      (12 (aload_1)) 
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (17 (iload_2)) 
                                      (18 (aaload)) 
                                      (19 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (22 (ifeq 27)) ;;to TAG_1
                                      (25 (iload_2)) 
                                      (26 (ireturn)) 
                                      (27 (iinc 2 2)) ;;at TAG_1
                                      (30 (goto 2))  ;;to TAG_2
                                      (33 (iconst_m1)) ;;at TAG_0
                                      (34 (ireturn)) 
                                      (endofcode 35))
                                   (Exceptions )
                                   (StackMap )))
                        (method "ensureEditable"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference"))
                              (returntype . (class "clojure.lang.PersistentHashMap$HashCollisionNode"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 6) (max_locals . 3) (code_length . 56)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "edit" "clojure.lang.PersistentHashMap$HashCollisionNode" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (4 (aload_1)) 
                                      (5 (if_acmpne 10))  ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (areturn)) 
                                      (10 (iconst_2)) ;;at TAG_0
                                      (11 (aload_0)) 
                                      (12 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (15 (iconst_1)) 
                                      (16 (iadd)) 
                                      (17 (imul)) 
                                      (18 (anewarray (class "java.lang.Object"))) 
                                      (21 (astore_2)) 
                                      (22 (aload_0)) 
                                      (23 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (26 (iconst_0)) 
                                      (27 (aload_2)) 
                                      (28 (iconst_0)) 
                                      (29 (iconst_2)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (34 (imul)) 
                                      (35 (invokestatic (methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void))) 
                                      (38 (new (class "clojure.lang.PersistentHashMap$HashCollisionNode"))) 
                                      (41 (dup)) 
                                      (42 (aload_1)) 
                                      (43 (aload_0)) 
                                      (44 (getfield (fieldCP "hash" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (47 (aload_0)) 
                                      (48 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (51 (aload_2)) 
                                      (52 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference") int int (array (class "java.lang.Object"))) void))) 
                                      (55 (areturn)) 
                                      (endofcode 56))
                                   (Exceptions )
                                   (StackMap )))
                        (method "ensureEditable"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int (array (class "java.lang.Object")))
                              (returntype . (class "clojure.lang.PersistentHashMap$HashCollisionNode"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 35)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "edit" "clojure.lang.PersistentHashMap$HashCollisionNode" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (4 (aload_1)) 
                                      (5 (if_acmpne 20))  ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (aload_3)) 
                                      (10 (putfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (13 (aload_0)) 
                                      (14 (iload_2)) 
                                      (15 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (18 (aload_0)) 
                                      (19 (areturn)) 
                                      (20 (new (class "clojure.lang.PersistentHashMap$HashCollisionNode"))) ;;at TAG_0
                                      (23 (dup)) 
                                      (24 (aload_1)) 
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "hash" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (29 (iload_2)) 
                                      (30 (aload_3)) 
                                      (31 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference") int int (array (class "java.lang.Object"))) void))) 
                                      (34 (areturn)) 
                                      (endofcode 35))
                                   (Exceptions )
                                   (StackMap )))
                        (method "editAndSet"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentHashMap$HashCollisionNode"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokespecial
					(methodCP "ensureEditable" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference")) (class "clojure.lang.PersistentHashMap$HashCollisionNode"))))
                                      (5 (astore 4))
                                      (7 (aload 4))
                                      (9 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object")))))
                                      (12 (iload_2))
                                      (13 (aload_3))
                                      (14 (aastore))
                                      (15 (aload 4))
                                      (17 (areturn))
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "editAndSet"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int (class "java.lang.Object") int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentHashMap$HashCollisionNode"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 3) (max_locals . 7) (code_length . 28)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokespecial
					(methodCP "ensureEditable" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference")) (class "clojure.lang.PersistentHashMap$HashCollisionNode"))))
                                      (5 (astore 6))
                                      (7 (aload 6))
                                      (9 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object")))))
                                      (12 (iload_2))
                                      (13 (aload_3))
                                      (14 (aastore))
                                      (15 (aload 6))
                                      (17 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object")))))
                                      (20 (iload 4))
                                      (22 (aload 5))
                                      (24 (aastore))
                                      (25 (aload 6))
                                      (27 (areturn))
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 9) (code_length . 230)
                                   (parsedcode
                                      (0 (iload_3)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "hash" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (5 (if_icmpne 181)) ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (aload 4)) 
                                      (11 (invokevirtual (methodCP "findIndex" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.lang.Object")) int))) 
                                      (14 (istore 7)) 
                                      (16 (iload 7)) 
                                      (18 (iconst_m1)) 
                                      (19 (if_icmpeq 50)) ;;to TAG_1
                                      (22 (aload_0)) 
                                      (23 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (26 (iload 7)) 
                                      (28 (iconst_1)) 
                                      (29 (iadd)) 
                                      (30 (aaload)) 
                                      (31 (aload 5)) 
                                      (33 (if_acmpne 38))  ;;to TAG_2
                                      (36 (aload_0)) 
                                      (37 (areturn)) 
                                      (38 (aload_0)) ;;at TAG_2
                                      (39 (aload_1)) 
                                      (40 (iload 7)) 
                                      (42 (iconst_1)) 
                                      (43 (iadd)) 
                                      (44 (aload 5)) 
                                      (46 (invokespecial (methodCP "editAndSet" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference") int (class "java.lang.Object")) (class "clojure.lang.PersistentHashMap$HashCollisionNode")))) 
                                      (49 (areturn)) 
                                      (50 (aload_0)) ;;at TAG_1
                                      (51 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (54 (arraylength)) 
                                      (55 (iconst_2)) 
                                      (56 (aload_0)) 
                                      (57 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (60 (imul)) 
                                      (61 (if_icmple 110)) ;;to TAG_3
                                      (64 (aload 6)) 
                                      (66 (aload 6)) 
                                      (68 (putfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (71 (aload_0)) 
                                      (72 (aload_1)) 
                                      (73 (iconst_2)) 
                                      (74 (aload_0)) 
                                      (75 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (78 (imul)) 
                                      (79 (aload 4)) 
                                      (81 (iconst_2)) 
                                      (82 (aload_0)) 
                                      (83 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (86 (imul)) 
                                      (87 (iconst_1)) 
                                      (88 (iadd)) 
                                      (89 (aload 5)) 
                                      (91 (invokespecial (methodCP "editAndSet" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference") int (class "java.lang.Object") int (class "java.lang.Object")) (class "clojure.lang.PersistentHashMap$HashCollisionNode")))) 
                                      (94 (astore 8)) 
                                      (96 (aload 8)) 
                                      (98 (dup)) 
                                      (99 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (102 (iconst_1)) 
                                      (103 (iadd)) 
                                      (104 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (107 (aload 8)) 
                                      (109 (areturn)) 
                                      (110 (aload_0)) ;;at TAG_3
                                      (111 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (114 (arraylength)) 
                                      (115 (iconst_2)) 
                                      (116 (iadd)) 
                                      (117 (anewarray (class "java.lang.Object"))) 
                                      (120 (astore 8)) 
                                      (122 (aload_0)) 
                                      (123 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (126 (iconst_0)) 
                                      (127 (aload 8)) 
                                      (129 (iconst_0)) 
                                      (130 (aload_0)) 
                                      (131 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (134 (arraylength)) 
                                      (135 (invokestatic (methodCP "arraycopy" "java.lang.System" ((class "java.lang.Object") int (class "java.lang.Object") int int) void))) 
                                      (138 (aload 8)) 
                                      (140 (aload_0)) 
                                      (141 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (144 (arraylength)) 
                                      (145 (aload 4)) 
                                      (147 (aastore)) 
                                      (148 (aload 8)) 
                                      (150 (aload_0)) 
                                      (151 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (154 (arraylength)) 
                                      (155 (iconst_1)) 
                                      (156 (iadd)) 
                                      (157 (aload 5)) 
                                      (159 (aastore)) 
                                      (160 (aload 6)) 
                                      (162 (aload 6)) 
                                      (164 (putfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (167 (aload_0)) 
                                      (168 (aload_1)) 
                                      (169 (aload_0)) 
                                      (170 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (173 (iconst_1)) 
                                      (174 (iadd)) 
                                      (175 (aload 8)) 
                                      (177 (invokespecial (methodCP "ensureEditable" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference") int (array (class "java.lang.Object"))) (class "clojure.lang.PersistentHashMap$HashCollisionNode")))) 
                                      (180 (areturn)) 
                                      (181 (new (class "clojure.lang.PersistentHashMap$BitmapIndexedNode"))) ;;at TAG_0
                                      (184 (dup)) 
                                      (185 (aload_1)) 
                                      (186 (aload_0)) 
                                      (187 (getfield (fieldCP "hash" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (190 (iload_2)) 
                                      (191 (invokestatic (methodCP "access$100" "clojure.lang.PersistentHashMap" (int int) int))) 
                                      (194 (iconst_4)) 
                                      (195 (anewarray (class "java.lang.Object"))) 
                                      (198 (dup)) 
                                      (199 (iconst_0)) 
                                      (200 (aconst_null)) 
                                      (201 (aastore)) 
                                      (202 (dup)) 
                                      (203 (iconst_1)) 
                                      (204 (aload_0)) 
                                      (205 (aastore)) 
                                      (206 (dup)) 
                                      (207 (iconst_2)) 
                                      (208 (aconst_null)) 
                                      (209 (aastore)) 
                                      (210 (dup)) 
                                      (211 (iconst_3)) 
                                      (212 (aconst_null)) 
                                      (213 (aastore)) 
                                      (214 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$BitmapIndexedNode" ((class "java.util.concurrent.atomic.AtomicReference") int (array (class "java.lang.Object"))) void))) 
                                      (217 (aload_1)) 
                                      (218 (iload_2)) 
                                      (219 (iload_3)) 
                                      (220 (aload 4)) 
                                      (222 (aload 5)) 
                                      (224 (aload 6)) 
                                      (226 (invokevirtual (methodCP "assoc" "clojure.lang.PersistentHashMap$BitmapIndexedNode" ((class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (229 (areturn)) 
                                      (endofcode 230))
                                   (Exceptions )
                                   (StackMap )))
                        (method "without"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "clojure.lang.Box"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 8) (code_length . 130)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload 4)) 
                                      (3 (invokevirtual (methodCP "findIndex" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.lang.Object")) int))) 
                                      (6 (istore 6)) 
                                      (8 (iload 6)) 
                                      (10 (iconst_m1)) 
                                      (11 (if_icmpne 16))  ;;to TAG_0
                                      (14 (aload_0)) 
                                      (15 (areturn)) 
                                      (16 (aload 5)) ;;at TAG_0
                                      (18 (aload 5)) 
                                      (20 (putfield (fieldCP "val" "clojure.lang.Box" (class "java.lang.Object")))) 
                                      (23 (aload_0)) 
                                      (24 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (27 (iconst_1)) 
                                      (28 (if_icmpne 33)) ;;to TAG_1
                                      (31 (aconst_null)) 
                                      (32 (areturn)) 
                                      (33 (aload_0)) ;;at TAG_1
                                      (34 (aload_1)) 
                                      (35 (invokespecial (methodCP "ensureEditable" "clojure.lang.PersistentHashMap$HashCollisionNode" ((class "java.util.concurrent.atomic.AtomicReference")) (class "clojure.lang.PersistentHashMap$HashCollisionNode")))) 
                                      (38 (astore 7)) 
                                      (40 (aload 7)) 
                                      (42 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (45 (iload 6)) 
                                      (47 (aload 7)) 
                                      (49 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (52 (iconst_2)) 
                                      (53 (aload_0)) 
                                      (54 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (57 (imul)) 
                                      (58 (iconst_2)) 
                                      (59 (isub)) 
                                      (60 (aaload)) 
                                      (61 (aastore)) 
                                      (62 (aload 7)) 
                                      (64 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (67 (iload 6)) 
                                      (69 (iconst_1)) 
                                      (70 (iadd)) 
                                      (71 (aload 7)) 
                                      (73 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (76 (iconst_2)) 
                                      (77 (aload_0)) 
                                      (78 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (81 (imul)) 
                                      (82 (iconst_1)) 
                                      (83 (isub)) 
                                      (84 (aaload)) 
                                      (85 (aastore)) 
                                      (86 (aload 7)) 
                                      (88 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (91 (iconst_2)) 
                                      (92 (aload_0)) 
                                      (93 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (96 (imul)) 
                                      (97 (iconst_2)) 
                                      (98 (isub)) 
                                      (99 (aload 7)) 
                                      (101 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$HashCollisionNode" (array (class "java.lang.Object"))))) 
                                      (104 (iconst_2)) 
                                      (105 (aload_0)) 
                                      (106 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (109 (imul)) 
                                      (110 (iconst_1)) 
                                      (111 (isub)) 
                                      (112 (aconst_null)) 
                                      (113 (dup_x2)) 
                                      (114 (aastore)) 
                                      (115 (aastore)) 
                                      (116 (aload 7)) 
                                      (118 (dup)) 
                                      (119 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (122 (iconst_1)) 
                                      (123 (isub)) 
                                      (124 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap$HashCollisionNode" int))) 
                                      (127 (aload 7)) 
                                      (129 (areturn)) 
                                      (endofcode 130))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.PersistentHashMap$INode")
            (accessflags  *class*  *final*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentHashMap$HashCollisionNode-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentHashMap$HashCollisionNode*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentHashMap$HashCollisionNode" . "clojure.lang"))

