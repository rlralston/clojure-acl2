; Compiler$RecurExpr$Parser-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.Compiler$RecurExpr$Parser*
 (make-class-def
      '(class "clojure.lang.Compiler$RecurExpr$Parser"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Can only recur from tail position")
                        (STRING  "Cannot recur across try")
                        (STRING  "Mismatched argument count to recur, expected: %d args, got: %d")
                        (STRING  ":")
                        (STRING  " recur arg for primitive local: ")
                        (STRING  " is not matching primitive, had: ")
                        (STRING  "Object")
                        (STRING  ", needed: "))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 14) (code_length . 471)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.lang.Integer"))) 
                                      (9 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (12 (istore_3)) 
                                      (13 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (16 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (19 (checkcast (class "java.lang.Integer"))) 
                                      (22 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (25 (istore 4)) 
                                      (27 (getstatic (fieldCP "SOURCE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (30 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (33 (checkcast (class "java.lang.String"))) 
                                      (36 (astore 5)) 
                                      (38 (aload_2)) 
                                      (39 (checkcast (class "clojure.lang.ISeq"))) 
                                      (42 (astore 6)) 
                                      (44 (getstatic (fieldCP "LOOP_LOCALS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (47 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (50 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (53 (astore 7)) 
                                      (55 (aload_1)) 
                                      (56 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (59 (if_acmpne 67)) ;;to TAG_0
                                      (62 (aload 7)) 
                                      (64 (ifnonnull 77))  ;;to TAG_1
                                      (67 (new (class "java.lang.UnsupportedOperationException"))) ;;at TAG_0
                                      (70 (dup)) 
                                      (71 (ldc 0)) ;;STRING:: "Can only recur from tail position"
                                      (73 (invokespecial (methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void))) 
                                      (76 (athrow)) 
                                      (77 (getstatic (fieldCP "NO_RECUR" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (80 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (83 (ifnull 96)) ;;to TAG_2
                                      (86 (new (class "java.lang.UnsupportedOperationException"))) 
                                      (89 (dup)) 
                                      (90 (ldc 1)) ;;STRING:: "Cannot recur across try"
                                      (92 (invokespecial (methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void))) 
                                      (95 (athrow)) 
                                      (96 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) ;;at TAG_2
                                      (99 (astore 8)) 
                                      (101 (aload 6)) 
                                      (103 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (108 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (111 (astore 9)) 
                                      (113 (aload 9)) ;;at TAG_4
                                      (115 (ifnull 150)) ;;to TAG_3
                                      (118 (aload 8)) 
                                      (120 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (123 (aload 9)) 
                                      (125 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (130 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (133 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (136 (astore 8)) 
                                      (138 (aload 9)) 
                                      (140 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (145 (astore 9)) 
                                      (147 (goto 113)) ;;to TAG_4
                                      (150 (aload 8)) ;;at TAG_3
                                      (152 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (155 (aload 7)) 
                                      (157 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (162 (if_icmpeq 206)) ;;to TAG_5
                                      (165 (new (class "java.lang.IllegalArgumentException"))) 
                                      (168 (dup)) 
                                      (169 (ldc 2)) ;;STRING:: "Mismatched argument count to recur, expected: %d args, got: %d"
                                      (171 (iconst_2)) 
                                      (172 (anewarray (class "java.lang.Object"))) 
                                      (175 (dup)) 
                                      (176 (iconst_0)) 
                                      (177 (aload 7)) 
                                      (179 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (184 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (187 (aastore)) 
                                      (188 (dup)) 
                                      (189 (iconst_1)) 
                                      (190 (aload 8)) 
                                      (192 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (195 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (198 (aastore)) 
                                      (199 (invokestatic (methodCP "format" "java.lang.String" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.String")))) 
                                      (202 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (205 (athrow)) 
                                      (206 (iconst_0)) ;;at TAG_5
                                      (207 (istore 9)) 
                                      (209 (iload 9)) ;;at TAG_12
                                      (211 (aload 7)) 
                                      (213 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (218 (if_icmpge 454)) ;;to TAG_6
                                      (221 (aload 7)) 
                                      (223 (iload 9)) 
                                      (225 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (230 (checkcast (class "clojure.lang.Compiler$LocalBinding"))) 
                                      (233 (astore 10)) 
                                      (235 (aload 10)) 
                                      (237 (invokevirtual (methodCP "getPrimitiveType" "clojure.lang.Compiler$LocalBinding" () (class "java.lang.Class")))) 
                                      (240 (astore 11)) 
                                      (242 (aload 11)) 
                                      (244 (ifnull 448)) ;;to TAG_7
                                      (247 (iconst_0)) 
                                      (248 (istore 12)) 
                                      (250 (aload 8)) 
                                      (252 (iload 9)) 
                                      (254 (invokevirtual (methodCP "nth" "clojure.lang.PersistentVector" (int) (class "java.lang.Object")))) 
                                      (257 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (260 (invokestatic (methodCP "maybePrimitiveType" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$Expr")) (class "java.lang.Class")))) 
                                      (263 (astore 13)) 
                                      (265 (aload 11)) 
                                      (267 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (270 (if_acmpne 319)) ;;to TAG_8
                                      (273 (aload 13)) 
                                      (275 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (278 (if_acmpeq 346)) ;;to TAG_9
                                      (281 (aload 13)) 
                                      (283 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (286 (if_acmpeq 346)) ;;to TAG_9
                                      (289 (aload 13)) 
                                      (291 (getstatic (fieldCP "TYPE" "java.lang.Short" (class "java.lang.Class")))) 
                                      (294 (if_acmpeq 346)) ;;to TAG_9
                                      (297 (aload 13)) 
                                      (299 (getstatic (fieldCP "TYPE" "java.lang.Character" (class "java.lang.Class")))) 
                                      (302 (if_acmpeq 346)) ;;to TAG_9
                                      (305 (aload 13)) 
                                      (307 (getstatic (fieldCP "TYPE" "java.lang.Byte" (class "java.lang.Class")))) 
                                      (310 (if_acmpeq 346)) ;;to TAG_9
                                      (313 (iconst_1)) 
                                      (314 (istore 12)) 
                                      (316 (goto 346)) ;;to TAG_9
                                      (319 (aload 11)) ;;at TAG_8
                                      (321 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (324 (if_acmpne 346)) ;;to TAG_9
                                      (327 (aload 13)) 
                                      (329 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (332 (if_acmpeq 346)) ;;to TAG_9
                                      (335 (aload 13)) 
                                      (337 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (340 (if_acmpeq 346)) ;;to TAG_9
                                      (343 (iconst_1)) 
                                      (344 (istore 12)) 
                                      (346 (iload 12)) ;;at TAG_9
                                      (348 (ifeq 448)) ;;to TAG_7
                                      (351 (aload 10)) 
                                      (353 (iconst_1)) 
                                      (354 (putfield (fieldCP "recurMistmatch" "clojure.lang.Compiler$LocalBinding" boolean))) 
                                      (357 (getstatic (fieldCP "WARN_ON_REFLECTION" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (360 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (363 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (366 (ifeq 448)) ;;to TAG_7
                                      (369 (invokestatic (methodCP "errPrintWriter" "clojure.lang.RT" () (class "java.io.PrintWriter")))) 
                                      (372 (new (class "java.lang.StringBuilder"))) 
                                      (375 (dup)) 
                                      (376 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (379 (aload 5)) 
                                      (381 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (384 (ldc 3)) ;;STRING:: ":"
                                      (386 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (389 (iload_3)) 
                                      (390 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (393 (ldc 4)) ;;STRING:: " recur arg for primitive local: "
                                      (395 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (398 (aload 10)) 
                                      (400 (getfield (fieldCP "name" "clojure.lang.Compiler$LocalBinding" (class "java.lang.String")))) 
                                      (403 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (406 (ldc 5)) ;;STRING:: " is not matching primitive, had: "
                                      (408 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (411 (aload 13)) 
                                      (413 (ifnull 424)) ;;to TAG_10
                                      (416 (aload 13)) 
                                      (418 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (421 (goto 426)) ;;to TAG_11
                                      (424 (ldc 6)) ;;at TAG_10;;STRING:: "Object"
                                      (426 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) ;;at TAG_11
                                      (429 (ldc 7)) ;;STRING:: ", needed: "
                                      (431 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (434 (aload 11)) 
                                      (436 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (439 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (442 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (445 (invokevirtual (methodCP "println" "java.io.PrintWriter" ((class "java.lang.String")) void))) 
                                      (448 (iinc 9 1)) ;;at TAG_7
                                      (451 (goto 209)) ;;to TAG_12
                                      (454 (new (class "clojure.lang.Compiler$RecurExpr"))) ;;at TAG_6
                                      (457 (dup)) 
                                      (458 (aload 7)) 
                                      (460 (aload 8)) 
                                      (462 (iload_3)) 
                                      (463 (iload 4)) 
                                      (465 (aload 5)) 
                                      (467 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$RecurExpr" ((class "clojure.lang.IPersistentVector") (class "clojure.lang.IPersistentVector") int int (class "java.lang.String")) void))) 
                                      (470 (areturn)) 
                                      (endofcode 471))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$IParser")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$RecurExpr$Parser-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$RecurExpr$Parser*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$RecurExpr$Parser" . "clojure.lang"))

