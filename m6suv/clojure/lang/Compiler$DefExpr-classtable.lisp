; Compiler$DefExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$DefExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$DefExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "void bindRoot(Object)")
                        (STRING  "void setTag(clojure.lang.Symbol)")
                        (STRING  "void setMeta(clojure.lang.IPersistentMap)")
                        (STRING  "clojure.lang.Var setDynamic(boolean)")
                        (STRING  "clojure.lang.Symbol intern(String, String)"))
            (fields
                        (field "var" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public* ) -1)
                        (field "init" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "meta" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "initProvided" boolean (accessflags  *class*  *final*  *public* ) -1)
                        (field "isDynamic" boolean (accessflags  *class*  *final*  *public* ) -1)
                        (field "source" (class "java.lang.String") (accessflags  *class*  *final*  *public* ) -1)
                        (field "line" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "column" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "bindRootMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "setTagMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "setMetaMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "setDynamicMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "symintern" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.String") int int (class "clojure.lang.Var") (class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr") boolean boolean)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 9) (code_length . 50)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "source" "clojure.lang.Compiler$DefExpr" (class "java.lang.String"))))
                                      (9 (aload_0))
                                      (10 (iload_2))
                                      (11 (putfield (fieldCP "line" "clojure.lang.Compiler$DefExpr" int)))
                                      (14 (aload_0))
                                      (15 (iload_3))
                                      (16 (putfield (fieldCP "column" "clojure.lang.Compiler$DefExpr" int)))
                                      (19 (aload_0))
                                      (20 (aload 4))
                                      (22 (putfield (fieldCP "var" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Var"))))
                                      (25 (aload_0))
                                      (26 (aload 5))
                                      (28 (putfield (fieldCP "init" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (31 (aload_0))
                                      (32 (aload 6))
                                      (34 (putfield (fieldCP "meta" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Compiler$Expr"))))
                                      (37 (aload_0))
                                      (38 (iload 8))
                                      (40 (putfield (fieldCP "isDynamic" "clojure.lang.Compiler$DefExpr" boolean)))
                                      (43 (aload_0))
                                      (44 (iload 7))
                                      (46 (putfield (fieldCP "initProvided" "clojure.lang.Compiler$DefExpr" boolean)))
                                      (49 (return))
                                      (endofcode 50))
                                   (Exceptions )
                                   (StackMap )))
                        (method "includesExplicitMetadata"
                              (parameters (class "clojure.lang.Compiler$MapExpr"))
                              (returntype . boolean)
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 70)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_2)) 
                                      (2 (iload_2)) ;;at TAG_2
                                      (3 (aload_1)) 
                                      (4 (getfield (fieldCP "keyvals" "clojure.lang.Compiler$MapExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (7 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (12 (if_icmpge 68)) ;;to TAG_0
                                      (15 (aload_1)) 
                                      (16 (getfield (fieldCP "keyvals" "clojure.lang.Compiler$MapExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (19 (iload_2)) 
                                      (20 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (25 (checkcast (class "clojure.lang.Compiler$KeywordExpr"))) 
                                      (28 (getfield (fieldCP "k" "clojure.lang.Compiler$KeywordExpr" (class "clojure.lang.Keyword")))) 
                                      (31 (astore_3)) 
                                      (32 (aload_3)) 
                                      (33 (getstatic (fieldCP "FILE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (36 (if_acmpeq 62)) ;;to TAG_1
                                      (39 (aload_3)) 
                                      (40 (getstatic (fieldCP "DECLARED_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (43 (if_acmpeq 62)) ;;to TAG_1
                                      (46 (aload_3)) 
                                      (47 (getstatic (fieldCP "LINE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (50 (if_acmpeq 62)) ;;to TAG_1
                                      (53 (aload_3)) 
                                      (54 (getstatic (fieldCP "COLUMN_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (57 (if_acmpeq 62)) ;;to TAG_1
                                      (60 (iconst_1)) 
                                      (61 (ireturn)) 
                                      (62 (iinc 2 2)) ;;at TAG_1
                                      (65 (goto 2))  ;;to TAG_2
                                      (68 (iconst_0)) ;;at TAG_0
                                      (69 (ireturn)) 
                                      (endofcode 70))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 115)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_4
                                      (1 (getfield (fieldCP "initProvided" "clojure.lang.Compiler$DefExpr" boolean))) 
                                      (4 (ifeq 23)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "var" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Var")))) 
                                      (11 (aload_0)) 
                                      (12 (getfield (fieldCP "init" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (15 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (20 (invokevirtual (methodCP "bindRoot" "clojure.lang.Var" ((class "java.lang.Object")) void))) 
                                      (23 (aload_0)) ;;at TAG_0
                                      (24 (getfield (fieldCP "meta" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (27 (ifnull 69)) ;;to TAG_1
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "meta" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (34 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (39 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (42 (astore_1)) 
                                      (43 (aload_0)) 
                                      (44 (getfield (fieldCP "initProvided" "clojure.lang.Compiler$DefExpr" boolean))) 
                                      (47 (ifne 50))  ;;to TAG_2
                                      (50 (aload_0)) ;;at TAG_2
                                      (51 (getfield (fieldCP "var" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Var")))) 
                                      (54 (aload_0)) 
                                      (55 (getfield (fieldCP "meta" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (58 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (63 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (66 (invokevirtual (methodCP "setMeta" "clojure.lang.Var" ((class "clojure.lang.IPersistentMap")) void))) 
                                      (69 (aload_0)) ;;at TAG_1
                                      (70 (getfield (fieldCP "var" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Var")))) 
                                      (73 (aload_0)) 
                                      (74 (getfield (fieldCP "isDynamic" "clojure.lang.Compiler$DefExpr" boolean))) 
                                      (77 (invokevirtual (methodCP "setDynamic" "clojure.lang.Var" (boolean) (class "clojure.lang.Var")))) 
                                      (80 (areturn)) ;;at TAG_5
                                      (81 (astore_1)) ;;at TAG_6
                                      (82 (aload_1)) 
                                      (83 (instanceof (class "clojure.lang.Compiler$CompilerException"))) 
                                      (86 (ifne 110)) ;;to TAG_3
                                      (89 (new (class "clojure.lang.Compiler$CompilerException"))) 
                                      (92 (dup)) 
                                      (93 (aload_0)) 
                                      (94 (getfield (fieldCP "source" "clojure.lang.Compiler$DefExpr" (class "java.lang.String")))) 
                                      (97 (aload_0)) 
                                      (98 (getfield (fieldCP "line" "clojure.lang.Compiler$DefExpr" int))) 
                                      (101 (aload_0)) 
                                      (102 (getfield (fieldCP "column" "clojure.lang.Compiler$DefExpr" int))) 
                                      (105 (aload_1)) 
                                      (106 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$CompilerException" ((class "java.lang.String") int int (class "java.lang.Throwable")) void))) 
                                      (109 (athrow)) 
                                      (110 (aload_1)) ;;at TAG_3
                                      (111 (checkcast (class "clojure.lang.Compiler$CompilerException"))) 
                                      (114 (athrow)) 
                                      (endofcode 115))
                                   (Exceptions 
                                     (handler 0 80  81 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 155)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (aload_3)) 
                                      (2 (aload_0)) 
                                      (3 (getfield (fieldCP "var" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Var")))) 
                                      (6 (invokevirtual (methodCP "emitVar" "clojure.lang.Compiler$ObjExpr" ((class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Var")) void))) 
                                      (9 (aload_0)) 
                                      (10 (getfield (fieldCP "isDynamic" "clojure.lang.Compiler$DefExpr" boolean))) 
                                      (13 (ifeq 34)) ;;to TAG_0
                                      (16 (aload_3)) 
                                      (17 (aload_0)) 
                                      (18 (getfield (fieldCP "isDynamic" "clojure.lang.Compiler$DefExpr" boolean))) 
                                      (21 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" (boolean) void))) 
                                      (24 (aload_3)) 
                                      (25 (invokestatic (methodCP "access$000" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (28 (getstatic (fieldCP "setDynamicMethod" "clojure.lang.Compiler$DefExpr" (class "clojure.asm.commons.Method")))) 
                                      (31 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (34 (aload_0)) ;;at TAG_0
                                      (35 (getfield (fieldCP "meta" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (38 (ifnull 83)) ;;to TAG_1
                                      (41 (aload_0)) 
                                      (42 (getfield (fieldCP "initProvided" "clojure.lang.Compiler$DefExpr" boolean))) 
                                      (45 (ifne 48))  ;;to TAG_2
                                      (48 (aload_3)) ;;at TAG_2
                                      (49 (invokevirtual (methodCP "dup" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (52 (aload_0)) 
                                      (53 (getfield (fieldCP "meta" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (56 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (59 (aload_2)) 
                                      (60 (aload_3)) 
                                      (61 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (66 (aload_3)) 
                                      (67 (getstatic (fieldCP "IPERSISTENTMAP_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (70 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (73 (aload_3)) 
                                      (74 (invokestatic (methodCP "access$000" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (77 (getstatic (fieldCP "setMetaMethod" "clojure.lang.Compiler$DefExpr" (class "clojure.asm.commons.Method")))) 
                                      (80 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (83 (aload_0)) ;;at TAG_1
                                      (84 (getfield (fieldCP "initProvided" "clojure.lang.Compiler$DefExpr" boolean))) 
                                      (87 (ifeq 143)) ;;to TAG_3
                                      (90 (aload_3)) 
                                      (91 (invokevirtual (methodCP "dup" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (94 (aload_0)) 
                                      (95 (getfield (fieldCP "init" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (98 (instanceof (class "clojure.lang.Compiler$FnExpr"))) 
                                      (101 (ifeq 119)) ;;to TAG_4
                                      (104 (aload_0)) 
                                      (105 (getfield (fieldCP "init" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (108 (checkcast (class "clojure.lang.Compiler$FnExpr"))) 
                                      (111 (aload_2)) 
                                      (112 (aload_3)) 
                                      (113 (invokevirtual (methodCP "emitForDefn" "clojure.lang.Compiler$FnExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (116 (goto 133)) ;;to TAG_5
                                      (119 (aload_0)) ;;at TAG_4
                                      (120 (getfield (fieldCP "init" "clojure.lang.Compiler$DefExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (123 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (126 (aload_2)) 
                                      (127 (aload_3)) 
                                      (128 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (133 (aload_3)) ;;at TAG_5
                                      (134 (invokestatic (methodCP "access$000" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (137 (getstatic (fieldCP "bindRootMethod" "clojure.lang.Compiler$DefExpr" (class "clojure.asm.commons.Method")))) 
                                      (140 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (143 (aload_1)) ;;at TAG_3
                                      (144 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (147 (if_acmpne 154)) ;;to TAG_6
                                      (150 (aload_3)) 
                                      (151 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (154 (return)) ;;at TAG_6
                                      (endofcode 155))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 4)
                                   (parsedcode
                                      (0 (ldc_w ))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 41)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "void bindRoot(Object)"
                                      (2 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (5 (putstatic (fieldCP "bindRootMethod" "clojure.lang.Compiler$DefExpr" (class "clojure.asm.commons.Method"))))
                                      (8 (ldc 1))         ;;STRING:: "void setTag(clojure.lang.Symbol)"
                                      (10 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (13 (putstatic (fieldCP "setTagMethod" "clojure.lang.Compiler$DefExpr" (class "clojure.asm.commons.Method"))))
                                      (16 (ldc 2))        ;;STRING:: "void setMeta(clojure.lang.IPersistentMap)"
                                      (18 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (21 (putstatic (fieldCP "setMetaMethod" "clojure.lang.Compiler$DefExpr" (class "clojure.asm.commons.Method"))))
                                      (24 (ldc 3))        ;;STRING:: "clojure.lang.Var setDynamic(boolean)"
                                      (26 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (29 (putstatic (fieldCP "setDynamicMethod" "clojure.lang.Compiler$DefExpr" (class "clojure.asm.commons.Method"))))
                                      (32 (ldc 4))        ;;STRING:: "clojure.lang.Symbol intern(String, String)"
                                      (34 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (37 (putstatic (fieldCP "symintern" "clojure.lang.Compiler$DefExpr" (class "clojure.asm.commons.Method"))))
                                      (40 (return))
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$DefExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$DefExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$DefExpr" . "clojure.lang"))

