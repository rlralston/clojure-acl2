; PersistentHashMap$ArrayNode-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentHashMap$ArrayNode*
 (make-class-def
      '(class "clojure.lang.PersistentHashMap$ArrayNode"
            "java.lang.Object"
            (constant_pool)
            (fields
                        (field "count" int (accessflags  *class* ) -1)
                        (field "array" (array (class "clojure.lang.PersistentHashMap$INode")) (accessflags  *class*  *final* ) -1)
                        (field "edit" (class "java.util.concurrent.atomic.AtomicReference") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int (array (class "clojure.lang.PersistentHashMap$INode")))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_3))
                                      (6 (putfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode")))))
                                      (9 (aload_0))
                                      (10 (aload_1))
                                      (11 (putfield (fieldCP "edit" "clojure.lang.PersistentHashMap$ArrayNode" (class "java.util.concurrent.atomic.AtomicReference"))))
                                      (14 (aload_0))
                                      (15 (iload_2))
                                      (16 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int)))
                                      (19 (return))
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 12) (max_locals . 9) (code_length . 111)
                                   (parsedcode
                                      (0 (iload_2)) 
                                      (1 (iload_1)) 
                                      (2 (invokestatic (methodCP "mask" "clojure.lang.PersistentHashMap" (int int) int))) 
                                      (5 (istore 6)) 
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (11 (iload 6)) 
                                      (13 (aaload)) 
                                      (14 (astore 7)) 
                                      (16 (aload 7)) 
                                      (18 (ifnonnull 60))  ;;to TAG_0
                                      (21 (new (class "clojure.lang.PersistentHashMap$ArrayNode"))) 
                                      (24 (dup)) 
                                      (25 (aconst_null)) 
                                      (26 (aload_0)) 
                                      (27 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int))) 
                                      (30 (iconst_1)) 
                                      (31 (iadd)) 
                                      (32 (aload_0)) 
                                      (33 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (36 (iload 6)) 
                                      (38 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap$BitmapIndexedNode" (class "clojure.lang.PersistentHashMap$BitmapIndexedNode")))) 
                                      (41 (iload_1)) 
                                      (42 (iconst_5)) 
                                      (43 (iadd)) 
                                      (44 (iload_2)) 
                                      (45 (aload_3)) 
                                      (46 (aload 4)) 
                                      (48 (aload 5)) 
                                      (50 (invokevirtual (methodCP "assoc" "clojure.lang.PersistentHashMap$BitmapIndexedNode" (int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (53 (invokestatic (methodCP "access$000" "clojure.lang.PersistentHashMap" ((array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.PersistentHashMap$INode")) (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (56 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.concurrent.atomic.AtomicReference") int (array (class "clojure.lang.PersistentHashMap$INode"))) void))) 
                                      (59 (areturn)) 
                                      (60 (aload 7)) ;;at TAG_0
                                      (62 (iload_1)) 
                                      (63 (iconst_5)) 
                                      (64 (iadd)) 
                                      (65 (iload_2)) 
                                      (66 (aload_3)) 
                                      (67 (aload 4)) 
                                      (69 (aload 5)) 
                                      (71 (invokeinterface (methodCP "assoc" "clojure.lang.PersistentHashMap$INode" (int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")) 6)) 
                                      (76 (astore 8)) 
                                      (78 (aload 8)) 
                                      (80 (aload 7)) 
                                      (82 (if_acmpne 87)) ;;to TAG_1
                                      (85 (aload_0)) 
                                      (86 (areturn)) 
                                      (87 (new (class "clojure.lang.PersistentHashMap$ArrayNode"))) ;;at TAG_1
                                      (90 (dup)) 
                                      (91 (aconst_null)) 
                                      (92 (aload_0)) 
                                      (93 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int))) 
                                      (96 (aload_0)) 
                                      (97 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (100 (iload 6)) 
                                      (102 (aload 8)) 
                                      (104 (invokestatic (methodCP "access$000" "clojure.lang.PersistentHashMap" ((array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.PersistentHashMap$INode")) (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (107 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.concurrent.atomic.AtomicReference") int (array (class "clojure.lang.PersistentHashMap$INode"))) void))) 
                                      (110 (areturn)) 
                                      (endofcode 111))
                                   (Exceptions )
                                   (StackMap )))
                        (method "without"
                              (parameters int int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 7) (code_length . 118)
                                   (parsedcode
                                      (0 (iload_2)) 
                                      (1 (iload_1)) 
                                      (2 (invokestatic (methodCP "mask" "clojure.lang.PersistentHashMap" (int int) int))) 
                                      (5 (istore 4)) 
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (11 (iload 4)) 
                                      (13 (aaload)) 
                                      (14 (astore 5)) 
                                      (16 (aload 5)) 
                                      (18 (ifnonnull 23)) ;;to TAG_0
                                      (21 (aload_0)) 
                                      (22 (areturn)) 
                                      (23 (aload 5)) ;;at TAG_0
                                      (25 (iload_1)) 
                                      (26 (iconst_5)) 
                                      (27 (iadd)) 
                                      (28 (iload_2)) 
                                      (29 (aload_3)) 
                                      (30 (invokeinterface (methodCP "without" "clojure.lang.PersistentHashMap$INode" (int int (class "java.lang.Object")) (class "clojure.lang.PersistentHashMap$INode")) 4)) 
                                      (35 (astore 6)) 
                                      (37 (aload 6)) 
                                      (39 (aload 5)) 
                                      (41 (if_acmpne 46)) ;;to TAG_1
                                      (44 (aload_0)) 
                                      (45 (areturn)) 
                                      (46 (aload 6)) ;;at TAG_1
                                      (48 (ifnonnull 94))  ;;to TAG_2
                                      (51 (aload_0)) 
                                      (52 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int))) 
                                      (55 (bipush 8)) 
                                      (57 (if_icmpgt 68)) ;;to TAG_3
                                      (60 (aload_0)) 
                                      (61 (aconst_null)) 
                                      (62 (iload 4)) 
                                      (64 (invokespecial (methodCP "pack" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.concurrent.atomic.AtomicReference") int) (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (67 (areturn)) 
                                      (68 (new (class "clojure.lang.PersistentHashMap$ArrayNode"))) ;;at TAG_3
                                      (71 (dup)) 
                                      (72 (aconst_null)) 
                                      (73 (aload_0)) 
                                      (74 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int))) 
                                      (77 (iconst_1)) 
                                      (78 (isub)) 
                                      (79 (aload_0)) 
                                      (80 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (83 (iload 4)) 
                                      (85 (aload 6)) 
                                      (87 (invokestatic (methodCP "access$000" "clojure.lang.PersistentHashMap" ((array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.PersistentHashMap$INode")) (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (90 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.concurrent.atomic.AtomicReference") int (array (class "clojure.lang.PersistentHashMap$INode"))) void))) 
                                      (93 (areturn)) 
                                      (94 (new (class "clojure.lang.PersistentHashMap$ArrayNode"))) ;;at TAG_2
                                      (97 (dup)) 
                                      (98 (aconst_null)) 
                                      (99 (aload_0)) 
                                      (100 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int))) 
                                      (103 (aload_0)) 
                                      (104 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (107 (iload 4)) 
                                      (109 (aload 6)) 
                                      (111 (invokestatic (methodCP "access$000" "clojure.lang.PersistentHashMap" ((array (class "clojure.lang.PersistentHashMap$INode")) int (class "clojure.lang.PersistentHashMap$INode")) (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (114 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.concurrent.atomic.AtomicReference") int (array (class "clojure.lang.PersistentHashMap$INode"))) void))) 
                                      (117 (areturn)) 
                                      (endofcode 118))
                                   (Exceptions )
                                   (StackMap )))
                        (method "find"
                              (parameters int int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IMapEntry"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 36)
                                   (parsedcode
                                      (0 (iload_2)) 
                                      (1 (iload_1)) 
                                      (2 (invokestatic (methodCP "mask" "clojure.lang.PersistentHashMap" (int int) int))) 
                                      (5 (istore 4)) 
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (11 (iload 4)) 
                                      (13 (aaload)) 
                                      (14 (astore 5)) 
                                      (16 (aload 5)) 
                                      (18 (ifnonnull 23))  ;;to TAG_0
                                      (21 (aconst_null)) 
                                      (22 (areturn)) 
                                      (23 (aload 5)) ;;at TAG_0
                                      (25 (iload_1)) 
                                      (26 (iconst_5)) 
                                      (27 (iadd)) 
                                      (28 (iload_2)) 
                                      (29 (aload_3)) 
                                      (30 (invokeinterface (methodCP "find" "clojure.lang.PersistentHashMap$INode" (int int (class "java.lang.Object")) (class "clojure.lang.IMapEntry")) 4)) 
                                      (35 (areturn)) 
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap )))
                        (method "find"
                              (parameters int int (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 7) (code_length . 39)
                                   (parsedcode
                                      (0 (iload_2)) 
                                      (1 (iload_1)) 
                                      (2 (invokestatic (methodCP "mask" "clojure.lang.PersistentHashMap" (int int) int))) 
                                      (5 (istore 5)) 
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (11 (iload 5)) 
                                      (13 (aaload)) 
                                      (14 (astore 6)) 
                                      (16 (aload 6)) 
                                      (18 (ifnonnull 24))  ;;to TAG_0
                                      (21 (aload 4)) 
                                      (23 (areturn)) 
                                      (24 (aload 6)) ;;at TAG_0
                                      (26 (iload_1)) 
                                      (27 (iconst_5)) 
                                      (28 (iadd)) 
                                      (29 (iload_2)) 
                                      (30 (aload_3)) 
                                      (31 (aload 4)) 
                                      (33 (invokeinterface (methodCP "find" "clojure.lang.PersistentHashMap$INode" (int int (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (38 (areturn)) 
                                      (endofcode 39))
                                   (Exceptions )
                                   (StackMap )))
                        (method "nodeSeq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode")))))
                                      (4 (invokestatic
					(methodCP "create" "clojure.lang.PersistentHashMap$ArrayNode$Seq" ((array (class "clojure.lang.PersistentHashMap$INode"))) (class "clojure.lang.ISeq"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "kvreduce"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 7) (code_length . 65)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (4 (astore_3)) 
                                      (5 (aload_3)) 
                                      (6 (arraylength)) 
                                      (7 (istore 4)) 
                                      (9 (iconst_0)) 
                                      (10 (istore 5)) 
                                      (12 (iload 5)) ;;at TAG_2
                                      (14 (iload 4)) 
                                      (16 (if_icmpge 63)) ;;to TAG_0
                                      (19 (aload_3)) 
                                      (20 (iload 5)) 
                                      (22 (aaload)) 
                                      (23 (astore 6)) 
                                      (25 (aload 6)) 
                                      (27 (ifnull 57)) ;;to TAG_1
                                      (30 (aload 6)) 
                                      (32 (aload_1)) 
                                      (33 (aload_2)) 
                                      (34 (invokeinterface (methodCP "kvreduce" "clojure.lang.PersistentHashMap$INode" ((class "clojure.lang.IFn") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (39 (astore_2)) 
                                      (40 (aload_2)) 
                                      (41 (invokestatic (methodCP "isReduced" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (44 (ifeq 57)) ;;to TAG_1
                                      (47 (aload_2)) 
                                      (48 (checkcast (class "clojure.lang.IDeref"))) 
                                      (51 (invokeinterface (methodCP "deref" "clojure.lang.IDeref" () (class "java.lang.Object")) 1)) 
                                      (56 (areturn)) 
                                      (57 (iinc 5 1)) ;;at TAG_1
                                      (60 (goto 12))  ;;to TAG_2
                                      (63 (aload_2)) ;;at TAG_0
                                      (64 (areturn)) 
                                      (endofcode 65))
                                   (Exceptions )
                                   (StackMap )))
                        (method "fold"
                              (parameters (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 10) (max_locals . 11) (code_length . 85)
                                   (parsedcode
                                      (0 (new (class "java.util.ArrayList"))) 
                                      (3 (dup)) 
                                      (4 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (7 (astore 6)) 
                                      (9 (aload_0)) 
                                      (10 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (13 (astore 7)) 
                                      (15 (aload 7)) 
                                      (17 (arraylength)) 
                                      (18 (istore 8)) 
                                      (20 (iconst_0)) 
                                      (21 (istore 9)) 
                                      (23 (iload 9)) ;;at TAG_2
                                      (25 (iload 8)) 
                                      (27 (if_icmpge 73)) ;;to TAG_0
                                      (30 (aload 7)) 
                                      (32 (iload 9)) 
                                      (34 (aaload)) 
                                      (35 (astore 10)) 
                                      (37 (aload 10)) 
                                      (39 (ifnull 67)) ;;to TAG_1
                                      (42 (aload 6)) 
                                      (44 (new (class "clojure.lang.PersistentHashMap$ArrayNode$1"))) 
                                      (47 (dup)) 
                                      (48 (aload_0)) 
                                      (49 (aload 10)) 
                                      (51 (aload_1)) 
                                      (52 (aload_2)) 
                                      (53 (aload_3)) 
                                      (54 (aload 4)) 
                                      (56 (aload 5)) 
                                      (58 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$ArrayNode$1" ((class "clojure.lang.PersistentHashMap$ArrayNode") (class "clojure.lang.PersistentHashMap$INode") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn")) void))) 
                                      (61 (invokeinterface (methodCP "add" "java.util.List" ((class "java.lang.Object")) boolean) 2)) 
                                      (66 (pop)) 
                                      (67 (iinc 9 1)) ;;at TAG_1
                                      (70 (goto 23))  ;;to TAG_2
                                      (73 (aload 6)) ;;at TAG_0
                                      (75 (aload_1)) 
                                      (76 (aload_3)) 
                                      (77 (aload 4)) 
                                      (79 (aload 5)) 
                                      (81 (invokestatic (methodCP "foldTasks" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.List") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn")) (class "java.lang.Object")))) 
                                      (84 (areturn)) 
                                      (endofcode 85))
                                   (Exceptions )
                                   (StackMap )))
                        (method "foldTasks"
                              (parameters (class "java.util.List") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 9) (max_locals . 8) (code_length . 140)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokeinterface (methodCP "isEmpty" "java.util.List" () boolean) 1)) 
                                      (6 (ifeq 16)) ;;to TAG_0
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (15 (areturn)) 
                                      (16 (aload_0)) ;;at TAG_0
                                      (17 (invokeinterface (methodCP "size" "java.util.List" () int) 1)) 
                                      (22 (iconst_1)) 
                                      (23 (if_icmpne 47)) ;;to TAG_1
                                      (26 (aconst_null)) 
                                      (27 (astore 5)) 
                                      (29 (aload_0)) ;;at TAG_2
                                      (30 (iconst_0)) 
                                      (31 (invokeinterface (methodCP "get" "java.util.List" (int) (class "java.lang.Object")) 2)) 
                                      (36 (checkcast (class "java.util.concurrent.Callable"))) 
                                      (39 (invokeinterface (methodCP "call" "java.util.concurrent.Callable" () (class "java.lang.Object")) 1)) 
                                      (44 (areturn)) ;;at TAG_3
                                      (45 (astore 6)) ;;at TAG_4
                                      (47 (aload_0)) ;;at TAG_1
                                      (48 (iconst_0)) 
                                      (49 (aload_0)) 
                                      (50 (invokeinterface (methodCP "size" "java.util.List" () int) 1)) 
                                      (55 (iconst_2)) 
                                      (56 (idiv)) 
                                      (57 (invokeinterface (methodCP "subList" "java.util.List" (int int) (class "java.util.List")) 3)) 
                                      (62 (astore 5)) 
                                      (64 (aload_0)) 
                                      (65 (aload_0)) 
                                      (66 (invokeinterface (methodCP "size" "java.util.List" () int) 1)) 
                                      (71 (iconst_2)) 
                                      (72 (idiv)) 
                                      (73 (aload_0)) 
                                      (74 (invokeinterface (methodCP "size" "java.util.List" () int) 1)) 
                                      (79 (invokeinterface (methodCP "subList" "java.util.List" (int int) (class "java.util.List")) 3)) 
                                      (84 (astore 6)) 
                                      (86 (aload_3)) 
                                      (87 (aload_2)) 
                                      (88 (new (class "clojure.lang.PersistentHashMap$ArrayNode$2"))) 
                                      (91 (dup)) 
                                      (92 (aload 6)) 
                                      (94 (aload_1)) 
                                      (95 (aload_2)) 
                                      (96 (aload_3)) 
                                      (97 (aload 4)) 
                                      (99 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$ArrayNode$2" ((class "java.util.List") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn")) void))) 
                                      (102 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (107 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (112 (astore 7)) 
                                      (114 (aload_1)) 
                                      (115 (aload 5)) 
                                      (117 (aload_1)) 
                                      (118 (aload_2)) 
                                      (119 (aload_3)) 
                                      (120 (aload 4)) 
                                      (122 (invokestatic (methodCP "foldTasks" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.List") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn")) (class "java.lang.Object")))) 
                                      (125 (aload 4)) 
                                      (127 (aload 7)) 
                                      (129 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (134 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (139 (areturn)) 
                                      (endofcode 140))
                                   (Exceptions 
                                     (handler 29 44  45 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "ensureEditable"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference"))
                              (returntype . (class "clojure.lang.PersistentHashMap$ArrayNode"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 33)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "edit" "clojure.lang.PersistentHashMap$ArrayNode" (class "java.util.concurrent.atomic.AtomicReference")))) 
                                      (4 (aload_1)) 
                                      (5 (if_acmpne 10))  ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (areturn)) 
                                      (10 (new (class "clojure.lang.PersistentHashMap$ArrayNode"))) ;;at TAG_0
                                      (13 (dup)) 
                                      (14 (aload_1)) 
                                      (15 (aload_0)) 
                                      (16 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int))) 
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (23 (invokevirtual (methodCP "clone" "clojure.lang.PersistentHashMap$INode[]" () (class "java.lang.Object")))) 
                                      (26 (checkcast (array (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (29 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.concurrent.atomic.AtomicReference") int (array (class "clojure.lang.PersistentHashMap$INode"))) void))) 
                                      (32 (areturn)) 
                                      (endofcode 33))
                                   (Exceptions )
                                   (StackMap )))
                        (method "editAndSet"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentHashMap$INode"))
                              (returntype . (class "clojure.lang.PersistentHashMap$ArrayNode"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokespecial
					(methodCP "ensureEditable" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.concurrent.atomic.AtomicReference")) (class "clojure.lang.PersistentHashMap$ArrayNode"))))
                                      (5 (astore 4))
                                      (7 (aload 4))
                                      (9 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode")))))
                                      (12 (iload_2))
                                      (13 (aload_3))
                                      (14 (aastore))
                                      (15 (aload 4))
                                      (17 (areturn))
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "pack"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int)
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 5) (max_locals . 7) (code_length . 132)
                                   (parsedcode
                                      (0 (iconst_2)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int))) 
                                      (5 (iconst_1)) 
                                      (6 (isub)) 
                                      (7 (imul)) 
                                      (8 (anewarray (class "java.lang.Object"))) 
                                      (11 (astore_3)) 
                                      (12 (iconst_1)) 
                                      (13 (istore 4)) 
                                      (15 (iconst_0)) 
                                      (16 (istore 5)) 
                                      (18 (iconst_0)) 
                                      (19 (istore 6)) 
                                      (21 (iload 6)) ;;at TAG_2
                                      (23 (iload_2)) 
                                      (24 (if_icmpge 66)) ;;to TAG_0
                                      (27 (aload_0)) 
                                      (28 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (31 (iload 6)) 
                                      (33 (aaload)) 
                                      (34 (ifnull 60)) ;;to TAG_1
                                      (37 (aload_3)) 
                                      (38 (iload 4)) 
                                      (40 (aload_0)) 
                                      (41 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (44 (iload 6)) 
                                      (46 (aaload)) 
                                      (47 (aastore)) 
                                      (48 (iload 5)) 
                                      (50 (iconst_1)) 
                                      (51 (iload 6)) 
                                      (53 (ishl)) 
                                      (54 (ior)) 
                                      (55 (istore 5)) 
                                      (57 (iinc 4 2)) 
                                      (60 (iinc 6 1)) ;;at TAG_1
                                      (63 (goto 21))  ;;to TAG_2
                                      (66 (iload_2)) ;;at TAG_0
                                      (67 (iconst_1)) 
                                      (68 (iadd)) 
                                      (69 (istore 6)) 
                                      (71 (iload 6)) ;;at TAG_5
                                      (73 (aload_0)) 
                                      (74 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (77 (arraylength)) 
                                      (78 (if_icmpge 120)) ;;to TAG_3
                                      (81 (aload_0)) 
                                      (82 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (85 (iload 6)) 
                                      (87 (aaload)) 
                                      (88 (ifnull 114)) ;;to TAG_4
                                      (91 (aload_3)) 
                                      (92 (iload 4)) 
                                      (94 (aload_0)) 
                                      (95 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (98 (iload 6)) 
                                      (100 (aaload)) 
                                      (101 (aastore)) 
                                      (102 (iload 5)) 
                                      (104 (iconst_1)) 
                                      (105 (iload 6)) 
                                      (107 (ishl)) 
                                      (108 (ior)) 
                                      (109 (istore 5)) 
                                      (111 (iinc 4 2)) 
                                      (114 (iinc 6 1)) ;;at TAG_4
                                      (117 (goto 71)) ;;to TAG_5
                                      (120 (new (class "clojure.lang.PersistentHashMap$BitmapIndexedNode"))) ;;at TAG_3
                                      (123 (dup)) 
                                      (124 (aload_1)) 
                                      (125 (iload 5)) 
                                      (127 (aload_3)) 
                                      (128 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$BitmapIndexedNode" ((class "java.util.concurrent.atomic.AtomicReference") int (array (class "java.lang.Object"))) void))) 
                                      (131 (areturn)) 
                                      (endofcode 132))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 10) (max_locals . 10) (code_length . 100)
                                   (parsedcode
                                      (0 (iload_3)) 
                                      (1 (iload_2)) 
                                      (2 (invokestatic (methodCP "mask" "clojure.lang.PersistentHashMap" (int int) int))) 
                                      (5 (istore 7)) 
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (11 (iload 7)) 
                                      (13 (aaload)) 
                                      (14 (astore 8)) 
                                      (16 (aload 8)) 
                                      (18 (ifnonnull 61))  ;;to TAG_0
                                      (21 (aload_0)) 
                                      (22 (aload_1)) 
                                      (23 (iload 7)) 
                                      (25 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap$BitmapIndexedNode" (class "clojure.lang.PersistentHashMap$BitmapIndexedNode")))) 
                                      (28 (aload_1)) 
                                      (29 (iload_2)) 
                                      (30 (iconst_5)) 
                                      (31 (iadd)) 
                                      (32 (iload_3)) 
                                      (33 (aload 4)) 
                                      (35 (aload 5)) 
                                      (37 (aload 6)) 
                                      (39 (invokevirtual (methodCP "assoc" "clojure.lang.PersistentHashMap$BitmapIndexedNode" ((class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (42 (invokespecial (methodCP "editAndSet" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentHashMap$INode")) (class "clojure.lang.PersistentHashMap$ArrayNode")))) 
                                      (45 (astore 9)) 
                                      (47 (aload 9)) 
                                      (49 (dup)) 
                                      (50 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int))) 
                                      (53 (iconst_1)) 
                                      (54 (iadd)) 
                                      (55 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int))) 
                                      (58 (aload 9)) 
                                      (60 (areturn)) 
                                      (61 (aload 8)) ;;at TAG_0
                                      (63 (aload_1)) 
                                      (64 (iload_2)) 
                                      (65 (iconst_5)) 
                                      (66 (iadd)) 
                                      (67 (iload_3)) 
                                      (68 (aload 4)) 
                                      (70 (aload 5)) 
                                      (72 (aload 6)) 
                                      (74 (invokeinterface (methodCP "assoc" "clojure.lang.PersistentHashMap$INode" ((class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")) 7)) 
                                      (79 (astore 9)) 
                                      (81 (aload 9)) 
                                      (83 (aload 8)) 
                                      (85 (if_acmpne 90)) ;;to TAG_1
                                      (88 (aload_0)) 
                                      (89 (areturn)) 
                                      (90 (aload_0)) ;;at TAG_1
                                      (91 (aload_1)) 
                                      (92 (iload 7)) 
                                      (94 (aload 9)) 
                                      (96 (invokespecial (methodCP "editAndSet" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentHashMap$INode")) (class "clojure.lang.PersistentHashMap$ArrayNode")))) 
                                      (99 (areturn)) 
                                      (endofcode 100))
                                   (Exceptions )
                                   (StackMap )))
                        (method "without"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "clojure.lang.Box"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 10) (code_length . 107)
                                   (parsedcode
                                      (0 (iload_3)) 
                                      (1 (iload_2)) 
                                      (2 (invokestatic (methodCP "mask" "clojure.lang.PersistentHashMap" (int int) int))) 
                                      (5 (istore 6)) 
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$ArrayNode" (array (class "clojure.lang.PersistentHashMap$INode"))))) 
                                      (11 (iload 6)) 
                                      (13 (aaload)) 
                                      (14 (astore 7)) 
                                      (16 (aload 7)) 
                                      (18 (ifnonnull 23)) ;;to TAG_0
                                      (21 (aload_0)) 
                                      (22 (areturn)) 
                                      (23 (aload 7)) ;;at TAG_0
                                      (25 (aload_1)) 
                                      (26 (iload_2)) 
                                      (27 (iconst_5)) 
                                      (28 (iadd)) 
                                      (29 (iload_3)) 
                                      (30 (aload 4)) 
                                      (32 (aload 5)) 
                                      (34 (invokeinterface (methodCP "without" "clojure.lang.PersistentHashMap$INode" ((class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "clojure.lang.Box")) (class "clojure.lang.PersistentHashMap$INode")) 6)) 
                                      (39 (astore 8)) 
                                      (41 (aload 8)) 
                                      (43 (aload 7)) 
                                      (45 (if_acmpne 50)) ;;to TAG_1
                                      (48 (aload_0)) 
                                      (49 (areturn)) 
                                      (50 (aload 8)) ;;at TAG_1
                                      (52 (ifnonnull 97))  ;;to TAG_2
                                      (55 (aload_0)) 
                                      (56 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int))) 
                                      (59 (bipush 8)) 
                                      (61 (if_icmpgt 72)) ;;to TAG_3
                                      (64 (aload_0)) 
                                      (65 (aload_1)) 
                                      (66 (iload 6)) 
                                      (68 (invokespecial (methodCP "pack" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.concurrent.atomic.AtomicReference") int) (class "clojure.lang.PersistentHashMap$INode")))) 
                                      (71 (areturn)) 
                                      (72 (aload_0)) ;;at TAG_3
                                      (73 (aload_1)) 
                                      (74 (iload 6)) 
                                      (76 (aload 8)) 
                                      (78 (invokespecial (methodCP "editAndSet" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentHashMap$INode")) (class "clojure.lang.PersistentHashMap$ArrayNode")))) 
                                      (81 (astore 9)) 
                                      (83 (aload 9)) 
                                      (85 (dup)) 
                                      (86 (getfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int))) 
                                      (89 (iconst_1)) 
                                      (90 (isub)) 
                                      (91 (putfield (fieldCP "count" "clojure.lang.PersistentHashMap$ArrayNode" int))) 
                                      (94 (aload 9)) 
                                      (96 (areturn)) 
                                      (97 (aload_0)) ;;at TAG_2
                                      (98 (aload_1)) 
                                      (99 (iload 6)) 
                                      (101 (aload 8)) 
                                      (103 (invokespecial (methodCP "editAndSet" "clojure.lang.PersistentHashMap$ArrayNode" ((class "java.util.concurrent.atomic.AtomicReference") int (class "clojure.lang.PersistentHashMap$INode")) (class "clojure.lang.PersistentHashMap$ArrayNode")))) 
                                      (106 (areturn)) 
                                      (endofcode 107))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.PersistentHashMap$INode")
            (accessflags  *class*  *final*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentHashMap$ArrayNode-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentHashMap$ArrayNode*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentHashMap$ArrayNode" . "clojure.lang"))

