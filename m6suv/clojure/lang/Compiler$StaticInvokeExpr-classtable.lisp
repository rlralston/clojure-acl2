; Compiler$StaticInvokeExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.Compiler$StaticInvokeExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$StaticInvokeExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Can\nt eval StaticInvokeExpr")
                        (STRING  "invokeStatic")
                        (STRING  "clojure.lang.ArraySeq create(Object[])")
                        (STRING  "Can\nt call static fn with no arglists: ")
                        (STRING  "Expected vector arglist, had: ")
                        (STRING  "Invalid arity - can\nt call: ")
                        (STRING  " with ")
                        (STRING  " args")
                        (STRING  "$"))
            (fields
                        (field "target" (class "clojure.asm.Type") (accessflags  *class*  *final*  *public* ) -1)
                        (field "retClass" (class "java.lang.Class") (accessflags  *class*  *final*  *public* ) -1)
                        (field "paramclasses" (array (class "java.lang.Class")) (accessflags  *class*  *final*  *public* ) -1)
                        (field "paramtypes" (array (class "clojure.asm.Type")) (accessflags  *class*  *final*  *public* ) -1)
                        (field "args" (class "clojure.lang.IPersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "variadic" boolean (accessflags  *class*  *final*  *public* ) -1)
                        (field "tag" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *public* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.asm.Type") (class "java.lang.Class") (array (class "java.lang.Class")) (array (class "clojure.asm.Type")) boolean (class "clojure.lang.IPersistentVector") (class "clojure.lang.Symbol"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 8) (code_length . 44)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "target" "clojure.lang.Compiler$StaticInvokeExpr" (class "clojure.asm.Type"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "retClass" "clojure.lang.Compiler$StaticInvokeExpr" (class "java.lang.Class"))))
                                      (14 (aload_0))
                                      (15 (aload_3))
                                      (16 (putfield (fieldCP "paramclasses" "clojure.lang.Compiler$StaticInvokeExpr" (array (class "java.lang.Class")))))
                                      (19 (aload_0))
                                      (20 (aload 4))
                                      (22 (putfield (fieldCP "paramtypes" "clojure.lang.Compiler$StaticInvokeExpr" (array (class "clojure.asm.Type")))))
                                      (25 (aload_0))
                                      (26 (aload 6))
                                      (28 (putfield (fieldCP "args" "clojure.lang.Compiler$StaticInvokeExpr" (class "clojure.lang.IPersistentVector"))))
                                      (31 (aload_0))
                                      (32 (iload 5))
                                      (34 (putfield (fieldCP "variadic" "clojure.lang.Compiler$StaticInvokeExpr" boolean)))
                                      (37 (aload_0))
                                      (38 (aload 7))
                                      (40 (putfield (fieldCP "tag" "clojure.lang.Compiler$StaticInvokeExpr" (class "clojure.lang.Symbol"))))
                                      (43 (return))
                                      (endofcode 44))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (ldc 0))         ;;STRING:: "Can\nt eval StaticInvokeExpr"
                                      (6 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void)))
                                      (9 (athrow))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 62)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (aload_2)) 
                                      (3 (aload_3)) 
                                      (4 (invokevirtual (methodCP "emitUnboxed" "clojure.lang.Compiler$StaticInvokeExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (7 (aload_1)) 
                                      (8 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (11 (if_acmpeq 23)) ;;to TAG_0
                                      (14 (aload_2)) 
                                      (15 (aload_3)) 
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "retClass" "clojure.lang.Compiler$StaticInvokeExpr" (class "java.lang.Class")))) 
                                      (20 (invokestatic (methodCP "emitBoxReturn" "clojure.lang.Compiler$HostExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class")) void))) 
                                      (23 (aload_1)) ;;at TAG_0
                                      (24 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (27 (if_acmpne 61)) ;;to TAG_1
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "retClass" "clojure.lang.Compiler$StaticInvokeExpr" (class "java.lang.Class")))) 
                                      (34 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (37 (if_acmpeq 50))  ;;to TAG_2
                                      (40 (aload_0)) 
                                      (41 (getfield (fieldCP "retClass" "clojure.lang.Compiler$StaticInvokeExpr" (class "java.lang.Class")))) 
                                      (44 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (47 (if_acmpne 57)) ;;to TAG_3
                                      (50 (aload_3)) ;;at TAG_2
                                      (51 (invokevirtual (methodCP "pop2" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (54 (goto 61)) ;;to TAG_1
                                      (57 (aload_3)) ;;at TAG_3
                                      (58 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (61 (return)) ;;at TAG_1
                                      (endofcode 62))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tag" "clojure.lang.Compiler$StaticInvokeExpr" (class "clojure.lang.Symbol")))) 
                                      (4 (ifnull 17))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "tag" "clojure.lang.Compiler$StaticInvokeExpr" (class "clojure.lang.Symbol")))) 
                                      (11 (invokestatic (methodCP "tagToClass" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (14 (goto 21)) ;;to TAG_1
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (getfield (fieldCP "retClass" "clojure.lang.Compiler$StaticInvokeExpr" (class "java.lang.Class")))) 
                                      (21 (areturn)) ;;at TAG_1
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "canEmitPrimitive"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "retClass" "clojure.lang.Compiler$StaticInvokeExpr" (class "java.lang.Class"))))
                                      (4 (invokevirtual
					(methodCP "isPrimitive" "java.lang.Class" () boolean)))
                                      (7 (ireturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitUnboxed"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 8) (code_length . 205)
                                   (parsedcode
                                      (0 (new (class "clojure.asm.commons.Method"))) 
                                      (3 (dup)) 
                                      (4 (ldc 1)) ;;STRING:: "invokeStatic"
                                      (6 (aload_0)) 
                                      (7 (invokespecial (methodCP "getReturnType" "clojure.lang.Compiler$StaticInvokeExpr" () (class "clojure.asm.Type")))) 
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "paramtypes" "clojure.lang.Compiler$StaticInvokeExpr" (array (class "clojure.asm.Type"))))) 
                                      (14 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (17 (astore 4)) 
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "variadic" "clojure.lang.Compiler$StaticInvokeExpr" boolean))) 
                                      (23 (ifeq 181)) ;;to TAG_0
                                      (26 (iconst_0)) 
                                      (27 (istore 5)) 
                                      (29 (iload 5)) ;;at TAG_5
                                      (31 (aload_0)) 
                                      (32 (getfield (fieldCP "paramclasses" "clojure.lang.Compiler$StaticInvokeExpr" (array (class "java.lang.Class"))))) 
                                      (35 (arraylength)) 
                                      (36 (iconst_1)) 
                                      (37 (isub)) 
                                      (38 (if_icmpge 131))  ;;to TAG_1
                                      (41 (aload_0)) 
                                      (42 (getfield (fieldCP "args" "clojure.lang.Compiler$StaticInvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (45 (iload 5)) 
                                      (47 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (52 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (55 (astore 6)) 
                                      (57 (aload 6)) ;;at TAG_7
                                      (59 (invokestatic (methodCP "maybePrimitiveType" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$Expr")) (class "java.lang.Class")))) 
                                      (62 (aload_0)) 
                                      (63 (getfield (fieldCP "paramclasses" "clojure.lang.Compiler$StaticInvokeExpr" (array (class "java.lang.Class"))))) 
                                      (66 (iload 5)) 
                                      (68 (aaload)) 
                                      (69 (if_acmpne 90)) ;;to TAG_2
                                      (72 (aload 6)) 
                                      (74 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (77 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (80 (aload_2)) 
                                      (81 (aload_3)) 
                                      (82 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (87 (goto 114)) ;;to TAG_3
                                      (90 (aload 6)) ;;at TAG_2
                                      (92 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (95 (aload_2)) 
                                      (96 (aload_3)) 
                                      (97 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (102 (aload_2)) 
                                      (103 (aload_3)) 
                                      (104 (aload_0)) 
                                      (105 (getfield (fieldCP "paramclasses" "clojure.lang.Compiler$StaticInvokeExpr" (array (class "java.lang.Class"))))) 
                                      (108 (iload 5)) 
                                      (110 (aaload)) 
                                      (111 (invokestatic (methodCP "emitUnboxArg" "clojure.lang.Compiler$HostExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class")) void))) 
                                      (114 (goto 125)) ;;to TAG_4;;at TAG_3
                                      (117 (astore 7)) ;;at TAG_8
                                      (119 (aload 7)) 
                                      (121 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (124 (athrow)) 
                                      (125 (iinc 5 1)) ;;at TAG_4
                                      (128 (goto 29)) ;;to TAG_5
                                      (131 (aload_0)) ;;at TAG_1
                                      (132 (getfield (fieldCP "args" "clojure.lang.Compiler$StaticInvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (135 (aload_0)) 
                                      (136 (getfield (fieldCP "paramclasses" "clojure.lang.Compiler$StaticInvokeExpr" (array (class "java.lang.Class"))))) 
                                      (139 (arraylength)) 
                                      (140 (iconst_1)) 
                                      (141 (isub)) 
                                      (142 (aload_0)) 
                                      (143 (getfield (fieldCP "args" "clojure.lang.Compiler$StaticInvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (146 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (151 (invokestatic (methodCP "subvec" "clojure.lang.RT" ((class "clojure.lang.IPersistentVector") int int) (class "clojure.lang.IPersistentVector")))) 
                                      (154 (astore 5)) 
                                      (156 (aload 5)) 
                                      (158 (aload_2)) 
                                      (159 (aload_3)) 
                                      (160 (invokestatic (methodCP "emitArgsAsArray" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.IPersistentVector") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (163 (aload_3)) 
                                      (164 (ldc_w )) 
                                      (167 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (170 (ldc 2)) ;;STRING:: "clojure.lang.ArraySeq create(Object[])"
                                      (172 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (175 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (178 (goto 194)) ;;to TAG_6
                                      (181 (aload_2)) ;;at TAG_0
                                      (182 (aload_3)) 
                                      (183 (aload_0)) 
                                      (184 (getfield (fieldCP "paramclasses" "clojure.lang.Compiler$StaticInvokeExpr" (array (class "java.lang.Class"))))) 
                                      (187 (aload_0)) 
                                      (188 (getfield (fieldCP "args" "clojure.lang.Compiler$StaticInvokeExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (191 (invokestatic (methodCP "emitTypedArgs" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (array (class "java.lang.Class")) (class "clojure.lang.IPersistentVector")) void))) 
                                      (194 (aload_3)) ;;at TAG_6
                                      (195 (aload_0)) 
                                      (196 (getfield (fieldCP "target" "clojure.lang.Compiler$StaticInvokeExpr" (class "clojure.asm.Type")))) 
                                      (199 (aload 4)) 
                                      (201 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (204 (return)) 
                                      (endofcode 205))
                                   (Exceptions 
                                     (handler 57 114  117 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "getReturnType"
                              (parameters )
                              (returntype . (class "clojure.asm.Type"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "retClass" "clojure.lang.Compiler$StaticInvokeExpr" (class "java.lang.Class"))))
                                      (4 (invokestatic
					(methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Var") (class "clojure.lang.ISeq") (class "clojure.lang.Symbol"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 9) (max_locals . 14) (code_length . 596)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "meta" "clojure.lang.Var" () (class "clojure.lang.IPersistentMap")))) 
                                      (4 (getstatic (fieldCP "arglistsKey" "clojure.lang.Compiler" (class "clojure.lang.Keyword")))) 
                                      (7 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (10 (checkcast (class "clojure.lang.IPersistentCollection"))) 
                                      (13 (astore_3)) 
                                      (14 (aload_3)) 
                                      (15 (ifnonnull 45)) ;;to TAG_0
                                      (18 (new (class "java.lang.IllegalStateException"))) 
                                      (21 (dup)) 
                                      (22 (new (class "java.lang.StringBuilder"))) 
                                      (25 (dup)) 
                                      (26 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (29 (ldc 3)) ;;STRING:: "Can\nt call static fn with no arglists: "
                                      (31 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (34 (aload_0)) 
                                      (35 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (38 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (41 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (44 (athrow)) 
                                      (45 (aconst_null)) ;;at TAG_0
                                      (46 (astore 4)) 
                                      (48 (aload_1)) 
                                      (49 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (52 (istore 5)) 
                                      (54 (iconst_0)) 
                                      (55 (istore 6)) 
                                      (57 (aload_3)) 
                                      (58 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (61 (astore 7)) 
                                      (63 (aload 7)) ;;at TAG_5
                                      (65 (ifnull 220))  ;;to TAG_1
                                      (68 (aload 7)) 
                                      (70 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (75 (instanceof (class "clojure.lang.IPersistentVector"))) 
                                      (78 (ifne 114)) ;;to TAG_2
                                      (81 (new (class "java.lang.IllegalStateException"))) 
                                      (84 (dup)) 
                                      (85 (new (class "java.lang.StringBuilder"))) 
                                      (88 (dup)) 
                                      (89 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (92 (ldc 4)) ;;STRING:: "Expected vector arglist, had: "
                                      (94 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (97 (aload 7)) 
                                      (99 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (104 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (107 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (110 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (113 (athrow)) 
                                      (114 (aload 7)) ;;at TAG_2
                                      (116 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (121 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (124 (astore 8)) 
                                      (126 (aload 8)) 
                                      (128 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (133 (iconst_1)) 
                                      (134 (if_icmple 186)) ;;to TAG_3
                                      (137 (aload 8)) 
                                      (139 (aload 8)) 
                                      (141 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (146 (iconst_2)) 
                                      (147 (isub)) 
                                      (148 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (153 (getstatic (fieldCP "_AMP_" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (156 (invokevirtual (methodCP "equals" "java.lang.Object" ((class "java.lang.Object")) boolean))) 
                                      (159 (ifeq 186)) ;;to TAG_3
                                      (162 (iload 5)) 
                                      (164 (aload 8)) 
                                      (166 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (171 (iconst_2)) 
                                      (172 (isub)) 
                                      (173 (if_icmplt 208)) ;;to TAG_4
                                      (176 (aload 8)) 
                                      (178 (astore 4)) 
                                      (180 (iconst_1)) 
                                      (181 (istore 6)) 
                                      (183 (goto 208)) ;;to TAG_4
                                      (186 (aload 8)) ;;at TAG_3
                                      (188 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (193 (iload 5)) 
                                      (195 (if_icmpne 208)) ;;to TAG_4
                                      (198 (aload 8)) 
                                      (200 (astore 4)) 
                                      (202 (iconst_0)) 
                                      (203 (istore 6)) 
                                      (205 (goto 220))  ;;to TAG_1
                                      (208 (aload 7)) ;;at TAG_4
                                      (210 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (215 (astore 7)) 
                                      (217 (goto 63)) ;;to TAG_5
                                      (220 (aload 4)) ;;at TAG_1
                                      (222 (ifnonnull 267)) ;;to TAG_6
                                      (225 (new (class "java.lang.IllegalArgumentException"))) 
                                      (228 (dup)) 
                                      (229 (new (class "java.lang.StringBuilder"))) 
                                      (232 (dup)) 
                                      (233 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (236 (ldc 5)) ;;STRING:: "Invalid arity - can\nt call: "
                                      (238 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (241 (aload_0)) 
                                      (242 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (245 (ldc 6)) ;;STRING:: " with "
                                      (247 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (250 (iload 5)) 
                                      (252 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (255 (ldc 7)) ;;STRING:: " args"
                                      (257 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (260 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (263 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (266 (athrow)) 
                                      (267 (aload 4)) ;;at TAG_6
                                      (269 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (272 (invokestatic (methodCP "tagClass" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (275 (astore 7)) 
                                      (277 (new (class "java.util.ArrayList"))) 
                                      (280 (dup)) 
                                      (281 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (284 (astore 8)) 
                                      (286 (new (class "java.util.ArrayList"))) 
                                      (289 (dup)) 
                                      (290 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (293 (astore 9)) 
                                      (295 (iload 6)) 
                                      (297 (ifeq 383)) ;;to TAG_7
                                      (300 (iconst_0)) 
                                      (301 (istore 10)) 
                                      (303 (iload 10)) ;;at TAG_9
                                      (305 (aload 4)) 
                                      (307 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (312 (iconst_2)) 
                                      (313 (isub)) 
                                      (314 (if_icmpge 359)) ;;to TAG_8
                                      (317 (aload 4)) 
                                      (319 (iload 10)) 
                                      (321 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (326 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (329 (invokestatic (methodCP "tagClass" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (332 (astore 11)) 
                                      (334 (aload 8)) 
                                      (336 (aload 11)) 
                                      (338 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (341 (pop)) 
                                      (342 (aload 9)) 
                                      (344 (aload 11)) 
                                      (346 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (349 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (352 (pop)) 
                                      (353 (iinc 10 1)) 
                                      (356 (goto 303)) ;;to TAG_9
                                      (359 (aload 8)) ;;at TAG_8
                                      (361 (ldc_w )) 
                                      (364 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (367 (pop)) 
                                      (368 (aload 9)) 
                                      (370 (ldc_w )) 
                                      (373 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (376 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (379 (pop)) 
                                      (380 (goto 435)) ;;to TAG_10
                                      (383 (iconst_0)) ;;at TAG_7
                                      (384 (istore 10)) 
                                      (386 (iload 10)) ;;at TAG_11
                                      (388 (iload 5)) 
                                      (390 (if_icmpge 435)) ;;to TAG_10
                                      (393 (aload 4)) 
                                      (395 (iload 10)) 
                                      (397 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (402 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (405 (invokestatic (methodCP "tagClass" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (408 (astore 11)) 
                                      (410 (aload 8)) 
                                      (412 (aload 11)) 
                                      (414 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (417 (pop)) 
                                      (418 (aload 9)) 
                                      (420 (aload 11)) 
                                      (422 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (425 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (428 (pop)) 
                                      (429 (iinc 10 1)) 
                                      (432 (goto 386)) ;;to TAG_11
                                      (435 (new (class "java.lang.StringBuilder"))) ;;at TAG_10
                                      (438 (dup)) 
                                      (439 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (442 (aload_0)) 
                                      (443 (getfield (fieldCP "ns" "clojure.lang.Var" (class "clojure.lang.Namespace")))) 
                                      (446 (getfield (fieldCP "name" "clojure.lang.Namespace" (class "clojure.lang.Symbol")))) 
                                      (449 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (452 (bipush 46)) 
                                      (454 (bipush 47)) 
                                      (456 (invokevirtual (methodCP "replace" "java.lang.String" (char char) (class "java.lang.String")))) 
                                      (459 (bipush 45)) 
                                      (461 (bipush 95)) 
                                      (463 (invokevirtual (methodCP "replace" "java.lang.String" (char char) (class "java.lang.String")))) 
                                      (466 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (469 (ldc 8)) ;;STRING:: "$"
                                      (471 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (474 (aload_0)) 
                                      (475 (getfield (fieldCP "sym" "clojure.lang.Var" (class "clojure.lang.Symbol")))) 
                                      (478 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (481 (invokestatic (methodCP "munge" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (484 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (487 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (490 (astore 10)) 
                                      (492 (aload 10)) 
                                      (494 (invokestatic (methodCP "getObjectType" "clojure.asm.Type" ((class "java.lang.String")) (class "clojure.asm.Type")))) 
                                      (497 (astore 11)) 
                                      (499 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (502 (astore 12)) 
                                      (504 (aload_1)) 
                                      (505 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (508 (astore 13)) 
                                      (510 (aload 13)) ;;at TAG_13
                                      (512 (ifnull 547)) ;;to TAG_12
                                      (515 (aload 12)) 
                                      (517 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (520 (aload 13)) 
                                      (522 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (527 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (530 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (533 (astore 12)) 
                                      (535 (aload 13)) 
                                      (537 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (542 (astore 13)) 
                                      (544 (goto 510)) ;;to TAG_13
                                      (547 (new (class "clojure.lang.Compiler$StaticInvokeExpr"))) ;;at TAG_12
                                      (550 (dup)) 
                                      (551 (aload 11)) 
                                      (553 (aload 7)) 
                                      (555 (aload 8)) 
                                      (557 (aload 8)) 
                                      (559 (invokevirtual (methodCP "size" "java.util.ArrayList" () int))) 
                                      (562 (anewarray (class "java.lang.Class"))) 
                                      (565 (invokevirtual (methodCP "toArray" "java.util.ArrayList" ((array (class "java.lang.Object"))) (array (class "java.lang.Object"))))) 
                                      (568 (checkcast (array (class "java.lang.Class")))) 
                                      (571 (aload 9)) 
                                      (573 (aload 9)) 
                                      (575 (invokevirtual (methodCP "size" "java.util.ArrayList" () int))) 
                                      (578 (anewarray (class "clojure.asm.Type"))) 
                                      (581 (invokevirtual (methodCP "toArray" "java.util.ArrayList" ((array (class "java.lang.Object"))) (array (class "java.lang.Object"))))) 
                                      (584 (checkcast (array (class "clojure.asm.Type")))) 
                                      (587 (iload 6)) 
                                      (589 (aload 12)) 
                                      (591 (aload_2)) 
                                      (592 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$StaticInvokeExpr" ((class "clojure.asm.Type") (class "java.lang.Class") (array (class "java.lang.Class")) (array (class "clojure.asm.Type")) boolean (class "clojure.lang.IPersistentVector") (class "clojure.lang.Symbol")) void))) 
                                      (595 (areturn)) 
                                      (endofcode 596))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr" "clojure.lang.Compiler$MaybePrimitiveExpr")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$StaticInvokeExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$StaticInvokeExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$StaticInvokeExpr" . "clojure.lang"))

