; ArraySeq-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.ArraySeq*
 (make-class-def
      '(class "clojure.lang.ArraySeq"
            "clojure.lang.ASeq"
            (constant_pool)
            (fields
                        (field "array" (class "java.lang.Object") (accessflags  *class*  *final*  *public* ) -1)
                        (field "i" int (accessflags  *class*  *final* ) -1)
                        (field "oa" (array (class "java.lang.Object")) (accessflags  *class*  *final* ) -1)
                        (field "ct" (class "java.lang.Class") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "create"
                              (parameters )
                              (returntype . (class "clojure.lang.ArraySeq"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 2)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (areturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (class "clojure.lang.ArraySeq"))
                              (accessflags  *class*  *public*  *static*  *transient* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnull 9))  ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (arraylength)) 
                                      (6 (ifne 11)) ;;to TAG_1
                                      (9 (aconst_null)) ;;at TAG_0
                                      (10 (areturn)) 
                                      (11 (new (class "clojure.lang.ArraySeq"))) ;;at TAG_1
                                      (14 (dup)) 
                                      (15 (aload_0)) 
                                      (16 (iconst_0)) 
                                      (17 (invokespecial (methodCP "<init>" "clojure.lang.ArraySeq" ((class "java.lang.Object") int) void))) 
                                      (20 (areturn)) 
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "createFromObject"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 196)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ifnull 11)) ;;to TAG_0
                                      (4 (aload_0)) 
                                      (5 (invokestatic (methodCP "getLength" "java.lang.reflect.Array" ((class "java.lang.Object")) int))) 
                                      (8 (ifne 13))  ;;to TAG_1
                                      (11 (aconst_null)) ;;at TAG_0
                                      (12 (areturn)) 
                                      (13 (aload_0)) ;;at TAG_1
                                      (14 (invokevirtual (methodCP "getClass" "java.lang.Object" () (class "java.lang.Class")))) 
                                      (17 (astore_1)) 
                                      (18 (aload_1)) 
                                      (19 (ldc_w )) 
                                      (22 (if_acmpne 42)) ;;to TAG_2
                                      (25 (new (class "clojure.lang.ArraySeq$ArraySeq_int"))) 
                                      (28 (dup)) 
                                      (29 (aconst_null)) 
                                      (30 (aload_0)) 
                                      (31 (checkcast (array int))) 
                                      (34 (checkcast (array int))) 
                                      (37 (iconst_0)) 
                                      (38 (invokespecial (methodCP "<init>" "clojure.lang.ArraySeq$ArraySeq_int" ((class "clojure.lang.IPersistentMap") (array int) int) void))) 
                                      (41 (areturn)) 
                                      (42 (aload_1)) ;;at TAG_2
                                      (43 (ldc_w )) 
                                      (46 (if_acmpne 66)) ;;to TAG_3
                                      (49 (new (class "clojure.lang.ArraySeq$ArraySeq_float"))) 
                                      (52 (dup)) 
                                      (53 (aconst_null)) 
                                      (54 (aload_0)) 
                                      (55 (checkcast (array float))) 
                                      (58 (checkcast (array float))) 
                                      (61 (iconst_0)) 
                                      (62 (invokespecial (methodCP "<init>" "clojure.lang.ArraySeq$ArraySeq_float" ((class "clojure.lang.IPersistentMap") (array float) int) void))) 
                                      (65 (areturn)) 
                                      (66 (aload_1)) ;;at TAG_3
                                      (67 (ldc_w )) 
                                      (70 (if_acmpne 90)) ;;to TAG_4
                                      (73 (new (class "clojure.lang.ArraySeq$ArraySeq_double"))) 
                                      (76 (dup)) 
                                      (77 (aconst_null)) 
                                      (78 (aload_0)) 
                                      (79 (checkcast (array double))) 
                                      (82 (checkcast (array double))) 
                                      (85 (iconst_0)) 
                                      (86 (invokespecial (methodCP "<init>" "clojure.lang.ArraySeq$ArraySeq_double" ((class "clojure.lang.IPersistentMap") (array double) int) void))) 
                                      (89 (areturn)) 
                                      (90 (aload_1)) ;;at TAG_4
                                      (91 (ldc_w )) 
                                      (94 (if_acmpne 114)) ;;to TAG_5
                                      (97 (new (class "clojure.lang.ArraySeq$ArraySeq_long"))) 
                                      (100 (dup)) 
                                      (101 (aconst_null)) 
                                      (102 (aload_0)) 
                                      (103 (checkcast (array long))) 
                                      (106 (checkcast (array long))) 
                                      (109 (iconst_0)) 
                                      (110 (invokespecial (methodCP "<init>" "clojure.lang.ArraySeq$ArraySeq_long" ((class "clojure.lang.IPersistentMap") (array long) int) void))) 
                                      (113 (areturn)) 
                                      (114 (aload_1)) ;;at TAG_5
                                      (115 (ldc_w )) 
                                      (118 (if_acmpne 138)) ;;to TAG_6
                                      (121 (new (class "clojure.lang.ArraySeq$ArraySeq_byte"))) 
                                      (124 (dup)) 
                                      (125 (aconst_null)) 
                                      (126 (aload_0)) 
                                      (127 (checkcast (array byte))) 
                                      (130 (checkcast (array byte))) 
                                      (133 (iconst_0)) 
                                      (134 (invokespecial (methodCP "<init>" "clojure.lang.ArraySeq$ArraySeq_byte" ((class "clojure.lang.IPersistentMap") (array byte) int) void))) 
                                      (137 (areturn)) 
                                      (138 (aload_1)) ;;at TAG_6
                                      (139 (ldc_w )) 
                                      (142 (if_acmpne 162)) ;;to TAG_7
                                      (145 (new (class "clojure.lang.ArraySeq$ArraySeq_char"))) 
                                      (148 (dup)) 
                                      (149 (aconst_null)) 
                                      (150 (aload_0)) 
                                      (151 (checkcast (array char))) 
                                      (154 (checkcast (array char))) 
                                      (157 (iconst_0)) 
                                      (158 (invokespecial (methodCP "<init>" "clojure.lang.ArraySeq$ArraySeq_char" ((class "clojure.lang.IPersistentMap") (array char) int) void))) 
                                      (161 (areturn)) 
                                      (162 (aload_1)) ;;at TAG_7
                                      (163 (ldc_w )) 
                                      (166 (if_acmpne 186)) ;;to TAG_8
                                      (169 (new (class "clojure.lang.ArraySeq$ArraySeq_boolean"))) 
                                      (172 (dup)) 
                                      (173 (aconst_null)) 
                                      (174 (aload_0)) 
                                      (175 (checkcast (array boolean))) 
                                      (178 (checkcast (array boolean))) 
                                      (181 (iconst_0)) 
                                      (182 (invokespecial (methodCP "<init>" "clojure.lang.ArraySeq$ArraySeq_boolean" ((class "clojure.lang.IPersistentMap") (array boolean) int) void))) 
                                      (185 (areturn)) 
                                      (186 (new (class "clojure.lang.ArraySeq"))) ;;at TAG_8
                                      (189 (dup)) 
                                      (190 (aload_0)) 
                                      (191 (iconst_0)) 
                                      (192 (invokespecial (methodCP "<init>" "clojure.lang.ArraySeq" ((class "java.lang.Object") int) void))) 
                                      (195 (areturn)) 
                                      (endofcode 196))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object") int)
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 45)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "<init>" "clojure.lang.ASeq" () void))) 
                                      (4 (aload_0)) 
                                      (5 (aload_1)) 
                                      (6 (putfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (9 (aload_0)) 
                                      (10 (aload_1)) 
                                      (11 (invokevirtual (methodCP "getClass" "java.lang.Object" () (class "java.lang.Class")))) 
                                      (14 (invokevirtual (methodCP "getComponentType" "java.lang.Class" () (class "java.lang.Class")))) 
                                      (17 (putfield (fieldCP "ct" "clojure.lang.ArraySeq" (class "java.lang.Class")))) 
                                      (20 (aload_0)) 
                                      (21 (iload_2)) 
                                      (22 (putfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (25 (aload_0)) 
                                      (26 (aload_1)) 
                                      (27 (instanceof (array (class "java.lang.Object")))) 
                                      (30 (ifeq 37))  ;;to TAG_0
                                      (33 (aload_1)) 
                                      (34 (goto 38)) ;;to TAG_1
                                      (37 (aconst_null)) ;;at TAG_0
                                      (38 (checkcast (array (class "java.lang.Object")))) ;;at TAG_1
                                      (41 (putfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (44 (return)) 
                                      (endofcode 45))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (class "java.lang.Object") int)
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 46)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (invokespecial (methodCP "<init>" "clojure.lang.ASeq" ((class "clojure.lang.IPersistentMap")) void))) 
                                      (5 (aload_0)) 
                                      (6 (aload_2)) 
                                      (7 (putfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (10 (aload_0)) 
                                      (11 (aload_2)) 
                                      (12 (invokevirtual (methodCP "getClass" "java.lang.Object" () (class "java.lang.Class")))) 
                                      (15 (invokevirtual (methodCP "getComponentType" "java.lang.Class" () (class "java.lang.Class")))) 
                                      (18 (putfield (fieldCP "ct" "clojure.lang.ArraySeq" (class "java.lang.Class")))) 
                                      (21 (aload_0)) 
                                      (22 (iload_3)) 
                                      (23 (putfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (26 (aload_0)) 
                                      (27 (aload_2)) 
                                      (28 (instanceof (array (class "java.lang.Object")))) 
                                      (31 (ifeq 38))  ;;to TAG_0
                                      (34 (aload_2)) 
                                      (35 (goto 39)) ;;to TAG_1
                                      (38 (aconst_null)) ;;at TAG_0
                                      (39 (checkcast (array (class "java.lang.Object")))) ;;at TAG_1
                                      (42 (putfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (45 (return)) 
                                      (endofcode 46))
                                   (Exceptions )
                                   (StackMap )))
                        (method "first"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 36)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (4 (ifnull 17))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (11 (aload_0)) 
                                      (12 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (15 (aaload)) 
                                      (16 (areturn)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (getfield (fieldCP "ct" "clojure.lang.ArraySeq" (class "java.lang.Class")))) 
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (29 (invokestatic (methodCP "get" "java.lang.reflect.Array" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (32 (invokestatic (methodCP "prepRet" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (35 (areturn)) 
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap )))
                        (method "next"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 1) (code_length . 75)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (4 (ifnull 39))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (11 (iconst_1)) 
                                      (12 (iadd)) 
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (17 (arraylength)) 
                                      (18 (if_icmpge 73)) ;;to TAG_1
                                      (21 (new (class "clojure.lang.ArraySeq"))) 
                                      (24 (dup)) 
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (29 (aload_0)) 
                                      (30 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (33 (iconst_1)) 
                                      (34 (iadd)) 
                                      (35 (invokespecial (methodCP "<init>" "clojure.lang.ArraySeq" ((class "java.lang.Object") int) void))) 
                                      (38 (areturn)) 
                                      (39 (aload_0)) ;;at TAG_0
                                      (40 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (43 (iconst_1)) 
                                      (44 (iadd)) 
                                      (45 (aload_0)) 
                                      (46 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (49 (invokestatic (methodCP "getLength" "java.lang.reflect.Array" ((class "java.lang.Object")) int))) 
                                      (52 (if_icmpge 73)) ;;to TAG_1
                                      (55 (new (class "clojure.lang.ArraySeq"))) 
                                      (58 (dup)) 
                                      (59 (aload_0)) 
                                      (60 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (63 (aload_0)) 
                                      (64 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (67 (iconst_1)) 
                                      (68 (iadd)) 
                                      (69 (invokespecial (methodCP "<init>" "clojure.lang.ArraySeq" ((class "java.lang.Object") int) void))) 
                                      (72 (areturn)) 
                                      (73 (aconst_null)) ;;at TAG_1
                                      (74 (areturn)) 
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 31)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (4 (ifnull 18))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (11 (arraylength)) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (16 (isub)) 
                                      (17 (ireturn)) 
                                      (18 (aload_0)) ;;at TAG_0
                                      (19 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (22 (invokestatic (methodCP "getLength" "java.lang.reflect.Array" ((class "java.lang.Object")) int))) 
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (29 (isub)) 
                                      (30 (ireturn)) 
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap )))
                        (method "index"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.ArraySeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 17)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.ArraySeq")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object"))))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int)))
                                      (13 (invokespecial
					(methodCP "<init>" "clojure.lang.ArraySeq" ((class "clojure.lang.IPersistentMap") (class "java.lang.Object") int) void)))
                                      (16 (areturn))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "reduce"
                              (parameters (class "clojure.lang.IFn"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 123)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (4 (ifnull 55)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (11 (aload_0)) 
                                      (12 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (15 (aaload)) 
                                      (16 (astore_2)) 
                                      (17 (aload_0)) 
                                      (18 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (21 (iconst_1)) 
                                      (22 (iadd)) 
                                      (23 (istore_3)) 
                                      (24 (iload_3)) ;;at TAG_2
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (29 (arraylength)) 
                                      (30 (if_icmpge 53)) ;;to TAG_1
                                      (33 (aload_1)) 
                                      (34 (aload_2)) 
                                      (35 (aload_0)) 
                                      (36 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (39 (iload_3)) 
                                      (40 (aaload)) 
                                      (41 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (46 (astore_2)) 
                                      (47 (iinc 3 1)) 
                                      (50 (goto 24))  ;;to TAG_2
                                      (53 (aload_2)) ;;at TAG_1
                                      (54 (areturn)) 
                                      (55 (aload_0)) ;;at TAG_0
                                      (56 (getfield (fieldCP "ct" "clojure.lang.ArraySeq" (class "java.lang.Class")))) 
                                      (59 (aload_0)) 
                                      (60 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (63 (aload_0)) 
                                      (64 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (67 (invokestatic (methodCP "get" "java.lang.reflect.Array" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (70 (invokestatic (methodCP "prepRet" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (73 (astore_2)) 
                                      (74 (aload_0)) 
                                      (75 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (78 (iconst_1)) 
                                      (79 (iadd)) 
                                      (80 (istore_3)) 
                                      (81 (iload_3)) ;;at TAG_4
                                      (82 (aload_0)) 
                                      (83 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (86 (invokestatic (methodCP "getLength" "java.lang.reflect.Array" ((class "java.lang.Object")) int))) 
                                      (89 (if_icmpge 121)) ;;to TAG_3
                                      (92 (aload_1)) 
                                      (93 (aload_2)) 
                                      (94 (aload_0)) 
                                      (95 (getfield (fieldCP "ct" "clojure.lang.ArraySeq" (class "java.lang.Class")))) 
                                      (98 (aload_0)) 
                                      (99 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (102 (iload_3)) 
                                      (103 (invokestatic (methodCP "get" "java.lang.reflect.Array" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (106 (invokestatic (methodCP "prepRet" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (109 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (114 (astore_2)) 
                                      (115 (iinc 3 1)) 
                                      (118 (goto 81)) ;;to TAG_4
                                      (121 (aload_2)) ;;at TAG_3
                                      (122 (areturn)) 
                                      (endofcode 123))
                                   (Exceptions )
                                   (StackMap )))
                        (method "reduce"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 143)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (4 (ifnull 65)) ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (aload_2)) 
                                      (9 (aload_0)) 
                                      (10 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (17 (aaload)) 
                                      (18 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (23 (astore_3)) 
                                      (24 (aload_0)) 
                                      (25 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (28 (iconst_1)) 
                                      (29 (iadd)) 
                                      (30 (istore 4)) 
                                      (32 (iload 4)) ;;at TAG_2
                                      (34 (aload_0)) 
                                      (35 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (38 (arraylength)) 
                                      (39 (if_icmpge 63)) ;;to TAG_1
                                      (42 (aload_1)) 
                                      (43 (aload_3)) 
                                      (44 (aload_0)) 
                                      (45 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (48 (iload 4)) 
                                      (50 (aaload)) 
                                      (51 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (56 (astore_3)) 
                                      (57 (iinc 4 1)) 
                                      (60 (goto 32))  ;;to TAG_2
                                      (63 (aload_3)) ;;at TAG_1
                                      (64 (areturn)) 
                                      (65 (aload_1)) ;;at TAG_0
                                      (66 (aload_2)) 
                                      (67 (aload_0)) 
                                      (68 (getfield (fieldCP "ct" "clojure.lang.ArraySeq" (class "java.lang.Class")))) 
                                      (71 (aload_0)) 
                                      (72 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (75 (aload_0)) 
                                      (76 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (79 (invokestatic (methodCP "get" "java.lang.reflect.Array" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (82 (invokestatic (methodCP "prepRet" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (85 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (90 (astore_3)) 
                                      (91 (aload_0)) 
                                      (92 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (95 (iconst_1)) 
                                      (96 (iadd)) 
                                      (97 (istore 4)) 
                                      (99 (iload 4)) ;;at TAG_4
                                      (101 (aload_0)) 
                                      (102 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (105 (invokestatic (methodCP "getLength" "java.lang.reflect.Array" ((class "java.lang.Object")) int))) 
                                      (108 (if_icmpge 141)) ;;to TAG_3
                                      (111 (aload_1)) 
                                      (112 (aload_3)) 
                                      (113 (aload_0)) 
                                      (114 (getfield (fieldCP "ct" "clojure.lang.ArraySeq" (class "java.lang.Class")))) 
                                      (117 (aload_0)) 
                                      (118 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (121 (iload 4)) 
                                      (123 (invokestatic (methodCP "get" "java.lang.reflect.Array" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (126 (invokestatic (methodCP "prepRet" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (129 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (134 (astore_3)) 
                                      (135 (iinc 4 1)) 
                                      (138 (goto 99)) ;;to TAG_4
                                      (141 (aload_3)) ;;at TAG_3
                                      (142 (areturn)) 
                                      (endofcode 143))
                                   (Exceptions )
                                   (StackMap )))
                        (method "indexOf"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 105)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (4 (ifnull 50)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (11 (istore_2)) 
                                      (12 (iload_2)) ;;at TAG_3
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (17 (arraylength)) 
                                      (18 (if_icmpge 47)) ;;to TAG_1
                                      (21 (aload_1)) 
                                      (22 (aload_0)) 
                                      (23 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (26 (iload_2)) 
                                      (27 (aaload)) 
                                      (28 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (31 (ifeq 41))  ;;to TAG_2
                                      (34 (iload_2)) 
                                      (35 (aload_0)) 
                                      (36 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (39 (isub)) 
                                      (40 (ireturn)) 
                                      (41 (iinc 2 1)) ;;at TAG_2
                                      (44 (goto 12)) ;;to TAG_3
                                      (47 (goto 103)) ;;to TAG_4;;at TAG_1
                                      (50 (aload_0)) ;;at TAG_0
                                      (51 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (54 (invokestatic (methodCP "getLength" "java.lang.reflect.Array" ((class "java.lang.Object")) int))) 
                                      (57 (istore_2)) 
                                      (58 (aload_0)) 
                                      (59 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (62 (istore_3)) 
                                      (63 (iload_3)) ;;at TAG_6
                                      (64 (iload_2)) 
                                      (65 (if_icmpge 103)) ;;to TAG_4
                                      (68 (aload_1)) 
                                      (69 (aload_0)) 
                                      (70 (getfield (fieldCP "ct" "clojure.lang.ArraySeq" (class "java.lang.Class")))) 
                                      (73 (aload_0)) 
                                      (74 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (77 (iload_3)) 
                                      (78 (invokestatic (methodCP "get" "java.lang.reflect.Array" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (81 (invokestatic (methodCP "prepRet" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (84 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (87 (ifeq 97)) ;;to TAG_5
                                      (90 (iload_3)) 
                                      (91 (aload_0)) 
                                      (92 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (95 (isub)) 
                                      (96 (ireturn)) 
                                      (97 (iinc 3 1)) ;;at TAG_5
                                      (100 (goto 63)) ;;to TAG_6
                                      (103 (iconst_m1)) ;;at TAG_4
                                      (104 (ireturn)) 
                                      (endofcode 105))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lastIndexOf"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 208)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (4 (ifnull 97)) ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (ifnonnull 52))  ;;to TAG_1
                                      (11 (aload_0)) 
                                      (12 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (15 (arraylength)) 
                                      (16 (iconst_1)) 
                                      (17 (isub)) 
                                      (18 (istore_2)) 
                                      (19 (iload_2)) ;;at TAG_4
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (24 (if_icmplt 49)) ;;to TAG_2
                                      (27 (aload_0)) 
                                      (28 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (31 (iload_2)) 
                                      (32 (aaload)) 
                                      (33 (ifnonnull 43)) ;;to TAG_3
                                      (36 (iload_2)) 
                                      (37 (aload_0)) 
                                      (38 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (41 (isub)) 
                                      (42 (ireturn)) 
                                      (43 (iinc 2 -1)) ;;at TAG_3
                                      (46 (goto 19)) ;;to TAG_4
                                      (49 (goto 206)) ;;to TAG_5;;at TAG_2
                                      (52 (aload_0)) ;;at TAG_1
                                      (53 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (56 (arraylength)) 
                                      (57 (iconst_1)) 
                                      (58 (isub)) 
                                      (59 (istore_2)) 
                                      (60 (iload_2)) ;;at TAG_8
                                      (61 (aload_0)) 
                                      (62 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (65 (if_icmplt 94)) ;;to TAG_6
                                      (68 (aload_1)) 
                                      (69 (aload_0)) 
                                      (70 (getfield (fieldCP "oa" "clojure.lang.ArraySeq" (array (class "java.lang.Object"))))) 
                                      (73 (iload_2)) 
                                      (74 (aaload)) 
                                      (75 (invokevirtual (methodCP "equals" "java.lang.Object" ((class "java.lang.Object")) boolean))) 
                                      (78 (ifeq 88)) ;;to TAG_7
                                      (81 (iload_2)) 
                                      (82 (aload_0)) 
                                      (83 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (86 (isub)) 
                                      (87 (ireturn)) 
                                      (88 (iinc 2 -1)) ;;at TAG_7
                                      (91 (goto 60)) ;;to TAG_8
                                      (94 (goto 206)) ;;to TAG_5;;at TAG_6
                                      (97 (aload_1)) ;;at TAG_0
                                      (98 (ifnonnull 153)) ;;to TAG_9
                                      (101 (aload_0)) 
                                      (102 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (105 (invokestatic (methodCP "getLength" "java.lang.reflect.Array" ((class "java.lang.Object")) int))) 
                                      (108 (iconst_1)) 
                                      (109 (isub)) 
                                      (110 (istore_2)) 
                                      (111 (iload_2)) ;;at TAG_12
                                      (112 (aload_0)) 
                                      (113 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (116 (if_icmplt 150)) ;;to TAG_10
                                      (119 (aload_0)) 
                                      (120 (getfield (fieldCP "ct" "clojure.lang.ArraySeq" (class "java.lang.Class")))) 
                                      (123 (aload_0)) 
                                      (124 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (127 (iload_2)) 
                                      (128 (invokestatic (methodCP "get" "java.lang.reflect.Array" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (131 (invokestatic (methodCP "prepRet" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (134 (ifnonnull 144)) ;;to TAG_11
                                      (137 (iload_2)) 
                                      (138 (aload_0)) 
                                      (139 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (142 (isub)) 
                                      (143 (ireturn)) 
                                      (144 (iinc 2 -1)) ;;at TAG_11
                                      (147 (goto 111)) ;;to TAG_12
                                      (150 (goto 206)) ;;to TAG_5;;at TAG_10
                                      (153 (aload_0)) ;;at TAG_9
                                      (154 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (157 (invokestatic (methodCP "getLength" "java.lang.reflect.Array" ((class "java.lang.Object")) int))) 
                                      (160 (iconst_1)) 
                                      (161 (isub)) 
                                      (162 (istore_2)) 
                                      (163 (iload_2)) ;;at TAG_14
                                      (164 (aload_0)) 
                                      (165 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (168 (if_icmplt 206)) ;;to TAG_5
                                      (171 (aload_1)) 
                                      (172 (aload_0)) 
                                      (173 (getfield (fieldCP "ct" "clojure.lang.ArraySeq" (class "java.lang.Class")))) 
                                      (176 (aload_0)) 
                                      (177 (getfield (fieldCP "array" "clojure.lang.ArraySeq" (class "java.lang.Object")))) 
                                      (180 (iload_2)) 
                                      (181 (invokestatic (methodCP "get" "java.lang.reflect.Array" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (184 (invokestatic (methodCP "prepRet" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (187 (invokevirtual (methodCP "equals" "java.lang.Object" ((class "java.lang.Object")) boolean))) 
                                      (190 (ifeq 200)) ;;to TAG_13
                                      (193 (iload_2)) 
                                      (194 (aload_0)) 
                                      (195 (getfield (fieldCP "i" "clojure.lang.ArraySeq" int))) 
                                      (198 (isub)) 
                                      (199 (ireturn)) 
                                      (200 (iinc 2 -1)) ;;at TAG_13
                                      (203 (goto 163)) ;;to TAG_14
                                      (206 (iconst_m1)) ;;at TAG_5
                                      (207 (ireturn)) 
                                      (endofcode 208))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.Obj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.ArraySeq" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.ArraySeq"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.ArraySeq" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.ArraySeq"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IndexedSeq" "clojure.lang.IReduce")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *ArraySeq-class-table*
  (make-static-class-decls 
   *clojure.lang.ArraySeq*))

(defconst *package-name-map* 
  ("clojure.lang.ArraySeq" . "clojure.lang"))

