; LispReader$DispatchReader-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.LispReader$DispatchReader*
 (make-class-def
      '(class "clojure.lang.LispReader$DispatchReader"
            "clojure.lang.AFn"
            (constant_pool
                        (STRING  "EOF while reading character")
                        (STRING  "No dispatch macro for: %c"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 6) (code_length . 96)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "java.io.Reader"))) 
                                      (4 (invokestatic (methodCP "read1" "clojure.lang.LispReader" ((class "java.io.Reader")) int))) 
                                      (7 (istore_3)) 
                                      (8 (iload_3)) 
                                      (9 (iconst_m1)) 
                                      (10 (if_icmpne 19)) ;;to TAG_0
                                      (13 (ldc 0)) ;;STRING:: "EOF while reading character"
                                      (15 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (18 (athrow)) 
                                      (19 (getstatic (fieldCP "dispatchMacros" "clojure.lang.LispReader" (array (class "clojure.lang.IFn"))))) ;;at TAG_0
                                      (22 (iload_3)) 
                                      (23 (aaload)) 
                                      (24 (astore 4)) 
                                      (26 (aload 4)) 
                                      (28 (ifnonnull 83)) ;;to TAG_1
                                      (31 (aload_1)) 
                                      (32 (checkcast (class "java.io.PushbackReader"))) 
                                      (35 (iload_3)) 
                                      (36 (invokestatic (methodCP "unread" "clojure.lang.LispReader" ((class "java.io.PushbackReader") int) void))) 
                                      (39 (getstatic (fieldCP "ctorReader" "clojure.lang.LispReader" (class "clojure.lang.IFn")))) 
                                      (42 (aload_1)) 
                                      (43 (iload_3)) 
                                      (44 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (47 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (52 (astore 5)) 
                                      (54 (aload 5)) 
                                      (56 (ifnull 62))  ;;to TAG_2
                                      (59 (aload 5)) 
                                      (61 (areturn)) 
                                      (62 (ldc 1)) ;;at TAG_2;;STRING:: "No dispatch macro for: %c"
                                      (64 (iconst_1)) 
                                      (65 (anewarray (class "java.lang.Object"))) 
                                      (68 (dup)) 
                                      (69 (iconst_0)) 
                                      (70 (iload_3)) 
                                      (71 (i2c)) 
                                      (72 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (75 (aastore)) 
                                      (76 (invokestatic (methodCP "format" "java.lang.String" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.String")))) 
                                      (79 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (82 (athrow)) 
                                      (83 (aload 4)) ;;at TAG_1
                                      (85 (aload_1)) 
                                      (86 (iload_3)) 
                                      (87 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (90 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (95 (areturn)) 
                                      (endofcode 96))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *LispReader$DispatchReader-class-table*
  (make-static-class-decls 
   *clojure.lang.LispReader$DispatchReader*))

(defconst *package-name-map* 
  ("clojure.lang.LispReader$DispatchReader" . "clojure.lang"))

