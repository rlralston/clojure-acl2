; Compiler$ImportExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$ImportExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$ImportExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "CURRENT_NS")
                        (STRING  "ImportExpr has no Java class")
                        (STRING  "Class forName(String)")
                        (STRING  "Class importClass(Class)")
                        (STRING  "Object deref()"))
            (fields
                        (field "c" (class "java.lang.String") (accessflags  *class*  *final*  *public* ) -1)
                        (field "forNameMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "importClassMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "derefMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.String"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "c" "clojure.lang.Compiler$ImportExpr" (class "java.lang.String"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 24)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var"))))
                                      (3 (invokevirtual
					(methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (6 (checkcast (class "clojure.lang.Namespace")))
                                      (9 (astore_1))
                                      (10 (aload_1))
                                      (11 (aload_0))
                                      (12 (getfield (fieldCP "c" "clojure.lang.Compiler$ImportExpr" (class "java.lang.String"))))
                                      (15 (invokestatic
					(methodCP "classForName" "clojure.lang.RT" ((class "java.lang.String")) (class "java.lang.Class"))))
                                      (18 (invokevirtual
					(methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class"))))
                                      (21 (pop))
                                      (22 (aconst_null))
                                      (23 (areturn))
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 69)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (invokestatic (methodCP "access$200" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (4 (ldc 0)) ;;STRING:: "CURRENT_NS"
                                      (6 (invokestatic (methodCP "access$000" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (9 (invokevirtual (methodCP "getStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "java.lang.String") (class "clojure.asm.Type")) void))) 
                                      (12 (aload_3)) 
                                      (13 (invokestatic (methodCP "access$000" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (16 (getstatic (fieldCP "derefMethod" "clojure.lang.Compiler$ImportExpr" (class "clojure.asm.commons.Method")))) 
                                      (19 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (22 (aload_3)) 
                                      (23 (getstatic (fieldCP "NS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (26 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (29 (aload_3)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "c" "clojure.lang.Compiler$ImportExpr" (class "java.lang.String")))) 
                                      (34 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String")) void))) 
                                      (37 (aload_3)) 
                                      (38 (getstatic (fieldCP "CLASS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (41 (getstatic (fieldCP "forNameMethod" "clojure.lang.Compiler$ImportExpr" (class "clojure.asm.commons.Method")))) 
                                      (44 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (47 (aload_3)) 
                                      (48 (getstatic (fieldCP "NS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (51 (getstatic (fieldCP "importClassMethod" "clojure.lang.Compiler$ImportExpr" (class "clojure.asm.commons.Method")))) 
                                      (54 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (57 (aload_1)) 
                                      (58 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (61 (if_acmpne 68))  ;;to TAG_0
                                      (64 (aload_3)) 
                                      (65 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (68 (return)) ;;at TAG_0
                                      (endofcode 69))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_0))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "java.lang.IllegalArgumentException")))
                                      (3 (dup))
                                      (4 (ldc 1))         ;;STRING:: "ImportExpr has no Java class"
                                      (6 (invokespecial
					(methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void)))
                                      (9 (athrow))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 25)
                                   (parsedcode
                                      (0 (ldc 2))         ;;STRING:: "Class forName(String)"
                                      (2 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (5 (putstatic (fieldCP "forNameMethod" "clojure.lang.Compiler$ImportExpr" (class "clojure.asm.commons.Method"))))
                                      (8 (ldc 3))         ;;STRING:: "Class importClass(Class)"
                                      (10 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (13 (putstatic (fieldCP "importClassMethod" "clojure.lang.Compiler$ImportExpr" (class "clojure.asm.commons.Method"))))
                                      (16 (ldc 4))        ;;STRING:: "Object deref()"
                                      (18 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (21 (putstatic (fieldCP "derefMethod" "clojure.lang.Compiler$ImportExpr" (class "clojure.asm.commons.Method"))))
                                      (24 (return))
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$ImportExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$ImportExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$ImportExpr" . "clojure.lang"))

