; LispReader$DeprecatedWrappingReader-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.LispReader$DeprecatedWrappingReader*
 (make-class-def
      '(class "clojure.lang.LispReader$DeprecatedWrappingReader"
            "clojure.lang.AFn"
            (constant_pool
                        (STRING  "WARNING: reader macro ")
                        (STRING  " is deprecated; use ")
                        (STRING  " instead"))
            (fields
                        (field "sym" (class "clojure.lang.Symbol") (accessflags  *class*  *final* ) -1)
                        (field "macro" (class "java.lang.String") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.Symbol") (class "java.lang.String"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFn" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "sym" "clojure.lang.LispReader$DeprecatedWrappingReader" (class "clojure.lang.Symbol"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "macro" "clojure.lang.LispReader$DeprecatedWrappingReader" (class "java.lang.String"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 72)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "out" "java.lang.System" (class "java.io.PrintStream"))))
                                      (3 (new (class "java.lang.StringBuilder")))
                                      (6 (dup))
                                      (7 (invokespecial
					(methodCP "<init>" "java.lang.StringBuilder" () void)))
                                      (10 (ldc 0))        ;;STRING:: "WARNING: reader macro "
                                      (12 (invokevirtual
					(methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder"))))
                                      (15 (aload_0))
                                      (16 (getfield (fieldCP "macro" "clojure.lang.LispReader$DeprecatedWrappingReader" (class "java.lang.String"))))
                                      (19 (invokevirtual
					(methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder"))))
                                      (22 (ldc 1))        ;;STRING:: " is deprecated; use "
                                      (24 (invokevirtual
					(methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder"))))
                                      (27 (aload_0))
                                      (28 (getfield (fieldCP "sym" "clojure.lang.LispReader$DeprecatedWrappingReader" (class "clojure.lang.Symbol"))))
                                      (31 (invokevirtual
					(methodCP "getName" "clojure.lang.Symbol" () (class "java.lang.String"))))
                                      (34 (invokevirtual
					(methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder"))))
                                      (37 (ldc 2))        ;;STRING:: " instead"
                                      (39 (invokevirtual
					(methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder"))))
                                      (42 (invokevirtual
					(methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String"))))
                                      (45 (invokevirtual
					(methodCP "println" "java.io.PrintStream" ((class "java.lang.String")) void)))
                                      (48 (aload_1))
                                      (49 (checkcast (class "java.io.PushbackReader")))
                                      (52 (astore_3))
                                      (53 (aload_3))
                                      (54 (iconst_1))
                                      (55 (aconst_null))
                                      (56 (iconst_1))
                                      (57 (invokestatic
					(methodCP "read" "clojure.lang.LispReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean) (class "java.lang.Object"))))
                                      (60 (astore 4))
                                      (62 (aload_0))
                                      (63 (getfield (fieldCP "sym" "clojure.lang.LispReader$DeprecatedWrappingReader" (class "clojure.lang.Symbol"))))
                                      (66 (aload 4))
                                      (68 (invokestatic
					(methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq"))))
                                      (71 (areturn))
                                      (endofcode 72))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *LispReader$DeprecatedWrappingReader-class-table*
  (make-static-class-decls 
   *clojure.lang.LispReader$DeprecatedWrappingReader*))

(defconst *package-name-map* 
  ("clojure.lang.LispReader$DeprecatedWrappingReader" . "clojure.lang"))

