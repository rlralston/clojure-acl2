; APersistentVector-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.APersistentVector*
 (make-class-def
      '(class "clojure.lang.APersistentVector"
            "clojure.lang.AFn"
            (constant_pool
                        (STRING  "Key must be integer"))
            (fields
                        (field "_hash" int (accessflags  *class* ) -1)
                        (field "_hasheq" int (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFn" () void)))
                                      (4 (aload_0))
                                      (5 (iconst_m1))
                                      (6 (putfield (fieldCP "_hash" "clojure.lang.APersistentVector" int)))
                                      (9 (aload_0))
                                      (10 (iconst_m1))
                                      (11 (putfield (fieldCP "_hasheq" "clojure.lang.APersistentVector" int)))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toString"
                              (parameters )
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
					(methodCP "printString" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.String"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "seq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 1) (code_length . 19)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (4 (ifle 17))  ;;to TAG_0
                                      (7 (new (class "clojure.lang.APersistentVector$Seq"))) 
                                      (10 (dup)) 
                                      (11 (aload_0)) 
                                      (12 (iconst_0)) 
                                      (13 (invokespecial (methodCP "<init>" "clojure.lang.APersistentVector$Seq" ((class "clojure.lang.IPersistentVector") int) void))) 
                                      (16 (areturn)) 
                                      (17 (aconst_null)) ;;at TAG_0
                                      (18 (areturn)) 
                                      (endofcode 19))
                                   (Exceptions )
                                   (StackMap )))
                        (method "rseq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 1) (code_length . 24)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (4 (ifle 22))  ;;to TAG_0
                                      (7 (new (class "clojure.lang.APersistentVector$RSeq"))) 
                                      (10 (dup)) 
                                      (11 (aload_0)) 
                                      (12 (aload_0)) 
                                      (13 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (16 (iconst_1)) 
                                      (17 (isub)) 
                                      (18 (invokespecial (methodCP "<init>" "clojure.lang.APersistentVector$RSeq" ((class "clojure.lang.IPersistentVector") int) void))) 
                                      (21 (areturn)) 
                                      (22 (aconst_null)) ;;at TAG_0
                                      (23 (areturn)) 
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doEquals"
                              (parameters (class "clojure.lang.IPersistentVector") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 176)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (if_acmpne 7)) ;;to TAG_0
                                      (5 (iconst_1)) 
                                      (6 (ireturn)) 
                                      (7 (aload_1)) ;;at TAG_0
                                      (8 (instanceof (class "java.util.List"))) 
                                      (11 (ifne 21))  ;;to TAG_1
                                      (14 (aload_1)) 
                                      (15 (instanceof (class "clojure.lang.IPersistentVector"))) 
                                      (18 (ifeq 104)) ;;to TAG_2
                                      (21 (aload_1)) ;;at TAG_1
                                      (22 (checkcast (class "java.util.Collection"))) 
                                      (25 (astore_2)) 
                                      (26 (aload_2)) 
                                      (27 (invokeinterface (methodCP "size" "java.util.Collection" () int) 1)) 
                                      (32 (aload_0)) 
                                      (33 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (38 (if_icmpne 52)) ;;to TAG_3
                                      (41 (aload_2)) 
                                      (42 (invokevirtual (methodCP "hashCode" "java.lang.Object" () int))) 
                                      (45 (aload_0)) 
                                      (46 (invokevirtual (methodCP "hashCode" "java.lang.Object" () int))) 
                                      (49 (if_icmpeq 54)) ;;to TAG_4
                                      (52 (iconst_0)) ;;at TAG_3
                                      (53 (ireturn)) 
                                      (54 (aload_0)) ;;at TAG_4
                                      (55 (checkcast (class "java.util.List"))) 
                                      (58 (invokeinterface (methodCP "iterator" "java.util.List" () (class "java.util.Iterator")) 1)) 
                                      (63 (astore_3)) 
                                      (64 (aload_2)) 
                                      (65 (invokeinterface (methodCP "iterator" "java.util.Collection" () (class "java.util.Iterator")) 1)) 
                                      (70 (astore 4)) 
                                      (72 (aload_3)) ;;at TAG_6
                                      (73 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (78 (ifeq 102)) ;;to TAG_5
                                      (81 (aload_3)) 
                                      (82 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (87 (aload 4)) 
                                      (89 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (94 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (97 (ifne 72)) ;;to TAG_6
                                      (100 (iconst_0)) 
                                      (101 (ireturn)) 
                                      (102 (iconst_1)) ;;at TAG_5
                                      (103 (ireturn)) 
                                      (104 (aload_1)) ;;at TAG_2
                                      (105 (instanceof (class "clojure.lang.Sequential"))) 
                                      (108 (ifne 113)) ;;to TAG_7
                                      (111 (iconst_0)) 
                                      (112 (ireturn)) 
                                      (113 (aload_1)) ;;at TAG_7
                                      (114 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (117 (astore_2)) 
                                      (118 (iconst_0)) 
                                      (119 (istore_3)) 
                                      (120 (iload_3)) ;;at TAG_11
                                      (121 (aload_0)) 
                                      (122 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (127 (if_icmpge 168)) ;;to TAG_8
                                      (130 (aload_2)) 
                                      (131 (ifnull 153)) ;;to TAG_9
                                      (134 (aload_0)) 
                                      (135 (iload_3)) 
                                      (136 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (141 (aload_2)) 
                                      (142 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (147 (invokestatic (methodCP "equals" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (150 (ifne 155)) ;;to TAG_10
                                      (153 (iconst_0)) ;;at TAG_9
                                      (154 (ireturn)) 
                                      (155 (iinc 3 1)) ;;at TAG_10
                                      (158 (aload_2)) 
                                      (159 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (164 (astore_2)) 
                                      (165 (goto 120)) ;;to TAG_11
                                      (168 (aload_2)) ;;at TAG_8
                                      (169 (ifnull 174)) ;;to TAG_12
                                      (172 (iconst_0)) 
                                      (173 (ireturn)) 
                                      (174 (iconst_1)) ;;at TAG_12
                                      (175 (ireturn)) 
                                      (endofcode 176))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doEquiv"
                              (parameters (class "clojure.lang.IPersistentVector") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 158)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (instanceof (class "java.util.List"))) 
                                      (4 (ifne 14)) ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (instanceof (class "clojure.lang.IPersistentVector"))) 
                                      (11 (ifeq 86))  ;;to TAG_1
                                      (14 (aload_1)) ;;at TAG_0
                                      (15 (checkcast (class "java.util.Collection"))) 
                                      (18 (astore_2)) 
                                      (19 (aload_2)) 
                                      (20 (invokeinterface (methodCP "size" "java.util.Collection" () int) 1)) 
                                      (25 (aload_0)) 
                                      (26 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (31 (if_icmpeq 36)) ;;to TAG_2
                                      (34 (iconst_0)) 
                                      (35 (ireturn)) 
                                      (36 (aload_0)) ;;at TAG_2
                                      (37 (checkcast (class "java.util.List"))) 
                                      (40 (invokeinterface (methodCP "iterator" "java.util.List" () (class "java.util.Iterator")) 1)) 
                                      (45 (astore_3)) 
                                      (46 (aload_2)) 
                                      (47 (invokeinterface (methodCP "iterator" "java.util.Collection" () (class "java.util.Iterator")) 1)) 
                                      (52 (astore 4)) 
                                      (54 (aload_3)) ;;at TAG_4
                                      (55 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (60 (ifeq 84)) ;;to TAG_3
                                      (63 (aload_3)) 
                                      (64 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (69 (aload 4)) 
                                      (71 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (76 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (79 (ifne 54)) ;;to TAG_4
                                      (82 (iconst_0)) 
                                      (83 (ireturn)) 
                                      (84 (iconst_1)) ;;at TAG_3
                                      (85 (ireturn)) 
                                      (86 (aload_1)) ;;at TAG_1
                                      (87 (instanceof (class "clojure.lang.Sequential"))) 
                                      (90 (ifne 95)) ;;to TAG_5
                                      (93 (iconst_0)) 
                                      (94 (ireturn)) 
                                      (95 (aload_1)) ;;at TAG_5
                                      (96 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (99 (astore_2)) 
                                      (100 (iconst_0)) 
                                      (101 (istore_3)) 
                                      (102 (iload_3)) ;;at TAG_9
                                      (103 (aload_0)) 
                                      (104 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (109 (if_icmpge 150)) ;;to TAG_6
                                      (112 (aload_2)) 
                                      (113 (ifnull 135)) ;;to TAG_7
                                      (116 (aload_0)) 
                                      (117 (iload_3)) 
                                      (118 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (123 (aload_2)) 
                                      (124 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (129 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (132 (ifne 137)) ;;to TAG_8
                                      (135 (iconst_0)) ;;at TAG_7
                                      (136 (ireturn)) 
                                      (137 (iinc 3 1)) ;;at TAG_8
                                      (140 (aload_2)) 
                                      (141 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (146 (astore_2)) 
                                      (147 (goto 102)) ;;to TAG_9
                                      (150 (aload_2)) ;;at TAG_6
                                      (151 (ifnull 156)) ;;to TAG_10
                                      (154 (iconst_0)) 
                                      (155 (ireturn)) 
                                      (156 (iconst_1)) ;;at TAG_10
                                      (157 (ireturn)) 
                                      (endofcode 158))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equals"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokestatic
					(methodCP "doEquals" "clojure.lang.APersistentVector" ((class "clojure.lang.IPersistentVector") (class "java.lang.Object")) boolean)))
                                      (5 (ireturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokestatic
					(methodCP "doEquiv" "clojure.lang.APersistentVector" ((class "clojure.lang.IPersistentVector") (class "java.lang.Object")) boolean)))
                                      (5 (ireturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hashCode"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 62)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "_hash" "clojure.lang.APersistentVector" int))) 
                                      (4 (iconst_m1)) 
                                      (5 (if_icmpne 57)) ;;to TAG_0
                                      (8 (iconst_1)) 
                                      (9 (istore_1)) 
                                      (10 (aload_0)) 
                                      (11 (invokevirtual (methodCP "iterator" "clojure.lang.APersistentVector" () (class "java.util.Iterator")))) 
                                      (14 (astore_2)) 
                                      (15 (aload_2)) ;;at TAG_4
                                      (16 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (21 (ifeq 52)) ;;to TAG_1
                                      (24 (aload_2)) 
                                      (25 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (30 (astore_3)) 
                                      (31 (bipush 31)) 
                                      (33 (iload_1)) 
                                      (34 (imul)) 
                                      (35 (aload_3)) 
                                      (36 (ifnonnull 43))  ;;to TAG_2
                                      (39 (iconst_0)) 
                                      (40 (goto 47)) ;;to TAG_3
                                      (43 (aload_3)) ;;at TAG_2
                                      (44 (invokevirtual (methodCP "hashCode" "java.lang.Object" () int))) 
                                      (47 (iadd)) ;;at TAG_3
                                      (48 (istore_1)) 
                                      (49 (goto 15)) ;;to TAG_4
                                      (52 (aload_0)) ;;at TAG_1
                                      (53 (iload_1)) 
                                      (54 (putfield (fieldCP "_hash" "clojure.lang.APersistentVector" int))) 
                                      (57 (aload_0)) ;;at TAG_0
                                      (58 (getfield (fieldCP "_hash" "clojure.lang.APersistentVector" int))) 
                                      (61 (ireturn)) 
                                      (endofcode 62))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasheq"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 54)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "_hasheq" "clojure.lang.APersistentVector" int))) 
                                      (4 (iconst_m1)) 
                                      (5 (if_icmpne 49)) ;;to TAG_0
                                      (8 (iconst_1)) 
                                      (9 (istore_1)) 
                                      (10 (aload_0)) 
                                      (11 (invokevirtual (methodCP "iterator" "clojure.lang.APersistentVector" () (class "java.util.Iterator")))) 
                                      (14 (astore_2)) 
                                      (15 (aload_2)) ;;at TAG_2
                                      (16 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (21 (ifeq 44)) ;;to TAG_1
                                      (24 (aload_2)) 
                                      (25 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (30 (astore_3)) 
                                      (31 (bipush 31)) 
                                      (33 (iload_1)) 
                                      (34 (imul)) 
                                      (35 (aload_3)) 
                                      (36 (invokestatic (methodCP "hasheq" "clojure.lang.Util" ((class "java.lang.Object")) int))) 
                                      (39 (iadd)) 
                                      (40 (istore_1)) 
                                      (41 (goto 15))  ;;to TAG_2
                                      (44 (aload_0)) ;;at TAG_1
                                      (45 (iload_1)) 
                                      (46 (putfield (fieldCP "_hasheq" "clojure.lang.APersistentVector" int))) 
                                      (49 (aload_0)) ;;at TAG_0
                                      (50 (getfield (fieldCP "_hasheq" "clojure.lang.APersistentVector" int))) 
                                      (53 (ireturn)) 
                                      (endofcode 54))
                                   (Exceptions )
                                   (StackMap )))
                        (method "get"
                              (parameters int)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (invokevirtual
					(methodCP "nth" "clojure.lang.APersistentVector" (int) (class "java.lang.Object"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "nth"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 20)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (iflt 18))  ;;to TAG_0
                                      (4 (iload_1)) 
                                      (5 (aload_0)) 
                                      (6 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (9 (if_icmpge 18))  ;;to TAG_0
                                      (12 (aload_0)) 
                                      (13 (iload_1)) 
                                      (14 (invokevirtual (methodCP "nth" "clojure.lang.APersistentVector" (int) (class "java.lang.Object")))) 
                                      (17 (areturn)) 
                                      (18 (aload_2)) ;;at TAG_0
                                      (19 (areturn)) 
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remove"
                              (parameters int)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "indexOf"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 32)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_2)) 
                                      (2 (iload_2)) ;;at TAG_2
                                      (3 (aload_0)) 
                                      (4 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (7 (if_icmpge 30)) ;;to TAG_0
                                      (10 (aload_0)) 
                                      (11 (iload_2)) 
                                      (12 (invokevirtual (methodCP "nth" "clojure.lang.APersistentVector" (int) (class "java.lang.Object")))) 
                                      (15 (aload_1)) 
                                      (16 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (19 (ifeq 24)) ;;to TAG_1
                                      (22 (iload_2)) 
                                      (23 (ireturn)) 
                                      (24 (iinc 2 1)) ;;at TAG_1
                                      (27 (goto 2))  ;;to TAG_2
                                      (30 (iconst_m1)) ;;at TAG_0
                                      (31 (ireturn)) 
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lastIndexOf"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 33)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (4 (iconst_1)) 
                                      (5 (isub)) 
                                      (6 (istore_2)) 
                                      (7 (iload_2)) ;;at TAG_2
                                      (8 (iflt 31)) ;;to TAG_0
                                      (11 (aload_0)) 
                                      (12 (iload_2)) 
                                      (13 (invokevirtual (methodCP "nth" "clojure.lang.APersistentVector" (int) (class "java.lang.Object")))) 
                                      (16 (aload_1)) 
                                      (17 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (20 (ifeq 25)) ;;to TAG_1
                                      (23 (iload_2)) 
                                      (24 (ireturn)) 
                                      (25 (iinc 2 -1)) ;;at TAG_1
                                      (28 (goto 7))  ;;to TAG_2
                                      (31 (iconst_m1)) ;;at TAG_0
                                      (32 (ireturn)) 
                                      (endofcode 33))
                                   (Exceptions )
                                   (StackMap )))
                        (method "listIterator"
                              (parameters )
                              (returntype . (class "java.util.ListIterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iconst_0))
                                      (2 (invokevirtual
					(methodCP "listIterator" "clojure.lang.APersistentVector" (int) (class "java.util.ListIterator"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "listIterator"
                              (parameters int)
                              (returntype . (class "java.util.ListIterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.APersistentVector$1")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (iload_1))
                                      (6 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentVector$1" ((class "clojure.lang.APersistentVector") int) void)))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "subList"
                              (parameters int int)
                              (returntype . (class "java.util.List"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (iload_2))
                                      (3 (invokestatic
					(methodCP "subvec" "clojure.lang.RT" ((class "clojure.lang.IPersistentVector") int int) (class "clojure.lang.IPersistentVector"))))
                                      (6 (checkcast (class "java.util.List")))
                                      (9 (areturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "set"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters int (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addAll"
                              (parameters int (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 29)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "isInteger" "clojure.lang.Util" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 19))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (aload_1)) 
                                      (9 (checkcast (class "java.lang.Number"))) 
                                      (12 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (15 (invokevirtual (methodCP "nth" "clojure.lang.APersistentVector" (int) (class "java.lang.Object")))) 
                                      (18 (areturn)) 
                                      (19 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_0
                                      (22 (dup)) 
                                      (23 (ldc 0)) ;;STRING:: "Key must be integer"
                                      (25 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (28 (athrow)) 
                                      (endofcode 29))
                                   (Exceptions )
                                   (StackMap )))
                        (method "iterator"
                              (parameters )
                              (returntype . (class "java.util.Iterator"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 9)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.APersistentVector$2")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (invokespecial
					(methodCP "<init>" "clojure.lang.APersistentVector$2" ((class "clojure.lang.APersistentVector")) void)))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "peek"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (4 (ifle 18))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (aload_0)) 
                                      (9 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (12 (iconst_1)) 
                                      (13 (isub)) 
                                      (14 (invokevirtual (methodCP "nth" "clojure.lang.APersistentVector" (int) (class "java.lang.Object")))) 
                                      (17 (areturn)) 
                                      (18 (aconst_null)) ;;at TAG_0
                                      (19 (areturn)) 
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "containsKey"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 35)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "isInteger" "clojure.lang.Util" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifne 9)) ;;to TAG_0
                                      (7 (iconst_0)) 
                                      (8 (ireturn)) 
                                      (9 (aload_1)) ;;at TAG_0
                                      (10 (checkcast (class "java.lang.Number"))) 
                                      (13 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (16 (istore_2)) 
                                      (17 (iload_2)) 
                                      (18 (iflt 33)) ;;to TAG_1
                                      (21 (iload_2)) 
                                      (22 (aload_0)) 
                                      (23 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (26 (if_icmpge 33)) ;;to TAG_1
                                      (29 (iconst_1)) 
                                      (30 (goto 34))  ;;to TAG_2
                                      (33 (iconst_0)) ;;at TAG_1
                                      (34 (ireturn)) ;;at TAG_2
                                      (endofcode 35))
                                   (Exceptions )
                                   (StackMap )))
                        (method "entryAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IMapEntry"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 43)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "isInteger" "clojure.lang.Util" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 41))  ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (checkcast (class "java.lang.Number"))) 
                                      (11 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (14 (istore_2)) 
                                      (15 (iload_2)) 
                                      (16 (iflt 41))  ;;to TAG_0
                                      (19 (iload_2)) 
                                      (20 (aload_0)) 
                                      (21 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (24 (if_icmpge 41))  ;;to TAG_0
                                      (27 (new (class "clojure.lang.MapEntry"))) 
                                      (30 (dup)) 
                                      (31 (aload_1)) 
                                      (32 (aload_0)) 
                                      (33 (iload_2)) 
                                      (34 (invokevirtual (methodCP "nth" "clojure.lang.APersistentVector" (int) (class "java.lang.Object")))) 
                                      (37 (invokespecial (methodCP "<init>" "clojure.lang.MapEntry" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (40 (areturn)) 
                                      (41 (aconst_null)) ;;at TAG_0
                                      (42 (areturn)) 
                                      (endofcode 43))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentVector"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "isInteger" "clojure.lang.Util" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 22))  ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (checkcast (class "java.lang.Number"))) 
                                      (11 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (14 (istore_3)) 
                                      (15 (aload_0)) 
                                      (16 (iload_3)) 
                                      (17 (aload_2)) 
                                      (18 (invokevirtual (methodCP "assocN" "clojure.lang.APersistentVector" (int (class "java.lang.Object")) (class "clojure.lang.IPersistentVector")))) 
                                      (21 (areturn)) 
                                      (22 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_0
                                      (25 (dup)) 
                                      (26 (ldc 0)) ;;STRING:: "Key must be integer"
                                      (28 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (31 (athrow)) 
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valAt"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 35)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "isInteger" "clojure.lang.Util" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 33))  ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (checkcast (class "java.lang.Number"))) 
                                      (11 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (14 (istore_3)) 
                                      (15 (iload_3)) 
                                      (16 (iflt 33))  ;;to TAG_0
                                      (19 (iload_3)) 
                                      (20 (aload_0)) 
                                      (21 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (24 (if_icmpge 33))  ;;to TAG_0
                                      (27 (aload_0)) 
                                      (28 (iload_3)) 
                                      (29 (invokevirtual (methodCP "nth" "clojure.lang.APersistentVector" (int) (class "java.lang.Object")))) 
                                      (32 (areturn)) 
                                      (33 (aload_2)) ;;at TAG_0
                                      (34 (areturn)) 
                                      (endofcode 35))
                                   (Exceptions )
                                   (StackMap )))
                        (method "valAt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aconst_null))
                                      (3 (invokevirtual
					(methodCP "valAt" "clojure.lang.APersistentVector" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toArray"
                              (parameters )
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "seq" "clojure.lang.APersistentVector" () (class "clojure.lang.ISeq"))))
                                      (4 (invokestatic
					(methodCP "seqToArray" "clojure.lang.RT" ((class "clojure.lang.ISeq")) (array (class "java.lang.Object")))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remove"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addAll"
                              (parameters (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "clear"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "retainAll"
                              (parameters (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "removeAll"
                              (parameters (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 8)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" () void)))
                                      (7 (athrow))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "containsAll"
                              (parameters (class "java.util.Collection"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 38)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokeinterface (methodCP "iterator" "java.util.Collection" () (class "java.util.Iterator")) 1)) 
                                      (6 (astore_2)) 
                                      (7 (aload_2)) ;;at TAG_2
                                      (8 (invokeinterface (methodCP "hasNext" "java.util.Iterator" () boolean) 1)) 
                                      (13 (ifeq 36)) ;;to TAG_0
                                      (16 (aload_2)) 
                                      (17 (invokeinterface (methodCP "next" "java.util.Iterator" () (class "java.lang.Object")) 1)) 
                                      (22 (astore_3)) 
                                      (23 (aload_0)) 
                                      (24 (aload_3)) 
                                      (25 (invokevirtual (methodCP "contains" "clojure.lang.APersistentVector" ((class "java.lang.Object")) boolean))) 
                                      (28 (ifne 33)) ;;to TAG_1
                                      (31 (iconst_0)) 
                                      (32 (ireturn)) 
                                      (33 (goto 7))  ;;to TAG_2;;at TAG_1
                                      (36 (iconst_1)) ;;at TAG_0
                                      (37 (ireturn)) 
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toArray"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (array (class "java.lang.Object")))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "seq" "clojure.lang.APersistentVector" () (class "clojure.lang.ISeq"))))
                                      (4 (aload_1))
                                      (5 (invokestatic
					(methodCP "seqToPassedArray" "clojure.lang.RT" ((class "clojure.lang.ISeq") (array (class "java.lang.Object"))) (array (class "java.lang.Object")))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "size"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "count" "clojure.lang.APersistentVector" () int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isEmpty"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (4 (ifne 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "contains"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 36)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "seq" "clojure.lang.APersistentVector" () (class "clojure.lang.ISeq")))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) ;;at TAG_2
                                      (6 (ifnull 34)) ;;to TAG_0
                                      (9 (aload_2)) 
                                      (10 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (15 (aload_1)) 
                                      (16 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (19 (ifeq 24)) ;;to TAG_1
                                      (22 (iconst_1)) 
                                      (23 (ireturn)) 
                                      (24 (aload_2)) ;;at TAG_1
                                      (25 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (30 (astore_2)) 
                                      (31 (goto 5))  ;;to TAG_2
                                      (34 (iconst_0)) ;;at TAG_0
                                      (35 (ireturn)) 
                                      (endofcode 36))
                                   (Exceptions )
                                   (StackMap )))
                        (method "length"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokevirtual
					(methodCP "count" "clojure.lang.APersistentVector" () int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "compareTo"
                              (parameters (class "java.lang.Object"))
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 78)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (4 (astore_2)) 
                                      (5 (aload_0)) 
                                      (6 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (9 (aload_2)) 
                                      (10 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (15 (if_icmpge 20)) ;;to TAG_0
                                      (18 (iconst_m1)) 
                                      (19 (ireturn)) 
                                      (20 (aload_0)) ;;at TAG_0
                                      (21 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (24 (aload_2)) 
                                      (25 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (30 (if_icmple 35)) ;;to TAG_1
                                      (33 (iconst_1)) 
                                      (34 (ireturn)) 
                                      (35 (iconst_0)) ;;at TAG_1
                                      (36 (istore_3)) 
                                      (37 (iload_3)) ;;at TAG_4
                                      (38 (aload_0)) 
                                      (39 (invokevirtual (methodCP "count" "clojure.lang.APersistentVector" () int))) 
                                      (42 (if_icmpge 76))  ;;to TAG_2
                                      (45 (aload_0)) 
                                      (46 (iload_3)) 
                                      (47 (invokevirtual (methodCP "nth" "clojure.lang.APersistentVector" (int) (class "java.lang.Object")))) 
                                      (50 (aload_2)) 
                                      (51 (iload_3)) 
                                      (52 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (57 (invokestatic (methodCP "compare" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) int))) 
                                      (60 (istore 4)) 
                                      (62 (iload 4)) 
                                      (64 (ifeq 70)) ;;to TAG_3
                                      (67 (iload 4)) 
                                      (69 (ireturn)) 
                                      (70 (iinc 3 1)) ;;at TAG_3
                                      (73 (goto 37)) ;;to TAG_4
                                      (76 (iconst_0)) ;;at TAG_2
                                      (77 (ireturn)) 
                                      (endofcode 78))
                                   (Exceptions )
                                   (StackMap )))
                        (method "assoc"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Associative"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokevirtual
					(methodCP "assoc" "clojure.lang.APersistentVector" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentVector"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IPersistentVector" "java.lang.Iterable" "java.util.List" "java.util.RandomAccess" "java.lang.Comparable" "java.io.Serializable" "clojure.lang.IHashEq")
            (accessflags  *abstract*  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *APersistentVector-class-table*
  (make-static-class-decls 
   *clojure.lang.APersistentVector*))

(defconst *package-name-map* 
  ("clojure.lang.APersistentVector" . "clojure.lang"))

