; Compiler$LocalBindingExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$LocalBindingExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$LocalBindingExpr"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Can\nt type hint a primitive local")
                        (STRING  "Can\nt eval locals"))
            (fields
                        (field "b" (class "clojure.lang.Compiler$LocalBinding") (accessflags  *class*  *final*  *public* ) -1)
                        (field "tag" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *public* ) -1)
                        (field "clearPath" (class "clojure.lang.Compiler$PathNode") (accessflags  *class*  *final*  *public* ) -1)
                        (field "clearRoot" (class "clojure.lang.Compiler$PathNode") (accessflags  *class*  *final*  *public* ) -1)
                        (field "shouldClear" boolean (accessflags  *class*  *public* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.Compiler$LocalBinding") (class "clojure.lang.Symbol"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 7) (code_length . 205)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "<init>" "java.lang.Object" () void))) 
                                      (4 (aload_0)) 
                                      (5 (iconst_0)) 
                                      (6 (putfield (fieldCP "shouldClear" "clojure.lang.Compiler$LocalBindingExpr" boolean))) 
                                      (9 (aload_1)) 
                                      (10 (invokevirtual (methodCP "getPrimitiveType" "clojure.lang.Compiler$LocalBinding" () (class "java.lang.Class")))) 
                                      (13 (ifnull 30)) ;;to TAG_0
                                      (16 (aload_2)) 
                                      (17 (ifnull 30)) ;;to TAG_0
                                      (20 (new (class "java.lang.UnsupportedOperationException"))) 
                                      (23 (dup)) 
                                      (24 (ldc 0)) ;;STRING:: "Can\nt type hint a primitive local"
                                      (26 (invokespecial (methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void))) 
                                      (29 (athrow)) 
                                      (30 (aload_0)) ;;at TAG_0
                                      (31 (aload_1)) 
                                      (32 (putfield (fieldCP "b" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (35 (aload_0)) 
                                      (36 (aload_2)) 
                                      (37 (putfield (fieldCP "tag" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Symbol")))) 
                                      (40 (aload_0)) 
                                      (41 (getstatic (fieldCP "CLEAR_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (44 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (47 (checkcast (class "clojure.lang.Compiler$PathNode"))) 
                                      (50 (putfield (fieldCP "clearPath" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$PathNode")))) 
                                      (53 (aload_0)) 
                                      (54 (getstatic (fieldCP "CLEAR_ROOT" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (57 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (60 (checkcast (class "clojure.lang.Compiler$PathNode"))) 
                                      (63 (putfield (fieldCP "clearRoot" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$PathNode")))) 
                                      (66 (getstatic (fieldCP "CLEAR_SITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (69 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (72 (aload_1)) 
                                      (73 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (76 (checkcast (class "clojure.lang.IPersistentCollection"))) 
                                      (79 (astore_3)) 
                                      (80 (aload_1)) 
                                      (81 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (84 (ifle 204)) ;;to TAG_1
                                      (87 (aload_3)) 
                                      (88 (ifnull 164))  ;;to TAG_2
                                      (91 (aload_3)) 
                                      (92 (invokeinterface (methodCP "seq" "clojure.lang.IPersistentCollection" () (class "clojure.lang.ISeq")) 1)) 
                                      (97 (astore 4)) 
                                      (99 (aload 4)) ;;at TAG_4
                                      (101 (ifnull 164))  ;;to TAG_2
                                      (104 (aload 4)) 
                                      (106 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (111 (checkcast (class "clojure.lang.Compiler$LocalBindingExpr"))) 
                                      (114 (astore 5)) 
                                      (116 (aload_0)) 
                                      (117 (getfield (fieldCP "clearPath" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$PathNode")))) 
                                      (120 (aload 5)) 
                                      (122 (getfield (fieldCP "clearPath" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$PathNode")))) 
                                      (125 (invokestatic (methodCP "commonPath" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$PathNode") (class "clojure.lang.Compiler$PathNode")) (class "clojure.lang.Compiler$PathNode")))) 
                                      (128 (astore 6)) 
                                      (130 (aload 6)) 
                                      (132 (ifnull 152)) ;;to TAG_3
                                      (135 (aload 6)) 
                                      (137 (getfield (fieldCP "type" "clojure.lang.Compiler$PathNode" (class "clojure.lang.Compiler$PATHTYPE")))) 
                                      (140 (getstatic (fieldCP "PATH" "clojure.lang.Compiler$PATHTYPE" (class "clojure.lang.Compiler$PATHTYPE")))) 
                                      (143 (if_acmpne 152)) ;;to TAG_3
                                      (146 (aload 5)) 
                                      (148 (iconst_0)) 
                                      (149 (putfield (fieldCP "shouldClear" "clojure.lang.Compiler$LocalBindingExpr" boolean))) 
                                      (152 (aload 4)) ;;at TAG_3
                                      (154 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (159 (astore 4)) 
                                      (161 (goto 99)) ;;to TAG_4
                                      (164 (aload_0)) ;;at TAG_2
                                      (165 (getfield (fieldCP "clearRoot" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$PathNode")))) 
                                      (168 (aload_1)) 
                                      (169 (getfield (fieldCP "clearPathRoot" "clojure.lang.Compiler$LocalBinding" (class "clojure.lang.Compiler$PathNode")))) 
                                      (172 (if_acmpne 204)) ;;to TAG_1
                                      (175 (aload_0)) 
                                      (176 (iconst_1)) 
                                      (177 (putfield (fieldCP "shouldClear" "clojure.lang.Compiler$LocalBindingExpr" boolean))) 
                                      (180 (aload_3)) 
                                      (181 (aload_0)) 
                                      (182 (invokestatic (methodCP "conj" "clojure.lang.RT" ((class "clojure.lang.IPersistentCollection") (class "java.lang.Object")) (class "clojure.lang.IPersistentCollection")))) 
                                      (185 (astore_3)) 
                                      (186 (getstatic (fieldCP "CLEAR_SITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (189 (getstatic (fieldCP "CLEAR_SITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (192 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (195 (aload_1)) 
                                      (196 (aload_3)) 
                                      (197 (invokestatic (methodCP "assoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative")))) 
                                      (200 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (203 (pop)) 
                                      (204 (return)) ;;at TAG_1
                                      (endofcode 205))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (ldc 1))         ;;STRING:: "Can\nt eval locals"
                                      (6 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void)))
                                      (9 (athrow))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "canEmitPrimitive"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "b" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (4 (invokevirtual (methodCP "getPrimitiveType" "clojure.lang.Compiler$LocalBinding" () (class "java.lang.Class")))) 
                                      (7 (ifnull 14))  ;;to TAG_0
                                      (10 (iconst_1)) 
                                      (11 (goto 15)) ;;to TAG_1
                                      (14 (iconst_0)) ;;at TAG_0
                                      (15 (ireturn)) ;;at TAG_1
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitUnboxed"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_2))
                                      (1 (aload_3))
                                      (2 (aload_0))
                                      (3 (getfield (fieldCP "b" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$LocalBinding"))))
                                      (6 (invokestatic
					(methodCP "access$1600" "clojure.lang.Compiler$ObjExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$LocalBinding")) void)))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (4 (if_acmpeq 20))  ;;to TAG_0
                                      (7 (aload_2)) 
                                      (8 (aload_3)) 
                                      (9 (aload_0)) 
                                      (10 (getfield (fieldCP "b" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (13 (aload_0)) 
                                      (14 (getfield (fieldCP "shouldClear" "clojure.lang.Compiler$LocalBindingExpr" boolean))) 
                                      (17 (invokestatic (methodCP "access$1700" "clojure.lang.Compiler$ObjExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$LocalBinding") boolean) void))) 
                                      (20 (return)) ;;at TAG_0
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "evalAssign"
                              (parameters (class "clojure.lang.Compiler$Expr"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "java.lang.UnsupportedOperationException")))
                                      (3 (dup))
                                      (4 (ldc 1))         ;;STRING:: "Can\nt eval locals"
                                      (6 (invokespecial
					(methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void)))
                                      (9 (athrow))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitAssign"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$Expr"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 29)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (aload_3)) 
                                      (2 (aload_0)) 
                                      (3 (getfield (fieldCP "b" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (6 (aload 4)) 
                                      (8 (invokevirtual (methodCP "emitAssignLocal" "clojure.lang.Compiler$ObjExpr" ((class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$LocalBinding") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (11 (aload_1)) 
                                      (12 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (15 (if_acmpeq 28))  ;;to TAG_0
                                      (18 (aload_2)) 
                                      (19 (aload_3)) 
                                      (20 (aload_0)) 
                                      (21 (getfield (fieldCP "b" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (24 (iconst_0)) 
                                      (25 (invokestatic (methodCP "access$1700" "clojure.lang.Compiler$ObjExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.lang.Compiler$LocalBinding") boolean) void))) 
                                      (28 (return)) ;;at TAG_0
                                      (endofcode 29))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 23)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tag" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Symbol")))) 
                                      (4 (ifnonnull 17)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "b" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (11 (invokevirtual (methodCP "hasJavaClass" "clojure.lang.Compiler$LocalBinding" () boolean))) 
                                      (14 (ifeq 21)) ;;to TAG_1
                                      (17 (iconst_1)) ;;at TAG_0
                                      (18 (goto 22))  ;;to TAG_2
                                      (21 (iconst_0)) ;;at TAG_1
                                      (22 (ireturn)) ;;at TAG_2
                                      (endofcode 23))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 23)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tag" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Symbol")))) 
                                      (4 (ifnull 15))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "tag" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Symbol")))) 
                                      (11 (invokestatic (methodCP "tagToClass" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (14 (areturn)) 
                                      (15 (aload_0)) ;;at TAG_0
                                      (16 (getfield (fieldCP "b" "clojure.lang.Compiler$LocalBindingExpr" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (19 (invokevirtual (methodCP "getJavaClass" "clojure.lang.Compiler$LocalBinding" () (class "java.lang.Class")))) 
                                      (22 (areturn)) 
                                      (endofcode 23))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$Expr" "clojure.lang.Compiler$MaybePrimitiveExpr" "clojure.lang.Compiler$AssignableExpr")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$LocalBindingExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$LocalBindingExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$LocalBindingExpr" . "clojure.lang"))

