; Compiler$IfExpr$Parser-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$IfExpr$Parser*
 (make-class-def
      '(class "clojure.lang.Compiler$IfExpr$Parser"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Too many arguments to if")
                        (STRING  "Too few arguments to if"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 12) (code_length . 243)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (checkcast (class "clojure.lang.ISeq"))) 
                                      (4 (astore_3)) 
                                      (5 (aload_3)) 
                                      (6 (invokeinterface (methodCP "count" "clojure.lang.ISeq" () int) 1)) 
                                      (11 (iconst_4)) 
                                      (12 (if_icmple 21)) ;;to TAG_0
                                      (15 (ldc 0)) ;;STRING:: "Too many arguments to if"
                                      (17 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (20 (athrow)) 
                                      (21 (aload_3)) ;;at TAG_0
                                      (22 (invokeinterface (methodCP "count" "clojure.lang.ISeq" () int) 1)) 
                                      (27 (iconst_3)) 
                                      (28 (if_icmpge 37))  ;;to TAG_1
                                      (31 (ldc 1)) ;;STRING:: "Too few arguments to if"
                                      (33 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (36 (athrow)) 
                                      (37 (new (class "clojure.lang.Compiler$PathNode"))) ;;at TAG_1
                                      (40 (dup)) 
                                      (41 (getstatic (fieldCP "BRANCH" "clojure.lang.Compiler$PATHTYPE" (class "clojure.lang.Compiler$PATHTYPE")))) 
                                      (44 (getstatic (fieldCP "CLEAR_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (47 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (50 (checkcast (class "clojure.lang.Compiler$PathNode"))) 
                                      (53 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$PathNode" ((class "clojure.lang.Compiler$PATHTYPE") (class "clojure.lang.Compiler$PathNode")) void))) 
                                      (56 (astore 4)) 
                                      (58 (aload_1)) 
                                      (59 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (62 (if_acmpne 69)) ;;to TAG_2
                                      (65 (aload_1)) 
                                      (66 (goto 72)) ;;to TAG_3
                                      (69 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_2
                                      (72 (aload_3)) ;;at TAG_3
                                      (73 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (76 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (79 (astore 5)) 
                                      (81 (iconst_2)) ;;at TAG_8
                                      (82 (anewarray (class "java.lang.Object"))) 
                                      (85 (dup)) 
                                      (86 (iconst_0)) 
                                      (87 (getstatic (fieldCP "CLEAR_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (90 (aastore)) 
                                      (91 (dup)) 
                                      (92 (iconst_1)) 
                                      (93 (new (class "clojure.lang.Compiler$PathNode"))) 
                                      (96 (dup)) 
                                      (97 (getstatic (fieldCP "PATH" "clojure.lang.Compiler$PATHTYPE" (class "clojure.lang.Compiler$PATHTYPE")))) 
                                      (100 (aload 4)) 
                                      (102 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$PathNode" ((class "clojure.lang.Compiler$PATHTYPE") (class "clojure.lang.Compiler$PathNode")) void))) 
                                      (105 (aastore)) 
                                      (106 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (109 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (112 (aload_1)) 
                                      (113 (aload_3)) 
                                      (114 (invokestatic (methodCP "third" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (117 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (120 (astore 6)) 
                                      (122 (jsr 136)) ;;to TAG_4
                                      (125 (goto 143)) ;;to TAG_5;;at TAG_9
                                      (128 (astore 8)) ;;at TAG_10
                                      (130 (jsr 136)) ;;to TAG_4
                                      (133 (aload 8)) ;;at TAG_11
                                      (135 (athrow)) 
                                      (136 (astore 9)) ;;at TAG_4
                                      (138 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (141 (ret 9)) 
                                      (143 (iconst_2)) ;;at TAG_5
                                      (144 (anewarray (class "java.lang.Object"))) 
                                      (147 (dup)) 
                                      (148 (iconst_0)) 
                                      (149 (getstatic (fieldCP "CLEAR_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (152 (aastore)) 
                                      (153 (dup)) 
                                      (154 (iconst_1)) 
                                      (155 (new (class "clojure.lang.Compiler$PathNode"))) 
                                      (158 (dup)) 
                                      (159 (getstatic (fieldCP "PATH" "clojure.lang.Compiler$PATHTYPE" (class "clojure.lang.Compiler$PATHTYPE")))) 
                                      (162 (aload 4)) 
                                      (164 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$PathNode" ((class "clojure.lang.Compiler$PATHTYPE") (class "clojure.lang.Compiler$PathNode")) void))) 
                                      (167 (aastore)) 
                                      (168 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (171 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (174 (aload_1)) 
                                      (175 (aload_3)) 
                                      (176 (invokestatic (methodCP "fourth" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (179 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (182 (astore 7)) 
                                      (184 (jsr 198)) ;;to TAG_6
                                      (187 (goto 205)) ;;to TAG_7;;at TAG_12
                                      (190 (astore 10)) ;;at TAG_13
                                      (192 (jsr 198)) ;;to TAG_6
                                      (195 (aload 10)) ;;at TAG_14
                                      (197 (athrow)) 
                                      (198 (astore 11)) ;;at TAG_6
                                      (200 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (203 (ret 11)) 
                                      (205 (new (class "clojure.lang.Compiler$IfExpr"))) ;;at TAG_7
                                      (208 (dup)) 
                                      (209 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (212 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (215 (checkcast (class "java.lang.Integer"))) 
                                      (218 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (221 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (224 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (227 (checkcast (class "java.lang.Integer"))) 
                                      (230 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (233 (aload 5)) 
                                      (235 (aload 6)) 
                                      (237 (aload 7)) 
                                      (239 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$IfExpr" (int int (class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (242 (areturn)) 
                                      (endofcode 243))
                                   (Exceptions 
                                     (handler 81 125  128 (class "java.lang.Throwable"))
                                     (handler 128 133  128 (class "java.lang.Throwable"))
                                     (handler 143 187  190 (class "java.lang.Throwable"))
                                     (handler 190 195  190 (class "java.lang.Throwable")))
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$IParser")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$IfExpr$Parser-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$IfExpr$Parser*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$IfExpr$Parser" . "clojure.lang"))

