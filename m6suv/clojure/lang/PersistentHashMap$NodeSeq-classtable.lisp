; PersistentHashMap$NodeSeq-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentHashMap$NodeSeq*
 (make-class-def
      '(class "clojure.lang.PersistentHashMap$NodeSeq"
            "clojure.lang.ASeq"
            (constant_pool)
            (fields
                        (field "array" (array (class "java.lang.Object")) (accessflags  *class*  *final* ) -1)
                        (field "i" int (accessflags  *class*  *final* ) -1)
                        (field "s" (class "clojure.lang.ISeq") (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters (array (class "java.lang.Object")) int)
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aconst_null))
                                      (2 (aload_1))
                                      (3 (iload_2))
                                      (4 (aconst_null))
                                      (5 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentHashMap$NodeSeq" ((class "clojure.lang.IPersistentMap") (array (class "java.lang.Object")) int (class "clojure.lang.ISeq")) void)))
                                      (8 (return))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (array (class "java.lang.Object")))
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iconst_0))
                                      (2 (aconst_null))
                                      (3 (invokestatic
					(methodCP "create" "clojure.lang.PersistentHashMap$NodeSeq" ((array (class "java.lang.Object")) int (class "clojure.lang.ISeq")) (class "clojure.lang.ISeq"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "kvreduce"
                              (parameters (array (class "java.lang.Object")) (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 5) (code_length . 83)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore_3)) 
                                      (2 (iload_3)) ;;at TAG_4
                                      (3 (aload_0)) 
                                      (4 (arraylength)) 
                                      (5 (if_icmpge 81)) ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (iload_3)) 
                                      (10 (aaload)) 
                                      (11 (ifnull 33)) ;;to TAG_1
                                      (14 (aload_1)) 
                                      (15 (aload_2)) 
                                      (16 (aload_0)) 
                                      (17 (iload_3)) 
                                      (18 (aaload)) 
                                      (19 (aload_0)) 
                                      (20 (iload_3)) 
                                      (21 (iconst_1)) 
                                      (22 (iadd)) 
                                      (23 (aaload)) 
                                      (24 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (29 (astore_2)) 
                                      (30 (goto 58))  ;;to TAG_2
                                      (33 (aload_0)) ;;at TAG_1
                                      (34 (iload_3)) 
                                      (35 (iconst_1)) 
                                      (36 (iadd)) 
                                      (37 (aaload)) 
                                      (38 (checkcast (class "clojure.lang.PersistentHashMap$INode"))) 
                                      (41 (astore 4)) 
                                      (43 (aload 4)) 
                                      (45 (ifnull 58))  ;;to TAG_2
                                      (48 (aload 4)) 
                                      (50 (aload_1)) 
                                      (51 (aload_2)) 
                                      (52 (invokeinterface (methodCP "kvreduce" "clojure.lang.PersistentHashMap$INode" ((class "clojure.lang.IFn") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (57 (astore_2)) 
                                      (58 (aload_2)) ;;at TAG_2
                                      (59 (invokestatic (methodCP "isReduced" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (62 (ifeq 75)) ;;to TAG_3
                                      (65 (aload_2)) 
                                      (66 (checkcast (class "clojure.lang.IDeref"))) 
                                      (69 (invokeinterface (methodCP "deref" "clojure.lang.IDeref" () (class "java.lang.Object")) 1)) 
                                      (74 (areturn)) 
                                      (75 (iinc 3 2)) ;;at TAG_3
                                      (78 (goto 2)) ;;to TAG_4
                                      (81 (aload_2)) ;;at TAG_0
                                      (82 (areturn)) 
                                      (endofcode 83))
                                   (Exceptions )
                                   (StackMap )))
                        (method "create"
                              (parameters (array (class "java.lang.Object")) int (class "clojure.lang.ISeq"))
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 6) (code_length . 94)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (ifnull 16)) ;;to TAG_0
                                      (4 (new (class "clojure.lang.PersistentHashMap$NodeSeq"))) 
                                      (7 (dup)) 
                                      (8 (aconst_null)) 
                                      (9 (aload_0)) 
                                      (10 (iload_1)) 
                                      (11 (aload_2)) 
                                      (12 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$NodeSeq" ((class "clojure.lang.IPersistentMap") (array (class "java.lang.Object")) int (class "clojure.lang.ISeq")) void))) 
                                      (15 (areturn)) 
                                      (16 (iload_1)) ;;at TAG_0
                                      (17 (istore_3)) 
                                      (18 (iload_3)) ;;at TAG_4
                                      (19 (aload_0)) 
                                      (20 (arraylength)) 
                                      (21 (if_icmpge 92)) ;;to TAG_1
                                      (24 (aload_0)) 
                                      (25 (iload_3)) 
                                      (26 (aaload)) 
                                      (27 (ifnull 42))  ;;to TAG_2
                                      (30 (new (class "clojure.lang.PersistentHashMap$NodeSeq"))) 
                                      (33 (dup)) 
                                      (34 (aconst_null)) 
                                      (35 (aload_0)) 
                                      (36 (iload_3)) 
                                      (37 (aconst_null)) 
                                      (38 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$NodeSeq" ((class "clojure.lang.IPersistentMap") (array (class "java.lang.Object")) int (class "clojure.lang.ISeq")) void))) 
                                      (41 (areturn)) 
                                      (42 (aload_0)) ;;at TAG_2
                                      (43 (iload_3)) 
                                      (44 (iconst_1)) 
                                      (45 (iadd)) 
                                      (46 (aaload)) 
                                      (47 (checkcast (class "clojure.lang.PersistentHashMap$INode"))) 
                                      (50 (astore 4)) 
                                      (52 (aload 4)) 
                                      (54 (ifnull 86)) ;;to TAG_3
                                      (57 (aload 4)) 
                                      (59 (invokeinterface (methodCP "nodeSeq" "clojure.lang.PersistentHashMap$INode" () (class "clojure.lang.ISeq")) 1)) 
                                      (64 (astore 5)) 
                                      (66 (aload 5)) 
                                      (68 (ifnull 86)) ;;to TAG_3
                                      (71 (new (class "clojure.lang.PersistentHashMap$NodeSeq"))) 
                                      (74 (dup)) 
                                      (75 (aconst_null)) 
                                      (76 (aload_0)) 
                                      (77 (iload_3)) 
                                      (78 (iconst_2)) 
                                      (79 (iadd)) 
                                      (80 (aload 5)) 
                                      (82 (invokespecial (methodCP "<init>" "clojure.lang.PersistentHashMap$NodeSeq" ((class "clojure.lang.IPersistentMap") (array (class "java.lang.Object")) int (class "clojure.lang.ISeq")) void))) 
                                      (85 (areturn)) 
                                      (86 (iinc 3 2)) ;;at TAG_3
                                      (89 (goto 18)) ;;to TAG_4
                                      (92 (aconst_null)) ;;at TAG_1
                                      (93 (areturn)) 
                                      (endofcode 94))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") (array (class "java.lang.Object")) int (class "clojure.lang.ISeq"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 22)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokespecial
					(methodCP "<init>" "clojure.lang.ASeq" ((class "clojure.lang.IPersistentMap")) void)))
                                      (5 (aload_0))
                                      (6 (aload_2))
                                      (7 (putfield (fieldCP "array" "clojure.lang.PersistentHashMap$NodeSeq" (array (class "java.lang.Object")))))
                                      (10 (aload_0))
                                      (11 (iload_3))
                                      (12 (putfield (fieldCP "i" "clojure.lang.PersistentHashMap$NodeSeq" int)))
                                      (15 (aload_0))
                                      (16 (aload 4))
                                      (18 (putfield (fieldCP "s" "clojure.lang.PersistentHashMap$NodeSeq" (class "clojure.lang.ISeq"))))
                                      (21 (return))
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.Obj"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 21)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.PersistentHashMap$NodeSeq")))
                                      (3 (dup))
                                      (4 (aload_1))
                                      (5 (aload_0))
                                      (6 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$NodeSeq" (array (class "java.lang.Object")))))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "i" "clojure.lang.PersistentHashMap$NodeSeq" int)))
                                      (13 (aload_0))
                                      (14 (getfield (fieldCP "s" "clojure.lang.PersistentHashMap$NodeSeq" (class "clojure.lang.ISeq"))))
                                      (17 (invokespecial
					(methodCP "<init>" "clojure.lang.PersistentHashMap$NodeSeq" ((class "clojure.lang.IPersistentMap") (array (class "java.lang.Object")) int (class "clojure.lang.ISeq")) void)))
                                      (20 (areturn))
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "first"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 1) (code_length . 45)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "s" "clojure.lang.PersistentHashMap$NodeSeq" (class "clojure.lang.ISeq")))) 
                                      (4 (ifnull 17))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "s" "clojure.lang.PersistentHashMap$NodeSeq" (class "clojure.lang.ISeq")))) 
                                      (11 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (16 (areturn)) 
                                      (17 (new (class "clojure.lang.MapEntry"))) ;;at TAG_0
                                      (20 (dup)) 
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$NodeSeq" (array (class "java.lang.Object"))))) 
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "i" "clojure.lang.PersistentHashMap$NodeSeq" int))) 
                                      (29 (aaload)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$NodeSeq" (array (class "java.lang.Object"))))) 
                                      (34 (aload_0)) 
                                      (35 (getfield (fieldCP "i" "clojure.lang.PersistentHashMap$NodeSeq" int))) 
                                      (38 (iconst_1)) 
                                      (39 (iadd)) 
                                      (40 (aaload)) 
                                      (41 (invokespecial (methodCP "<init>" "clojure.lang.MapEntry" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (44 (areturn)) 
                                      (endofcode 45))
                                   (Exceptions )
                                   (StackMap )))
                        (method "next"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 1) (code_length . 43)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "s" "clojure.lang.PersistentHashMap$NodeSeq" (class "clojure.lang.ISeq")))) 
                                      (4 (ifnull 28))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$NodeSeq" (array (class "java.lang.Object"))))) 
                                      (11 (aload_0)) 
                                      (12 (getfield (fieldCP "i" "clojure.lang.PersistentHashMap$NodeSeq" int))) 
                                      (15 (aload_0)) 
                                      (16 (getfield (fieldCP "s" "clojure.lang.PersistentHashMap$NodeSeq" (class "clojure.lang.ISeq")))) 
                                      (19 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (24 (invokestatic (methodCP "create" "clojure.lang.PersistentHashMap$NodeSeq" ((array (class "java.lang.Object")) int (class "clojure.lang.ISeq")) (class "clojure.lang.ISeq")))) 
                                      (27 (areturn)) 
                                      (28 (aload_0)) ;;at TAG_0
                                      (29 (getfield (fieldCP "array" "clojure.lang.PersistentHashMap$NodeSeq" (array (class "java.lang.Object"))))) 
                                      (32 (aload_0)) 
                                      (33 (getfield (fieldCP "i" "clojure.lang.PersistentHashMap$NodeSeq" int))) 
                                      (36 (iconst_2)) 
                                      (37 (iadd)) 
                                      (38 (aconst_null)) 
                                      (39 (invokestatic (methodCP "create" "clojure.lang.PersistentHashMap$NodeSeq" ((array (class "java.lang.Object")) int (class "clojure.lang.ISeq")) (class "clojure.lang.ISeq")))) 
                                      (42 (areturn)) 
                                      (endofcode 43))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.PersistentHashMap$NodeSeq" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.Obj"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentHashMap$NodeSeq-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentHashMap$NodeSeq*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentHashMap$NodeSeq" . "clojure.lang"))

