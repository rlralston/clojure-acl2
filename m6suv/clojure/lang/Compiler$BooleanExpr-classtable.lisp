; Compiler$BooleanExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$BooleanExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$BooleanExpr"
            "clojure.lang.Compiler$LiteralExpr"
            (constant_pool
                        (STRING  "TRUE")
                        (STRING  "FALSE"))
            (fields
                        (field "val" boolean (accessflags  *class*  *final*  *public* ) -1))
            (methods
                        (method "<init>"
                              (parameters boolean)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.Compiler$LiteralExpr" () void)))
                                      (4 (aload_0))
                                      (5 (iload_1))
                                      (6 (putfield (fieldCP "val" "clojure.lang.Compiler$BooleanExpr" boolean)))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "val"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 17)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "val" "clojure.lang.Compiler$BooleanExpr" boolean))) 
                                      (4 (ifeq 13))  ;;to TAG_0
                                      (7 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (10 (goto 16)) ;;to TAG_1
                                      (13 (getstatic (fieldCP "F" "clojure.lang.RT" (class "java.lang.Boolean")))) ;;at TAG_0
                                      (16 (areturn)) ;;at TAG_1
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 46)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "val" "clojure.lang.Compiler$BooleanExpr" boolean))) 
                                      (4 (ifeq 22)) ;;to TAG_0
                                      (7 (aload_3)) 
                                      (8 (getstatic (fieldCP "BOOLEAN_OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (11 (ldc 0)) ;;STRING:: "TRUE"
                                      (13 (getstatic (fieldCP "BOOLEAN_OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (16 (invokevirtual (methodCP "getStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "java.lang.String") (class "clojure.asm.Type")) void))) 
                                      (19 (goto 34)) ;;to TAG_1
                                      (22 (aload_3)) ;;at TAG_0
                                      (23 (getstatic (fieldCP "BOOLEAN_OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (26 (ldc 1)) ;;STRING:: "FALSE"
                                      (28 (getstatic (fieldCP "BOOLEAN_OBJECT_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (31 (invokevirtual (methodCP "getStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "java.lang.String") (class "clojure.asm.Type")) void))) 
                                      (34 (aload_1)) ;;at TAG_1
                                      (35 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (38 (if_acmpne 45))  ;;to TAG_2
                                      (41 (aload_3)) 
                                      (42 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (45 (return)) ;;at TAG_2
                                      (endofcode 46))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 4)
                                   (parsedcode
                                      (0 (ldc_w ))
                                      (3 (areturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$BooleanExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$BooleanExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$BooleanExpr" . "clojure.lang"))

