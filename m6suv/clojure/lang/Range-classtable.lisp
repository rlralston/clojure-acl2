; Range-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.Range*
 (make-class-def
      '(class "clojure.lang.Range"
            "clojure.lang.ASeq"
            (constant_pool)
            (fields
                        (field "end" int (accessflags  *class*  *final* ) -1)
                        (field "n" int (accessflags  *class*  *final* ) -1))
            (methods
                        (method "<init>"
                              (parameters int int)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.ASeq" () void)))
                                      (4 (aload_0))
                                      (5 (iload_2))
                                      (6 (putfield (fieldCP "end" "clojure.lang.Range" int)))
                                      (9 (aload_0))
                                      (10 (iload_1))
                                      (11 (putfield (fieldCP "n" "clojure.lang.Range" int)))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "clojure.lang.IPersistentMap") int int)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokespecial
					(methodCP "<init>" "clojure.lang.ASeq" ((class "clojure.lang.IPersistentMap")) void)))
                                      (5 (aload_0))
                                      (6 (iload_3))
                                      (7 (putfield (fieldCP "end" "clojure.lang.Range" int)))
                                      (10 (aload_0))
                                      (11 (iload_2))
                                      (12 (putfield (fieldCP "n" "clojure.lang.Range" int)))
                                      (15 (return))
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.Obj"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 30)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aload_0)) 
                                      (2 (invokevirtual (methodCP "meta" "clojure.lang.Range" () (class "clojure.lang.IPersistentMap")))) 
                                      (5 (if_acmpne 10))  ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (areturn)) 
                                      (10 (new (class "clojure.lang.Range"))) ;;at TAG_0
                                      (13 (dup)) 
                                      (14 (aload_0)) 
                                      (15 (invokevirtual (methodCP "meta" "clojure.lang.Range" () (class "clojure.lang.IPersistentMap")))) 
                                      (18 (aload_0)) 
                                      (19 (getfield (fieldCP "end" "clojure.lang.Range" int))) 
                                      (22 (aload_0)) 
                                      (23 (getfield (fieldCP "n" "clojure.lang.Range" int))) 
                                      (26 (invokespecial (methodCP "<init>" "clojure.lang.Range" ((class "clojure.lang.IPersistentMap") int int) void))) 
                                      (29 (areturn)) 
                                      (endofcode 30))
                                   (Exceptions )
                                   (StackMap )))
                        (method "first"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "n" "clojure.lang.Range" int)))
                                      (4 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "next"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 1) (code_length . 37)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "n" "clojure.lang.Range" int))) 
                                      (4 (aload_0)) 
                                      (5 (getfield (fieldCP "end" "clojure.lang.Range" int))) 
                                      (8 (iconst_1)) 
                                      (9 (isub)) 
                                      (10 (if_icmpge 35))  ;;to TAG_0
                                      (13 (new (class "clojure.lang.Range"))) 
                                      (16 (dup)) 
                                      (17 (aload_0)) 
                                      (18 (getfield (fieldCP "_meta" "clojure.lang.Range" (class "clojure.lang.IPersistentMap")))) 
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "n" "clojure.lang.Range" int))) 
                                      (25 (iconst_1)) 
                                      (26 (iadd)) 
                                      (27 (aload_0)) 
                                      (28 (getfield (fieldCP "end" "clojure.lang.Range" int))) 
                                      (31 (invokespecial (methodCP "<init>" "clojure.lang.Range" ((class "clojure.lang.IPersistentMap") int int) void))) 
                                      (34 (areturn)) 
                                      (35 (aconst_null)) ;;at TAG_0
                                      (36 (areturn)) 
                                      (endofcode 37))
                                   (Exceptions )
                                   (StackMap )))
                        (method "reduce"
                              (parameters (class "clojure.lang.IFn"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 43)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "n" "clojure.lang.Range" int))) 
                                      (4 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (7 (astore_2)) 
                                      (8 (aload_0)) 
                                      (9 (getfield (fieldCP "n" "clojure.lang.Range" int))) 
                                      (12 (iconst_1)) 
                                      (13 (iadd)) 
                                      (14 (istore_3)) 
                                      (15 (iload_3)) ;;at TAG_1
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "end" "clojure.lang.Range" int))) 
                                      (20 (if_icmpge 41))  ;;to TAG_0
                                      (23 (aload_1)) 
                                      (24 (aload_2)) 
                                      (25 (iload_3)) 
                                      (26 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (29 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (34 (astore_2)) 
                                      (35 (iinc 3 1)) 
                                      (38 (goto 15)) ;;to TAG_1
                                      (41 (aload_2)) ;;at TAG_0
                                      (42 (areturn)) 
                                      (endofcode 43))
                                   (Exceptions )
                                   (StackMap )))
                        (method "reduce"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 53)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aload_2)) 
                                      (2 (aload_0)) 
                                      (3 (getfield (fieldCP "n" "clojure.lang.Range" int))) 
                                      (6 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (9 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (14 (astore_3)) 
                                      (15 (aload_0)) 
                                      (16 (getfield (fieldCP "n" "clojure.lang.Range" int))) 
                                      (19 (iconst_1)) 
                                      (20 (iadd)) 
                                      (21 (istore 4)) 
                                      (23 (iload 4)) ;;at TAG_1
                                      (25 (aload_0)) 
                                      (26 (getfield (fieldCP "end" "clojure.lang.Range" int))) 
                                      (29 (if_icmpge 51))  ;;to TAG_0
                                      (32 (aload_1)) 
                                      (33 (aload_3)) 
                                      (34 (iload 4)) 
                                      (36 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (39 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (44 (astore_3)) 
                                      (45 (iinc 4 1)) 
                                      (48 (goto 23)) ;;to TAG_1
                                      (51 (aload_3)) ;;at TAG_0
                                      (52 (areturn)) 
                                      (endofcode 53))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "end" "clojure.lang.Range" int)))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "n" "clojure.lang.Range" int)))
                                      (8 (isub))
                                      (9 (ireturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "withMeta"
                              (parameters (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "clojure.lang.IObj"))
                              (accessflags  *class*  *public*  *volatile* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokevirtual
					(methodCP "withMeta" "clojure.lang.Range" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.Obj"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.IReduce" "clojure.lang.Counted")
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))


(defconst *Range-class-table*
  (make-static-class-decls 
   *clojure.lang.Range*))

(defconst *package-name-map* 
  ("clojure.lang.Range" . "clojure.lang"))

