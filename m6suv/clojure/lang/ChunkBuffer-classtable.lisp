; ChunkBuffer-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.ChunkBuffer*
 (make-class-def
      '(class "clojure.lang.ChunkBuffer"
            "java.lang.Object"
            (constant_pool)
            (fields
                        (field "buffer" (array (class "java.lang.Object")) (accessflags  *class* ) -1)
                        (field "end" int (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters int)
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (aload_0))
                                      (5 (iload_1))
                                      (6 (anewarray (class "java.lang.Object")))
                                      (9 (putfield (fieldCP "buffer" "clojure.lang.ChunkBuffer" (array (class "java.lang.Object")))))
                                      (12 (aload_0))
                                      (13 (iconst_0))
                                      (14 (putfield (fieldCP "end" "clojure.lang.ChunkBuffer" int)))
                                      (17 (return))
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "buffer" "clojure.lang.ChunkBuffer" (array (class "java.lang.Object")))))
                                      (4 (aload_0))
                                      (5 (dup))
                                      (6 (getfield (fieldCP "end" "clojure.lang.ChunkBuffer" int)))
                                      (9 (dup_x1))
                                      (10 (iconst_1))
                                      (11 (iadd))
                                      (12 (putfield (fieldCP "end" "clojure.lang.ChunkBuffer" int)))
                                      (15 (aload_1))
                                      (16 (aastore))
                                      (17 (return))
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "chunk"
                              (parameters )
                              (returntype . (class "clojure.lang.IChunk"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 24)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.ArrayChunk")))
                                      (3 (dup))
                                      (4 (aload_0))
                                      (5 (getfield (fieldCP "buffer" "clojure.lang.ChunkBuffer" (array (class "java.lang.Object")))))
                                      (8 (iconst_0))
                                      (9 (aload_0))
                                      (10 (getfield (fieldCP "end" "clojure.lang.ChunkBuffer" int)))
                                      (13 (invokespecial
					(methodCP "<init>" "clojure.lang.ArrayChunk" ((array (class "java.lang.Object")) int int) void)))
                                      (16 (astore_1))
                                      (17 (aload_0))
                                      (18 (aconst_null))
                                      (19 (putfield (fieldCP "buffer" "clojure.lang.ChunkBuffer" (array (class "java.lang.Object")))))
                                      (22 (aload_1))
                                      (23 (areturn))
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap )))
                        (method "count"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "end" "clojure.lang.ChunkBuffer" int)))
                                      (4 (ireturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Counted")
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))


(defconst *ChunkBuffer-class-table*
  (make-static-class-decls 
   *clojure.lang.ChunkBuffer*))

(defconst *package-name-map* 
  ("clojure.lang.ChunkBuffer" . "clojure.lang"))

