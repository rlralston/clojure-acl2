; LispReader$SyntaxQuoteReader-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.LispReader$SyntaxQuoteReader*
 (make-class-def
      '(class "clojure.lang.LispReader$SyntaxQuoteReader"
            "clojure.lang.AFn"
            (constant_pool
                        (STRING  "#")
                        (STRING  "Gensym literal not in syntax-quote")
                        (STRING  "__")
                        (STRING  "__auto__")
                        (STRING  ".")
                        (STRING  "splice not in list")
                        (STRING  "Unknown Collection type"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 7) (code_length . 57)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "java.io.PushbackReader"))) 
                                      (4 (astore_3)) 
                                      (5 (iconst_2)) ;;at TAG_0
                                      (6 (anewarray (class "java.lang.Object"))) 
                                      (9 (dup)) 
                                      (10 (iconst_0)) 
                                      (11 (getstatic (fieldCP "GENSYM_ENV" "clojure.lang.LispReader" (class "clojure.lang.Var")))) 
                                      (14 (aastore)) 
                                      (15 (dup)) 
                                      (16 (iconst_1)) 
                                      (17 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (20 (aastore)) 
                                      (21 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (24 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (27 (aload_3)) 
                                      (28 (iconst_1)) 
                                      (29 (aconst_null)) 
                                      (30 (iconst_1)) 
                                      (31 (invokestatic (methodCP "read" "clojure.lang.LispReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (34 (astore 4)) 
                                      (36 (aload 4)) 
                                      (38 (invokestatic (methodCP "syntaxQuote" "clojure.lang.LispReader$SyntaxQuoteReader" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (41 (astore 5)) 
                                      (43 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) ;;at TAG_1
                                      (46 (aload 5)) 
                                      (48 (areturn)) 
                                      (49 (astore 6)) ;;at TAG_2
                                      (51 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) ;;at TAG_3
                                      (54 (aload 6)) 
                                      (56 (athrow)) 
                                      (endofcode 57))
                                   (Exceptions 
                                     (handler 5 43  49 (class "java.lang.Throwable"))
                                     (handler 49 51  49 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "syntaxQuote"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 9) (max_locals . 5) (code_length . 671)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "isSpecial" "clojure.lang.Compiler" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 18)) ;;to TAG_0
                                      (7 (getstatic (fieldCP "QUOTE" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (10 (aload_0)) 
                                      (11 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (14 (astore_1)) 
                                      (15 (goto 600)) ;;to TAG_1
                                      (18 (aload_0)) ;;at TAG_0
                                      (19 (instanceof (class "clojure.lang.Symbol"))) 
                                      (22 (ifeq 313)) ;;to TAG_2
                                      (25 (aload_0)) 
                                      (26 (checkcast (class "clojure.lang.Symbol"))) 
                                      (29 (astore_2)) 
                                      (30 (aload_2)) 
                                      (31 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (34 (ifnonnull 163)) ;;to TAG_3
                                      (37 (aload_2)) 
                                      (38 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (41 (ldc 0)) ;;STRING:: "#"
                                      (43 (invokevirtual (methodCP "endsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (46 (ifeq 163)) ;;to TAG_3
                                      (49 (getstatic (fieldCP "GENSYM_ENV" "clojure.lang.LispReader" (class "clojure.lang.Var")))) 
                                      (52 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (55 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (58 (astore_3)) 
                                      (59 (aload_3)) 
                                      (60 (ifnonnull 73)) ;;to TAG_4
                                      (63 (new (class "java.lang.IllegalStateException"))) 
                                      (66 (dup)) 
                                      (67 (ldc 1)) ;;STRING:: "Gensym literal not in syntax-quote"
                                      (69 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (72 (athrow)) 
                                      (73 (aload_3)) ;;at TAG_4
                                      (74 (aload_2)) 
                                      (75 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (80 (checkcast (class "clojure.lang.Symbol"))) 
                                      (83 (astore 4)) 
                                      (85 (aload 4)) 
                                      (87 (ifnonnull 157))  ;;to TAG_5
                                      (90 (getstatic (fieldCP "GENSYM_ENV" "clojure.lang.LispReader" (class "clojure.lang.Var")))) 
                                      (93 (aload_3)) 
                                      (94 (aload_2)) 
                                      (95 (aconst_null)) 
                                      (96 (new (class "java.lang.StringBuilder"))) 
                                      (99 (dup)) 
                                      (100 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (103 (aload_2)) 
                                      (104 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (107 (iconst_0)) 
                                      (108 (aload_2)) 
                                      (109 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (112 (invokevirtual (methodCP "length" "java.lang.String" () int))) 
                                      (115 (iconst_1)) 
                                      (116 (isub)) 
                                      (117 (invokevirtual (methodCP "substring" "java.lang.String" (int int) (class "java.lang.String")))) 
                                      (120 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (123 (ldc 2)) ;;STRING:: "__"
                                      (125 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (128 (invokestatic (methodCP "nextID" "clojure.lang.RT" () int))) 
                                      (131 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (134 (ldc 3)) ;;STRING:: "__auto__"
                                      (136 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (139 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (142 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (145 (dup)) 
                                      (146 (astore 4)) 
                                      (148 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (153 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (156 (pop)) 
                                      (157 (aload 4)) ;;at TAG_5
                                      (159 (astore_2)) 
                                      (160 (goto 302)) ;;to TAG_6
                                      (163 (aload_2)) ;;at TAG_3
                                      (164 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (167 (ifnonnull 226)) ;;to TAG_7
                                      (170 (aload_2)) 
                                      (171 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (174 (ldc 4)) ;;STRING:: "."
                                      (176 (invokevirtual (methodCP "endsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (179 (ifeq 226)) ;;to TAG_7
                                      (182 (aconst_null)) 
                                      (183 (aload_2)) 
                                      (184 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (187 (iconst_0)) 
                                      (188 (aload_2)) 
                                      (189 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (192 (invokevirtual (methodCP "length" "java.lang.String" () int))) 
                                      (195 (iconst_1)) 
                                      (196 (isub)) 
                                      (197 (invokevirtual (methodCP "substring" "java.lang.String" (int int) (class "java.lang.String")))) 
                                      (200 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (203 (astore_3)) 
                                      (204 (aload_3)) 
                                      (205 (invokestatic (methodCP "resolveSymbol" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "clojure.lang.Symbol")))) 
                                      (208 (astore_3)) 
                                      (209 (aconst_null)) 
                                      (210 (aload_3)) 
                                      (211 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (214 (ldc 4)) ;;STRING:: "."
                                      (216 (invokevirtual (methodCP "concat" "java.lang.String" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (219 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (222 (astore_2)) 
                                      (223 (goto 302)) ;;to TAG_6
                                      (226 (aload_2)) ;;at TAG_7
                                      (227 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (230 (ifnonnull 248)) ;;to TAG_8
                                      (233 (aload_2)) 
                                      (234 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (237 (ldc 4)) ;;STRING:: "."
                                      (239 (invokevirtual (methodCP "startsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (242 (ifeq 248)) ;;to TAG_8
                                      (245 (goto 302)) ;;to TAG_6
                                      (248 (aconst_null)) ;;at TAG_8
                                      (249 (astore_3)) 
                                      (250 (aload_2)) 
                                      (251 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (254 (ifnull 272)) ;;to TAG_9
                                      (257 (invokestatic (methodCP "currentNS" "clojure.lang.Compiler" () (class "clojure.lang.Namespace")))) 
                                      (260 (aconst_null)) 
                                      (261 (aload_2)) 
                                      (262 (getfield (fieldCP "ns" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (265 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (268 (invokevirtual (methodCP "getMapping" "clojure.lang.Namespace" ((class "clojure.lang.Symbol")) (class "java.lang.Object")))) 
                                      (271 (astore_3)) 
                                      (272 (aload_3)) ;;at TAG_9
                                      (273 (instanceof (class "java.lang.Class"))) 
                                      (276 (ifeq 297)) ;;to TAG_10
                                      (279 (aload_3)) 
                                      (280 (checkcast (class "java.lang.Class"))) 
                                      (283 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (286 (aload_2)) 
                                      (287 (getfield (fieldCP "name" "clojure.lang.Symbol" (class "java.lang.String")))) 
                                      (290 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (293 (astore_2)) 
                                      (294 (goto 302)) ;;to TAG_6
                                      (297 (aload_2)) ;;at TAG_10
                                      (298 (invokestatic (methodCP "resolveSymbol" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "clojure.lang.Symbol")))) 
                                      (301 (astore_2)) 
                                      (302 (getstatic (fieldCP "QUOTE" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) ;;at TAG_6
                                      (305 (aload_2)) 
                                      (306 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (309 (astore_1)) 
                                      (310 (goto 600)) ;;to TAG_1
                                      (313 (aload_0)) ;;at TAG_2
                                      (314 (invokestatic (methodCP "isUnquote" "clojure.lang.LispReader" ((class "java.lang.Object")) boolean))) 
                                      (317 (ifeq 325)) ;;to TAG_11
                                      (320 (aload_0)) 
                                      (321 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (324 (areturn)) 
                                      (325 (aload_0)) ;;at TAG_11
                                      (326 (invokestatic (methodCP "isUnquoteSplicing" "clojure.lang.LispReader" ((class "java.lang.Object")) boolean))) 
                                      (329 (ifeq 342)) ;;to TAG_12
                                      (332 (new (class "java.lang.IllegalStateException"))) 
                                      (335 (dup)) 
                                      (336 (ldc 5)) ;;STRING:: "splice not in list"
                                      (338 (invokespecial (methodCP "<init>" "java.lang.IllegalStateException" ((class "java.lang.String")) void))) 
                                      (341 (athrow)) 
                                      (342 (aload_0)) ;;at TAG_12
                                      (343 (instanceof (class "clojure.lang.IPersistentCollection"))) 
                                      (346 (ifeq 559)) ;;to TAG_13
                                      (349 (aload_0)) 
                                      (350 (instanceof (class "clojure.lang.IRecord"))) 
                                      (353 (ifeq 361)) ;;to TAG_14
                                      (356 (aload_0)) 
                                      (357 (astore_1)) 
                                      (358 (goto 600)) ;;to TAG_1
                                      (361 (aload_0)) ;;at TAG_14
                                      (362 (instanceof (class "clojure.lang.IPersistentMap"))) 
                                      (365 (ifeq 407)) ;;to TAG_15
                                      (368 (aload_0)) 
                                      (369 (invokestatic (methodCP "flattenMap" "clojure.lang.LispReader$SyntaxQuoteReader" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")))) 
                                      (372 (astore_2)) 
                                      (373 (getstatic (fieldCP "APPLY" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (376 (getstatic (fieldCP "HASHMAP" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (379 (getstatic (fieldCP "SEQ" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (382 (getstatic (fieldCP "CONCAT" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (385 (aload_2)) 
                                      (386 (invokeinterface (methodCP "seq" "clojure.lang.IPersistentVector" () (class "clojure.lang.ISeq")) 1)) 
                                      (391 (invokestatic (methodCP "sqExpandList" "clojure.lang.LispReader$SyntaxQuoteReader" ((class "clojure.lang.ISeq")) (class "clojure.lang.ISeq")))) 
                                      (394 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (397 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (400 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (403 (astore_1)) 
                                      (404 (goto 600)) ;;to TAG_1
                                      (407 (aload_0)) ;;at TAG_15
                                      (408 (instanceof (class "clojure.lang.IPersistentVector"))) 
                                      (411 (ifeq 451)) ;;to TAG_16
                                      (414 (getstatic (fieldCP "APPLY" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (417 (getstatic (fieldCP "VECTOR" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (420 (getstatic (fieldCP "SEQ" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (423 (getstatic (fieldCP "CONCAT" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (426 (aload_0)) 
                                      (427 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (430 (invokeinterface (methodCP "seq" "clojure.lang.IPersistentVector" () (class "clojure.lang.ISeq")) 1)) 
                                      (435 (invokestatic (methodCP "sqExpandList" "clojure.lang.LispReader$SyntaxQuoteReader" ((class "clojure.lang.ISeq")) (class "clojure.lang.ISeq")))) 
                                      (438 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (441 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (444 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (447 (astore_1)) 
                                      (448 (goto 600)) ;;to TAG_1
                                      (451 (aload_0)) ;;at TAG_16
                                      (452 (instanceof (class "clojure.lang.IPersistentSet"))) 
                                      (455 (ifeq 495)) ;;to TAG_17
                                      (458 (getstatic (fieldCP "APPLY" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (461 (getstatic (fieldCP "HASHSET" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (464 (getstatic (fieldCP "SEQ" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (467 (getstatic (fieldCP "CONCAT" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (470 (aload_0)) 
                                      (471 (checkcast (class "clojure.lang.IPersistentSet"))) 
                                      (474 (invokeinterface (methodCP "seq" "clojure.lang.IPersistentSet" () (class "clojure.lang.ISeq")) 1)) 
                                      (479 (invokestatic (methodCP "sqExpandList" "clojure.lang.LispReader$SyntaxQuoteReader" ((class "clojure.lang.ISeq")) (class "clojure.lang.ISeq")))) 
                                      (482 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (485 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (488 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (491 (astore_1)) 
                                      (492 (goto 600)) ;;to TAG_1
                                      (495 (aload_0)) ;;at TAG_17
                                      (496 (instanceof (class "clojure.lang.ISeq"))) 
                                      (499 (ifne 509)) ;;to TAG_18
                                      (502 (aload_0)) 
                                      (503 (instanceof (class "clojure.lang.IPersistentList"))) 
                                      (506 (ifeq 549)) ;;to TAG_19
                                      (509 (aload_0)) ;;at TAG_18
                                      (510 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (513 (astore_2)) 
                                      (514 (aload_2)) 
                                      (515 (ifnonnull 529)) ;;to TAG_20
                                      (518 (getstatic (fieldCP "LIST" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (521 (aconst_null)) 
                                      (522 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (525 (astore_1)) 
                                      (526 (goto 546)) ;;to TAG_21
                                      (529 (getstatic (fieldCP "SEQ" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) ;;at TAG_20
                                      (532 (getstatic (fieldCP "CONCAT" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (535 (aload_2)) 
                                      (536 (invokestatic (methodCP "sqExpandList" "clojure.lang.LispReader$SyntaxQuoteReader" ((class "clojure.lang.ISeq")) (class "clojure.lang.ISeq")))) 
                                      (539 (invokestatic (methodCP "cons" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (542 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (545 (astore_1)) 
                                      (546 (goto 600)) ;;to TAG_1;;at TAG_21
                                      (549 (new (class "java.lang.UnsupportedOperationException"))) ;;at TAG_19
                                      (552 (dup)) 
                                      (553 (ldc 6)) ;;STRING:: "Unknown Collection type"
                                      (555 (invokespecial (methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void))) 
                                      (558 (athrow)) 
                                      (559 (aload_0)) ;;at TAG_13
                                      (560 (instanceof (class "clojure.lang.Keyword"))) 
                                      (563 (ifne 587)) ;;to TAG_22
                                      (566 (aload_0)) 
                                      (567 (instanceof (class "java.lang.Number"))) 
                                      (570 (ifne 587)) ;;to TAG_22
                                      (573 (aload_0)) 
                                      (574 (instanceof (class "java.lang.Character"))) 
                                      (577 (ifne 587)) ;;to TAG_22
                                      (580 (aload_0)) 
                                      (581 (instanceof (class "java.lang.String"))) 
                                      (584 (ifeq 592)) ;;to TAG_23
                                      (587 (aload_0)) ;;at TAG_22
                                      (588 (astore_1)) 
                                      (589 (goto 600)) ;;to TAG_1
                                      (592 (getstatic (fieldCP "QUOTE" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) ;;at TAG_23
                                      (595 (aload_0)) 
                                      (596 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (599 (astore_1)) 
                                      (600 (aload_0)) ;;at TAG_1
                                      (601 (instanceof (class "clojure.lang.IObj"))) 
                                      (604 (ifeq 669)) ;;to TAG_24
                                      (607 (aload_0)) 
                                      (608 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (611 (ifnull 669)) ;;to TAG_24
                                      (614 (aload_0)) 
                                      (615 (checkcast (class "clojure.lang.IObj"))) 
                                      (618 (invokeinterface (methodCP "meta" "clojure.lang.IObj" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (623 (getstatic (fieldCP "LINE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (626 (invokeinterface (methodCP "without" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 2)) 
                                      (631 (getstatic (fieldCP "COLUMN_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (634 (invokeinterface (methodCP "without" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 2)) 
                                      (639 (astore_2)) 
                                      (640 (aload_2)) 
                                      (641 (invokeinterface (methodCP "count" "clojure.lang.IPersistentMap" () int) 1)) 
                                      (646 (ifle 669)) ;;to TAG_24
                                      (649 (getstatic (fieldCP "WITH_META" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (652 (aload_1)) 
                                      (653 (aload_0)) 
                                      (654 (checkcast (class "clojure.lang.IObj"))) 
                                      (657 (invokeinterface (methodCP "meta" "clojure.lang.IObj" () (class "clojure.lang.IPersistentMap")) 1)) 
                                      (662 (invokestatic (methodCP "syntaxQuote" "clojure.lang.LispReader$SyntaxQuoteReader" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (665 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (668 (areturn)) 
                                      (669 (aload_1)) ;;at TAG_24
                                      (670 (areturn)) 
                                      (endofcode 671))
                                   (Exceptions )
                                   (StackMap )))
                        (method "sqExpandList"
                              (parameters (class "clojure.lang.ISeq"))
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 89)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (3 (astore_1)) 
                                      (4 (aload_0)) ;;at TAG_4
                                      (5 (ifnull 84)) ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (14 (astore_2)) 
                                      (15 (aload_2)) 
                                      (16 (invokestatic (methodCP "isUnquote" "clojure.lang.LispReader" ((class "java.lang.Object")) boolean))) 
                                      (19 (ifeq 40)) ;;to TAG_1
                                      (22 (aload_1)) 
                                      (23 (getstatic (fieldCP "LIST" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (26 (aload_2)) 
                                      (27 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (30 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (33 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (36 (astore_1)) 
                                      (37 (goto 74))  ;;to TAG_2
                                      (40 (aload_2)) ;;at TAG_1
                                      (41 (invokestatic (methodCP "isUnquoteSplicing" "clojure.lang.LispReader" ((class "java.lang.Object")) boolean))) 
                                      (44 (ifeq 59)) ;;to TAG_3
                                      (47 (aload_1)) 
                                      (48 (aload_2)) 
                                      (49 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (52 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (55 (astore_1)) 
                                      (56 (goto 74))  ;;to TAG_2
                                      (59 (aload_1)) ;;at TAG_3
                                      (60 (getstatic (fieldCP "LIST" "clojure.lang.LispReader" (class "clojure.lang.Symbol")))) 
                                      (63 (aload_2)) 
                                      (64 (invokestatic (methodCP "syntaxQuote" "clojure.lang.LispReader$SyntaxQuoteReader" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (67 (invokestatic (methodCP "list" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (70 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (73 (astore_1)) 
                                      (74 (aload_0)) ;;at TAG_2
                                      (75 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (80 (astore_0)) 
                                      (81 (goto 4)) ;;to TAG_4
                                      (84 (aload_1)) ;;at TAG_0
                                      (85 (invokevirtual (methodCP "seq" "clojure.lang.PersistentVector" () (class "clojure.lang.ISeq")))) 
                                      (88 (areturn)) 
                                      (endofcode 89))
                                   (Exceptions )
                                   (StackMap )))
                        (method "flattenMap"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IPersistentVector"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 61)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (3 (astore_1)) 
                                      (4 (aload_0)) 
                                      (5 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (8 (astore_2)) 
                                      (9 (aload_2)) ;;at TAG_1
                                      (10 (ifnull 59))  ;;to TAG_0
                                      (13 (aload_2)) 
                                      (14 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (19 (checkcast (class "clojure.lang.IMapEntry"))) 
                                      (22 (astore_3)) 
                                      (23 (aload_1)) 
                                      (24 (aload_3)) 
                                      (25 (invokeinterface (methodCP "key" "clojure.lang.IMapEntry" () (class "java.lang.Object")) 1)) 
                                      (30 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 2)) 
                                      (35 (astore_1)) 
                                      (36 (aload_1)) 
                                      (37 (aload_3)) 
                                      (38 (invokeinterface (methodCP "val" "clojure.lang.IMapEntry" () (class "java.lang.Object")) 1)) 
                                      (43 (invokeinterface (methodCP "cons" "clojure.lang.IPersistentVector" ((class "java.lang.Object")) (class "clojure.lang.IPersistentVector")) 2)) 
                                      (48 (astore_1)) 
                                      (49 (aload_2)) 
                                      (50 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (55 (astore_2)) 
                                      (56 (goto 9)) ;;to TAG_1
                                      (59 (aload_1)) ;;at TAG_0
                                      (60 (areturn)) 
                                      (endofcode 61))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *LispReader$SyntaxQuoteReader-class-table*
  (make-static-class-decls 
   *clojure.lang.LispReader$SyntaxQuoteReader*))

(defconst *package-name-map* 
  ("clojure.lang.LispReader$SyntaxQuoteReader" . "clojure.lang"))

