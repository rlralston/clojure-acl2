; EdnReader$MetaReader-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.EdnReader$MetaReader*
 (make-class-def
      '(class "clojure.lang.EdnReader$MetaReader"
            "clojure.lang.AFn"
            (constant_pool
                        (STRING  "Metadata must be Symbol,Keyword,String or Map")
                        (STRING  "Metadata can only be applied to IMetas"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 12) (code_length . 324)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "java.io.PushbackReader"))) 
                                      (4 (astore 4)) 
                                      (6 (iconst_m1)) 
                                      (7 (istore 5)) 
                                      (9 (iconst_m1)) 
                                      (10 (istore 6)) 
                                      (12 (aload 4)) 
                                      (14 (instanceof (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (17 (ifeq 42)) ;;to TAG_0
                                      (20 (aload 4)) 
                                      (22 (checkcast (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (25 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (28 (istore 5)) 
                                      (30 (aload 4)) 
                                      (32 (checkcast (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (35 (invokevirtual (methodCP "getColumnNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (38 (iconst_1)) 
                                      (39 (isub)) 
                                      (40 (istore 6)) 
                                      (42 (aload 4)) ;;at TAG_0
                                      (44 (iconst_1)) 
                                      (45 (aconst_null)) 
                                      (46 (iconst_1)) 
                                      (47 (aload_3)) 
                                      (48 (invokestatic (methodCP "read" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (51 (astore 7)) 
                                      (53 (aload 7)) 
                                      (55 (instanceof (class "clojure.lang.Symbol"))) 
                                      (58 (ifne 69))  ;;to TAG_1
                                      (61 (aload 7)) 
                                      (63 (instanceof (class "java.lang.String"))) 
                                      (66 (ifeq 92)) ;;to TAG_2
                                      (69 (iconst_2)) ;;at TAG_1
                                      (70 (anewarray (class "java.lang.Object"))) 
                                      (73 (dup)) 
                                      (74 (iconst_0)) 
                                      (75 (getstatic (fieldCP "TAG_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (78 (aastore)) 
                                      (79 (dup)) 
                                      (80 (iconst_1)) 
                                      (81 (aload 7)) 
                                      (83 (aastore)) 
                                      (84 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (87 (astore 7)) 
                                      (89 (goto 141)) ;;to TAG_3
                                      (92 (aload 7)) ;;at TAG_2
                                      (94 (instanceof (class "clojure.lang.Keyword"))) 
                                      (97 (ifeq 123)) ;;to TAG_4
                                      (100 (iconst_2)) 
                                      (101 (anewarray (class "java.lang.Object"))) 
                                      (104 (dup)) 
                                      (105 (iconst_0)) 
                                      (106 (aload 7)) 
                                      (108 (aastore)) 
                                      (109 (dup)) 
                                      (110 (iconst_1)) 
                                      (111 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (114 (aastore)) 
                                      (115 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (118 (astore 7)) 
                                      (120 (goto 141)) ;;to TAG_3
                                      (123 (aload 7)) ;;at TAG_4
                                      (125 (instanceof (class "clojure.lang.IPersistentMap"))) 
                                      (128 (ifne 141)) ;;to TAG_3
                                      (131 (new (class "java.lang.IllegalArgumentException"))) 
                                      (134 (dup)) 
                                      (135 (ldc 0)) ;;STRING:: "Metadata must be Symbol,Keyword,String or Map"
                                      (137 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (140 (athrow)) 
                                      (141 (aload 4)) ;;at TAG_3
                                      (143 (iconst_1)) 
                                      (144 (aconst_null)) 
                                      (145 (iconst_1)) 
                                      (146 (aload_3)) 
                                      (147 (invokestatic (methodCP "read" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (150 (astore 8)) 
                                      (152 (aload 8)) 
                                      (154 (instanceof (class "clojure.lang.IMeta"))) 
                                      (157 (ifeq 314)) ;;to TAG_5
                                      (160 (iload 5)) 
                                      (162 (iconst_m1)) 
                                      (163 (if_icmpeq 207)) ;;to TAG_6
                                      (166 (aload 8)) 
                                      (168 (instanceof (class "clojure.lang.ISeq"))) 
                                      (171 (ifeq 207)) ;;to TAG_6
                                      (174 (aload 7)) 
                                      (176 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (179 (getstatic (fieldCP "LINE_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (182 (iload 5)) 
                                      (184 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (187 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (192 (getstatic (fieldCP "COLUMN_KEY" "clojure.lang.RT" (class "clojure.lang.Keyword")))) 
                                      (195 (iload 6)) 
                                      (197 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (200 (invokeinterface (methodCP "assoc" "clojure.lang.IPersistentMap" ((class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.IPersistentMap")) 3)) 
                                      (205 (astore 7)) 
                                      (207 (aload 8)) ;;at TAG_6
                                      (209 (instanceof (class "clojure.lang.IReference"))) 
                                      (212 (ifeq 234)) ;;to TAG_7
                                      (215 (aload 8)) 
                                      (217 (checkcast (class "clojure.lang.IReference"))) 
                                      (220 (aload 7)) 
                                      (222 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (225 (invokeinterface (methodCP "resetMeta" "clojure.lang.IReference" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IPersistentMap")) 2)) 
                                      (230 (pop)) 
                                      (231 (aload 8)) 
                                      (233 (areturn)) 
                                      (234 (aload 8)) ;;at TAG_7
                                      (236 (invokestatic (methodCP "meta" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.IPersistentMap")))) 
                                      (239 (astore 9)) 
                                      (241 (aload 7)) 
                                      (243 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (246 (astore 10)) 
                                      (248 (aload 10)) ;;at TAG_9
                                      (250 (ifnull 298)) ;;to TAG_8
                                      (253 (aload 10)) 
                                      (255 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (260 (checkcast (class "clojure.lang.IMapEntry"))) 
                                      (263 (astore 11)) 
                                      (265 (aload 9)) 
                                      (267 (aload 11)) 
                                      (269 (invokeinterface (methodCP "getKey" "clojure.lang.IMapEntry" () (class "java.lang.Object")) 1)) 
                                      (274 (aload 11)) 
                                      (276 (invokeinterface (methodCP "getValue" "clojure.lang.IMapEntry" () (class "java.lang.Object")) 1)) 
                                      (281 (invokestatic (methodCP "assoc" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "clojure.lang.Associative")))) 
                                      (284 (astore 9)) 
                                      (286 (aload 10)) 
                                      (288 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (293 (astore 10)) 
                                      (295 (goto 248)) ;;to TAG_9
                                      (298 (aload 8)) ;;at TAG_8
                                      (300 (checkcast (class "clojure.lang.IObj"))) 
                                      (303 (aload 9)) 
                                      (305 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (308 (invokeinterface (methodCP "withMeta" "clojure.lang.IObj" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")) 2)) 
                                      (313 (areturn)) 
                                      (314 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_5
                                      (317 (dup)) 
                                      (318 (ldc 1)) ;;STRING:: "Metadata can only be applied to IMetas"
                                      (320 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (323 (athrow)) 
                                      (endofcode 324))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *EdnReader$MetaReader-class-table*
  (make-static-class-decls 
   *clojure.lang.EdnReader$MetaReader*))

(defconst *package-name-map* 
  ("clojure.lang.EdnReader$MetaReader" . "clojure.lang"))

