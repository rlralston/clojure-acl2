; Compiler$NewExpr$Parser-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$NewExpr$Parser*
 (make-class-def
      '(class "clojure.lang.Compiler$NewExpr$Parser"
            "java.lang.Object"
            (constant_pool
                        (STRING  "wrong number of arguments, expecting: (new Classname args...)")
                        (STRING  "Unable to resolve classname: "))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$C") (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Compiler$Expr"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 9) (code_length . 175)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "java.lang.Integer"))) 
                                      (9 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (12 (istore_3)) 
                                      (13 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (16 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (19 (checkcast (class "java.lang.Integer"))) 
                                      (22 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (25 (istore 4)) 
                                      (27 (aload_2)) 
                                      (28 (checkcast (class "clojure.lang.ISeq"))) 
                                      (31 (astore 5)) 
                                      (33 (aload 5)) 
                                      (35 (invokeinterface (methodCP "count" "clojure.lang.ISeq" () int) 1)) 
                                      (40 (iconst_2)) 
                                      (41 (if_icmpge 50)) ;;to TAG_0
                                      (44 (ldc 0)) ;;STRING:: "wrong number of arguments, expecting: (new Classname args...)"
                                      (46 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (49 (athrow)) 
                                      (50 (aload 5)) ;;at TAG_0
                                      (52 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (55 (iconst_0)) 
                                      (56 (invokestatic (methodCP "access$400" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object") boolean) (class "java.lang.Class")))) 
                                      (59 (astore 6)) 
                                      (61 (aload 6)) 
                                      (63 (ifnonnull 97)) ;;to TAG_1
                                      (66 (new (class "java.lang.IllegalArgumentException"))) 
                                      (69 (dup)) 
                                      (70 (new (class "java.lang.StringBuilder"))) 
                                      (73 (dup)) 
                                      (74 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (77 (ldc 1)) ;;STRING:: "Unable to resolve classname: "
                                      (79 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (82 (aload 5)) 
                                      (84 (invokestatic (methodCP "second" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (87 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (90 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (93 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (96 (athrow)) 
                                      (97 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) ;;at TAG_1
                                      (100 (astore 7)) 
                                      (102 (aload 5)) 
                                      (104 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (107 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (110 (astore 8)) 
                                      (112 (aload 8)) ;;at TAG_5
                                      (114 (ifnull 160))  ;;to TAG_2
                                      (117 (aload 7)) 
                                      (119 (aload_1)) 
                                      (120 (getstatic (fieldCP "EVAL" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (123 (if_acmpne 130)) ;;to TAG_3
                                      (126 (aload_1)) 
                                      (127 (goto 133)) ;;to TAG_4
                                      (130 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) ;;at TAG_3
                                      (133 (aload 8)) ;;at TAG_4
                                      (135 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (140 (invokestatic (methodCP "analyze" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (143 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (146 (astore 7)) 
                                      (148 (aload 8)) 
                                      (150 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (155 (astore 8)) 
                                      (157 (goto 112)) ;;to TAG_5
                                      (160 (new (class "clojure.lang.Compiler$NewExpr"))) ;;at TAG_2
                                      (163 (dup)) 
                                      (164 (aload 6)) 
                                      (166 (aload 7)) 
                                      (168 (iload_3)) 
                                      (169 (iload 4)) 
                                      (171 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$NewExpr" ((class "java.lang.Class") (class "clojure.lang.IPersistentVector") int int) void))) 
                                      (174 (areturn)) 
                                      (endofcode 175))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces "clojure.lang.Compiler$IParser")
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$NewExpr$Parser-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$NewExpr$Parser*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$NewExpr$Parser" . "clojure.lang"))

