; PersistentHashMap$INode-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.PersistentHashMap$INode*
 (make-class-def
      '(class "clojure.lang.PersistentHashMap$INode"
            "java.lang.Object"
            (constant_pool)
            (fields)
            (methods
                        (method "assoc"
                              (parameters int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "without"
                              (parameters int int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "find"
                              (parameters int int (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.IMapEntry"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "find"
                              (parameters int int (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "nodeSeq"
                              (parameters )
                              (returntype . (class "clojure.lang.ISeq"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "assoc"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.Box"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "without"
                              (parameters (class "java.util.concurrent.atomic.AtomicReference") int int (class "java.lang.Object") (class "clojure.lang.Box"))
                              (returntype . (class "clojure.lang.PersistentHashMap$INode"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "kvreduce"
                              (parameters (class "clojure.lang.IFn") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "fold"
                              (parameters (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn") (class "clojure.lang.IFn"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code)))
            (interfaces "java.io.Serializable")
            (accessflags  *abstract*  *interface* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *PersistentHashMap$INode-class-table*
  (make-static-class-decls 
   *clojure.lang.PersistentHashMap$INode*))

(defconst *package-name-map* 
  ("clojure.lang.PersistentHashMap$INode" . "clojure.lang"))

