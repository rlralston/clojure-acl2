; Compiler$StaticMethodExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.Compiler$StaticMethodExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$StaticMethodExpr"
            "clojure.lang.Compiler$MethodExpr"
            (constant_pool
                        (STRING  "No matching method: ")
                        (STRING  "Reflection warning, %s:%d:%d - call to %s can\nt be resolved.\n")
                        (STRING  "Unboxed emit of unknown member")
                        (STRING  "Class forName(String)")
                        (STRING  "Object invokeStaticMethod(Class,String,Object[])"))
            (fields
                        (field "c" (class "java.lang.Class") (accessflags  *class*  *final*  *public* ) -1)
                        (field "methodName" (class "java.lang.String") (accessflags  *class*  *final*  *public* ) -1)
                        (field "args" (class "clojure.lang.IPersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "source" (class "java.lang.String") (accessflags  *class*  *final*  *public* ) -1)
                        (field "line" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "column" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "method" (class "java.lang.reflect.Method") (accessflags  *class*  *final*  *public* ) -1)
                        (field "tag" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *public* ) -1)
                        (field "forNameMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1)
                        (field "invokeStaticMethodMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.String") int int (class "clojure.lang.Symbol") (class "java.lang.Class") (class "java.lang.String") (class "clojure.lang.IPersistentVector"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 14) (code_length . 286)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$MethodExpr" () void))) 
                                      (4 (aload_0)) 
                                      (5 (aload 5)) 
                                      (7 (putfield (fieldCP "c" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.Class")))) 
                                      (10 (aload_0)) 
                                      (11 (aload 6)) 
                                      (13 (putfield (fieldCP "methodName" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.String")))) 
                                      (16 (aload_0)) 
                                      (17 (aload 7)) 
                                      (19 (putfield (fieldCP "args" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (22 (aload_0)) 
                                      (23 (aload_1)) 
                                      (24 (putfield (fieldCP "source" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.String")))) 
                                      (27 (aload_0)) 
                                      (28 (iload_2)) 
                                      (29 (putfield (fieldCP "line" "clojure.lang.Compiler$StaticMethodExpr" int))) 
                                      (32 (aload_0)) 
                                      (33 (iload_3)) 
                                      (34 (putfield (fieldCP "column" "clojure.lang.Compiler$StaticMethodExpr" int))) 
                                      (37 (aload_0)) 
                                      (38 (aload 4)) 
                                      (40 (putfield (fieldCP "tag" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.lang.Symbol")))) 
                                      (43 (aload 5)) 
                                      (45 (aload 7)) 
                                      (47 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (52 (aload 6)) 
                                      (54 (iconst_1)) 
                                      (55 (invokestatic (methodCP "getMethods" "clojure.lang.Reflector" ((class "java.lang.Class") int (class "java.lang.String") boolean) (class "java.util.List")))) 
                                      (58 (astore 8)) 
                                      (60 (aload 8)) 
                                      (62 (invokeinterface (methodCP "isEmpty" "java.util.List" () boolean) 1)) 
                                      (67 (ifeq 98)) ;;to TAG_0
                                      (70 (new (class "java.lang.IllegalArgumentException"))) 
                                      (73 (dup)) 
                                      (74 (new (class "java.lang.StringBuilder"))) 
                                      (77 (dup)) 
                                      (78 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (81 (ldc 0)) ;;STRING:: "No matching method: "
                                      (83 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (86 (aload 6)) 
                                      (88 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (91 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (94 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (97 (athrow)) 
                                      (98 (iconst_0)) ;;at TAG_0
                                      (99 (istore 9)) 
                                      (101 (aload 8)) 
                                      (103 (invokeinterface (methodCP "size" "java.util.List" () int) 1)) 
                                      (108 (iconst_1)) 
                                      (109 (if_icmple 200)) ;;to TAG_1
                                      (112 (new (class "java.util.ArrayList"))) 
                                      (115 (dup)) 
                                      (116 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (119 (astore 10)) 
                                      (121 (new (class "java.util.ArrayList"))) 
                                      (124 (dup)) 
                                      (125 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (128 (astore 11)) 
                                      (130 (iconst_0)) 
                                      (131 (istore 12)) 
                                      (133 (iload 12)) ;;at TAG_3
                                      (135 (aload 8)) 
                                      (137 (invokeinterface (methodCP "size" "java.util.List" () int) 1)) 
                                      (142 (if_icmpge 187))  ;;to TAG_2
                                      (145 (aload 8)) 
                                      (147 (iload 12)) 
                                      (149 (invokeinterface (methodCP "get" "java.util.List" (int) (class "java.lang.Object")) 2)) 
                                      (154 (checkcast (class "java.lang.reflect.Method"))) 
                                      (157 (astore 13)) 
                                      (159 (aload 10)) 
                                      (161 (aload 13)) 
                                      (163 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Method" () (array (class "java.lang.Class"))))) 
                                      (166 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (169 (pop)) 
                                      (170 (aload 11)) 
                                      (172 (aload 13)) 
                                      (174 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (177 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (180 (pop)) 
                                      (181 (iinc 12 1)) 
                                      (184 (goto 133)) ;;to TAG_3
                                      (187 (aload 6)) ;;at TAG_2
                                      (189 (aload 10)) 
                                      (191 (aload 7)) 
                                      (193 (aload 11)) 
                                      (195 (invokestatic (methodCP "getMatchingParams" "clojure.lang.Compiler" ((class "java.lang.String") (class "java.util.ArrayList") (class "clojure.lang.IPersistentVector") (class "java.util.List")) int))) 
                                      (198 (istore 9)) 
                                      (200 (aload_0)) ;;at TAG_1
                                      (201 (iload 9)) 
                                      (203 (iflt 218)) ;;to TAG_4
                                      (206 (aload 8)) 
                                      (208 (iload 9)) 
                                      (210 (invokeinterface (methodCP "get" "java.util.List" (int) (class "java.lang.Object")) 2)) 
                                      (215 (goto 219)) ;;to TAG_5
                                      (218 (aconst_null)) ;;at TAG_4
                                      (219 (checkcast (class "java.lang.reflect.Method"))) ;;at TAG_5
                                      (222 (putfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (225 (aload_0)) 
                                      (226 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (229 (ifnonnull 285)) ;;to TAG_6
                                      (232 (getstatic (fieldCP "WARN_ON_REFLECTION" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (235 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (238 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (241 (ifeq 285)) ;;to TAG_6
                                      (244 (invokestatic (methodCP "errPrintWriter" "clojure.lang.RT" () (class "java.io.PrintWriter")))) 
                                      (247 (ldc 1)) ;;STRING:: "Reflection warning, %s:%d:%d - call to %s can\nt be resolved.\n"
                                      (249 (iconst_4)) 
                                      (250 (anewarray (class "java.lang.Object"))) 
                                      (253 (dup)) 
                                      (254 (iconst_0)) 
                                      (255 (getstatic (fieldCP "SOURCE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (258 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (261 (aastore)) 
                                      (262 (dup)) 
                                      (263 (iconst_1)) 
                                      (264 (iload_2)) 
                                      (265 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (268 (aastore)) 
                                      (269 (dup)) 
                                      (270 (iconst_2)) 
                                      (271 (iload_3)) 
                                      (272 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (275 (aastore)) 
                                      (276 (dup)) 
                                      (277 (iconst_3)) 
                                      (278 (aload 6)) 
                                      (280 (aastore)) 
                                      (281 (invokevirtual (methodCP "format" "java.io.PrintWriter" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.io.PrintWriter")))) 
                                      (284 (pop)) 
                                      (285 (return)) ;;at TAG_6
                                      (endofcode 286))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 3) (code_length . 137)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_4
                                      (1 (getfield (fieldCP "args" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (4 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (9 (anewarray (class "java.lang.Object"))) 
                                      (12 (astore_1)) 
                                      (13 (iconst_0)) 
                                      (14 (istore_2)) 
                                      (15 (iload_2)) ;;at TAG_1
                                      (16 (aload_0)) 
                                      (17 (getfield (fieldCP "args" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (20 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (25 (if_icmpge 55)) ;;to TAG_0
                                      (28 (aload_1)) 
                                      (29 (iload_2)) 
                                      (30 (aload_0)) 
                                      (31 (getfield (fieldCP "args" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (34 (iload_2)) 
                                      (35 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (40 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (43 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (48 (aastore)) 
                                      (49 (iinc 2 1)) 
                                      (52 (goto 15)) ;;to TAG_1
                                      (55 (aload_0)) ;;at TAG_0
                                      (56 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (59 (ifnull 90))  ;;to TAG_2
                                      (62 (new (class "java.util.LinkedList"))) 
                                      (65 (dup)) 
                                      (66 (invokespecial (methodCP "<init>" "java.util.LinkedList" () void))) 
                                      (69 (astore_2)) 
                                      (70 (aload_2)) 
                                      (71 (aload_0)) 
                                      (72 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (75 (invokevirtual (methodCP "add" "java.util.LinkedList" ((class "java.lang.Object")) boolean))) 
                                      (78 (pop)) 
                                      (79 (aload_0)) 
                                      (80 (getfield (fieldCP "methodName" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.String")))) 
                                      (83 (aload_2)) 
                                      (84 (aconst_null)) 
                                      (85 (aload_1)) 
                                      (86 (invokestatic (methodCP "invokeMatchingMethod" "clojure.lang.Reflector" ((class "java.lang.String") (class "java.util.List") (class "java.lang.Object") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (89 (areturn)) ;;at TAG_5
                                      (90 (aload_0)) ;;at TAG_2
                                      (91 (getfield (fieldCP "c" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.Class")))) 
                                      (94 (aload_0)) 
                                      (95 (getfield (fieldCP "methodName" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.String")))) 
                                      (98 (aload_1)) 
                                      (99 (invokestatic (methodCP "invokeStaticMethod" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (102 (areturn)) ;;at TAG_7
                                      (103 (astore_1)) ;;at TAG_6
                                      (104 (aload_1)) 
                                      (105 (instanceof (class "clojure.lang.Compiler$CompilerException"))) 
                                      (108 (ifne 132)) ;;to TAG_3
                                      (111 (new (class "clojure.lang.Compiler$CompilerException"))) 
                                      (114 (dup)) 
                                      (115 (aload_0)) 
                                      (116 (getfield (fieldCP "source" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.String")))) 
                                      (119 (aload_0)) 
                                      (120 (getfield (fieldCP "line" "clojure.lang.Compiler$StaticMethodExpr" int))) 
                                      (123 (aload_0)) 
                                      (124 (getfield (fieldCP "column" "clojure.lang.Compiler$StaticMethodExpr" int))) 
                                      (127 (aload_1)) 
                                      (128 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$CompilerException" ((class "java.lang.String") int int (class "java.lang.Throwable")) void))) 
                                      (131 (athrow)) 
                                      (132 (aload_1)) ;;at TAG_3
                                      (133 (checkcast (class "clojure.lang.Compiler$CompilerException"))) 
                                      (136 (athrow)) 
                                      (endofcode 137))
                                   (Exceptions 
                                     (handler 0 89  103 (class "java.lang.Throwable"))
                                     (handler 90 102  103 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "canEmitPrimitive"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (4 (ifnull 24))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (11 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (14 (invokestatic (methodCP "isPrimitive" "clojure.lang.Util" ((class "java.lang.Class")) boolean))) 
                                      (17 (ifeq 24))  ;;to TAG_0
                                      (20 (iconst_1)) 
                                      (21 (goto 25)) ;;to TAG_1
                                      (24 (iconst_0)) ;;at TAG_0
                                      (25 (ireturn)) ;;at TAG_1
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "canEmitIntrinsicPredicate"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 29)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (4 (ifnull 27))  ;;to TAG_0
                                      (7 (getstatic (fieldCP "preds" "clojure.lang.Intrinsics" (class "clojure.lang.IPersistentMap")))) 
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (14 (invokevirtual (methodCP "toString" "java.lang.reflect.Method" () (class "java.lang.String")))) 
                                      (17 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (20 (ifnull 27))  ;;to TAG_0
                                      (23 (iconst_1)) 
                                      (24 (goto 28)) ;;to TAG_1
                                      (27 (iconst_0)) ;;at TAG_0
                                      (28 (ireturn)) ;;at TAG_1
                                      (endofcode 29))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitIntrinsicPredicate"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "clojure.asm.Label"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 7) (code_length . 148)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "line" "clojure.lang.Compiler$StaticMethodExpr" int))) 
                                      (5 (aload_3)) 
                                      (6 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (9 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (16 (ifnull 137)) ;;to TAG_0
                                      (19 (aload_2)) 
                                      (20 (aload_3)) 
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (25 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Method" () (array (class "java.lang.Class"))))) 
                                      (28 (aload_0)) 
                                      (29 (getfield (fieldCP "args" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (32 (invokestatic (methodCP "emitTypedArgs" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (array (class "java.lang.Class")) (class "clojure.lang.IPersistentVector")) void))) 
                                      (35 (aload_1)) 
                                      (36 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (39 (if_acmpne 59)) ;;to TAG_1
                                      (42 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (45 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (48 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (51 (astore 5)) 
                                      (53 (aload 5)) 
                                      (55 (aload_3)) 
                                      (56 (invokevirtual (methodCP "emitClearLocals" "clojure.lang.Compiler$ObjMethod" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (59 (getstatic (fieldCP "preds" "clojure.lang.Intrinsics" (class "clojure.lang.IPersistentMap")))) ;;at TAG_1
                                      (62 (aload_0)) 
                                      (63 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (66 (invokevirtual (methodCP "toString" "java.lang.reflect.Method" () (class "java.lang.String")))) 
                                      (69 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (72 (checkcast (array (class "java.lang.Object")))) 
                                      (75 (checkcast (array (class "java.lang.Object")))) 
                                      (78 (astore 5)) 
                                      (80 (iconst_0)) 
                                      (81 (istore 6)) 
                                      (83 (iload 6)) ;;at TAG_3
                                      (85 (aload 5)) 
                                      (87 (arraylength)) 
                                      (88 (iconst_1)) 
                                      (89 (isub)) 
                                      (90 (if_icmpge 114))  ;;to TAG_2
                                      (93 (aload_3)) 
                                      (94 (aload 5)) 
                                      (96 (iload 6)) 
                                      (98 (aaload)) 
                                      (99 (checkcast (class "java.lang.Integer"))) 
                                      (102 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (105 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (108 (iinc 6 1)) 
                                      (111 (goto 83)) ;;to TAG_3
                                      (114 (aload_3)) ;;at TAG_2
                                      (115 (aload 5)) 
                                      (117 (aload 5)) 
                                      (119 (arraylength)) 
                                      (120 (iconst_1)) 
                                      (121 (isub)) 
                                      (122 (aaload)) 
                                      (123 (checkcast (class "java.lang.Integer"))) 
                                      (126 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (129 (aload 4)) 
                                      (131 (invokevirtual (methodCP "visitJumpInsn" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (134 (goto 147)) ;;to TAG_4
                                      (137 (new (class "java.lang.UnsupportedOperationException"))) ;;at TAG_0
                                      (140 (dup)) 
                                      (141 (ldc 2)) ;;STRING:: "Unboxed emit of unknown member"
                                      (143 (invokespecial (methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void))) 
                                      (146 (athrow)) 
                                      (147 (return)) ;;at TAG_4
                                      (endofcode 148))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitUnboxed"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 9) (code_length . 213)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "line" "clojure.lang.Compiler$StaticMethodExpr" int))) 
                                      (5 (aload_3)) 
                                      (6 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (9 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (16 (ifnull 202)) ;;to TAG_0
                                      (19 (aload_2)) 
                                      (20 (aload_3)) 
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (25 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Method" () (array (class "java.lang.Class"))))) 
                                      (28 (aload_0)) 
                                      (29 (getfield (fieldCP "args" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (32 (invokestatic (methodCP "emitTypedArgs" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (array (class "java.lang.Class")) (class "clojure.lang.IPersistentVector")) void))) 
                                      (35 (aload_1)) 
                                      (36 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (39 (if_acmpne 59)) ;;to TAG_1
                                      (42 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (45 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (48 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (51 (astore 4)) 
                                      (53 (aload 4)) 
                                      (55 (aload_3)) 
                                      (56 (invokevirtual (methodCP "emitClearLocals" "clojure.lang.Compiler$ObjMethod" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (59 (getstatic (fieldCP "ops" "clojure.lang.Intrinsics" (class "clojure.lang.IPersistentMap")))) ;;at TAG_1
                                      (62 (aload_0)) 
                                      (63 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (66 (invokevirtual (methodCP "toString" "java.lang.reflect.Method" () (class "java.lang.String")))) 
                                      (69 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (72 (astore 4)) 
                                      (74 (aload 4)) 
                                      (76 (ifnull 155))  ;;to TAG_2
                                      (79 (aload 4)) 
                                      (81 (instanceof (array (class "java.lang.Object")))) 
                                      (84 (ifeq 140)) ;;to TAG_3
                                      (87 (aload 4)) 
                                      (89 (checkcast (array (class "java.lang.Object")))) 
                                      (92 (checkcast (array (class "java.lang.Object")))) 
                                      (95 (astore 5)) 
                                      (97 (aload 5)) 
                                      (99 (arraylength)) 
                                      (100 (istore 6)) 
                                      (102 (iconst_0)) 
                                      (103 (istore 7)) 
                                      (105 (iload 7)) ;;at TAG_5
                                      (107 (iload 6)) 
                                      (109 (if_icmpge 137)) ;;to TAG_4
                                      (112 (aload 5)) 
                                      (114 (iload 7)) 
                                      (116 (aaload)) 
                                      (117 (astore 8)) 
                                      (119 (aload_3)) 
                                      (120 (aload 8)) 
                                      (122 (checkcast (class "java.lang.Integer"))) 
                                      (125 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (128 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (131 (iinc 7 1)) 
                                      (134 (goto 105)) ;;to TAG_5
                                      (137 (goto 199)) ;;to TAG_6;;at TAG_4
                                      (140 (aload_3)) ;;at TAG_3
                                      (141 (aload 4)) 
                                      (143 (checkcast (class "java.lang.Integer"))) 
                                      (146 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (149 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (152 (goto 199)) ;;to TAG_6
                                      (155 (aload_0)) ;;at TAG_2
                                      (156 (getfield (fieldCP "c" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.Class")))) 
                                      (159 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (162 (astore 5)) 
                                      (164 (new (class "clojure.asm.commons.Method"))) 
                                      (167 (dup)) 
                                      (168 (aload_0)) 
                                      (169 (getfield (fieldCP "methodName" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.String")))) 
                                      (172 (aload_0)) 
                                      (173 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (176 (invokestatic (methodCP "getReturnType" "clojure.asm.Type" ((class "java.lang.reflect.Method")) (class "clojure.asm.Type")))) 
                                      (179 (aload_0)) 
                                      (180 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (183 (invokestatic (methodCP "getArgumentTypes" "clojure.asm.Type" ((class "java.lang.reflect.Method")) (array (class "clojure.asm.Type"))))) 
                                      (186 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (189 (astore 6)) 
                                      (191 (aload_3)) 
                                      (192 (aload 5)) 
                                      (194 (aload 6)) 
                                      (196 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (199 (goto 212)) ;;to TAG_7;;at TAG_6
                                      (202 (new (class "java.lang.UnsupportedOperationException"))) ;;at TAG_0
                                      (205 (dup)) 
                                      (206 (ldc 2)) ;;STRING:: "Unboxed emit of unknown member"
                                      (208 (invokespecial (methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void))) 
                                      (211 (athrow)) 
                                      (212 (return)) ;;at TAG_7
                                      (endofcode 213))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 7) (code_length . 256)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "line" "clojure.lang.Compiler$StaticMethodExpr" int))) 
                                      (5 (aload_3)) 
                                      (6 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (9 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (16 (ifnull 172)) ;;to TAG_0
                                      (19 (aload_2)) 
                                      (20 (aload_3)) 
                                      (21 (aload_0)) 
                                      (22 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (25 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Method" () (array (class "java.lang.Class"))))) 
                                      (28 (aload_0)) 
                                      (29 (getfield (fieldCP "args" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (32 (invokestatic (methodCP "emitTypedArgs" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (array (class "java.lang.Class")) (class "clojure.lang.IPersistentVector")) void))) 
                                      (35 (aload_1)) 
                                      (36 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (39 (if_acmpne 59)) ;;to TAG_1
                                      (42 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (45 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (48 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (51 (astore 4)) 
                                      (53 (aload 4)) 
                                      (55 (aload_3)) 
                                      (56 (invokevirtual (methodCP "emitClearLocals" "clojure.lang.Compiler$ObjMethod" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (59 (aload_0)) ;;at TAG_1
                                      (60 (getfield (fieldCP "c" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.Class")))) 
                                      (63 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (66 (astore 4)) 
                                      (68 (new (class "clojure.asm.commons.Method"))) 
                                      (71 (dup)) 
                                      (72 (aload_0)) 
                                      (73 (getfield (fieldCP "methodName" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.String")))) 
                                      (76 (aload_0)) 
                                      (77 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (80 (invokestatic (methodCP "getReturnType" "clojure.asm.Type" ((class "java.lang.reflect.Method")) (class "clojure.asm.Type")))) 
                                      (83 (aload_0)) 
                                      (84 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (87 (invokestatic (methodCP "getArgumentTypes" "clojure.asm.Type" ((class "java.lang.reflect.Method")) (array (class "clojure.asm.Type"))))) 
                                      (90 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (93 (astore 5)) 
                                      (95 (aload_3)) 
                                      (96 (aload 4)) 
                                      (98 (aload 5)) 
                                      (100 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (103 (aload_0)) 
                                      (104 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (107 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (110 (astore 6)) 
                                      (112 (aload_1)) 
                                      (113 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (116 (if_acmpne 157))  ;;to TAG_2
                                      (119 (aload 6)) 
                                      (121 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (124 (if_acmpeq 135)) ;;to TAG_3
                                      (127 (aload 6)) 
                                      (129 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (132 (if_acmpne 142)) ;;to TAG_4
                                      (135 (aload_3)) ;;at TAG_3
                                      (136 (invokevirtual (methodCP "pop2" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (139 (goto 169)) ;;to TAG_5
                                      (142 (aload 6)) ;;at TAG_4
                                      (144 (getstatic (fieldCP "TYPE" "java.lang.Void" (class "java.lang.Class")))) 
                                      (147 (if_acmpeq 169)) ;;to TAG_5
                                      (150 (aload_3)) 
                                      (151 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (154 (goto 169)) ;;to TAG_5
                                      (157 (aload_2)) ;;at TAG_2
                                      (158 (aload_3)) 
                                      (159 (aload_0)) 
                                      (160 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (163 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (166 (invokestatic (methodCP "emitBoxReturn" "clojure.lang.Compiler$HostExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class")) void))) 
                                      (169 (goto 255)) ;;to TAG_6;;at TAG_5
                                      (172 (aload_3)) ;;at TAG_0
                                      (173 (aload_0)) 
                                      (174 (getfield (fieldCP "c" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.Class")))) 
                                      (177 (invokevirtual (methodCP "getName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (180 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String")) void))) 
                                      (183 (aload_3)) 
                                      (184 (getstatic (fieldCP "CLASS_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (187 (getstatic (fieldCP "forNameMethod" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.asm.commons.Method")))) 
                                      (190 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (193 (aload_3)) 
                                      (194 (aload_0)) 
                                      (195 (getfield (fieldCP "methodName" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.String")))) 
                                      (198 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String")) void))) 
                                      (201 (aload_0)) 
                                      (202 (getfield (fieldCP "args" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (205 (aload_2)) 
                                      (206 (aload_3)) 
                                      (207 (invokestatic (methodCP "emitArgsAsArray" "clojure.lang.Compiler$StaticMethodExpr" ((class "clojure.lang.IPersistentVector") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (210 (aload_1)) 
                                      (211 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (214 (if_acmpne 234)) ;;to TAG_7
                                      (217 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (220 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (223 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (226 (astore 4)) 
                                      (228 (aload 4)) 
                                      (230 (aload_3)) 
                                      (231 (invokevirtual (methodCP "emitClearLocals" "clojure.lang.Compiler$ObjMethod" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (234 (aload_3)) ;;at TAG_7
                                      (235 (getstatic (fieldCP "REFLECTOR_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (238 (getstatic (fieldCP "invokeStaticMethodMethod" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.asm.commons.Method")))) 
                                      (241 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (244 (aload_1)) 
                                      (245 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (248 (if_acmpne 255)) ;;to TAG_6
                                      (251 (aload_3)) 
                                      (252 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (255 (return)) ;;at TAG_6
                                      (endofcode 256))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (4 (ifnonnull 14)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "tag" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.lang.Symbol")))) 
                                      (11 (ifnull 18)) ;;to TAG_1
                                      (14 (iconst_1)) ;;at TAG_0
                                      (15 (goto 19))  ;;to TAG_2
                                      (18 (iconst_0)) ;;at TAG_1
                                      (19 (ireturn)) ;;at TAG_2
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 25)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tag" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.lang.Symbol")))) 
                                      (4 (ifnull 17))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "tag" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.lang.Symbol")))) 
                                      (11 (invokestatic (methodCP "tagToClass" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (14 (goto 24)) ;;to TAG_1
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (getfield (fieldCP "method" "clojure.lang.Compiler$StaticMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (21 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (24 (areturn)) ;;at TAG_1
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 17)
                                   (parsedcode
                                      (0 (ldc 3))         ;;STRING:: "Class forName(String)"
                                      (2 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (5 (putstatic (fieldCP "forNameMethod" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.asm.commons.Method"))))
                                      (8 (ldc 4))         ;;STRING:: "Object invokeStaticMethod(Class,String,Object[])"
                                      (10 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (13 (putstatic (fieldCP "invokeStaticMethodMethod" "clojure.lang.Compiler$StaticMethodExpr" (class "clojure.asm.commons.Method"))))
                                      (16 (return))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$StaticMethodExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$StaticMethodExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$StaticMethodExpr" . "clojure.lang"))

