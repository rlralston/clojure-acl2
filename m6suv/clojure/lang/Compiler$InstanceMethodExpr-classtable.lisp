; Compiler$InstanceMethodExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$InstanceMethodExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$InstanceMethodExpr"
            "clojure.lang.Compiler$MethodExpr"
            (constant_pool
                        (STRING  "Reflection warning, %s:%d:%d - call to %s can\nt be resolved.\n")
                        (STRING  "Unboxed emit of unknown member")
                        (STRING  "Object invokeInstanceMethod(Object,String,Object[])"))
            (fields
                        (field "target" (class "clojure.lang.Compiler$Expr") (accessflags  *class*  *final*  *public* ) -1)
                        (field "methodName" (class "java.lang.String") (accessflags  *class*  *final*  *public* ) -1)
                        (field "args" (class "clojure.lang.IPersistentVector") (accessflags  *class*  *final*  *public* ) -1)
                        (field "source" (class "java.lang.String") (accessflags  *class*  *final*  *public* ) -1)
                        (field "line" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "column" int (accessflags  *class*  *final*  *public* ) -1)
                        (field "tag" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *public* ) -1)
                        (field "method" (class "java.lang.reflect.Method") (accessflags  *class*  *final*  *public* ) -1)
                        (field "invokeInstanceMethodMethod" (class "clojure.asm.commons.Method") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "java.lang.String") int int (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") (class "java.lang.String") (class "clojure.lang.IPersistentVector"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 14) (code_length . 334)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$MethodExpr" () void))) 
                                      (4 (aload_0)) 
                                      (5 (aload_1)) 
                                      (6 (putfield (fieldCP "source" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.String")))) 
                                      (9 (aload_0)) 
                                      (10 (iload_2)) 
                                      (11 (putfield (fieldCP "line" "clojure.lang.Compiler$InstanceMethodExpr" int))) 
                                      (14 (aload_0)) 
                                      (15 (iload_3)) 
                                      (16 (putfield (fieldCP "column" "clojure.lang.Compiler$InstanceMethodExpr" int))) 
                                      (19 (aload_0)) 
                                      (20 (aload 7)) 
                                      (22 (putfield (fieldCP "args" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (25 (aload_0)) 
                                      (26 (aload 6)) 
                                      (28 (putfield (fieldCP "methodName" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.String")))) 
                                      (31 (aload_0)) 
                                      (32 (aload 5)) 
                                      (34 (putfield (fieldCP "target" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (37 (aload_0)) 
                                      (38 (aload 4)) 
                                      (40 (putfield (fieldCP "tag" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.Symbol")))) 
                                      (43 (aload 5)) 
                                      (45 (invokeinterface (methodCP "hasJavaClass" "clojure.lang.Compiler$Expr" () boolean) 1)) 
                                      (50 (ifeq 268)) ;;to TAG_0
                                      (53 (aload 5)) 
                                      (55 (invokeinterface (methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1)) 
                                      (60 (ifnull 268)) ;;to TAG_0
                                      (63 (aload 5)) 
                                      (65 (invokeinterface (methodCP "getJavaClass" "clojure.lang.Compiler$Expr" () (class "java.lang.Class")) 1)) 
                                      (70 (aload 7)) 
                                      (72 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (77 (aload 6)) 
                                      (79 (iconst_0)) 
                                      (80 (invokestatic (methodCP "getMethods" "clojure.lang.Reflector" ((class "java.lang.Class") int (class "java.lang.String") boolean) (class "java.util.List")))) 
                                      (83 (astore 8)) 
                                      (85 (aload 8)) 
                                      (87 (invokeinterface (methodCP "isEmpty" "java.util.List" () boolean) 1)) 
                                      (92 (ifeq 103))  ;;to TAG_1
                                      (95 (aload_0)) 
                                      (96 (aconst_null)) 
                                      (97 (putfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (100 (goto 265)) ;;to TAG_2
                                      (103 (iconst_0)) ;;at TAG_1
                                      (104 (istore 9)) 
                                      (106 (aload 8)) 
                                      (108 (invokeinterface (methodCP "size" "java.util.List" () int) 1)) 
                                      (113 (iconst_1)) 
                                      (114 (if_icmple 205)) ;;to TAG_3
                                      (117 (new (class "java.util.ArrayList"))) 
                                      (120 (dup)) 
                                      (121 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (124 (astore 10)) 
                                      (126 (new (class "java.util.ArrayList"))) 
                                      (129 (dup)) 
                                      (130 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (133 (astore 11)) 
                                      (135 (iconst_0)) 
                                      (136 (istore 12)) 
                                      (138 (iload 12)) ;;at TAG_5
                                      (140 (aload 8)) 
                                      (142 (invokeinterface (methodCP "size" "java.util.List" () int) 1)) 
                                      (147 (if_icmpge 192)) ;;to TAG_4
                                      (150 (aload 8)) 
                                      (152 (iload 12)) 
                                      (154 (invokeinterface (methodCP "get" "java.util.List" (int) (class "java.lang.Object")) 2)) 
                                      (159 (checkcast (class "java.lang.reflect.Method"))) 
                                      (162 (astore 13)) 
                                      (164 (aload 10)) 
                                      (166 (aload 13)) 
                                      (168 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Method" () (array (class "java.lang.Class"))))) 
                                      (171 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (174 (pop)) 
                                      (175 (aload 11)) 
                                      (177 (aload 13)) 
                                      (179 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (182 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (185 (pop)) 
                                      (186 (iinc 12 1)) 
                                      (189 (goto 138)) ;;to TAG_5
                                      (192 (aload 6)) ;;at TAG_4
                                      (194 (aload 10)) 
                                      (196 (aload 7)) 
                                      (198 (aload 11)) 
                                      (200 (invokestatic (methodCP "getMatchingParams" "clojure.lang.Compiler" ((class "java.lang.String") (class "java.util.ArrayList") (class "clojure.lang.IPersistentVector") (class "java.util.List")) int))) 
                                      (203 (istore 9)) 
                                      (205 (iload 9)) ;;at TAG_3
                                      (207 (iflt 222)) ;;to TAG_6
                                      (210 (aload 8)) 
                                      (212 (iload 9)) 
                                      (214 (invokeinterface (methodCP "get" "java.util.List" (int) (class "java.lang.Object")) 2)) 
                                      (219 (goto 223)) ;;to TAG_7
                                      (222 (aconst_null)) ;;at TAG_6
                                      (223 (checkcast (class "java.lang.reflect.Method"))) ;;at TAG_7
                                      (226 (astore 10)) 
                                      (228 (aload 10)) 
                                      (230 (ifnull 259)) ;;to TAG_8
                                      (233 (aload 10)) 
                                      (235 (invokevirtual (methodCP "getDeclaringClass" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (238 (invokevirtual (methodCP "getModifiers" "java.lang.Class" () int))) 
                                      (241 (invokestatic (methodCP "isPublic" "java.lang.reflect.Modifier" (int) boolean))) 
                                      (244 (ifne 259)) ;;to TAG_8
                                      (247 (aload 10)) 
                                      (249 (invokevirtual (methodCP "getDeclaringClass" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (252 (aload 10)) 
                                      (254 (invokestatic (methodCP "getAsMethodOfPublicBase" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.reflect.Method")) (class "java.lang.reflect.Method")))) 
                                      (257 (astore 10)) 
                                      (259 (aload_0)) ;;at TAG_8
                                      (260 (aload 10)) 
                                      (262 (putfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (265 (goto 273)) ;;to TAG_9;;at TAG_2
                                      (268 (aload_0)) ;;at TAG_0
                                      (269 (aconst_null)) 
                                      (270 (putfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (273 (aload_0)) ;;at TAG_9
                                      (274 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (277 (ifnonnull 333)) ;;to TAG_10
                                      (280 (getstatic (fieldCP "WARN_ON_REFLECTION" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (283 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (286 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (289 (ifeq 333)) ;;to TAG_10
                                      (292 (invokestatic (methodCP "errPrintWriter" "clojure.lang.RT" () (class "java.io.PrintWriter")))) 
                                      (295 (ldc 0)) ;;STRING:: "Reflection warning, %s:%d:%d - call to %s can\nt be resolved.\n"
                                      (297 (iconst_4)) 
                                      (298 (anewarray (class "java.lang.Object"))) 
                                      (301 (dup)) 
                                      (302 (iconst_0)) 
                                      (303 (getstatic (fieldCP "SOURCE_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (306 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (309 (aastore)) 
                                      (310 (dup)) 
                                      (311 (iconst_1)) 
                                      (312 (iload_2)) 
                                      (313 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (316 (aastore)) 
                                      (317 (dup)) 
                                      (318 (iconst_2)) 
                                      (319 (iload_3)) 
                                      (320 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (323 (aastore)) 
                                      (324 (dup)) 
                                      (325 (iconst_3)) 
                                      (326 (aload 6)) 
                                      (328 (aastore)) 
                                      (329 (invokevirtual (methodCP "format" "java.io.PrintWriter" ((class "java.lang.String") (array (class "java.lang.Object"))) (class "java.io.PrintWriter")))) 
                                      (332 (pop)) 
                                      (333 (return)) ;;at TAG_10
                                      (endofcode 334))
                                   (Exceptions )
                                   (StackMap )))
                        (method "eval"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 144)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_4
                                      (1 (getfield (fieldCP "target" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (4 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (9 (astore_1)) 
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "args" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (14 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (19 (anewarray (class "java.lang.Object"))) 
                                      (22 (astore_2)) 
                                      (23 (iconst_0)) 
                                      (24 (istore_3)) 
                                      (25 (iload_3)) ;;at TAG_1
                                      (26 (aload_0)) 
                                      (27 (getfield (fieldCP "args" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (30 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (35 (if_icmpge 65)) ;;to TAG_0
                                      (38 (aload_2)) 
                                      (39 (iload_3)) 
                                      (40 (aload_0)) 
                                      (41 (getfield (fieldCP "args" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (44 (iload_3)) 
                                      (45 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (50 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (53 (invokeinterface (methodCP "eval" "clojure.lang.Compiler$Expr" () (class "java.lang.Object")) 1)) 
                                      (58 (aastore)) 
                                      (59 (iinc 3 1)) 
                                      (62 (goto 25)) ;;to TAG_1
                                      (65 (aload_0)) ;;at TAG_0
                                      (66 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (69 (ifnull 100))  ;;to TAG_2
                                      (72 (new (class "java.util.LinkedList"))) 
                                      (75 (dup)) 
                                      (76 (invokespecial (methodCP "<init>" "java.util.LinkedList" () void))) 
                                      (79 (astore_3)) 
                                      (80 (aload_3)) 
                                      (81 (aload_0)) 
                                      (82 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (85 (invokevirtual (methodCP "add" "java.util.LinkedList" ((class "java.lang.Object")) boolean))) 
                                      (88 (pop)) 
                                      (89 (aload_0)) 
                                      (90 (getfield (fieldCP "methodName" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.String")))) 
                                      (93 (aload_3)) 
                                      (94 (aload_1)) 
                                      (95 (aload_2)) 
                                      (96 (invokestatic (methodCP "invokeMatchingMethod" "clojure.lang.Reflector" ((class "java.lang.String") (class "java.util.List") (class "java.lang.Object") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (99 (areturn)) ;;at TAG_5
                                      (100 (aload_1)) ;;at TAG_2
                                      (101 (aload_0)) 
                                      (102 (getfield (fieldCP "methodName" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.String")))) 
                                      (105 (aload_2)) 
                                      (106 (invokestatic (methodCP "invokeInstanceMethod" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (109 (areturn)) ;;at TAG_7
                                      (110 (astore_1)) ;;at TAG_6
                                      (111 (aload_1)) 
                                      (112 (instanceof (class "clojure.lang.Compiler$CompilerException"))) 
                                      (115 (ifne 139)) ;;to TAG_3
                                      (118 (new (class "clojure.lang.Compiler$CompilerException"))) 
                                      (121 (dup)) 
                                      (122 (aload_0)) 
                                      (123 (getfield (fieldCP "source" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.String")))) 
                                      (126 (aload_0)) 
                                      (127 (getfield (fieldCP "line" "clojure.lang.Compiler$InstanceMethodExpr" int))) 
                                      (130 (aload_0)) 
                                      (131 (getfield (fieldCP "column" "clojure.lang.Compiler$InstanceMethodExpr" int))) 
                                      (134 (aload_1)) 
                                      (135 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$CompilerException" ((class "java.lang.String") int int (class "java.lang.Throwable")) void))) 
                                      (138 (athrow)) 
                                      (139 (aload_1)) ;;at TAG_3
                                      (140 (checkcast (class "clojure.lang.Compiler$CompilerException"))) 
                                      (143 (athrow)) 
                                      (endofcode 144))
                                   (Exceptions 
                                     (handler 0 99  110 (class "java.lang.Throwable"))
                                     (handler 100 109  110 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "canEmitPrimitive"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (4 (ifnull 24))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (11 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (14 (invokestatic (methodCP "isPrimitive" "clojure.lang.Util" ((class "java.lang.Class")) boolean))) 
                                      (17 (ifeq 24))  ;;to TAG_0
                                      (20 (iconst_1)) 
                                      (21 (goto 25)) ;;to TAG_1
                                      (24 (iconst_0)) ;;at TAG_0
                                      (25 (ireturn)) ;;at TAG_1
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitUnboxed"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 6) (code_length . 164)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "line" "clojure.lang.Compiler$InstanceMethodExpr" int))) 
                                      (5 (aload_3)) 
                                      (6 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (9 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (16 (ifnull 153)) ;;to TAG_0
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (23 (invokevirtual (methodCP "getDeclaringClass" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (26 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (29 (astore 4)) 
                                      (31 (aload_0)) 
                                      (32 (getfield (fieldCP "target" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (35 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (38 (aload_2)) 
                                      (39 (aload_3)) 
                                      (40 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (45 (aload_3)) 
                                      (46 (aload 4)) 
                                      (48 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (51 (aload_2)) 
                                      (52 (aload_3)) 
                                      (53 (aload_0)) 
                                      (54 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (57 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Method" () (array (class "java.lang.Class"))))) 
                                      (60 (aload_0)) 
                                      (61 (getfield (fieldCP "args" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (64 (invokestatic (methodCP "emitTypedArgs" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (array (class "java.lang.Class")) (class "clojure.lang.IPersistentVector")) void))) 
                                      (67 (aload_1)) 
                                      (68 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (71 (if_acmpne 91)) ;;to TAG_1
                                      (74 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (77 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (80 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (83 (astore 5)) 
                                      (85 (aload 5)) 
                                      (87 (aload_3)) 
                                      (88 (invokevirtual (methodCP "emitClearLocals" "clojure.lang.Compiler$ObjMethod" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (91 (new (class "clojure.asm.commons.Method"))) ;;at TAG_1
                                      (94 (dup)) 
                                      (95 (aload_0)) 
                                      (96 (getfield (fieldCP "methodName" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.String")))) 
                                      (99 (aload_0)) 
                                      (100 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (103 (invokestatic (methodCP "getReturnType" "clojure.asm.Type" ((class "java.lang.reflect.Method")) (class "clojure.asm.Type")))) 
                                      (106 (aload_0)) 
                                      (107 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (110 (invokestatic (methodCP "getArgumentTypes" "clojure.asm.Type" ((class "java.lang.reflect.Method")) (array (class "clojure.asm.Type"))))) 
                                      (113 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (116 (astore 5)) 
                                      (118 (aload_0)) 
                                      (119 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (122 (invokevirtual (methodCP "getDeclaringClass" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (125 (invokevirtual (methodCP "isInterface" "java.lang.Class" () boolean))) 
                                      (128 (ifeq 142))  ;;to TAG_2
                                      (131 (aload_3)) 
                                      (132 (aload 4)) 
                                      (134 (aload 5)) 
                                      (136 (invokevirtual (methodCP "invokeInterface" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (139 (goto 150)) ;;to TAG_3
                                      (142 (aload_3)) ;;at TAG_2
                                      (143 (aload 4)) 
                                      (145 (aload 5)) 
                                      (147 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (150 (goto 163)) ;;to TAG_4;;at TAG_3
                                      (153 (new (class "java.lang.UnsupportedOperationException"))) ;;at TAG_0
                                      (156 (dup)) 
                                      (157 (ldc 1)) ;;STRING:: "Unboxed emit of unknown member"
                                      (159 (invokespecial (methodCP "<init>" "java.lang.UnsupportedOperationException" ((class "java.lang.String")) void))) 
                                      (162 (athrow)) 
                                      (163 (return)) ;;at TAG_4
                                      (endofcode 164))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 6) (code_length . 242)
                                   (parsedcode
                                      (0 (aload_3)) 
                                      (1 (aload_0)) 
                                      (2 (getfield (fieldCP "line" "clojure.lang.Compiler$InstanceMethodExpr" int))) 
                                      (5 (aload_3)) 
                                      (6 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (9 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (12 (aload_0)) 
                                      (13 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (16 (ifnull 165)) ;;to TAG_0
                                      (19 (aload_0)) 
                                      (20 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (23 (invokevirtual (methodCP "getDeclaringClass" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (26 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (29 (astore 4)) 
                                      (31 (aload_0)) 
                                      (32 (getfield (fieldCP "target" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (35 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (38 (aload_2)) 
                                      (39 (aload_3)) 
                                      (40 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (45 (aload_3)) 
                                      (46 (aload 4)) 
                                      (48 (invokevirtual (methodCP "checkCast" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (51 (aload_2)) 
                                      (52 (aload_3)) 
                                      (53 (aload_0)) 
                                      (54 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (57 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Method" () (array (class "java.lang.Class"))))) 
                                      (60 (aload_0)) 
                                      (61 (getfield (fieldCP "args" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (64 (invokestatic (methodCP "emitTypedArgs" "clojure.lang.Compiler$MethodExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (array (class "java.lang.Class")) (class "clojure.lang.IPersistentVector")) void))) 
                                      (67 (aload_1)) 
                                      (68 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (71 (if_acmpne 91)) ;;to TAG_1
                                      (74 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (77 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (80 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (83 (astore 5)) 
                                      (85 (aload 5)) 
                                      (87 (aload_3)) 
                                      (88 (invokevirtual (methodCP "emitClearLocals" "clojure.lang.Compiler$ObjMethod" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (91 (new (class "clojure.asm.commons.Method"))) ;;at TAG_1
                                      (94 (dup)) 
                                      (95 (aload_0)) 
                                      (96 (getfield (fieldCP "methodName" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.String")))) 
                                      (99 (aload_0)) 
                                      (100 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (103 (invokestatic (methodCP "getReturnType" "clojure.asm.Type" ((class "java.lang.reflect.Method")) (class "clojure.asm.Type")))) 
                                      (106 (aload_0)) 
                                      (107 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (110 (invokestatic (methodCP "getArgumentTypes" "clojure.asm.Type" ((class "java.lang.reflect.Method")) (array (class "clojure.asm.Type"))))) 
                                      (113 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (116 (astore 5)) 
                                      (118 (aload_0)) 
                                      (119 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (122 (invokevirtual (methodCP "getDeclaringClass" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (125 (invokevirtual (methodCP "isInterface" "java.lang.Class" () boolean))) 
                                      (128 (ifeq 142))  ;;to TAG_2
                                      (131 (aload_3)) 
                                      (132 (aload 4)) 
                                      (134 (aload 5)) 
                                      (136 (invokevirtual (methodCP "invokeInterface" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (139 (goto 150)) ;;to TAG_3
                                      (142 (aload_3)) ;;at TAG_2
                                      (143 (aload 4)) 
                                      (145 (aload 5)) 
                                      (147 (invokevirtual (methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (150 (aload_2)) ;;at TAG_3
                                      (151 (aload_3)) 
                                      (152 (aload_0)) 
                                      (153 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (156 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (159 (invokestatic (methodCP "emitBoxReturn" "clojure.lang.Compiler$HostExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class")) void))) 
                                      (162 (goto 230)) ;;to TAG_4
                                      (165 (aload_0)) ;;at TAG_0
                                      (166 (getfield (fieldCP "target" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.Compiler$Expr")))) 
                                      (169 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (172 (aload_2)) 
                                      (173 (aload_3)) 
                                      (174 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (179 (aload_3)) 
                                      (180 (aload_0)) 
                                      (181 (getfield (fieldCP "methodName" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.String")))) 
                                      (184 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String")) void))) 
                                      (187 (aload_0)) 
                                      (188 (getfield (fieldCP "args" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.IPersistentVector")))) 
                                      (191 (aload_2)) 
                                      (192 (aload_3)) 
                                      (193 (invokestatic (methodCP "emitArgsAsArray" "clojure.lang.Compiler$InstanceMethodExpr" ((class "clojure.lang.IPersistentVector") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (196 (aload_1)) 
                                      (197 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (200 (if_acmpne 220)) ;;to TAG_5
                                      (203 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (206 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (209 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (212 (astore 4)) 
                                      (214 (aload 4)) 
                                      (216 (aload_3)) 
                                      (217 (invokevirtual (methodCP "emitClearLocals" "clojure.lang.Compiler$ObjMethod" ((class "clojure.asm.commons.GeneratorAdapter")) void))) 
                                      (220 (aload_3)) ;;at TAG_5
                                      (221 (getstatic (fieldCP "REFLECTOR_TYPE" "clojure.lang.Compiler" (class "clojure.asm.Type")))) 
                                      (224 (getstatic (fieldCP "invokeInstanceMethodMethod" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.asm.commons.Method")))) 
                                      (227 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (230 (aload_1)) ;;at TAG_4
                                      (231 (getstatic (fieldCP "STATEMENT" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (234 (if_acmpne 241)) ;;to TAG_6
                                      (237 (aload_3)) 
                                      (238 (invokevirtual (methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (241 (return)) ;;at TAG_6
                                      (endofcode 242))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasJavaClass"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (4 (ifnonnull 14)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "tag" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.Symbol")))) 
                                      (11 (ifnull 18)) ;;to TAG_1
                                      (14 (iconst_1)) ;;at TAG_0
                                      (15 (goto 19))  ;;to TAG_2
                                      (18 (iconst_0)) ;;at TAG_1
                                      (19 (ireturn)) ;;at TAG_2
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getJavaClass"
                              (parameters )
                              (returntype . (class "java.lang.Class"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 25)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "tag" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.Symbol")))) 
                                      (4 (ifnull 17))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "tag" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.lang.Symbol")))) 
                                      (11 (invokestatic (methodCP "tagToClass" "clojure.lang.Compiler$HostExpr" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (14 (goto 24)) ;;to TAG_1
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (getfield (fieldCP "method" "clojure.lang.Compiler$InstanceMethodExpr" (class "java.lang.reflect.Method")))) 
                                      (21 (invokevirtual (methodCP "getReturnType" "java.lang.reflect.Method" () (class "java.lang.Class")))) 
                                      (24 (areturn)) ;;at TAG_1
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 9)
                                   (parsedcode
                                      (0 (ldc 2))         ;;STRING:: "Object invokeInstanceMethod(Object,String,Object[])"
                                      (2 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (5 (putstatic (fieldCP "invokeInstanceMethodMethod" "clojure.lang.Compiler$InstanceMethodExpr" (class "clojure.asm.commons.Method"))))
                                      (8 (return))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$InstanceMethodExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$InstanceMethodExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$InstanceMethodExpr" . "clojure.lang"))

