; Compiler$FnMethod-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$FnMethod*
 (make-class-def
      '(class "clojure.lang.Compiler$FnMethod"
            "clojure.lang.Compiler$ObjMethod"
            (constant_pool
                        (STRING  "Only long and double primitives are supported")
                        (STRING  "L")
                        (STRING  "D")
                        (STRING  "fns taking primitives support only 4 or fewer args")
                        (STRING  "clojure.lang.IFn$")
                        (STRING  "fn params must be Symbols")
                        (STRING  "Can\nt use qualified name as parameter: ")
                        (STRING  "Invalid parameter list")
                        (STRING  "Only long and double primitives are supported: ")
                        (STRING  "& arg cannot have type hint")
                        (STRING  "fns taking primitives cannot be variadic")
                        (STRING  "Unexpected parameter")
                        (STRING  "Can\nt specify more than 20 params")
                        (STRING  "invokeStatic")
                        (STRING  "invokePrim")
                        (STRING  "this")
                        (STRING  "Ljava/lang/Object;")
                        (STRING  ";")
                        (STRING  "doInvoke")
                        (STRING  "invoke"))
            (fields
                        (field "reqParms" (class "clojure.lang.PersistentVector") (accessflags  *class* ) -1)
                        (field "restParm" (class "clojure.lang.Compiler$LocalBinding") (accessflags  *class* ) -1)
                        (field "argtypes" (array (class "clojure.asm.Type")) (accessflags  *class* ) -1)
                        (field "argclasses" (array (class "java.lang.Class")) (accessflags  *class* ) -1)
                        (field "retClass" (class "java.lang.Class") (accessflags  *class* ) -1)
                        (field "prim" (class "java.lang.String") (accessflags  *class* ) -1))
            (methods
                        (method "<init>"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.lang.Compiler$ObjMethod"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 19)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (aload_2))
                                      (3 (invokespecial
					(methodCP "<init>" "clojure.lang.Compiler$ObjMethod" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.lang.Compiler$ObjMethod")) void)))
                                      (6 (aload_0))
                                      (7 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector"))))
                                      (10 (putfield (fieldCP "reqParms" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector"))))
                                      (13 (aload_0))
                                      (14 (aconst_null))
                                      (15 (putfield (fieldCP "restParm" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.Compiler$LocalBinding"))))
                                      (18 (return))
                                      (endofcode 19))
                                   (Exceptions )
                                   (StackMap )))
                        (method "classChar"
                              (parameters (class "java.lang.Object"))
                              (returntype . char)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 76)
                                   (parsedcode
                                      (0 (aconst_null)) 
                                      (1 (astore_1)) 
                                      (2 (aload_0)) 
                                      (3 (instanceof (class "java.lang.Class"))) 
                                      (6 (ifeq 17)) ;;to TAG_0
                                      (9 (aload_0)) 
                                      (10 (checkcast (class "java.lang.Class"))) 
                                      (13 (astore_1)) 
                                      (14 (goto 32)) ;;to TAG_1
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (instanceof (class "clojure.lang.Symbol"))) 
                                      (21 (ifeq 32)) ;;to TAG_1
                                      (24 (aload_0)) 
                                      (25 (checkcast (class "clojure.lang.Symbol"))) 
                                      (28 (invokestatic (methodCP "primClass" "clojure.lang.Compiler" ((class "clojure.lang.Symbol")) (class "java.lang.Class")))) 
                                      (31 (astore_1)) 
                                      (32 (aload_1)) ;;at TAG_1
                                      (33 (ifnull 43))  ;;to TAG_2
                                      (36 (aload_1)) 
                                      (37 (invokevirtual (methodCP "isPrimitive" "java.lang.Class" () boolean))) 
                                      (40 (ifne 46)) ;;to TAG_3
                                      (43 (bipush 79)) ;;at TAG_2
                                      (45 (ireturn)) 
                                      (46 (aload_1)) ;;at TAG_3
                                      (47 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (50 (if_acmpne 56)) ;;to TAG_4
                                      (53 (bipush 76)) 
                                      (55 (ireturn)) 
                                      (56 (aload_1)) ;;at TAG_4
                                      (57 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (60 (if_acmpne 66)) ;;to TAG_5
                                      (63 (bipush 68)) 
                                      (65 (ireturn)) 
                                      (66 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_5
                                      (69 (dup)) 
                                      (70 (ldc 0)) ;;STRING:: "Only long and double primitives are supported"
                                      (72 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (75 (athrow)) 
                                      (endofcode 76))
                                   (Exceptions )
                                   (StackMap )))
                        (method "primInterface"
                              (parameters (class "clojure.lang.IPersistentVector"))
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 135)
                                   (parsedcode
                                      (0 (new (class "java.lang.StringBuilder"))) 
                                      (3 (dup)) 
                                      (4 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (7 (astore_1)) 
                                      (8 (iconst_0)) 
                                      (9 (istore_2)) 
                                      (10 (iload_2)) ;;at TAG_1
                                      (11 (aload_0)) 
                                      (12 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (17 (if_icmpge 44)) ;;to TAG_0
                                      (20 (aload_1)) 
                                      (21 (aload_0)) 
                                      (22 (iload_2)) 
                                      (23 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (28 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (31 (invokestatic (methodCP "classChar" "clojure.lang.Compiler$FnMethod" ((class "java.lang.Object")) char))) 
                                      (34 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (37 (pop)) 
                                      (38 (iinc 2 1)) 
                                      (41 (goto 10)) ;;to TAG_1
                                      (44 (aload_1)) ;;at TAG_0
                                      (45 (aload_0)) 
                                      (46 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (49 (invokestatic (methodCP "classChar" "clojure.lang.Compiler$FnMethod" ((class "java.lang.Object")) char))) 
                                      (52 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (55 (pop)) 
                                      (56 (aload_1)) 
                                      (57 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (60 (astore_2)) 
                                      (61 (aload_2)) 
                                      (62 (ldc 1)) ;;STRING:: "L"
                                      (64 (invokevirtual (methodCP "contains" "java.lang.String" ((class "java.lang.CharSequence")) boolean))) 
                                      (67 (ifne 79))  ;;to TAG_2
                                      (70 (aload_2)) 
                                      (71 (ldc 2)) ;;STRING:: "D"
                                      (73 (invokevirtual (methodCP "contains" "java.lang.String" ((class "java.lang.CharSequence")) boolean))) 
                                      (76 (ifeq 83)) ;;to TAG_3
                                      (79 (iconst_1)) ;;at TAG_2
                                      (80 (goto 84)) ;;to TAG_4
                                      (83 (iconst_0)) ;;at TAG_3
                                      (84 (istore_3)) ;;at TAG_4
                                      (85 (iload_3)) 
                                      (86 (ifeq 109)) ;;to TAG_5
                                      (89 (aload_0)) 
                                      (90 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (95 (iconst_4)) 
                                      (96 (if_icmple 109)) ;;to TAG_5
                                      (99 (new (class "java.lang.IllegalArgumentException"))) 
                                      (102 (dup)) 
                                      (103 (ldc 3)) ;;STRING:: "fns taking primitives support only 4 or fewer args"
                                      (105 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (108 (athrow)) 
                                      (109 (iload_3)) ;;at TAG_5
                                      (110 (ifeq 133)) ;;to TAG_6
                                      (113 (new (class "java.lang.StringBuilder"))) 
                                      (116 (dup)) 
                                      (117 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (120 (ldc 4)) ;;STRING:: "clojure.lang.IFn$"
                                      (122 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (125 (aload_2)) 
                                      (126 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (129 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (132 (areturn)) 
                                      (133 (aconst_null)) ;;at TAG_6
                                      (134 (areturn)) 
                                      (endofcode 135))
                                   (Exceptions )
                                   (StackMap )))
                        (method "parse"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.lang.ISeq") boolean)
                              (returntype . (class "clojure.lang.Compiler$FnMethod"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 17) (code_length . 931)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "first" "clojure.lang.RT" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (4 (checkcast (class "clojure.lang.IPersistentVector"))) 
                                      (7 (astore_3)) 
                                      (8 (aload_1)) 
                                      (9 (invokestatic (methodCP "next" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (12 (astore 4)) 
                                      (14 (new (class "clojure.lang.Compiler$FnMethod"))) ;;at TAG_29
                                      (17 (dup)) 
                                      (18 (aload_0)) 
                                      (19 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (22 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (25 (checkcast (class "clojure.lang.Compiler$ObjMethod"))) 
                                      (28 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$FnMethod" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.lang.Compiler$ObjMethod")) void))) 
                                      (31 (astore 5)) 
                                      (33 (aload 5)) 
                                      (35 (getstatic (fieldCP "LINE" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (38 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (41 (checkcast (class "java.lang.Integer"))) 
                                      (44 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (47 (putfield (fieldCP "line" "clojure.lang.Compiler$FnMethod" int))) 
                                      (50 (aload 5)) 
                                      (52 (getstatic (fieldCP "COLUMN" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (55 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (58 (checkcast (class "java.lang.Integer"))) 
                                      (61 (invokevirtual (methodCP "intValue" "java.lang.Integer" () int))) 
                                      (64 (putfield (fieldCP "column" "clojure.lang.Compiler$FnMethod" int))) 
                                      (67 (getstatic (fieldCP "CLEAR_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (70 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (73 (checkcast (class "clojure.lang.Compiler$PathNode"))) 
                                      (76 (astore 6)) 
                                      (78 (aload 6)) 
                                      (80 (ifnonnull 96)) ;;to TAG_0
                                      (83 (new (class "clojure.lang.Compiler$PathNode"))) 
                                      (86 (dup)) 
                                      (87 (getstatic (fieldCP "PATH" "clojure.lang.Compiler$PATHTYPE" (class "clojure.lang.Compiler$PATHTYPE")))) 
                                      (90 (aconst_null)) 
                                      (91 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$PathNode" ((class "clojure.lang.Compiler$PATHTYPE") (class "clojure.lang.Compiler$PathNode")) void))) 
                                      (94 (astore 6)) 
                                      (96 (bipush 14)) ;;at TAG_0
                                      (98 (anewarray (class "java.lang.Object"))) 
                                      (101 (dup)) 
                                      (102 (iconst_0)) 
                                      (103 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (106 (aastore)) 
                                      (107 (dup)) 
                                      (108 (iconst_1)) 
                                      (109 (aload 5)) 
                                      (111 (aastore)) 
                                      (112 (dup)) 
                                      (113 (iconst_2)) 
                                      (114 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (117 (aastore)) 
                                      (118 (dup)) 
                                      (119 (iconst_3)) 
                                      (120 (getstatic (fieldCP "LOCAL_ENV" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (123 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (126 (aastore)) 
                                      (127 (dup)) 
                                      (128 (iconst_4)) 
                                      (129 (getstatic (fieldCP "LOOP_LOCALS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (132 (aastore)) 
                                      (133 (dup)) 
                                      (134 (iconst_5)) 
                                      (135 (aconst_null)) 
                                      (136 (aastore)) 
                                      (137 (dup)) 
                                      (138 (bipush 6)) 
                                      (140 (getstatic (fieldCP "NEXT_LOCAL_NUM" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (143 (aastore)) 
                                      (144 (dup)) 
                                      (145 (bipush 7)) 
                                      (147 (iconst_0)) 
                                      (148 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (151 (aastore)) 
                                      (152 (dup)) 
                                      (153 (bipush 8)) 
                                      (155 (getstatic (fieldCP "CLEAR_PATH" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (158 (aastore)) 
                                      (159 (dup)) 
                                      (160 (bipush 9)) 
                                      (162 (aload 6)) 
                                      (164 (aastore)) 
                                      (165 (dup)) 
                                      (166 (bipush 10)) 
                                      (168 (getstatic (fieldCP "CLEAR_ROOT" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (171 (aastore)) 
                                      (172 (dup)) 
                                      (173 (bipush 11)) 
                                      (175 (aload 6)) 
                                      (177 (aastore)) 
                                      (178 (dup)) 
                                      (179 (bipush 12)) 
                                      (181 (getstatic (fieldCP "CLEAR_SITES" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (184 (aastore)) 
                                      (185 (dup)) 
                                      (186 (bipush 13)) 
                                      (188 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentHashMap" (class "clojure.lang.PersistentHashMap")))) 
                                      (191 (aastore)) 
                                      (192 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (195 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (198 (aload 5)) 
                                      (200 (aload_3)) 
                                      (201 (invokestatic (methodCP "primInterface" "clojure.lang.Compiler$FnMethod" ((class "clojure.lang.IPersistentVector")) (class "java.lang.String")))) 
                                      (204 (putfield (fieldCP "prim" "clojure.lang.Compiler$FnMethod" (class "java.lang.String")))) 
                                      (207 (aload 5)) 
                                      (209 (getfield (fieldCP "prim" "clojure.lang.Compiler$FnMethod" (class "java.lang.String")))) 
                                      (212 (ifnull 232)) ;;to TAG_1
                                      (215 (aload 5)) 
                                      (217 (aload 5)) 
                                      (219 (getfield (fieldCP "prim" "clojure.lang.Compiler$FnMethod" (class "java.lang.String")))) 
                                      (222 (bipush 46)) 
                                      (224 (bipush 47)) 
                                      (226 (invokevirtual (methodCP "replace" "java.lang.String" (char char) (class "java.lang.String")))) 
                                      (229 (putfield (fieldCP "prim" "clojure.lang.Compiler$FnMethod" (class "java.lang.String")))) 
                                      (232 (aload 5)) ;;at TAG_1
                                      (234 (aload_3)) 
                                      (235 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (238 (invokestatic (methodCP "tagClass" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (241 (putfield (fieldCP "retClass" "clojure.lang.Compiler$FnMethod" (class "java.lang.Class")))) 
                                      (244 (aload 5)) 
                                      (246 (getfield (fieldCP "retClass" "clojure.lang.Compiler$FnMethod" (class "java.lang.Class")))) 
                                      (249 (invokevirtual (methodCP "isPrimitive" "java.lang.Class" () boolean))) 
                                      (252 (ifeq 287)) ;;to TAG_2
                                      (255 (aload 5)) 
                                      (257 (getfield (fieldCP "retClass" "clojure.lang.Compiler$FnMethod" (class "java.lang.Class")))) 
                                      (260 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (263 (if_acmpeq 287)) ;;to TAG_2
                                      (266 (aload 5)) 
                                      (268 (getfield (fieldCP "retClass" "clojure.lang.Compiler$FnMethod" (class "java.lang.Class")))) 
                                      (271 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (274 (if_acmpeq 287)) ;;to TAG_2
                                      (277 (new (class "java.lang.IllegalArgumentException"))) 
                                      (280 (dup)) 
                                      (281 (ldc 0)) ;;STRING:: "Only long and double primitives are supported"
                                      (283 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (286 (athrow)) 
                                      (287 (iload_2)) ;;at TAG_2
                                      (288 (ifne 319)) ;;to TAG_3
                                      (291 (aload_0)) 
                                      (292 (getfield (fieldCP "thisName" "clojure.lang.Compiler$ObjExpr" (class "java.lang.String")))) 
                                      (295 (ifnull 315)) ;;to TAG_4
                                      (298 (aload_0)) 
                                      (299 (getfield (fieldCP "thisName" "clojure.lang.Compiler$ObjExpr" (class "java.lang.String")))) 
                                      (302 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (305 (aconst_null)) 
                                      (306 (aconst_null)) 
                                      (307 (iconst_0)) 
                                      (308 (invokestatic (methodCP "access$900" "clojure.lang.Compiler" ((class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") boolean) (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (311 (pop)) 
                                      (312 (goto 319)) ;;to TAG_3
                                      (315 (invokestatic (methodCP "access$800" "clojure.lang.Compiler" () int))) ;;at TAG_4
                                      (318 (pop)) 
                                      (319 (getstatic (fieldCP "REQ" "clojure.lang.Compiler$PSTATE" (class "clojure.lang.Compiler$PSTATE")))) ;;at TAG_3
                                      (322 (astore 7)) 
                                      (324 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (327 (astore 8)) 
                                      (329 (new (class "java.util.ArrayList"))) 
                                      (332 (dup)) 
                                      (333 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (336 (astore 9)) 
                                      (338 (new (class "java.util.ArrayList"))) 
                                      (341 (dup)) 
                                      (342 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (345 (astore 10)) 
                                      (347 (iconst_0)) 
                                      (348 (istore 11)) 
                                      (350 (iload 11)) ;;at TAG_22
                                      (352 (aload_3)) 
                                      (353 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (358 (if_icmpge 749)) ;;to TAG_5
                                      (361 (aload_3)) 
                                      (362 (iload 11)) 
                                      (364 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (369 (instanceof (class "clojure.lang.Symbol"))) 
                                      (372 (ifne 385)) ;;to TAG_6
                                      (375 (new (class "java.lang.IllegalArgumentException"))) 
                                      (378 (dup)) 
                                      (379 (ldc 5)) ;;STRING:: "fn params must be Symbols"
                                      (381 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (384 (athrow)) 
                                      (385 (aload_3)) ;;at TAG_6
                                      (386 (iload 11)) 
                                      (388 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (393 (checkcast (class "clojure.lang.Symbol"))) 
                                      (396 (astore 12)) 
                                      (398 (aload 12)) 
                                      (400 (invokevirtual (methodCP "getNamespace" "clojure.lang.Symbol" () (class "java.lang.String")))) 
                                      (403 (ifnull 430)) ;;to TAG_7
                                      (406 (new (class "java.lang.StringBuilder"))) 
                                      (409 (dup)) 
                                      (410 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (413 (ldc 6)) ;;STRING:: "Can\nt use qualified name as parameter: "
                                      (415 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (418 (aload 12)) 
                                      (420 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (423 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (426 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (429 (athrow)) 
                                      (430 (aload 12)) ;;at TAG_7
                                      (432 (getstatic (fieldCP "_AMP_" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (435 (invokevirtual (methodCP "equals" "clojure.lang.Symbol" ((class "java.lang.Object")) boolean))) 
                                      (438 (ifeq 463)) ;;to TAG_8
                                      (441 (aload 7)) 
                                      (443 (getstatic (fieldCP "REQ" "clojure.lang.Compiler$PSTATE" (class "clojure.lang.Compiler$PSTATE")))) 
                                      (446 (if_acmpne 457)) ;;to TAG_9
                                      (449 (getstatic (fieldCP "REST" "clojure.lang.Compiler$PSTATE" (class "clojure.lang.Compiler$PSTATE")))) 
                                      (452 (astore 7)) 
                                      (454 (goto 743)) ;;to TAG_10
                                      (457 (ldc 7)) ;;at TAG_9;;STRING:: "Invalid parameter list"
                                      (459 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (462 (athrow)) 
                                      (463 (aload 12)) ;;at TAG_8
                                      (465 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (468 (invokestatic (methodCP "tagClass" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (471 (invokestatic (methodCP "primClass" "clojure.lang.Compiler" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (474 (astore 13)) 
                                      (476 (aload 13)) 
                                      (478 (invokevirtual (methodCP "isPrimitive" "java.lang.Class" () boolean))) 
                                      (481 (ifeq 528)) ;;to TAG_11
                                      (484 (aload 13)) 
                                      (486 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (489 (if_acmpeq 528)) ;;to TAG_11
                                      (492 (aload 13)) 
                                      (494 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (497 (if_acmpeq 528)) ;;to TAG_11
                                      (500 (new (class "java.lang.IllegalArgumentException"))) 
                                      (503 (dup)) 
                                      (504 (new (class "java.lang.StringBuilder"))) 
                                      (507 (dup)) 
                                      (508 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (511 (ldc 8)) ;;STRING:: "Only long and double primitives are supported: "
                                      (513 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (516 (aload 12)) 
                                      (518 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (521 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (524 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (527 (athrow)) 
                                      (528 (aload 7)) ;;at TAG_11
                                      (530 (getstatic (fieldCP "REST" "clojure.lang.Compiler$PSTATE" (class "clojure.lang.Compiler$PSTATE")))) 
                                      (533 (if_acmpne 550)) ;;to TAG_12
                                      (536 (aload 12)) 
                                      (538 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (541 (ifnull 550)) ;;to TAG_12
                                      (544 (ldc 9)) ;;STRING:: "& arg cannot have type hint"
                                      (546 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (549 (athrow)) 
                                      (550 (aload 7)) ;;at TAG_12
                                      (552 (getstatic (fieldCP "REST" "clojure.lang.Compiler$PSTATE" (class "clojure.lang.Compiler$PSTATE")))) 
                                      (555 (if_acmpne 572))  ;;to TAG_13
                                      (558 (aload 5)) 
                                      (560 (getfield (fieldCP "prim" "clojure.lang.Compiler$FnMethod" (class "java.lang.String")))) 
                                      (563 (ifnull 572))  ;;to TAG_13
                                      (566 (ldc 10)) ;;STRING:: "fns taking primitives cannot be variadic"
                                      (568 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (571 (athrow)) 
                                      (572 (aload 7)) ;;at TAG_13
                                      (574 (getstatic (fieldCP "REST" "clojure.lang.Compiler$PSTATE" (class "clojure.lang.Compiler$PSTATE")))) 
                                      (577 (if_acmpne 585)) ;;to TAG_14
                                      (580 (ldc_w )) 
                                      (583 (astore 13)) 
                                      (585 (aload 9)) ;;at TAG_14
                                      (587 (aload 13)) 
                                      (589 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (592 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (595 (pop)) 
                                      (596 (aload 10)) 
                                      (598 (aload 13)) 
                                      (600 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (603 (pop)) 
                                      (604 (aload 13)) 
                                      (606 (invokevirtual (methodCP "isPrimitive" "java.lang.Class" () boolean))) 
                                      (609 (ifeq 631)) ;;to TAG_15
                                      (612 (aload 12)) 
                                      (614 (aconst_null)) 
                                      (615 (new (class "clojure.lang.Compiler$MethodParamExpr"))) 
                                      (618 (dup)) 
                                      (619 (aload 13)) 
                                      (621 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$MethodParamExpr" ((class "java.lang.Class")) void))) 
                                      (624 (iconst_1)) 
                                      (625 (invokestatic (methodCP "access$900" "clojure.lang.Compiler" ((class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") boolean) (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (628 (goto 657)) ;;to TAG_16
                                      (631 (aload 12)) ;;at TAG_15
                                      (633 (aload 7)) 
                                      (635 (getstatic (fieldCP "REST" "clojure.lang.Compiler$PSTATE" (class "clojure.lang.Compiler$PSTATE")))) 
                                      (638 (if_acmpne 647)) ;;to TAG_17
                                      (641 (getstatic (fieldCP "ISEQ" "clojure.lang.Compiler" (class "clojure.lang.Symbol")))) 
                                      (644 (goto 652)) ;;to TAG_18
                                      (647 (aload 12)) ;;at TAG_17
                                      (649 (invokestatic (methodCP "access$500" "clojure.lang.Compiler" ((class "java.lang.Object")) (class "clojure.lang.Symbol")))) 
                                      (652 (aconst_null)) ;;at TAG_18
                                      (653 (iconst_1)) 
                                      (654 (invokestatic (methodCP "access$900" "clojure.lang.Compiler" ((class "clojure.lang.Symbol") (class "clojure.lang.Symbol") (class "clojure.lang.Compiler$Expr") boolean) (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (657 (astore 14)) ;;at TAG_16
                                      (659 (aload 8)) 
                                      (661 (aload 14)) 
                                      (663 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (666 (astore 8)) 
                                      (668 (getstatic (fieldCP "$SwitchMap$clojure$lang$Compiler$PSTATE" "clojure.lang.Compiler$1" (array int)))) 
                                      (671 (aload 7)) 
                                      (673 (invokevirtual (methodCP "ordinal" "clojure.lang.Compiler$PSTATE" () int))) 
                                      (676 (iaload)) 
                                      (677 (lookupswitch (lookupswitchinfo 737 2 ((1 . 704) (2 . 722))))) ;;to TAG_19;;to TAG_20;;to TAG_21
                                      (704 (aload 5)) ;;at TAG_20
                                      (706 (aload 5)) 
                                      (708 (getfield (fieldCP "reqParms" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (711 (aload 14)) 
                                      (713 (invokevirtual (methodCP "cons" "clojure.lang.PersistentVector" ((class "java.lang.Object")) (class "clojure.lang.PersistentVector")))) 
                                      (716 (putfield (fieldCP "reqParms" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (719 (goto 743)) ;;to TAG_10
                                      (722 (aload 5)) ;;at TAG_21
                                      (724 (aload 14)) 
                                      (726 (putfield (fieldCP "restParm" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (729 (getstatic (fieldCP "DONE" "clojure.lang.Compiler$PSTATE" (class "clojure.lang.Compiler$PSTATE")))) 
                                      (732 (astore 7)) 
                                      (734 (goto 743)) ;;to TAG_10
                                      (737 (ldc 11)) ;;at TAG_19;;STRING:: "Unexpected parameter"
                                      (739 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (742 (athrow)) 
                                      (743 (iinc 11 1)) ;;at TAG_10
                                      (746 (goto 350)) ;;to TAG_22
                                      (749 (aload 5)) ;;at TAG_5
                                      (751 (getfield (fieldCP "reqParms" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (754 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (757 (bipush 20)) 
                                      (759 (if_icmple 768)) ;;to TAG_23
                                      (762 (ldc 12)) ;;STRING:: "Can\nt specify more than 20 params"
                                      (764 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (767 (athrow)) 
                                      (768 (getstatic (fieldCP "LOOP_LOCALS" "clojure.lang.Compiler" (class "clojure.lang.Var")))) ;;at TAG_23
                                      (771 (aload 8)) 
                                      (773 (invokevirtual (methodCP "set" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (776 (pop)) 
                                      (777 (aload 5)) 
                                      (779 (aload 8)) 
                                      (781 (putfield (fieldCP "argLocals" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (784 (aload 5)) 
                                      (786 (getfield (fieldCP "prim" "clojure.lang.Compiler$FnMethod" (class "java.lang.String")))) 
                                      (789 (ifnull 886)) ;;to TAG_24
                                      (792 (aload 5)) 
                                      (794 (aload 9)) 
                                      (796 (aload 9)) 
                                      (798 (invokevirtual (methodCP "size" "java.util.ArrayList" () int))) 
                                      (801 (anewarray (class "clojure.asm.Type"))) 
                                      (804 (invokevirtual (methodCP "toArray" "java.util.ArrayList" ((array (class "java.lang.Object"))) (array (class "java.lang.Object"))))) 
                                      (807 (checkcast (array (class "clojure.asm.Type")))) 
                                      (810 (putfield (fieldCP "argtypes" "clojure.lang.Compiler$FnMethod" (array (class "clojure.asm.Type"))))) 
                                      (813 (aload 5)) 
                                      (815 (aload 10)) 
                                      (817 (aload 9)) 
                                      (819 (invokevirtual (methodCP "size" "java.util.ArrayList" () int))) 
                                      (822 (anewarray (class "java.lang.Class"))) 
                                      (825 (invokevirtual (methodCP "toArray" "java.util.ArrayList" ((array (class "java.lang.Object"))) (array (class "java.lang.Object"))))) 
                                      (828 (checkcast (array (class "java.lang.Class")))) 
                                      (831 (putfield (fieldCP "argclasses" "clojure.lang.Compiler$FnMethod" (array (class "java.lang.Class"))))) 
                                      (834 (iconst_0)) 
                                      (835 (istore 11)) 
                                      (837 (iload 11)) ;;at TAG_27
                                      (839 (aload 5)) 
                                      (841 (getfield (fieldCP "argclasses" "clojure.lang.Compiler$FnMethod" (array (class "java.lang.Class"))))) 
                                      (844 (arraylength)) 
                                      (845 (if_icmpge 886)) ;;to TAG_24
                                      (848 (aload 5)) 
                                      (850 (getfield (fieldCP "argclasses" "clojure.lang.Compiler$FnMethod" (array (class "java.lang.Class"))))) 
                                      (853 (iload 11)) 
                                      (855 (aaload)) 
                                      (856 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (859 (if_acmpeq 876)) ;;to TAG_25
                                      (862 (aload 5)) 
                                      (864 (getfield (fieldCP "argclasses" "clojure.lang.Compiler$FnMethod" (array (class "java.lang.Class"))))) 
                                      (867 (iload 11)) 
                                      (869 (aaload)) 
                                      (870 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (873 (if_acmpne 880)) ;;to TAG_26
                                      (876 (invokestatic (methodCP "access$800" "clojure.lang.Compiler" () int))) ;;at TAG_25
                                      (879 (pop)) 
                                      (880 (iinc 11 1)) ;;at TAG_26
                                      (883 (goto 837)) ;;to TAG_27
                                      (886 (aload 5)) ;;at TAG_24
                                      (888 (new (class "clojure.lang.Compiler$BodyExpr$Parser"))) 
                                      (891 (dup)) 
                                      (892 (invokespecial (methodCP "<init>" "clojure.lang.Compiler$BodyExpr$Parser" () void))) 
                                      (895 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (898 (aload 4)) 
                                      (900 (invokevirtual (methodCP "parse" "clojure.lang.Compiler$BodyExpr$Parser" ((class "clojure.lang.Compiler$C") (class "java.lang.Object")) (class "clojure.lang.Compiler$Expr")))) 
                                      (903 (putfield (fieldCP "body" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.Compiler$Expr")))) 
                                      (906 (aload 5)) 
                                      (908 (astore 11)) 
                                      (910 (jsr 924)) ;;to TAG_28
                                      (913 (aload 11)) ;;at TAG_30
                                      (915 (areturn)) 
                                      (916 (astore 15)) ;;at TAG_31
                                      (918 (jsr 924)) ;;to TAG_28
                                      (921 (aload 15)) ;;at TAG_32
                                      (923 (athrow)) 
                                      (924 (astore 16)) ;;at TAG_28
                                      (926 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (929 (ret 16)) 
                                      (endofcode 931))
                                   (Exceptions 
                                     (handler 14 913  916 (class "java.lang.Throwable"))
                                     (handler 916 921  916 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "emit"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.ClassVisitor"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 39)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "prim" "clojure.lang.Compiler$FnMethod" (class "java.lang.String")))) 
                                      (4 (ifnull 16)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (aload_1)) 
                                      (9 (aload_2)) 
                                      (10 (invokevirtual (methodCP "doEmitPrim" "clojure.lang.Compiler$FnMethod" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.ClassVisitor")) void))) 
                                      (13 (goto 38)) ;;to TAG_1
                                      (16 (aload_1)) ;;at TAG_0
                                      (17 (getfield (fieldCP "isStatic" "clojure.lang.Compiler$ObjExpr" boolean))) 
                                      (20 (ifeq 32))  ;;to TAG_2
                                      (23 (aload_0)) 
                                      (24 (aload_1)) 
                                      (25 (aload_2)) 
                                      (26 (invokevirtual (methodCP "doEmitStatic" "clojure.lang.Compiler$FnMethod" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.ClassVisitor")) void))) 
                                      (29 (goto 38)) ;;to TAG_1
                                      (32 (aload_0)) ;;at TAG_2
                                      (33 (aload_1)) 
                                      (34 (aload_2)) 
                                      (35 (invokevirtual (methodCP "doEmit" "clojure.lang.Compiler$FnMethod" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.ClassVisitor")) void))) 
                                      (38 (return)) ;;at TAG_1
                                      (endofcode 39))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doEmitStatic"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.ClassVisitor"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 11) (code_length . 337)
                                   (parsedcode
                                      (0 (new (class "clojure.asm.commons.Method"))) 
                                      (3 (dup)) 
                                      (4 (ldc 13)) ;;STRING:: "invokeStatic"
                                      (6 (aload_0)) 
                                      (7 (invokevirtual (methodCP "getReturnType" "clojure.lang.Compiler$FnMethod" () (class "clojure.asm.Type")))) 
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "argtypes" "clojure.lang.Compiler$FnMethod" (array (class "clojure.asm.Type"))))) 
                                      (14 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (17 (astore_3)) 
                                      (18 (new (class "clojure.asm.commons.GeneratorAdapter"))) 
                                      (21 (dup)) 
                                      (22 (bipush 9)) 
                                      (24 (aload_3)) 
                                      (25 (aconst_null)) 
                                      (26 (invokestatic (methodCP "access$1500" "clojure.lang.Compiler" () (array (class "clojure.asm.Type"))))) 
                                      (29 (aload_2)) 
                                      (30 (invokespecial (methodCP "<init>" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.commons.Method") (class "java.lang.String") (array (class "clojure.asm.Type")) (class "clojure.asm.ClassVisitor")) void))) 
                                      (33 (astore 4)) 
                                      (35 (aload 4)) 
                                      (37 (invokevirtual (methodCP "visitCode" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (40 (aload 4)) 
                                      (42 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (45 (astore 5)) 
                                      (47 (aload 4)) 
                                      (49 (aload_0)) 
                                      (50 (getfield (fieldCP "line" "clojure.lang.Compiler$FnMethod" int))) 
                                      (53 (aload 5)) 
                                      (55 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (58 (iconst_4)) ;;at TAG_6
                                      (59 (anewarray (class "java.lang.Object"))) 
                                      (62 (dup)) 
                                      (63 (iconst_0)) 
                                      (64 (getstatic (fieldCP "LOOP_LABEL" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (67 (aastore)) 
                                      (68 (dup)) 
                                      (69 (iconst_1)) 
                                      (70 (aload 5)) 
                                      (72 (aastore)) 
                                      (73 (dup)) 
                                      (74 (iconst_2)) 
                                      (75 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (78 (aastore)) 
                                      (79 (dup)) 
                                      (80 (iconst_3)) 
                                      (81 (aload_0)) 
                                      (82 (aastore)) 
                                      (83 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (86 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (89 (aload_0)) 
                                      (90 (getfield (fieldCP "objx" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.Compiler$ObjExpr")))) 
                                      (93 (aload 4)) 
                                      (95 (aload_0)) 
                                      (96 (getfield (fieldCP "retClass" "clojure.lang.Compiler$FnMethod" (class "java.lang.Class")))) 
                                      (99 (aload_0)) 
                                      (100 (getfield (fieldCP "body" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.Compiler$Expr")))) 
                                      (103 (invokestatic (methodCP "emitBody" "clojure.lang.Compiler$FnMethod" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (106 (aload 4)) 
                                      (108 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (111 (astore 6)) 
                                      (113 (aload_0)) 
                                      (114 (getfield (fieldCP "argLocals" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (117 (invokevirtual (methodCP "seq" "clojure.lang.PersistentVector" () (class "clojure.lang.ISeq")))) 
                                      (120 (astore 7)) 
                                      (122 (aload 7)) ;;at TAG_1
                                      (124 (ifnull 184)) ;;to TAG_0
                                      (127 (aload 7)) 
                                      (129 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (134 (checkcast (class "clojure.lang.Compiler$LocalBinding"))) 
                                      (137 (astore 8)) 
                                      (139 (aload 4)) 
                                      (141 (aload 8)) 
                                      (143 (getfield (fieldCP "name" "clojure.lang.Compiler$LocalBinding" (class "java.lang.String")))) 
                                      (146 (aload_0)) 
                                      (147 (getfield (fieldCP "argtypes" "clojure.lang.Compiler$FnMethod" (array (class "clojure.asm.Type"))))) 
                                      (150 (aload 8)) 
                                      (152 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (155 (aaload)) 
                                      (156 (invokevirtual (methodCP "getDescriptor" "clojure.asm.Type" () (class "java.lang.String")))) 
                                      (159 (aconst_null)) 
                                      (160 (aload 5)) 
                                      (162 (aload 6)) 
                                      (164 (aload 8)) 
                                      (166 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (169 (invokevirtual (methodCP "visitLocalVariable" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "clojure.asm.Label") (class "clojure.asm.Label") int) void))) 
                                      (172 (aload 7)) 
                                      (174 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (179 (astore 7)) 
                                      (181 (goto 122))  ;;to TAG_1
                                      (184 (jsr 206)) ;;to TAG_2;;at TAG_0
                                      (187 (goto 213)) ;;to TAG_3;;at TAG_8
                                      (190 (astore 6)) ;;at TAG_7
                                      (192 (aload 6)) 
                                      (194 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (197 (athrow)) 
                                      (198 (astore 9)) ;;at TAG_9
                                      (200 (jsr 206)) ;;to TAG_2
                                      (203 (aload 9)) ;;at TAG_10
                                      (205 (athrow)) 
                                      (206 (astore 10)) ;;at TAG_2
                                      (208 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (211 (ret 10)) 
                                      (213 (aload 4)) ;;at TAG_3
                                      (215 (invokevirtual (methodCP "returnValue" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (218 (aload 4)) 
                                      (220 (invokevirtual (methodCP "endMethod" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (223 (new (class "clojure.asm.commons.Method"))) 
                                      (226 (dup)) 
                                      (227 (aload_0)) 
                                      (228 (invokevirtual (methodCP "getMethodName" "clojure.lang.Compiler$FnMethod" () (class "java.lang.String")))) 
                                      (231 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (234 (aload_0)) 
                                      (235 (invokevirtual (methodCP "getArgTypes" "clojure.lang.Compiler$FnMethod" () (array (class "clojure.asm.Type"))))) 
                                      (238 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (241 (astore 6)) 
                                      (243 (new (class "clojure.asm.commons.GeneratorAdapter"))) 
                                      (246 (dup)) 
                                      (247 (iconst_1)) 
                                      (248 (aload 6)) 
                                      (250 (aconst_null)) 
                                      (251 (invokestatic (methodCP "access$1500" "clojure.lang.Compiler" () (array (class "clojure.asm.Type"))))) 
                                      (254 (aload_2)) 
                                      (255 (invokespecial (methodCP "<init>" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.commons.Method") (class "java.lang.String") (array (class "clojure.asm.Type")) (class "clojure.asm.ClassVisitor")) void))) 
                                      (258 (astore 4)) 
                                      (260 (aload 4)) 
                                      (262 (invokevirtual (methodCP "visitCode" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (265 (iconst_0)) 
                                      (266 (istore 7)) 
                                      (268 (iload 7)) ;;at TAG_5
                                      (270 (aload_0)) 
                                      (271 (getfield (fieldCP "argtypes" "clojure.lang.Compiler$FnMethod" (array (class "clojure.asm.Type"))))) 
                                      (274 (arraylength)) 
                                      (275 (if_icmpge 304)) ;;to TAG_4
                                      (278 (aload 4)) 
                                      (280 (iload 7)) 
                                      (282 (invokevirtual (methodCP "loadArg" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (285 (aload_1)) 
                                      (286 (aload 4)) 
                                      (288 (aload_0)) 
                                      (289 (getfield (fieldCP "argclasses" "clojure.lang.Compiler$FnMethod" (array (class "java.lang.Class"))))) 
                                      (292 (iload 7)) 
                                      (294 (aaload)) 
                                      (295 (invokestatic (methodCP "emitUnboxArg" "clojure.lang.Compiler$HostExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class")) void))) 
                                      (298 (iinc 7 1)) 
                                      (301 (goto 268)) ;;to TAG_5
                                      (304 (aload 4)) ;;at TAG_4
                                      (306 (aload_0)) 
                                      (307 (getfield (fieldCP "objx" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.Compiler$ObjExpr")))) 
                                      (310 (getfield (fieldCP "objtype" "clojure.lang.Compiler$ObjExpr" (class "clojure.asm.Type")))) 
                                      (313 (aload_3)) 
                                      (314 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (317 (aload 4)) 
                                      (319 (aload_0)) 
                                      (320 (invokevirtual (methodCP "getReturnType" "clojure.lang.Compiler$FnMethod" () (class "clojure.asm.Type")))) 
                                      (323 (invokevirtual (methodCP "box" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (326 (aload 4)) 
                                      (328 (invokevirtual (methodCP "returnValue" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (331 (aload 4)) 
                                      (333 (invokevirtual (methodCP "endMethod" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (336 (return)) 
                                      (endofcode 337))
                                   (Exceptions 
                                     (handler 58 184  190 (class "java.lang.Exception"))
                                     (handler 58 187  198 (class "java.lang.Throwable"))
                                     (handler 190 203  198 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "doEmitPrim"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.ClassVisitor"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 11) (code_length . 382)
                                   (parsedcode
                                      (0 (new (class "clojure.asm.commons.Method"))) 
                                      (3 (dup)) 
                                      (4 (ldc 14)) ;;STRING:: "invokePrim"
                                      (6 (aload_0)) 
                                      (7 (invokevirtual (methodCP "getReturnType" "clojure.lang.Compiler$FnMethod" () (class "clojure.asm.Type")))) 
                                      (10 (aload_0)) 
                                      (11 (getfield (fieldCP "argtypes" "clojure.lang.Compiler$FnMethod" (array (class "clojure.asm.Type"))))) 
                                      (14 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (17 (astore_3)) 
                                      (18 (new (class "clojure.asm.commons.GeneratorAdapter"))) 
                                      (21 (dup)) 
                                      (22 (bipush 17)) 
                                      (24 (aload_3)) 
                                      (25 (aconst_null)) 
                                      (26 (invokestatic (methodCP "access$1500" "clojure.lang.Compiler" () (array (class "clojure.asm.Type"))))) 
                                      (29 (aload_2)) 
                                      (30 (invokespecial (methodCP "<init>" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.commons.Method") (class "java.lang.String") (array (class "clojure.asm.Type")) (class "clojure.asm.ClassVisitor")) void))) 
                                      (33 (astore 4)) 
                                      (35 (aload 4)) 
                                      (37 (invokevirtual (methodCP "visitCode" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (40 (aload 4)) 
                                      (42 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (45 (astore 5)) 
                                      (47 (aload 4)) 
                                      (49 (aload_0)) 
                                      (50 (getfield (fieldCP "line" "clojure.lang.Compiler$FnMethod" int))) 
                                      (53 (aload 5)) 
                                      (55 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (58 (iconst_4)) ;;at TAG_6
                                      (59 (anewarray (class "java.lang.Object"))) 
                                      (62 (dup)) 
                                      (63 (iconst_0)) 
                                      (64 (getstatic (fieldCP "LOOP_LABEL" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (67 (aastore)) 
                                      (68 (dup)) 
                                      (69 (iconst_1)) 
                                      (70 (aload 5)) 
                                      (72 (aastore)) 
                                      (73 (dup)) 
                                      (74 (iconst_2)) 
                                      (75 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (78 (aastore)) 
                                      (79 (dup)) 
                                      (80 (iconst_3)) 
                                      (81 (aload_0)) 
                                      (82 (aastore)) 
                                      (83 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (86 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (89 (aload_0)) 
                                      (90 (getfield (fieldCP "objx" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.Compiler$ObjExpr")))) 
                                      (93 (aload 4)) 
                                      (95 (aload_0)) 
                                      (96 (getfield (fieldCP "retClass" "clojure.lang.Compiler$FnMethod" (class "java.lang.Class")))) 
                                      (99 (aload_0)) 
                                      (100 (getfield (fieldCP "body" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.Compiler$Expr")))) 
                                      (103 (invokestatic (methodCP "emitBody" "clojure.lang.Compiler$FnMethod" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class") (class "clojure.lang.Compiler$Expr")) void))) 
                                      (106 (aload 4)) 
                                      (108 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (111 (astore 6)) 
                                      (113 (aload 4)) 
                                      (115 (ldc 15)) ;;STRING:: "this"
                                      (117 (ldc 16)) ;;STRING:: "Ljava/lang/Object;"
                                      (119 (aconst_null)) 
                                      (120 (aload 5)) 
                                      (122 (aload 6)) 
                                      (124 (iconst_0)) 
                                      (125 (invokevirtual (methodCP "visitLocalVariable" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "clojure.asm.Label") (class "clojure.asm.Label") int) void))) 
                                      (128 (aload_0)) 
                                      (129 (getfield (fieldCP "argLocals" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (132 (invokevirtual (methodCP "seq" "clojure.lang.PersistentVector" () (class "clojure.lang.ISeq")))) 
                                      (135 (astore 7)) 
                                      (137 (aload 7)) ;;at TAG_1
                                      (139 (ifnull 201)) ;;to TAG_0
                                      (142 (aload 7)) 
                                      (144 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (149 (checkcast (class "clojure.lang.Compiler$LocalBinding"))) 
                                      (152 (astore 8)) 
                                      (154 (aload 4)) 
                                      (156 (aload 8)) 
                                      (158 (getfield (fieldCP "name" "clojure.lang.Compiler$LocalBinding" (class "java.lang.String")))) 
                                      (161 (aload_0)) 
                                      (162 (getfield (fieldCP "argtypes" "clojure.lang.Compiler$FnMethod" (array (class "clojure.asm.Type"))))) 
                                      (165 (aload 8)) 
                                      (167 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (170 (iconst_1)) 
                                      (171 (isub)) 
                                      (172 (aaload)) 
                                      (173 (invokevirtual (methodCP "getDescriptor" "clojure.asm.Type" () (class "java.lang.String")))) 
                                      (176 (aconst_null)) 
                                      (177 (aload 5)) 
                                      (179 (aload 6)) 
                                      (181 (aload 8)) 
                                      (183 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (186 (invokevirtual (methodCP "visitLocalVariable" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "clojure.asm.Label") (class "clojure.asm.Label") int) void))) 
                                      (189 (aload 7)) 
                                      (191 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (196 (astore 7)) 
                                      (198 (goto 137))  ;;to TAG_1
                                      (201 (jsr 223)) ;;to TAG_2;;at TAG_0
                                      (204 (goto 230)) ;;to TAG_3;;at TAG_8
                                      (207 (astore 6)) ;;at TAG_7
                                      (209 (aload 6)) 
                                      (211 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (214 (athrow)) 
                                      (215 (astore 9)) ;;at TAG_9
                                      (217 (jsr 223)) ;;to TAG_2
                                      (220 (aload 9)) ;;at TAG_10
                                      (222 (athrow)) 
                                      (223 (astore 10)) ;;at TAG_2
                                      (225 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (228 (ret 10)) 
                                      (230 (aload 4)) ;;at TAG_3
                                      (232 (invokevirtual (methodCP "returnValue" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (235 (aload 4)) 
                                      (237 (invokevirtual (methodCP "endMethod" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (240 (new (class "clojure.asm.commons.Method"))) 
                                      (243 (dup)) 
                                      (244 (aload_0)) 
                                      (245 (invokevirtual (methodCP "getMethodName" "clojure.lang.Compiler$FnMethod" () (class "java.lang.String")))) 
                                      (248 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (251 (aload_0)) 
                                      (252 (invokevirtual (methodCP "getArgTypes" "clojure.lang.Compiler$FnMethod" () (array (class "clojure.asm.Type"))))) 
                                      (255 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (258 (astore 6)) 
                                      (260 (new (class "clojure.asm.commons.GeneratorAdapter"))) 
                                      (263 (dup)) 
                                      (264 (iconst_1)) 
                                      (265 (aload 6)) 
                                      (267 (aconst_null)) 
                                      (268 (invokestatic (methodCP "access$1500" "clojure.lang.Compiler" () (array (class "clojure.asm.Type"))))) 
                                      (271 (aload_2)) 
                                      (272 (invokespecial (methodCP "<init>" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.commons.Method") (class "java.lang.String") (array (class "clojure.asm.Type")) (class "clojure.asm.ClassVisitor")) void))) 
                                      (275 (astore 4)) 
                                      (277 (aload 4)) 
                                      (279 (invokevirtual (methodCP "visitCode" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (282 (aload 4)) 
                                      (284 (invokevirtual (methodCP "loadThis" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (287 (iconst_0)) 
                                      (288 (istore 7)) 
                                      (290 (iload 7)) ;;at TAG_5
                                      (292 (aload_0)) 
                                      (293 (getfield (fieldCP "argtypes" "clojure.lang.Compiler$FnMethod" (array (class "clojure.asm.Type"))))) 
                                      (296 (arraylength)) 
                                      (297 (if_icmpge 326)) ;;to TAG_4
                                      (300 (aload 4)) 
                                      (302 (iload 7)) 
                                      (304 (invokevirtual (methodCP "loadArg" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (307 (aload_1)) 
                                      (308 (aload 4)) 
                                      (310 (aload_0)) 
                                      (311 (getfield (fieldCP "argclasses" "clojure.lang.Compiler$FnMethod" (array (class "java.lang.Class"))))) 
                                      (314 (iload 7)) 
                                      (316 (aaload)) 
                                      (317 (invokestatic (methodCP "emitUnboxArg" "clojure.lang.Compiler$HostExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class")) void))) 
                                      (320 (iinc 7 1)) 
                                      (323 (goto 290)) ;;to TAG_5
                                      (326 (aload 4)) ;;at TAG_4
                                      (328 (new (class "java.lang.StringBuilder"))) 
                                      (331 (dup)) 
                                      (332 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (335 (ldc 1)) ;;STRING:: "L"
                                      (337 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (340 (aload_0)) 
                                      (341 (getfield (fieldCP "prim" "clojure.lang.Compiler$FnMethod" (class "java.lang.String")))) 
                                      (344 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (347 (ldc 17)) ;;STRING:: ";"
                                      (349 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (352 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (355 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.String")) (class "clojure.asm.Type")))) 
                                      (358 (aload_3)) 
                                      (359 (invokevirtual (methodCP "invokeInterface" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (362 (aload 4)) 
                                      (364 (aload_0)) 
                                      (365 (invokevirtual (methodCP "getReturnType" "clojure.lang.Compiler$FnMethod" () (class "clojure.asm.Type")))) 
                                      (368 (invokevirtual (methodCP "box" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (371 (aload 4)) 
                                      (373 (invokevirtual (methodCP "returnValue" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (376 (aload 4)) 
                                      (378 (invokevirtual (methodCP "endMethod" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (381 (return)) 
                                      (endofcode 382))
                                   (Exceptions 
                                     (handler 58 201  207 (class "java.lang.Exception"))
                                     (handler 58 204  215 (class "java.lang.Throwable"))
                                     (handler 207 220  215 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "doEmit"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.ClassVisitor"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 11) (code_length . 219)
                                   (parsedcode
                                      (0 (new (class "clojure.asm.commons.Method"))) 
                                      (3 (dup)) 
                                      (4 (aload_0)) 
                                      (5 (invokevirtual (methodCP "getMethodName" "clojure.lang.Compiler$FnMethod" () (class "java.lang.String")))) 
                                      (8 (aload_0)) 
                                      (9 (invokevirtual (methodCP "getReturnType" "clojure.lang.Compiler$FnMethod" () (class "clojure.asm.Type")))) 
                                      (12 (aload_0)) 
                                      (13 (invokevirtual (methodCP "getArgTypes" "clojure.lang.Compiler$FnMethod" () (array (class "clojure.asm.Type"))))) 
                                      (16 (invokespecial (methodCP "<init>" "clojure.asm.commons.Method" ((class "java.lang.String") (class "clojure.asm.Type") (array (class "clojure.asm.Type"))) void))) 
                                      (19 (astore_3)) 
                                      (20 (new (class "clojure.asm.commons.GeneratorAdapter"))) 
                                      (23 (dup)) 
                                      (24 (iconst_1)) 
                                      (25 (aload_3)) 
                                      (26 (aconst_null)) 
                                      (27 (invokestatic (methodCP "access$1500" "clojure.lang.Compiler" () (array (class "clojure.asm.Type"))))) 
                                      (30 (aload_2)) 
                                      (31 (invokespecial (methodCP "<init>" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.commons.Method") (class "java.lang.String") (array (class "clojure.asm.Type")) (class "clojure.asm.ClassVisitor")) void))) 
                                      (34 (astore 4)) 
                                      (36 (aload 4)) 
                                      (38 (invokevirtual (methodCP "visitCode" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (41 (aload 4)) 
                                      (43 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (46 (astore 5)) 
                                      (48 (aload 4)) 
                                      (50 (aload_0)) 
                                      (51 (getfield (fieldCP "line" "clojure.lang.Compiler$FnMethod" int))) 
                                      (54 (aload 5)) 
                                      (56 (invokevirtual (methodCP "visitLineNumber" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void))) 
                                      (59 (iconst_4)) ;;at TAG_4
                                      (60 (anewarray (class "java.lang.Object"))) 
                                      (63 (dup)) 
                                      (64 (iconst_0)) 
                                      (65 (getstatic (fieldCP "LOOP_LABEL" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (68 (aastore)) 
                                      (69 (dup)) 
                                      (70 (iconst_1)) 
                                      (71 (aload 5)) 
                                      (73 (aastore)) 
                                      (74 (dup)) 
                                      (75 (iconst_2)) 
                                      (76 (getstatic (fieldCP "METHOD" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (79 (aastore)) 
                                      (80 (dup)) 
                                      (81 (iconst_3)) 
                                      (82 (aload_0)) 
                                      (83 (aastore)) 
                                      (84 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (87 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (90 (aload_0)) 
                                      (91 (getfield (fieldCP "body" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.Compiler$Expr")))) 
                                      (94 (getstatic (fieldCP "RETURN" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (97 (aload_1)) 
                                      (98 (aload 4)) 
                                      (100 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (105 (aload 4)) 
                                      (107 (invokevirtual (methodCP "mark" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label")))) 
                                      (110 (astore 6)) 
                                      (112 (aload 4)) 
                                      (114 (ldc 15)) ;;STRING:: "this"
                                      (116 (ldc 16)) ;;STRING:: "Ljava/lang/Object;"
                                      (118 (aconst_null)) 
                                      (119 (aload 5)) 
                                      (121 (aload 6)) 
                                      (123 (iconst_0)) 
                                      (124 (invokevirtual (methodCP "visitLocalVariable" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "clojure.asm.Label") (class "clojure.asm.Label") int) void))) 
                                      (127 (aload_0)) 
                                      (128 (getfield (fieldCP "argLocals" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (131 (invokevirtual (methodCP "seq" "clojure.lang.PersistentVector" () (class "clojure.lang.ISeq")))) 
                                      (134 (astore 7)) 
                                      (136 (aload 7)) ;;at TAG_1
                                      (138 (ifnull 187)) ;;to TAG_0
                                      (141 (aload 7)) 
                                      (143 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (148 (checkcast (class "clojure.lang.Compiler$LocalBinding"))) 
                                      (151 (astore 8)) 
                                      (153 (aload 4)) 
                                      (155 (aload 8)) 
                                      (157 (getfield (fieldCP "name" "clojure.lang.Compiler$LocalBinding" (class "java.lang.String")))) 
                                      (160 (ldc 16)) ;;STRING:: "Ljava/lang/Object;"
                                      (162 (aconst_null)) 
                                      (163 (aload 5)) 
                                      (165 (aload 6)) 
                                      (167 (aload 8)) 
                                      (169 (getfield (fieldCP "idx" "clojure.lang.Compiler$LocalBinding" int))) 
                                      (172 (invokevirtual (methodCP "visitLocalVariable" "clojure.asm.commons.GeneratorAdapter" ((class "java.lang.String") (class "java.lang.String") (class "java.lang.String") (class "clojure.asm.Label") (class "clojure.asm.Label") int) void))) 
                                      (175 (aload 7)) 
                                      (177 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (182 (astore 7)) 
                                      (184 (goto 136)) ;;to TAG_1
                                      (187 (jsr 201))  ;;to TAG_2;;at TAG_0
                                      (190 (goto 208)) ;;to TAG_3;;at TAG_5
                                      (193 (astore 9)) ;;at TAG_6
                                      (195 (jsr 201))  ;;to TAG_2
                                      (198 (aload 9)) ;;at TAG_7
                                      (200 (athrow)) 
                                      (201 (astore 10)) ;;at TAG_2
                                      (203 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (206 (ret 10)) 
                                      (208 (aload 4)) ;;at TAG_3
                                      (210 (invokevirtual (methodCP "returnValue" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (213 (aload 4)) 
                                      (215 (invokevirtual (methodCP "endMethod" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (218 (return)) 
                                      (endofcode 219))
                                   (Exceptions 
                                     (handler 59 190  193 (class "java.lang.Throwable"))
                                     (handler 193 198  193 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "reqParms"
                              (parameters )
                              (returntype . (class "clojure.lang.PersistentVector"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "reqParms" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "restParm"
                              (parameters )
                              (returntype . (class "clojure.lang.Compiler$LocalBinding"))
                              (accessflags  *class*  *final*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "restParm" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.Compiler$LocalBinding"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isVariadic"
                              (parameters )
                              (returntype . boolean)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 13)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "restParm" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.Compiler$LocalBinding")))) 
                                      (4 (ifnull 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "numParams"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "reqParms" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (4 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (7 (aload_0)) 
                                      (8 (invokevirtual (methodCP "isVariadic" "clojure.lang.Compiler$FnMethod" () boolean))) 
                                      (11 (ifeq 18))  ;;to TAG_0
                                      (14 (iconst_1)) 
                                      (15 (goto 19)) ;;to TAG_1
                                      (18 (iconst_0)) ;;at TAG_0
                                      (19 (iadd)) ;;at TAG_1
                                      (20 (ireturn)) 
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getMethodName"
                              (parameters )
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "isVariadic" "clojure.lang.Compiler$FnMethod" () boolean))) 
                                      (4 (ifeq 12))  ;;to TAG_0
                                      (7 (ldc 18)) ;;STRING:: "doInvoke"
                                      (9 (goto 14)) ;;to TAG_1
                                      (12 (ldc 19)) ;;at TAG_0;;STRING:: "invoke"
                                      (14 (areturn)) ;;at TAG_1
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getReturnType"
                              (parameters )
                              (returntype . (class "clojure.asm.Type"))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 19)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "prim" "clojure.lang.Compiler$FnMethod" (class "java.lang.String")))) 
                                      (4 (ifnull 15))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "retClass" "clojure.lang.Compiler$FnMethod" (class "java.lang.Class")))) 
                                      (11 (invokestatic (methodCP "getType" "clojure.asm.Type" ((class "java.lang.Class")) (class "clojure.asm.Type")))) 
                                      (14 (areturn)) 
                                      (15 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) ;;at TAG_0
                                      (18 (areturn)) 
                                      (endofcode 19))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getArgTypes"
                              (parameters )
                              (returntype . (array (class "clojure.asm.Type")))
                              (accessflags  *class* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 56)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "isVariadic" "clojure.lang.Compiler$FnMethod" () boolean))) 
                                      (4 (ifeq 47)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "reqParms" "clojure.lang.Compiler$FnMethod" (class "clojure.lang.PersistentVector")))) 
                                      (11 (invokevirtual (methodCP "count" "clojure.lang.PersistentVector" () int))) 
                                      (14 (bipush 20)) 
                                      (16 (if_icmpne 47)) ;;to TAG_0
                                      (19 (bipush 21)) 
                                      (21 (anewarray (class "clojure.asm.Type"))) 
                                      (24 (astore_1)) 
                                      (25 (iconst_0)) 
                                      (26 (istore_2)) 
                                      (27 (iload_2)) ;;at TAG_2
                                      (28 (bipush 21)) 
                                      (30 (if_icmpge 45)) ;;to TAG_1
                                      (33 (aload_1)) 
                                      (34 (iload_2)) 
                                      (35 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (38 (aastore)) 
                                      (39 (iinc 2 1)) 
                                      (42 (goto 27))  ;;to TAG_2
                                      (45 (aload_1)) ;;at TAG_1
                                      (46 (areturn)) 
                                      (47 (invokestatic (methodCP "access$1300" "clojure.lang.Compiler" () (array (array (class "clojure.asm.Type")))))) ;;at TAG_0
                                      (50 (aload_0)) 
                                      (51 (invokevirtual (methodCP "numParams" "clojure.lang.Compiler$FnMethod" () int))) 
                                      (54 (aaload)) 
                                      (55 (areturn)) 
                                      (endofcode 56))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitClearLocals"
                              (parameters (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 0) (max_locals . 2) (code_length . 1)
                                   (parsedcode
                                      (0 (return))
                                      (endofcode 1))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$FnMethod-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$FnMethod*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$FnMethod" . "clojure.lang"))

