; Numbers$Ops-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.Numbers$Ops*
 (make-class-def
      '(class "clojure.lang.Numbers$Ops"
            "java.lang.Object"
            (constant_pool)
            (fields)
            (methods
                        (method "combine"
                              (parameters (class "clojure.lang.Numbers$Ops"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$LongOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$DoubleOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$RatioOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$BigIntOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "opsWith"
                              (parameters (class "clojure.lang.Numbers$BigDecimalOps"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "isZero"
                              (parameters (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "isPos"
                              (parameters (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "isNeg"
                              (parameters (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "add"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "addP"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "multiply"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "multiplyP"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "divide"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "quotient"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "remainder"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "equiv"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "lt"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "negate"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "negateP"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "inc"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "incP"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "dec"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code))
                        (method "decP"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *abstract*  *class*  *public* )
                              (code)))
            (interfaces)
            (accessflags  *abstract*  *interface* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Numbers$Ops-class-table*
  (make-static-class-decls 
   *clojure.lang.Numbers$Ops*))

(defconst *package-name-map* 
  ("clojure.lang.Numbers$Ops" . "clojure.lang"))

