; LispReader$CtorReader-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(defconst *clojure.lang.LispReader$CtorReader*
 (make-class-def
      '(class "clojure.lang.LispReader$CtorReader"
            "clojure.lang.AFn"
            (constant_pool
                        (STRING  "Reader tag must be a symbol")
                        (STRING  ".")
                        (STRING  "No reader function for tag ")
                        (STRING  "Record construction syntax can only be used when *read-eval* == true")
                        (STRING  "Unreadable constructor form starting with \"#")
                        (STRING  "\"")
                        (STRING  "Unexpected number of constructor arguments to ")
                        (STRING  ": got ")
                        (STRING  "Unreadable defrecord form: key must be of type clojure.lang.Keyword, got ")
                        (STRING  "create"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 70)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "java.io.PushbackReader"))) 
                                      (4 (astore_3)) 
                                      (5 (aload_3)) 
                                      (6 (iconst_1)) 
                                      (7 (aconst_null)) 
                                      (8 (iconst_0)) 
                                      (9 (invokestatic (methodCP "read" "clojure.lang.LispReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (12 (astore 4)) 
                                      (14 (aload 4)) 
                                      (16 (instanceof (class "clojure.lang.Symbol"))) 
                                      (19 (ifne 32)) ;;to TAG_0
                                      (22 (new (class "java.lang.RuntimeException"))) 
                                      (25 (dup)) 
                                      (26 (ldc 0)) ;;STRING:: "Reader tag must be a symbol"
                                      (28 (invokespecial (methodCP "<init>" "java.lang.RuntimeException" ((class "java.lang.String")) void))) 
                                      (31 (athrow)) 
                                      (32 (aload 4)) ;;at TAG_0
                                      (34 (checkcast (class "clojure.lang.Symbol"))) 
                                      (37 (astore 5)) 
                                      (39 (aload 5)) 
                                      (41 (invokevirtual (methodCP "getName" "clojure.lang.Symbol" () (class "java.lang.String")))) 
                                      (44 (ldc 1)) ;;STRING:: "."
                                      (46 (invokevirtual (methodCP "contains" "java.lang.String" ((class "java.lang.CharSequence")) boolean))) 
                                      (49 (ifeq 62)) ;;to TAG_1
                                      (52 (aload_0)) 
                                      (53 (aload_3)) 
                                      (54 (aload 5)) 
                                      (56 (invokespecial (methodCP "readRecord" "clojure.lang.LispReader$CtorReader" ((class "java.io.PushbackReader") (class "clojure.lang.Symbol")) (class "java.lang.Object")))) 
                                      (59 (goto 69))  ;;to TAG_2
                                      (62 (aload_0)) ;;at TAG_1
                                      (63 (aload_3)) 
                                      (64 (aload 5)) 
                                      (66 (invokespecial (methodCP "readTagged" "clojure.lang.LispReader$CtorReader" ((class "java.io.PushbackReader") (class "clojure.lang.Symbol")) (class "java.lang.Object")))) 
                                      (69 (areturn)) ;;at TAG_2
                                      (endofcode 70))
                                   (Exceptions )
                                   (StackMap )))
                        (method "readTagged"
                              (parameters (class "java.io.PushbackReader") (class "clojure.lang.Symbol"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 4) (max_locals . 7) (code_length . 127)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (iconst_1)) 
                                      (2 (aconst_null)) 
                                      (3 (iconst_1)) 
                                      (4 (invokestatic (methodCP "read" "clojure.lang.LispReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean) (class "java.lang.Object")))) 
                                      (7 (astore_3)) 
                                      (8 (getstatic (fieldCP "DATA_READERS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (11 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (14 (checkcast (class "clojure.lang.ILookup"))) 
                                      (17 (astore 4)) 
                                      (19 (aload 4)) 
                                      (21 (aload_2)) 
                                      (22 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (25 (checkcast (class "clojure.lang.IFn"))) 
                                      (28 (astore 5)) 
                                      (30 (aload 5)) 
                                      (32 (ifnonnull 118))  ;;to TAG_0
                                      (35 (getstatic (fieldCP "DEFAULT_DATA_READERS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (38 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (41 (checkcast (class "clojure.lang.ILookup"))) 
                                      (44 (astore 4)) 
                                      (46 (aload 4)) 
                                      (48 (aload_2)) 
                                      (49 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (52 (checkcast (class "clojure.lang.IFn"))) 
                                      (55 (astore 5)) 
                                      (57 (aload 5)) 
                                      (59 (ifnonnull 118))  ;;to TAG_0
                                      (62 (getstatic (fieldCP "DEFAULT_DATA_READER_FN" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (65 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (68 (checkcast (class "clojure.lang.IFn"))) 
                                      (71 (astore 6)) 
                                      (73 (aload 6)) 
                                      (75 (ifnull 88)) ;;to TAG_1
                                      (78 (aload 6)) 
                                      (80 (aload_2)) 
                                      (81 (aload_3)) 
                                      (82 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (87 (areturn)) 
                                      (88 (new (class "java.lang.RuntimeException"))) ;;at TAG_1
                                      (91 (dup)) 
                                      (92 (new (class "java.lang.StringBuilder"))) 
                                      (95 (dup)) 
                                      (96 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (99 (ldc 2)) ;;STRING:: "No reader function for tag "
                                      (101 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (104 (aload_2)) 
                                      (105 (invokevirtual (methodCP "toString" "clojure.lang.Symbol" () (class "java.lang.String")))) 
                                      (108 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (111 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (114 (invokespecial (methodCP "<init>" "java.lang.RuntimeException" ((class "java.lang.String")) void))) 
                                      (117 (athrow)) 
                                      (118 (aload 5)) ;;at TAG_0
                                      (120 (aload_3)) 
                                      (121 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (126 (areturn)) 
                                      (endofcode 127))
                                   (Exceptions )
                                   (StackMap )))
                        (method "readRecord"
                              (parameters (class "java.io.PushbackReader") (class "clojure.lang.Symbol"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *private* )
                              (code
                                   (max_stack . 6) (max_locals . 16) (code_length . 334)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "READEVAL" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (9 (istore_3)) 
                                      (10 (iload_3)) 
                                      (11 (ifne 20)) ;;to TAG_0
                                      (14 (ldc 3)) ;;STRING:: "Record construction syntax can only be used when *read-eval* == true"
                                      (16 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (19 (athrow)) 
                                      (20 (aload_2)) ;;at TAG_0
                                      (21 (invokevirtual (methodCP "toString" "clojure.lang.Symbol" () (class "java.lang.String")))) 
                                      (24 (invokestatic (methodCP "classForNameNonLoading" "clojure.lang.RT" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (27 (astore 4)) 
                                      (29 (iconst_1)) 
                                      (30 (istore 6)) 
                                      (32 (aload_1)) 
                                      (33 (invokestatic (methodCP "read1" "clojure.lang.LispReader" ((class "java.io.Reader")) int))) 
                                      (36 (istore 7)) 
                                      (38 (iload 7)) 
                                      (40 (bipush 123)) 
                                      (42 (if_icmpne 55))  ;;to TAG_1
                                      (45 (bipush 125)) 
                                      (47 (istore 5)) 
                                      (49 (iconst_0)) 
                                      (50 (istore 6)) 
                                      (52 (goto 103)) ;;to TAG_2
                                      (55 (iload 7)) ;;at TAG_1
                                      (57 (bipush 91)) 
                                      (59 (if_icmpne 69)) ;;to TAG_3
                                      (62 (bipush 93)) 
                                      (64 (istore 5)) 
                                      (66 (goto 103)) ;;to TAG_2
                                      (69 (new (class "java.lang.StringBuilder"))) ;;at TAG_3
                                      (72 (dup)) 
                                      (73 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (76 (ldc 4)) ;;STRING:: "Unreadable constructor form starting with \"#"
                                      (78 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (81 (aload_2)) 
                                      (82 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (85 (iload 7)) 
                                      (87 (i2c)) 
                                      (88 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (91 (ldc 5)) ;;STRING:: "\""
                                      (93 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (96 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (99 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (102 (athrow)) 
                                      (103 (iload 5)) ;;at TAG_2
                                      (105 (aload_1)) 
                                      (106 (iconst_1)) 
                                      (107 (invokestatic (methodCP "readDelimitedList" "clojure.lang.LispReader" (char (class "java.io.PushbackReader") boolean) (class "java.util.List")))) 
                                      (110 (invokeinterface (methodCP "toArray" "java.util.List" () (array (class "java.lang.Object"))) 1)) 
                                      (115 (astore 8)) 
                                      (117 (aconst_null)) 
                                      (118 (astore 9)) 
                                      (120 (aload 4)) 
                                      (122 (invokevirtual (methodCP "getConstructors" "java.lang.Class" () (array (class "java.lang.reflect.Constructor"))))) 
                                      (125 (astore 10)) 
                                      (127 (iload 6)) 
                                      (129 (ifeq 237)) ;;to TAG_4
                                      (132 (iconst_0)) 
                                      (133 (istore 11)) 
                                      (135 (aload 10)) 
                                      (137 (astore 12)) 
                                      (139 (aload 12)) 
                                      (141 (arraylength)) 
                                      (142 (istore 13)) 
                                      (144 (iconst_0)) 
                                      (145 (istore 14)) 
                                      (147 (iload 14)) ;;at TAG_7
                                      (149 (iload 13)) 
                                      (151 (if_icmpge 182)) ;;to TAG_5
                                      (154 (aload 12)) 
                                      (156 (iload 14)) 
                                      (158 (aaload)) 
                                      (159 (astore 15)) 
                                      (161 (aload 15)) 
                                      (163 (invokevirtual (methodCP "getParameterTypes" "java.lang.reflect.Constructor" () (array (class "java.lang.Class"))))) 
                                      (166 (arraylength)) 
                                      (167 (aload 8)) 
                                      (169 (arraylength)) 
                                      (170 (if_icmpne 176)) ;;to TAG_6
                                      (173 (iconst_1)) 
                                      (174 (istore 11)) 
                                      (176 (iinc 14 1)) ;;at TAG_6
                                      (179 (goto 147)) ;;to TAG_7
                                      (182 (iload 11)) ;;at TAG_5
                                      (184 (ifne 225)) ;;to TAG_8
                                      (187 (new (class "java.lang.StringBuilder"))) 
                                      (190 (dup)) 
                                      (191 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (194 (ldc 6)) ;;STRING:: "Unexpected number of constructor arguments to "
                                      (196 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (199 (aload 4)) 
                                      (201 (invokevirtual (methodCP "toString" "java.lang.Class" () (class "java.lang.String")))) 
                                      (204 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (207 (ldc 7)) ;;STRING:: ": got "
                                      (209 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (212 (aload 8)) 
                                      (214 (arraylength)) 
                                      (215 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (218 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (221 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (224 (athrow)) 
                                      (225 (aload 4)) ;;at TAG_8
                                      (227 (aload 8)) 
                                      (229 (invokestatic (methodCP "invokeConstructor" "clojure.lang.Reflector" ((class "java.lang.Class") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (232 (astore 9)) 
                                      (234 (goto 331)) ;;to TAG_9
                                      (237 (aload 8)) ;;at TAG_4
                                      (239 (invokestatic (methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (242 (astore 11)) 
                                      (244 (aload 11)) 
                                      (246 (invokestatic (methodCP "keys" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (249 (astore 12)) 
                                      (251 (aload 12)) ;;at TAG_12
                                      (253 (ifnull 313)) ;;to TAG_10
                                      (256 (aload 12)) 
                                      (258 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (263 (instanceof (class "clojure.lang.Keyword"))) 
                                      (266 (ifne 301)) ;;to TAG_11
                                      (269 (new (class "java.lang.StringBuilder"))) 
                                      (272 (dup)) 
                                      (273 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (276 (ldc 8)) ;;STRING:: "Unreadable defrecord form: key must be of type clojure.lang.Keyword, got "
                                      (278 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (281 (aload 12)) 
                                      (283 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (288 (invokevirtual (methodCP "toString" "java.lang.Object" () (class "java.lang.String")))) 
                                      (291 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (294 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (297 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (300 (athrow)) 
                                      (301 (aload 12)) ;;at TAG_11
                                      (303 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (308 (astore 12)) 
                                      (310 (goto 251)) ;;to TAG_12
                                      (313 (aload 4)) ;;at TAG_10
                                      (315 (ldc 9)) ;;STRING:: "create"
                                      (317 (iconst_1)) 
                                      (318 (anewarray (class "java.lang.Object"))) 
                                      (321 (dup)) 
                                      (322 (iconst_0)) 
                                      (323 (aload 11)) 
                                      (325 (aastore)) 
                                      (326 (invokestatic (methodCP "invokeStaticMethod" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (329 (astore 9)) 
                                      (331 (aload 9)) ;;at TAG_9
                                      (333 (areturn)) 
                                      (endofcode 334))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *LispReader$CtorReader-class-table*
  (make-static-class-decls 
   *clojure.lang.LispReader$CtorReader*))

(defconst *package-name-map* 
  ("clojure.lang.LispReader$CtorReader" . "clojure.lang"))

