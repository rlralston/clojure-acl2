; Numbers-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:52 CDT 2014.
;

(include-book "../../model-translation")

(defconst *clojure.lang.Numbers*
 (make-class-def
      '(class "clojure.lang.Numbers"
            "java.lang.Object"
            (constant_pool
                        (STRING  "Divide by zero")
                        (DOUBLE "9.223372036854776E18")
                        (DOUBLE "-9.223372036854776E18")
                        (STRING  "bit operation not supported for: ")
                        (STRING  "integer overflow")
                        (LONG -1)
                        (LONG -9223372036854775808)
                        (LONG 9223372036854775807))
            (fields
                        (field "LONG_OPS" (class "clojure.lang.Numbers$LongOps") (accessflags  *class*  *final*  *static* ) -1)
                        (field "DOUBLE_OPS" (class "clojure.lang.Numbers$DoubleOps") (accessflags  *class*  *final*  *static* ) -1)
                        (field "RATIO_OPS" (class "clojure.lang.Numbers$RatioOps") (accessflags  *class*  *final*  *static* ) -1)
                        (field "BIGINT_OPS" (class "clojure.lang.Numbers$BigIntOps") (accessflags  *class*  *final*  *static* ) -1)
                        (field "BIGDECIMAL_OPS" (class "clojure.lang.Numbers$BigDecimalOps") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
                    (methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isZero"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_0))
                                      (5 (checkcast (class "java.lang.Number")))
                                      (8 (invokeinterface
                    (methodCP "isZero" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) boolean) 2))
                                      (13 (ireturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isPos"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_0))
                                      (5 (checkcast (class "java.lang.Number")))
                                      (8 (invokeinterface
                    (methodCP "isPos" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) boolean) 2))
                                      (13 (ireturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isNeg"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_0))
                                      (5 (checkcast (class "java.lang.Number")))
                                      (8 (invokeinterface
                    (methodCP "isNeg" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) boolean) 2))
                                      (13 (ireturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minus"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_0))
                                      (5 (checkcast (class "java.lang.Number")))
                                      (8 (invokeinterface
                    (methodCP "negate" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) (class "java.lang.Number")) 2))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minusP"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_0))
                                      (5 (checkcast (class "java.lang.Number")))
                                      (8 (invokeinterface
                    (methodCP "negateP" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) (class "java.lang.Number")) 2))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "inc"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_0))
                                      (5 (checkcast (class "java.lang.Number")))
                                      (8 (invokeinterface
                    (methodCP "inc" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) (class "java.lang.Number")) 2))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "incP"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_0))
                                      (5 (checkcast (class "java.lang.Number")))
                                      (8 (invokeinterface
                    (methodCP "incP" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) (class "java.lang.Number")) 2))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "dec"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_0))
                                      (5 (checkcast (class "java.lang.Number")))
                                      (8 (invokeinterface
                    (methodCP "dec" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) (class "java.lang.Number")) 2))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "decP"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 14)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_0))
                                      (5 (checkcast (class "java.lang.Number")))
                                      (8 (invokeinterface
                    (methodCP "decP" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) (class "java.lang.Number")) 2))
                                      (13 (areturn))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (8 (invokeinterface
                    (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2))
                                      (13 (aload_0))
                                      (14 (checkcast (class "java.lang.Number")))
                                      (17 (aload_1))
                                      (18 (checkcast (class "java.lang.Number")))
                                      (21 (invokeinterface
                    (methodCP "add" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number")) 3))
                                      (26 (areturn))
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addP"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (8 (invokeinterface
                    (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2))
                                      (13 (aload_0))
                                      (14 (checkcast (class "java.lang.Number")))
                                      (17 (aload_1))
                                      (18 (checkcast (class "java.lang.Number")))
                                      (21 (invokeinterface
                    (methodCP "addP" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number")) 3))
                                      (26 (areturn))
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minus"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 35)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (astore_2))
                                      (5 (aload_0))
                                      (6 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (9 (aload_2))
                                      (10 (invokeinterface
                    (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2))
                                      (15 (aload_0))
                                      (16 (checkcast (class "java.lang.Number")))
                                      (19 (aload_2))
                                      (20 (aload_1))
                                      (21 (checkcast (class "java.lang.Number")))
                                      (24 (invokeinterface
                    (methodCP "negate" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) (class "java.lang.Number")) 2))
                                      (29 (invokeinterface
                    (methodCP "add" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number")) 3))
                                      (34 (areturn))
                                      (endofcode 35))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minusP"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 44)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (astore_2))
                                      (5 (aload_2))
                                      (6 (aload_1))
                                      (7 (checkcast (class "java.lang.Number")))
                                      (10 (invokeinterface
                    (methodCP "negateP" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) (class "java.lang.Number")) 2))
                                      (15 (astore_3))
                                      (16 (aload_3))
                                      (17 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (20 (astore 4))
                                      (22 (aload_0))
                                      (23 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (26 (aload 4))
                                      (28 (invokeinterface
                    (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2))
                                      (33 (aload_0))
                                      (34 (checkcast (class "java.lang.Number")))
                                      (37 (aload_3))
                                      (38 (invokeinterface
                    (methodCP "addP" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number")) 3))
                                      (43 (areturn))
                                      (endofcode 44))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (8 (invokeinterface
                    (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2))
                                      (13 (aload_0))
                                      (14 (checkcast (class "java.lang.Number")))
                                      (17 (aload_1))
                                      (18 (checkcast (class "java.lang.Number")))
                                      (21 (invokeinterface
                    (methodCP "multiply" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number")) 3))
                                      (26 (areturn))
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiplyP"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (8 (invokeinterface
                    (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2))
                                      (13 (aload_0))
                                      (14 (checkcast (class "java.lang.Number")))
                                      (17 (aload_1))
                                      (18 (checkcast (class "java.lang.Number")))
                                      (21 (invokeinterface
                    (methodCP "multiplyP" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number")) 3))
                                      (26 (areturn))
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 52)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) 
                                      (6 (aload_1)) 
                                      (7 (checkcast (class "java.lang.Number"))) 
                                      (10 (invokeinterface (methodCP "isZero" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) boolean) 2)) 
                                      (15 (ifeq 28))  ;;to TAG_0
                                      (18 (new (class "java.lang.ArithmeticException"))) 
                                      (21 (dup)) 
                                      (22 (ldc 0)) ;;STRING:: "Divide by zero"
                                      (24 (invokespecial (methodCP "<init>" "java.lang.ArithmeticException" ((class "java.lang.String")) void))) 
                                      (27 (athrow)) 
                                      (28 (aload_0)) ;;at TAG_0
                                      (29 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (32 (aload_2)) 
                                      (33 (invokeinterface (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2)) 
                                      (38 (aload_0)) 
                                      (39 (checkcast (class "java.lang.Number"))) 
                                      (42 (aload_1)) 
                                      (43 (checkcast (class "java.lang.Number"))) 
                                      (46 (invokeinterface (methodCP "divide" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number")) 3)) 
                                      (51 (areturn)) 
                                      (endofcode 52))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 52)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) 
                                      (6 (aload_1)) 
                                      (7 (checkcast (class "java.lang.Number"))) 
                                      (10 (invokeinterface (methodCP "isZero" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) boolean) 2)) 
                                      (15 (ifeq 28))  ;;to TAG_0
                                      (18 (new (class "java.lang.ArithmeticException"))) 
                                      (21 (dup)) 
                                      (22 (ldc 0)) ;;STRING:: "Divide by zero"
                                      (24 (invokespecial (methodCP "<init>" "java.lang.ArithmeticException" ((class "java.lang.String")) void))) 
                                      (27 (athrow)) 
                                      (28 (aload_0)) ;;at TAG_0
                                      (29 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (32 (aload_2)) 
                                      (33 (invokeinterface (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2)) 
                                      (38 (aload_0)) 
                                      (39 (checkcast (class "java.lang.Number"))) 
                                      (42 (aload_1)) 
                                      (43 (checkcast (class "java.lang.Number"))) 
                                      (46 (invokeinterface (methodCP "quotient" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number")) 3)) 
                                      (51 (areturn)) 
                                      (endofcode 52))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 52)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (4 (astore_2)) 
                                      (5 (aload_2)) 
                                      (6 (aload_1)) 
                                      (7 (checkcast (class "java.lang.Number"))) 
                                      (10 (invokeinterface (methodCP "isZero" "clojure.lang.Numbers$Ops" ((class "java.lang.Number")) boolean) 2)) 
                                      (15 (ifeq 28))  ;;to TAG_0
                                      (18 (new (class "java.lang.ArithmeticException"))) 
                                      (21 (dup)) 
                                      (22 (ldc 0)) ;;STRING:: "Divide by zero"
                                      (24 (invokespecial (methodCP "<init>" "java.lang.ArithmeticException" ((class "java.lang.String")) void))) 
                                      (27 (athrow)) 
                                      (28 (aload_0)) ;;at TAG_0
                                      (29 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (32 (aload_2)) 
                                      (33 (invokeinterface (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2)) 
                                      (38 (aload_0)) 
                                      (39 (checkcast (class "java.lang.Number"))) 
                                      (42 (aload_1)) 
                                      (43 (checkcast (class "java.lang.Number"))) 
                                      (46 (invokeinterface (methodCP "remainder" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) (class "java.lang.Number")) 3)) 
                                      (51 (areturn)) 
                                      (endofcode 52))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 60)
                                   (parsedcode
                                      (0 (dload_2)) 
                                      (1 (dconst_0)) 
                                      (2 (dcmpl)) 
                                      (3 (ifne 16))  ;;to TAG_0
                                      (6 (new (class "java.lang.ArithmeticException"))) 
                                      (9 (dup)) 
                                      (10 (ldc 0)) ;;STRING:: "Divide by zero"
                                      (12 (invokespecial (methodCP "<init>" "java.lang.ArithmeticException" ((class "java.lang.String")) void))) 
                                      (15 (athrow)) 
                                      (16 (dload_0)) ;;at TAG_0
                                      (17 (dload_2)) 
                                      (18 (ddiv)) 
                                      (19 (dstore 4)) 
                                      (21 (dload 4)) 
                                      (23 (ldc2_w 1)) ;; DOUBLE:: "9.223372036854776E18"
                                      (26 (dcmpg)) 
                                      (27 (ifgt 44)) ;;to TAG_1
                                      (30 (dload 4)) 
                                      (32 (ldc2_w 2)) ;; DOUBLE:: "-9.223372036854776E18"
                                      (35 (dcmpl)) 
                                      (36 (iflt 44)) ;;to TAG_1
                                      (39 (dload 4)) 
                                      (41 (d2l)) 
                                      (42 (l2d)) 
                                      (43 (dreturn)) 
                                      (44 (new (class "java.math.BigDecimal"))) ;;at TAG_1
                                      (47 (dup)) 
                                      (48 (dload 4)) 
                                      (50 (invokespecial (methodCP "<init>" "java.math.BigDecimal" (double) void))) 
                                      (53 (invokevirtual (methodCP "toBigInteger" "java.math.BigDecimal" () (class "java.math.BigInteger")))) 
                                      (56 (invokevirtual (methodCP "doubleValue" "java.math.BigInteger" () double))) 
                                      (59 (dreturn)) 
                                      (endofcode 60))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 7) (code_length . 72)
                                   (parsedcode
                                      (0 (dload_2)) 
                                      (1 (dconst_0)) 
                                      (2 (dcmpl)) 
                                      (3 (ifne 16))  ;;to TAG_0
                                      (6 (new (class "java.lang.ArithmeticException"))) 
                                      (9 (dup)) 
                                      (10 (ldc 0)) ;;STRING:: "Divide by zero"
                                      (12 (invokespecial (methodCP "<init>" "java.lang.ArithmeticException" ((class "java.lang.String")) void))) 
                                      (15 (athrow)) 
                                      (16 (dload_0)) ;;at TAG_0
                                      (17 (dload_2)) 
                                      (18 (ddiv)) 
                                      (19 (dstore 4)) 
                                      (21 (dload 4)) 
                                      (23 (ldc2_w 1)) ;; DOUBLE:: "9.223372036854776E18"
                                      (26 (dcmpg)) 
                                      (27 (ifgt 48)) ;;to TAG_1
                                      (30 (dload 4)) 
                                      (32 (ldc2_w 2)) ;; DOUBLE:: "-9.223372036854776E18"
                                      (35 (dcmpl)) 
                                      (36 (iflt 48)) ;;to TAG_1
                                      (39 (dload_0)) 
                                      (40 (dload 4)) 
                                      (42 (d2l)) 
                                      (43 (l2d)) 
                                      (44 (dload_2)) 
                                      (45 (dmul)) 
                                      (46 (dsub)) 
                                      (47 (dreturn)) 
                                      (48 (new (class "java.math.BigDecimal"))) ;;at TAG_1
                                      (51 (dup)) 
                                      (52 (dload 4)) 
                                      (54 (invokespecial (methodCP "<init>" "java.math.BigDecimal" (double) void))) 
                                      (57 (invokevirtual (methodCP "toBigInteger" "java.math.BigDecimal" () (class "java.math.BigInteger")))) 
                                      (60 (astore 6)) 
                                      (62 (dload_0)) 
                                      (63 (aload 6)) 
                                      (65 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (68 (dload_2)) 
                                      (69 (dmul)) 
                                      (70 (dsub)) 
                                      (71 (dreturn)) 
                                      (endofcode 72))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (class "java.lang.Number")))
                                      (4 (aload_1))
                                      (5 (checkcast (class "java.lang.Number")))
                                      (8 (invokestatic
                    (methodCP "equiv" "clojure.lang.Numbers" ((class "java.lang.Number") (class "java.lang.Number")) boolean)))
                                      (11 (ireturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 21)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (8 (invokeinterface
                    (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2))
                                      (13 (aload_0))
                                      (14 (aload_1))
                                      (15 (invokeinterface
                    (methodCP "equiv" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) boolean) 3))
                                      (20 (ireturn))
                                      (endofcode 21))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equal"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 40)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "category" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Category")))) 
                                      (4 (aload_1)) 
                                      (5 (invokestatic (methodCP "category" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Category")))) 
                                      (8 (if_acmpne 38))  ;;to TAG_0
                                      (11 (aload_0)) 
                                      (12 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (15 (aload_1)) 
                                      (16 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (19 (invokeinterface (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2)) 
                                      (24 (aload_0)) 
                                      (25 (aload_1)) 
                                      (26 (invokeinterface (methodCP "equiv" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) boolean) 3)) 
                                      (31 (ifeq 38))  ;;to TAG_0
                                      (34 (iconst_1)) 
                                      (35 (goto 39)) ;;to TAG_1
                                      (38 (iconst_0)) ;;at TAG_0
                                      (39 (ireturn)) ;;at TAG_1
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (8 (invokeinterface
                    (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2))
                                      (13 (aload_0))
                                      (14 (checkcast (class "java.lang.Number")))
                                      (17 (aload_1))
                                      (18 (checkcast (class "java.lang.Number")))
                                      (21 (invokeinterface
                    (methodCP "lt" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) boolean) 3))
                                      (26 (ireturn))
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lte"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 35)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (4 (aload_1)) 
                                      (5 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (8 (invokeinterface (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2)) 
                                      (13 (aload_1)) 
                                      (14 (checkcast (class "java.lang.Number"))) 
                                      (17 (aload_0)) 
                                      (18 (checkcast (class "java.lang.Number"))) 
                                      (21 (invokeinterface (methodCP "lt" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) boolean) 3)) 
                                      (26 (ifne 33))  ;;to TAG_0
                                      (29 (iconst_1)) 
                                      (30 (goto 34)) ;;to TAG_1
                                      (33 (iconst_0)) ;;at TAG_0
                                      (34 (ireturn)) ;;at TAG_1
                                      (endofcode 35))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gt"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 27)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops"))))
                                      (8 (invokeinterface
                    (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2))
                                      (13 (aload_1))
                                      (14 (checkcast (class "java.lang.Number")))
                                      (17 (aload_0))
                                      (18 (checkcast (class "java.lang.Number")))
                                      (21 (invokeinterface
                    (methodCP "lt" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) boolean) 3))
                                      (26 (ireturn))
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gte"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 35)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (4 (aload_1)) 
                                      (5 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (8 (invokeinterface (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2)) 
                                      (13 (aload_0)) 
                                      (14 (checkcast (class "java.lang.Number"))) 
                                      (17 (aload_1)) 
                                      (18 (checkcast (class "java.lang.Number"))) 
                                      (21 (invokeinterface (methodCP "lt" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) boolean) 3)) 
                                      (26 (ifne 33))  ;;to TAG_0
                                      (29 (iconst_1)) 
                                      (30 (goto 34)) ;;to TAG_1
                                      (33 (iconst_0)) ;;at TAG_0
                                      (34 (ireturn)) ;;at TAG_1
                                      (endofcode 35))
                                   (Exceptions )
                                   (StackMap )))
                        (method "compare"
                              (parameters (class "java.lang.Number") (class "java.lang.Number"))
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 42)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (4 (aload_1)) 
                                      (5 (invokestatic (methodCP "ops" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "clojure.lang.Numbers$Ops")))) 
                                      (8 (invokeinterface (methodCP "combine" "clojure.lang.Numbers$Ops" ((class "clojure.lang.Numbers$Ops")) (class "clojure.lang.Numbers$Ops")) 2)) 
                                      (13 (astore_2)) 
                                      (14 (aload_2)) 
                                      (15 (aload_0)) 
                                      (16 (aload_1)) 
                                      (17 (invokeinterface (methodCP "lt" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) boolean) 3)) 
                                      (22 (ifeq 27))  ;;to TAG_0
                                      (25 (iconst_m1)) 
                                      (26 (ireturn)) 
                                      (27 (aload_2)) ;;at TAG_0
                                      (28 (aload_1)) 
                                      (29 (aload_0)) 
                                      (30 (invokeinterface (methodCP "lt" "clojure.lang.Numbers$Ops" ((class "java.lang.Number") (class "java.lang.Number")) boolean) 3)) 
                                      (35 (ifeq 40)) ;;to TAG_1
                                      (38 (iconst_1)) 
                                      (39 (ireturn)) 
                                      (40 (iconst_0)) ;;at TAG_1
                                      (41 (ireturn)) 
                                      (endofcode 42))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toBigInt"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.BigInt"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 38)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "clojure.lang.BigInt"))) 
                                      (4 (ifeq 12))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "clojure.lang.BigInt"))) 
                                      (11 (areturn)) 
                                      (12 (aload_0)) ;;at TAG_0
                                      (13 (instanceof (class "java.math.BigInteger"))) 
                                      (16 (ifeq 27)) ;;to TAG_1
                                      (19 (aload_0)) 
                                      (20 (checkcast (class "java.math.BigInteger"))) 
                                      (23 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (26 (areturn)) 
                                      (27 (aload_0)) ;;at TAG_1
                                      (28 (checkcast (class "java.lang.Number"))) 
                                      (31 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (34 (invokestatic (methodCP "fromLong" "clojure.lang.BigInt" (long) (class "clojure.lang.BigInt")))) 
                                      (37 (areturn)) 
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toBigInteger"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.math.BigInteger"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 38)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.math.BigInteger"))) 
                                      (4 (ifeq 12))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "java.math.BigInteger"))) 
                                      (11 (areturn)) 
                                      (12 (aload_0)) ;;at TAG_0
                                      (13 (instanceof (class "clojure.lang.BigInt"))) 
                                      (16 (ifeq 27)) ;;to TAG_1
                                      (19 (aload_0)) 
                                      (20 (checkcast (class "clojure.lang.BigInt"))) 
                                      (23 (invokevirtual (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger")))) 
                                      (26 (areturn)) 
                                      (27 (aload_0)) ;;at TAG_1
                                      (28 (checkcast (class "java.lang.Number"))) 
                                      (31 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (34 (invokestatic (methodCP "valueOf" "java.math.BigInteger" (long) (class "java.math.BigInteger")))) 
                                      (37 (areturn)) 
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toBigDecimal"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.math.BigDecimal"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 159)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.math.BigDecimal"))) 
                                      (4 (ifeq 12)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "java.math.BigDecimal"))) 
                                      (11 (areturn)) 
                                      (12 (aload_0)) ;;at TAG_0
                                      (13 (instanceof (class "clojure.lang.BigInt"))) 
                                      (16 (ifeq 51)) ;;to TAG_1
                                      (19 (aload_0)) 
                                      (20 (checkcast (class "clojure.lang.BigInt"))) 
                                      (23 (astore_1)) 
                                      (24 (aload_1)) 
                                      (25 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (28 (ifnonnull 39))  ;;to TAG_2
                                      (31 (aload_1)) 
                                      (32 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (35 (invokestatic (methodCP "valueOf" "java.math.BigDecimal" (long) (class "java.math.BigDecimal")))) 
                                      (38 (areturn)) 
                                      (39 (new (class "java.math.BigDecimal"))) ;;at TAG_2
                                      (42 (dup)) 
                                      (43 (aload_1)) 
                                      (44 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (47 (invokespecial (methodCP "<init>" "java.math.BigDecimal" ((class "java.math.BigInteger")) void))) 
                                      (50 (areturn)) 
                                      (51 (aload_0)) ;;at TAG_1
                                      (52 (instanceof (class "java.math.BigInteger"))) 
                                      (55 (ifeq 70)) ;;to TAG_3
                                      (58 (new (class "java.math.BigDecimal"))) 
                                      (61 (dup)) 
                                      (62 (aload_0)) 
                                      (63 (checkcast (class "java.math.BigInteger"))) 
                                      (66 (invokespecial (methodCP "<init>" "java.math.BigDecimal" ((class "java.math.BigInteger")) void))) 
                                      (69 (areturn)) 
                                      (70 (aload_0)) ;;at TAG_3
                                      (71 (instanceof (class "java.lang.Double"))) 
                                      (74 (ifeq 92)) ;;to TAG_4
                                      (77 (new (class "java.math.BigDecimal"))) 
                                      (80 (dup)) 
                                      (81 (aload_0)) 
                                      (82 (checkcast (class "java.lang.Number"))) 
                                      (85 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (88 (invokespecial (methodCP "<init>" "java.math.BigDecimal" (double) void))) 
                                      (91 (areturn)) 
                                      (92 (aload_0)) ;;at TAG_4
                                      (93 (instanceof (class "java.lang.Float"))) 
                                      (96 (ifeq 114)) ;;to TAG_5
                                      (99 (new (class "java.math.BigDecimal"))) 
                                      (102 (dup)) 
                                      (103 (aload_0)) 
                                      (104 (checkcast (class "java.lang.Number"))) 
                                      (107 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (110 (invokespecial (methodCP "<init>" "java.math.BigDecimal" (double) void))) 
                                      (113 (areturn)) 
                                      (114 (aload_0)) ;;at TAG_5
                                      (115 (instanceof (class "clojure.lang.Ratio"))) 
                                      (118 (ifeq 148)) ;;to TAG_6
                                      (121 (aload_0)) 
                                      (122 (checkcast (class "clojure.lang.Ratio"))) 
                                      (125 (astore_1)) 
                                      (126 (new (class "java.math.BigDecimal"))) 
                                      (129 (dup)) 
                                      (130 (aload_1)) 
                                      (131 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (134 (invokespecial (methodCP "<init>" "java.math.BigDecimal" ((class "java.math.BigInteger")) void))) 
                                      (137 (aload_1)) 
                                      (138 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (141 (invokestatic (methodCP "divide" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (144 (checkcast (class "java.math.BigDecimal"))) 
                                      (147 (areturn)) 
                                      (148 (aload_0)) ;;at TAG_6
                                      (149 (checkcast (class "java.lang.Number"))) 
                                      (152 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (155 (invokestatic (methodCP "valueOf" "java.math.BigDecimal" (long) (class "java.math.BigDecimal")))) 
                                      (158 (areturn)) 
                                      (endofcode 159))
                                   (Exceptions )
                                   (StackMap )))
                        (method "toRatio"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Ratio"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 92)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "clojure.lang.Ratio"))) 
                                      (4 (ifeq 12)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "clojure.lang.Ratio"))) 
                                      (11 (areturn)) 
                                      (12 (aload_0)) ;;at TAG_0
                                      (13 (instanceof (class "java.math.BigDecimal"))) 
                                      (16 (ifeq 77)) ;;to TAG_1
                                      (19 (aload_0)) 
                                      (20 (checkcast (class "java.math.BigDecimal"))) 
                                      (23 (astore_1)) 
                                      (24 (aload_1)) 
                                      (25 (invokevirtual (methodCP "unscaledValue" "java.math.BigDecimal" () (class "java.math.BigInteger")))) 
                                      (28 (astore_2)) 
                                      (29 (aload_1)) 
                                      (30 (invokevirtual (methodCP "scale" "java.math.BigDecimal" () int))) 
                                      (33 (istore_3)) 
                                      (34 (iload_3)) 
                                      (35 (ifge 61))  ;;to TAG_2
                                      (38 (new (class "clojure.lang.Ratio"))) 
                                      (41 (dup)) 
                                      (42 (aload_2)) 
                                      (43 (getstatic (fieldCP "TEN" "java.math.BigInteger" (class "java.math.BigInteger")))) 
                                      (46 (iload_3)) 
                                      (47 (ineg)) 
                                      (48 (invokevirtual (methodCP "pow" "java.math.BigInteger" (int) (class "java.math.BigInteger")))) 
                                      (51 (invokevirtual (methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger")))) 
                                      (54 (getstatic (fieldCP "ONE" "java.math.BigInteger" (class "java.math.BigInteger")))) 
                                      (57 (invokespecial (methodCP "<init>" "clojure.lang.Ratio" ((class "java.math.BigInteger") (class "java.math.BigInteger")) void))) 
                                      (60 (areturn)) 
                                      (61 (new (class "clojure.lang.Ratio"))) ;;at TAG_2
                                      (64 (dup)) 
                                      (65 (aload_2)) 
                                      (66 (getstatic (fieldCP "TEN" "java.math.BigInteger" (class "java.math.BigInteger")))) 
                                      (69 (iload_3)) 
                                      (70 (invokevirtual (methodCP "pow" "java.math.BigInteger" (int) (class "java.math.BigInteger")))) 
                                      (73 (invokespecial (methodCP "<init>" "clojure.lang.Ratio" ((class "java.math.BigInteger") (class "java.math.BigInteger")) void))) 
                                      (76 (areturn)) 
                                      (77 (new (class "clojure.lang.Ratio"))) ;;at TAG_1
                                      (80 (dup)) 
                                      (81 (aload_0)) 
                                      (82 (invokestatic (methodCP "toBigInteger" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.math.BigInteger")))) 
                                      (85 (getstatic (fieldCP "ONE" "java.math.BigInteger" (class "java.math.BigInteger")))) 
                                      (88 (invokespecial (methodCP "<init>" "clojure.lang.Ratio" ((class "java.math.BigInteger") (class "java.math.BigInteger")) void))) 
                                      (91 (areturn)) 
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "rationalize"
                              (parameters (class "java.lang.Number"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 81)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Float"))) 
                                      (4 (ifne 14)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (instanceof (class "java.lang.Double"))) 
                                      (11 (ifeq 25)) ;;to TAG_1
                                      (14 (aload_0)) ;;at TAG_0
                                      (15 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (18 (invokestatic (methodCP "valueOf" "java.math.BigDecimal" (double) (class "java.math.BigDecimal")))) 
                                      (21 (invokestatic (methodCP "rationalize" "clojure.lang.Numbers" ((class "java.lang.Number")) (class "java.lang.Number")))) 
                                      (24 (areturn)) 
                                      (25 (aload_0)) ;;at TAG_1
                                      (26 (instanceof (class "java.math.BigDecimal"))) 
                                      (29 (ifeq 79))  ;;to TAG_2
                                      (32 (aload_0)) 
                                      (33 (checkcast (class "java.math.BigDecimal"))) 
                                      (36 (astore_1)) 
                                      (37 (aload_1)) 
                                      (38 (invokevirtual (methodCP "unscaledValue" "java.math.BigDecimal" () (class "java.math.BigInteger")))) 
                                      (41 (astore_2)) 
                                      (42 (aload_1)) 
                                      (43 (invokevirtual (methodCP "scale" "java.math.BigDecimal" () int))) 
                                      (46 (istore_3)) 
                                      (47 (iload_3)) 
                                      (48 (ifge 67)) ;;to TAG_3
                                      (51 (aload_2)) 
                                      (52 (getstatic (fieldCP "TEN" "java.math.BigInteger" (class "java.math.BigInteger")))) 
                                      (55 (iload_3)) 
                                      (56 (ineg)) 
                                      (57 (invokevirtual (methodCP "pow" "java.math.BigInteger" (int) (class "java.math.BigInteger")))) 
                                      (60 (invokevirtual (methodCP "multiply" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger")))) 
                                      (63 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (66 (areturn)) 
                                      (67 (aload_2)) ;;at TAG_3
                                      (68 (getstatic (fieldCP "TEN" "java.math.BigInteger" (class "java.math.BigInteger")))) 
                                      (71 (iload_3)) 
                                      (72 (invokevirtual (methodCP "pow" "java.math.BigInteger" (int) (class "java.math.BigInteger")))) 
                                      (75 (invokestatic (methodCP "divide" "clojure.lang.Numbers" ((class "java.math.BigInteger") (class "java.math.BigInteger")) (class "java.lang.Number")))) 
                                      (78 (areturn)) 
                                      (79 (aload_0)) ;;at TAG_2
                                      (80 (areturn)) 
                                      (endofcode 81))
                                   (Exceptions )
                                   (StackMap )))
                        (method "reduceBigInt"
                              (parameters (class "clojure.lang.BigInt"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (4 (ifnonnull 15))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (getfield (fieldCP "lpart" "clojure.lang.BigInt" long))) 
                                      (11 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (14 (areturn)) 
                                      (15 (aload_0)) ;;at TAG_0
                                      (16 (getfield (fieldCP "bipart" "clojure.lang.BigInt" (class "java.math.BigInteger")))) 
                                      (19 (areturn)) 
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters (class "java.math.BigInteger") (class "java.math.BigInteger"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 126)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (getstatic (fieldCP "ZERO" "java.math.BigInteger" (class "java.math.BigInteger")))) 
                                      (4 (invokevirtual (methodCP "equals" "java.math.BigInteger" ((class "java.lang.Object")) boolean))) 
                                      (7 (ifeq 20)) ;;to TAG_0
                                      (10 (new (class "java.lang.ArithmeticException"))) 
                                      (13 (dup)) 
                                      (14 (ldc 0)) ;;STRING:: "Divide by zero"
                                      (16 (invokespecial (methodCP "<init>" "java.lang.ArithmeticException" ((class "java.lang.String")) void))) 
                                      (19 (athrow)) 
                                      (20 (aload_0)) ;;at TAG_0
                                      (21 (aload_1)) 
                                      (22 (invokevirtual (methodCP "gcd" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger")))) 
                                      (25 (astore_2)) 
                                      (26 (aload_2)) 
                                      (27 (getstatic (fieldCP "ZERO" "java.math.BigInteger" (class "java.math.BigInteger")))) 
                                      (30 (invokevirtual (methodCP "equals" "java.math.BigInteger" ((class "java.lang.Object")) boolean))) 
                                      (33 (ifeq 40)) ;;to TAG_1
                                      (36 (getstatic (fieldCP "ZERO" "clojure.lang.BigInt" (class "clojure.lang.BigInt")))) 
                                      (39 (areturn)) 
                                      (40 (aload_0)) ;;at TAG_1
                                      (41 (aload_2)) 
                                      (42 (invokevirtual (methodCP "divide" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger")))) 
                                      (45 (astore_0)) 
                                      (46 (aload_1)) 
                                      (47 (aload_2)) 
                                      (48 (invokevirtual (methodCP "divide" "java.math.BigInteger" ((class "java.math.BigInteger")) (class "java.math.BigInteger")))) 
                                      (51 (astore_1)) 
                                      (52 (aload_1)) 
                                      (53 (getstatic (fieldCP "ONE" "java.math.BigInteger" (class "java.math.BigInteger")))) 
                                      (56 (invokevirtual (methodCP "equals" "java.math.BigInteger" ((class "java.lang.Object")) boolean))) 
                                      (59 (ifeq 67))  ;;to TAG_2
                                      (62 (aload_0)) 
                                      (63 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (66 (areturn)) 
                                      (67 (aload_1)) ;;at TAG_2
                                      (68 (getstatic (fieldCP "ONE" "java.math.BigInteger" (class "java.math.BigInteger")))) 
                                      (71 (invokevirtual (methodCP "negate" "java.math.BigInteger" () (class "java.math.BigInteger")))) 
                                      (74 (invokevirtual (methodCP "equals" "java.math.BigInteger" ((class "java.lang.Object")) boolean))) 
                                      (77 (ifeq 88)) ;;to TAG_3
                                      (80 (aload_0)) 
                                      (81 (invokevirtual (methodCP "negate" "java.math.BigInteger" () (class "java.math.BigInteger")))) 
                                      (84 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (87 (areturn)) 
                                      (88 (new (class "clojure.lang.Ratio"))) ;;at TAG_3
                                      (91 (dup)) 
                                      (92 (aload_1)) 
                                      (93 (invokevirtual (methodCP "signum" "java.math.BigInteger" () int))) 
                                      (96 (ifge 106)) ;;to TAG_4
                                      (99 (aload_0)) 
                                      (100 (invokevirtual (methodCP "negate" "java.math.BigInteger" () (class "java.math.BigInteger")))) 
                                      (103 (goto 107)) ;;to TAG_5
                                      (106 (aload_0)) ;;at TAG_4
                                      (107 (aload_1)) ;;at TAG_5
                                      (108 (invokevirtual (methodCP "signum" "java.math.BigInteger" () int))) 
                                      (111 (ifge 121)) ;;to TAG_6
                                      (114 (aload_1)) 
                                      (115 (invokevirtual (methodCP "negate" "java.math.BigInteger" () (class "java.math.BigInteger")))) 
                                      (118 (goto 122)) ;;to TAG_7
                                      (121 (aload_1)) ;;at TAG_6
                                      (122 (invokespecial (methodCP "<init>" "clojure.lang.Ratio" ((class "java.math.BigInteger") (class "java.math.BigInteger")) void))) ;;at TAG_7
                                      (125 (areturn)) 
                                      (endofcode 126))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shiftLeftInt"
                              (parameters int int)
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (iload_1))
                                      (2 (ishl))
                                      (3 (ireturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shiftLeft"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (8 (invokestatic
                    (methodCP "shiftLeft" "clojure.lang.Numbers" (long long) long)))
                                      (11 (lreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shiftLeft"
                              (parameters (class "java.lang.Object") long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (lload_1))
                                      (5 (invokestatic
                    (methodCP "shiftLeft" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shiftLeft"
                              (parameters long (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (5 (invokestatic
                    (methodCP "shiftLeft" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shiftLeft"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lload_2))
                                      (2 (l2i))
                                      (3 (lshl))
                                      (4 (lreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shiftRightInt"
                              (parameters int int)
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (iload_1))
                                      (2 (ishr))
                                      (3 (ireturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shiftRight"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (8 (invokestatic
                    (methodCP "shiftRight" "clojure.lang.Numbers" (long long) long)))
                                      (11 (lreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shiftRight"
                              (parameters (class "java.lang.Object") long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (lload_1))
                                      (5 (invokestatic
                    (methodCP "shiftRight" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shiftRight"
                              (parameters long (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (5 (invokestatic
                    (methodCP "shiftRight" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shiftRight"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lload_2))
                                      (2 (l2i))
                                      (3 (lshr))
                                      (4 (lreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "ops"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Numbers$Ops"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 97)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "getClass" "java.lang.Object" () (class "java.lang.Class")))) 
                                      (4 (astore_1)) 
                                      (5 (aload_1)) 
                                      (6 (ldc_w )) 
                                      (9 (if_acmpne 16)) ;;to TAG_0
                                      (12 (getstatic (fieldCP "LONG_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$LongOps")))) 
                                      (15 (areturn)) 
                                      (16 (aload_1)) ;;at TAG_0
                                      (17 (ldc_w )) 
                                      (20 (if_acmpne 27)) ;;to TAG_1
                                      (23 (getstatic (fieldCP "DOUBLE_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$DoubleOps")))) 
                                      (26 (areturn)) 
                                      (27 (aload_1)) ;;at TAG_1
                                      (28 (ldc_w )) 
                                      (31 (if_acmpne 38))  ;;to TAG_2
                                      (34 (getstatic (fieldCP "LONG_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$LongOps")))) 
                                      (37 (areturn)) 
                                      (38 (aload_1)) ;;at TAG_2
                                      (39 (ldc_w )) 
                                      (42 (if_acmpne 49)) ;;to TAG_3
                                      (45 (getstatic (fieldCP "DOUBLE_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$DoubleOps")))) 
                                      (48 (areturn)) 
                                      (49 (aload_1)) ;;at TAG_3
                                      (50 (ldc_w )) 
                                      (53 (if_acmpne 60)) ;;to TAG_4
                                      (56 (getstatic (fieldCP "BIGINT_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigIntOps")))) 
                                      (59 (areturn)) 
                                      (60 (aload_1)) ;;at TAG_4
                                      (61 (ldc_w )) 
                                      (64 (if_acmpne 71)) ;;to TAG_5
                                      (67 (getstatic (fieldCP "BIGINT_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigIntOps")))) 
                                      (70 (areturn)) 
                                      (71 (aload_1)) ;;at TAG_5
                                      (72 (ldc_w )) 
                                      (75 (if_acmpne 82)) ;;to TAG_6
                                      (78 (getstatic (fieldCP "RATIO_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$RatioOps")))) 
                                      (81 (areturn)) 
                                      (82 (aload_1)) ;;at TAG_6
                                      (83 (ldc_w )) 
                                      (86 (if_acmpne 93)) ;;to TAG_7
                                      (89 (getstatic (fieldCP "BIGDECIMAL_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigDecimalOps")))) 
                                      (92 (areturn)) 
                                      (93 (getstatic (fieldCP "LONG_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$LongOps")))) ;;at TAG_7
                                      (96 (areturn)) 
                                      (endofcode 97))
                                   (Exceptions )
                                   (StackMap )))
                        (method "hasheq"
                              (parameters (class "java.lang.Number"))
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 51)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "getClass" "java.lang.Object" () (class "java.lang.Class")))) 
                                      (4 (astore_1)) 
                                      (5 (aload_1)) 
                                      (6 (ldc_w )) 
                                      (9 (if_acmpeq 33))  ;;to TAG_0
                                      (12 (aload_1)) 
                                      (13 (ldc_w )) 
                                      (16 (if_acmpeq 33))  ;;to TAG_0
                                      (19 (aload_1)) 
                                      (20 (ldc_w )) 
                                      (23 (if_acmpeq 33))  ;;to TAG_0
                                      (26 (aload_1)) 
                                      (27 (ldc_w )) 
                                      (30 (if_acmpne 46)) ;;to TAG_1
                                      (33 (aload_0)) ;;at TAG_0
                                      (34 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (37 (lstore_2)) 
                                      (38 (lload_2)) 
                                      (39 (lload_2)) 
                                      (40 (bipush 32)) 
                                      (42 (lushr)) 
                                      (43 (lxor)) 
                                      (44 (l2i)) 
                                      (45 (ireturn)) 
                                      (46 (aload_0)) ;;at TAG_1
                                      (47 (invokevirtual (methodCP "hashCode" "java.lang.Object" () int))) 
                                      (50 (ireturn)) 
                                      (endofcode 51))
                                   (Exceptions )
                                   (StackMap )))
                        (method "category"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "clojure.lang.Numbers$Category"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 86)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "getClass" "java.lang.Object" () (class "java.lang.Class")))) 
                                      (4 (astore_1)) 
                                      (5 (aload_1)) 
                                      (6 (ldc_w )) 
                                      (9 (if_acmpne 16)) ;;to TAG_0
                                      (12 (getstatic (fieldCP "INTEGER" "clojure.lang.Numbers$Category" (class "clojure.lang.Numbers$Category")))) 
                                      (15 (areturn)) 
                                      (16 (aload_1)) ;;at TAG_0
                                      (17 (ldc_w )) 
                                      (20 (if_acmpne 27)) ;;to TAG_1
                                      (23 (getstatic (fieldCP "FLOATING" "clojure.lang.Numbers$Category" (class "clojure.lang.Numbers$Category")))) 
                                      (26 (areturn)) 
                                      (27 (aload_1)) ;;at TAG_1
                                      (28 (ldc_w )) 
                                      (31 (if_acmpne 38))  ;;to TAG_2
                                      (34 (getstatic (fieldCP "INTEGER" "clojure.lang.Numbers$Category" (class "clojure.lang.Numbers$Category")))) 
                                      (37 (areturn)) 
                                      (38 (aload_1)) ;;at TAG_2
                                      (39 (ldc_w )) 
                                      (42 (if_acmpne 49)) ;;to TAG_3
                                      (45 (getstatic (fieldCP "FLOATING" "clojure.lang.Numbers$Category" (class "clojure.lang.Numbers$Category")))) 
                                      (48 (areturn)) 
                                      (49 (aload_1)) ;;at TAG_3
                                      (50 (ldc_w )) 
                                      (53 (if_acmpne 60)) ;;to TAG_4
                                      (56 (getstatic (fieldCP "INTEGER" "clojure.lang.Numbers$Category" (class "clojure.lang.Numbers$Category")))) 
                                      (59 (areturn)) 
                                      (60 (aload_1)) ;;at TAG_4
                                      (61 (ldc_w )) 
                                      (64 (if_acmpne 71)) ;;to TAG_5
                                      (67 (getstatic (fieldCP "RATIO" "clojure.lang.Numbers$Category" (class "clojure.lang.Numbers$Category")))) 
                                      (70 (areturn)) 
                                      (71 (aload_1)) ;;at TAG_5
                                      (72 (ldc_w )) 
                                      (75 (if_acmpne 82)) ;;to TAG_6
                                      (78 (getstatic (fieldCP "DECIMAL" "clojure.lang.Numbers$Category" (class "clojure.lang.Numbers$Category")))) 
                                      (81 (areturn)) 
                                      (82 (getstatic (fieldCP "INTEGER" "clojure.lang.Numbers$Category" (class "clojure.lang.Numbers$Category")))) ;;at TAG_6
                                      (85 (areturn)) 
                                      (endofcode 86))
                                   (Exceptions )
                                   (StackMap )))
                        (method "bitOpsCast"
                              (parameters (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 65)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "getClass" "java.lang.Object" () (class "java.lang.Class")))) 
                                      (4 (astore_1)) 
                                      (5 (aload_1)) 
                                      (6 (ldc_w )) 
                                      (9 (if_acmpeq 33))  ;;to TAG_0
                                      (12 (aload_1)) 
                                      (13 (ldc_w )) 
                                      (16 (if_acmpeq 33))  ;;to TAG_0
                                      (19 (aload_1)) 
                                      (20 (ldc_w )) 
                                      (23 (if_acmpeq 33))  ;;to TAG_0
                                      (26 (aload_1)) 
                                      (27 (ldc_w )) 
                                      (30 (if_acmpne 38)) ;;to TAG_1
                                      (33 (aload_0)) ;;at TAG_0
                                      (34 (invokestatic (methodCP "longCast" "clojure.lang.RT" ((class "java.lang.Object")) long))) 
                                      (37 (lreturn)) 
                                      (38 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_1
                                      (41 (dup)) 
                                      (42 (new (class "java.lang.StringBuilder"))) 
                                      (45 (dup)) 
                                      (46 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (49 (ldc 3)) ;;STRING:: "bit operation not supported for: "
                                      (51 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (54 (aload_1)) 
                                      (55 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.Object")) (class "java.lang.StringBuilder")))) 
                                      (58 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (61 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (64 (athrow)) 
                                      (endofcode 65))
                                   (Exceptions )
                                   (StackMap )))
                        (method "float_array"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (array float))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 92)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (newarray FLOAT)) 
                                      (3 (astore_2)) 
                                      (4 (aload_1)) 
                                      (5 (instanceof (class "java.lang.Number"))) 
                                      (8 (ifeq 43)) ;;to TAG_0
                                      (11 (aload_1)) 
                                      (12 (checkcast (class "java.lang.Number"))) 
                                      (15 (invokevirtual (methodCP "floatValue" "java.lang.Number" () float))) 
                                      (18 (fstore_3)) 
                                      (19 (iconst_0)) 
                                      (20 (istore 4)) 
                                      (22 (iload 4)) ;;at TAG_2
                                      (24 (aload_2)) 
                                      (25 (arraylength)) 
                                      (26 (if_icmpge 40)) ;;to TAG_1
                                      (29 (aload_2)) 
                                      (30 (iload 4)) 
                                      (32 (fload_3)) 
                                      (33 (fastore)) 
                                      (34 (iinc 4 1)) 
                                      (37 (goto 22))  ;;to TAG_2
                                      (40 (goto 90)) ;;to TAG_3;;at TAG_1
                                      (43 (aload_1)) ;;at TAG_0
                                      (44 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (47 (astore_3)) 
                                      (48 (iconst_0)) 
                                      (49 (istore 4)) 
                                      (51 (iload 4)) ;;at TAG_4
                                      (53 (iload_0)) 
                                      (54 (if_icmpge 90)) ;;to TAG_3
                                      (57 (aload_3)) 
                                      (58 (ifnull 90)) ;;to TAG_3
                                      (61 (aload_2)) 
                                      (62 (iload 4)) 
                                      (64 (aload_3)) 
                                      (65 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (70 (checkcast (class "java.lang.Number"))) 
                                      (73 (invokevirtual (methodCP "floatValue" "java.lang.Number" () float))) 
                                      (76 (fastore)) 
                                      (77 (iinc 4 1)) 
                                      (80 (aload_3)) 
                                      (81 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (86 (astore_3)) 
                                      (87 (goto 51)) ;;to TAG_4
                                      (90 (aload_2)) ;;at TAG_3
                                      (91 (areturn)) 
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "float_array"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array float))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 75)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Number"))) 
                                      (4 (ifeq 17)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "java.lang.Number"))) 
                                      (11 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (14 (newarray FLOAT)) 
                                      (16 (areturn)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (21 (astore_1)) 
                                      (22 (aload_1)) 
                                      (23 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (26 (istore_2)) 
                                      (27 (iload_2)) 
                                      (28 (newarray FLOAT)) 
                                      (30 (astore_3)) 
                                      (31 (iconst_0)) 
                                      (32 (istore 4)) 
                                      (34 (iload 4)) ;;at TAG_2
                                      (36 (iload_2)) 
                                      (37 (if_icmpge 73)) ;;to TAG_1
                                      (40 (aload_1)) 
                                      (41 (ifnull 73)) ;;to TAG_1
                                      (44 (aload_3)) 
                                      (45 (iload 4)) 
                                      (47 (aload_1)) 
                                      (48 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (53 (checkcast (class "java.lang.Number"))) 
                                      (56 (invokevirtual (methodCP "floatValue" "java.lang.Number" () float))) 
                                      (59 (fastore)) 
                                      (60 (iinc 4 1)) 
                                      (63 (aload_1)) 
                                      (64 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (69 (astore_1)) 
                                      (70 (goto 34))  ;;to TAG_2
                                      (73 (aload_3)) ;;at TAG_1
                                      (74 (areturn)) 
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap )))
                        (method "double_array"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (array double))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 92)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (newarray DOUBLE)) 
                                      (3 (astore_2)) 
                                      (4 (aload_1)) 
                                      (5 (instanceof (class "java.lang.Number"))) 
                                      (8 (ifeq 43)) ;;to TAG_0
                                      (11 (aload_1)) 
                                      (12 (checkcast (class "java.lang.Number"))) 
                                      (15 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (18 (dstore_3)) 
                                      (19 (iconst_0)) 
                                      (20 (istore 5)) 
                                      (22 (iload 5)) ;;at TAG_2
                                      (24 (aload_2)) 
                                      (25 (arraylength)) 
                                      (26 (if_icmpge 40)) ;;to TAG_1
                                      (29 (aload_2)) 
                                      (30 (iload 5)) 
                                      (32 (dload_3)) 
                                      (33 (dastore)) 
                                      (34 (iinc 5 1)) 
                                      (37 (goto 22))  ;;to TAG_2
                                      (40 (goto 90)) ;;to TAG_3;;at TAG_1
                                      (43 (aload_1)) ;;at TAG_0
                                      (44 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (47 (astore_3)) 
                                      (48 (iconst_0)) 
                                      (49 (istore 4)) 
                                      (51 (iload 4)) ;;at TAG_4
                                      (53 (iload_0)) 
                                      (54 (if_icmpge 90)) ;;to TAG_3
                                      (57 (aload_3)) 
                                      (58 (ifnull 90)) ;;to TAG_3
                                      (61 (aload_2)) 
                                      (62 (iload 4)) 
                                      (64 (aload_3)) 
                                      (65 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (70 (checkcast (class "java.lang.Number"))) 
                                      (73 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (76 (dastore)) 
                                      (77 (iinc 4 1)) 
                                      (80 (aload_3)) 
                                      (81 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (86 (astore_3)) 
                                      (87 (goto 51)) ;;to TAG_4
                                      (90 (aload_2)) ;;at TAG_3
                                      (91 (areturn)) 
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "double_array"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array double))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 75)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Number"))) 
                                      (4 (ifeq 17)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "java.lang.Number"))) 
                                      (11 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (14 (newarray DOUBLE)) 
                                      (16 (areturn)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (21 (astore_1)) 
                                      (22 (aload_1)) 
                                      (23 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (26 (istore_2)) 
                                      (27 (iload_2)) 
                                      (28 (newarray DOUBLE)) 
                                      (30 (astore_3)) 
                                      (31 (iconst_0)) 
                                      (32 (istore 4)) 
                                      (34 (iload 4)) ;;at TAG_2
                                      (36 (iload_2)) 
                                      (37 (if_icmpge 73)) ;;to TAG_1
                                      (40 (aload_1)) 
                                      (41 (ifnull 73)) ;;to TAG_1
                                      (44 (aload_3)) 
                                      (45 (iload 4)) 
                                      (47 (aload_1)) 
                                      (48 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (53 (checkcast (class "java.lang.Number"))) 
                                      (56 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (59 (dastore)) 
                                      (60 (iinc 4 1)) 
                                      (63 (aload_1)) 
                                      (64 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (69 (astore_1)) 
                                      (70 (goto 34))  ;;to TAG_2
                                      (73 (aload_3)) ;;at TAG_1
                                      (74 (areturn)) 
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap )))
                        (method "int_array"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (array int))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 92)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (newarray INT)) 
                                      (3 (astore_2)) 
                                      (4 (aload_1)) 
                                      (5 (instanceof (class "java.lang.Number"))) 
                                      (8 (ifeq 43)) ;;to TAG_0
                                      (11 (aload_1)) 
                                      (12 (checkcast (class "java.lang.Number"))) 
                                      (15 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (18 (istore_3)) 
                                      (19 (iconst_0)) 
                                      (20 (istore 4)) 
                                      (22 (iload 4)) ;;at TAG_2
                                      (24 (aload_2)) 
                                      (25 (arraylength)) 
                                      (26 (if_icmpge 40)) ;;to TAG_1
                                      (29 (aload_2)) 
                                      (30 (iload 4)) 
                                      (32 (iload_3)) 
                                      (33 (iastore)) 
                                      (34 (iinc 4 1)) 
                                      (37 (goto 22))  ;;to TAG_2
                                      (40 (goto 90)) ;;to TAG_3;;at TAG_1
                                      (43 (aload_1)) ;;at TAG_0
                                      (44 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (47 (astore_3)) 
                                      (48 (iconst_0)) 
                                      (49 (istore 4)) 
                                      (51 (iload 4)) ;;at TAG_4
                                      (53 (iload_0)) 
                                      (54 (if_icmpge 90)) ;;to TAG_3
                                      (57 (aload_3)) 
                                      (58 (ifnull 90)) ;;to TAG_3
                                      (61 (aload_2)) 
                                      (62 (iload 4)) 
                                      (64 (aload_3)) 
                                      (65 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (70 (checkcast (class "java.lang.Number"))) 
                                      (73 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (76 (iastore)) 
                                      (77 (iinc 4 1)) 
                                      (80 (aload_3)) 
                                      (81 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (86 (astore_3)) 
                                      (87 (goto 51)) ;;to TAG_4
                                      (90 (aload_2)) ;;at TAG_3
                                      (91 (areturn)) 
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "int_array"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array int))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 75)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Number"))) 
                                      (4 (ifeq 17)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "java.lang.Number"))) 
                                      (11 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (14 (newarray INT)) 
                                      (16 (areturn)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (21 (astore_1)) 
                                      (22 (aload_1)) 
                                      (23 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (26 (istore_2)) 
                                      (27 (iload_2)) 
                                      (28 (newarray INT)) 
                                      (30 (astore_3)) 
                                      (31 (iconst_0)) 
                                      (32 (istore 4)) 
                                      (34 (iload 4)) ;;at TAG_2
                                      (36 (iload_2)) 
                                      (37 (if_icmpge 73)) ;;to TAG_1
                                      (40 (aload_1)) 
                                      (41 (ifnull 73)) ;;to TAG_1
                                      (44 (aload_3)) 
                                      (45 (iload 4)) 
                                      (47 (aload_1)) 
                                      (48 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (53 (checkcast (class "java.lang.Number"))) 
                                      (56 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (59 (iastore)) 
                                      (60 (iinc 4 1)) 
                                      (63 (aload_1)) 
                                      (64 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (69 (astore_1)) 
                                      (70 (goto 34))  ;;to TAG_2
                                      (73 (aload_3)) ;;at TAG_1
                                      (74 (areturn)) 
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap )))
                        (method "long_array"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (array long))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 92)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (newarray LONG)) 
                                      (3 (astore_2)) 
                                      (4 (aload_1)) 
                                      (5 (instanceof (class "java.lang.Number"))) 
                                      (8 (ifeq 43)) ;;to TAG_0
                                      (11 (aload_1)) 
                                      (12 (checkcast (class "java.lang.Number"))) 
                                      (15 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (18 (lstore_3)) 
                                      (19 (iconst_0)) 
                                      (20 (istore 5)) 
                                      (22 (iload 5)) ;;at TAG_2
                                      (24 (aload_2)) 
                                      (25 (arraylength)) 
                                      (26 (if_icmpge 40)) ;;to TAG_1
                                      (29 (aload_2)) 
                                      (30 (iload 5)) 
                                      (32 (lload_3)) 
                                      (33 (lastore)) 
                                      (34 (iinc 5 1)) 
                                      (37 (goto 22))  ;;to TAG_2
                                      (40 (goto 90)) ;;to TAG_3;;at TAG_1
                                      (43 (aload_1)) ;;at TAG_0
                                      (44 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (47 (astore_3)) 
                                      (48 (iconst_0)) 
                                      (49 (istore 4)) 
                                      (51 (iload 4)) ;;at TAG_4
                                      (53 (iload_0)) 
                                      (54 (if_icmpge 90)) ;;to TAG_3
                                      (57 (aload_3)) 
                                      (58 (ifnull 90)) ;;to TAG_3
                                      (61 (aload_2)) 
                                      (62 (iload 4)) 
                                      (64 (aload_3)) 
                                      (65 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (70 (checkcast (class "java.lang.Number"))) 
                                      (73 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (76 (lastore)) 
                                      (77 (iinc 4 1)) 
                                      (80 (aload_3)) 
                                      (81 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (86 (astore_3)) 
                                      (87 (goto 51)) ;;to TAG_4
                                      (90 (aload_2)) ;;at TAG_3
                                      (91 (areturn)) 
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "long_array"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array long))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 75)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Number"))) 
                                      (4 (ifeq 17)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "java.lang.Number"))) 
                                      (11 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (14 (newarray LONG)) 
                                      (16 (areturn)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (21 (astore_1)) 
                                      (22 (aload_1)) 
                                      (23 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (26 (istore_2)) 
                                      (27 (iload_2)) 
                                      (28 (newarray LONG)) 
                                      (30 (astore_3)) 
                                      (31 (iconst_0)) 
                                      (32 (istore 4)) 
                                      (34 (iload 4)) ;;at TAG_2
                                      (36 (iload_2)) 
                                      (37 (if_icmpge 73)) ;;to TAG_1
                                      (40 (aload_1)) 
                                      (41 (ifnull 73)) ;;to TAG_1
                                      (44 (aload_3)) 
                                      (45 (iload 4)) 
                                      (47 (aload_1)) 
                                      (48 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (53 (checkcast (class "java.lang.Number"))) 
                                      (56 (invokevirtual (methodCP "longValue" "java.lang.Number" () long))) 
                                      (59 (lastore)) 
                                      (60 (iinc 4 1)) 
                                      (63 (aload_1)) 
                                      (64 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (69 (astore_1)) 
                                      (70 (goto 34))  ;;to TAG_2
                                      (73 (aload_3)) ;;at TAG_1
                                      (74 (areturn)) 
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap )))
                        (method "short_array"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (array short))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 92)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (newarray SHORT)) 
                                      (3 (astore_2)) 
                                      (4 (aload_1)) 
                                      (5 (instanceof (class "java.lang.Short"))) 
                                      (8 (ifeq 43)) ;;to TAG_0
                                      (11 (aload_1)) 
                                      (12 (checkcast (class "java.lang.Short"))) 
                                      (15 (invokevirtual (methodCP "shortValue" "java.lang.Short" () short))) 
                                      (18 (istore_3)) 
                                      (19 (iconst_0)) 
                                      (20 (istore 4)) 
                                      (22 (iload 4)) ;;at TAG_2
                                      (24 (aload_2)) 
                                      (25 (arraylength)) 
                                      (26 (if_icmpge 40)) ;;to TAG_1
                                      (29 (aload_2)) 
                                      (30 (iload 4)) 
                                      (32 (iload_3)) 
                                      (33 (sastore)) 
                                      (34 (iinc 4 1)) 
                                      (37 (goto 22))  ;;to TAG_2
                                      (40 (goto 90)) ;;to TAG_3;;at TAG_1
                                      (43 (aload_1)) ;;at TAG_0
                                      (44 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (47 (astore_3)) 
                                      (48 (iconst_0)) 
                                      (49 (istore 4)) 
                                      (51 (iload 4)) ;;at TAG_4
                                      (53 (iload_0)) 
                                      (54 (if_icmpge 90)) ;;to TAG_3
                                      (57 (aload_3)) 
                                      (58 (ifnull 90)) ;;to TAG_3
                                      (61 (aload_2)) 
                                      (62 (iload 4)) 
                                      (64 (aload_3)) 
                                      (65 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (70 (checkcast (class "java.lang.Short"))) 
                                      (73 (invokevirtual (methodCP "shortValue" "java.lang.Short" () short))) 
                                      (76 (sastore)) 
                                      (77 (iinc 4 1)) 
                                      (80 (aload_3)) 
                                      (81 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (86 (astore_3)) 
                                      (87 (goto 51)) ;;to TAG_4
                                      (90 (aload_2)) ;;at TAG_3
                                      (91 (areturn)) 
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "short_array"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array short))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 75)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Number"))) 
                                      (4 (ifeq 17)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "java.lang.Number"))) 
                                      (11 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (14 (newarray SHORT)) 
                                      (16 (areturn)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (21 (astore_1)) 
                                      (22 (aload_1)) 
                                      (23 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (26 (istore_2)) 
                                      (27 (iload_2)) 
                                      (28 (newarray SHORT)) 
                                      (30 (astore_3)) 
                                      (31 (iconst_0)) 
                                      (32 (istore 4)) 
                                      (34 (iload 4)) ;;at TAG_2
                                      (36 (iload_2)) 
                                      (37 (if_icmpge 73)) ;;to TAG_1
                                      (40 (aload_1)) 
                                      (41 (ifnull 73)) ;;to TAG_1
                                      (44 (aload_3)) 
                                      (45 (iload 4)) 
                                      (47 (aload_1)) 
                                      (48 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (53 (checkcast (class "java.lang.Short"))) 
                                      (56 (invokevirtual (methodCP "shortValue" "java.lang.Short" () short))) 
                                      (59 (sastore)) 
                                      (60 (iinc 4 1)) 
                                      (63 (aload_1)) 
                                      (64 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (69 (astore_1)) 
                                      (70 (goto 34))  ;;to TAG_2
                                      (73 (aload_3)) ;;at TAG_1
                                      (74 (areturn)) 
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap )))
                        (method "char_array"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (array char))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 92)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (newarray CHAR)) 
                                      (3 (astore_2)) 
                                      (4 (aload_1)) 
                                      (5 (instanceof (class "java.lang.Character"))) 
                                      (8 (ifeq 43)) ;;to TAG_0
                                      (11 (aload_1)) 
                                      (12 (checkcast (class "java.lang.Character"))) 
                                      (15 (invokevirtual (methodCP "charValue" "java.lang.Character" () char))) 
                                      (18 (istore_3)) 
                                      (19 (iconst_0)) 
                                      (20 (istore 4)) 
                                      (22 (iload 4)) ;;at TAG_2
                                      (24 (aload_2)) 
                                      (25 (arraylength)) 
                                      (26 (if_icmpge 40)) ;;to TAG_1
                                      (29 (aload_2)) 
                                      (30 (iload 4)) 
                                      (32 (iload_3)) 
                                      (33 (castore)) 
                                      (34 (iinc 4 1)) 
                                      (37 (goto 22))  ;;to TAG_2
                                      (40 (goto 90)) ;;to TAG_3;;at TAG_1
                                      (43 (aload_1)) ;;at TAG_0
                                      (44 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (47 (astore_3)) 
                                      (48 (iconst_0)) 
                                      (49 (istore 4)) 
                                      (51 (iload 4)) ;;at TAG_4
                                      (53 (iload_0)) 
                                      (54 (if_icmpge 90)) ;;to TAG_3
                                      (57 (aload_3)) 
                                      (58 (ifnull 90)) ;;to TAG_3
                                      (61 (aload_2)) 
                                      (62 (iload 4)) 
                                      (64 (aload_3)) 
                                      (65 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (70 (checkcast (class "java.lang.Character"))) 
                                      (73 (invokevirtual (methodCP "charValue" "java.lang.Character" () char))) 
                                      (76 (castore)) 
                                      (77 (iinc 4 1)) 
                                      (80 (aload_3)) 
                                      (81 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (86 (astore_3)) 
                                      (87 (goto 51)) ;;to TAG_4
                                      (90 (aload_2)) ;;at TAG_3
                                      (91 (areturn)) 
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "char_array"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array char))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 75)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Number"))) 
                                      (4 (ifeq 17)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "java.lang.Number"))) 
                                      (11 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (14 (newarray CHAR)) 
                                      (16 (areturn)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (21 (astore_1)) 
                                      (22 (aload_1)) 
                                      (23 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (26 (istore_2)) 
                                      (27 (iload_2)) 
                                      (28 (newarray CHAR)) 
                                      (30 (astore_3)) 
                                      (31 (iconst_0)) 
                                      (32 (istore 4)) 
                                      (34 (iload 4)) ;;at TAG_2
                                      (36 (iload_2)) 
                                      (37 (if_icmpge 73)) ;;to TAG_1
                                      (40 (aload_1)) 
                                      (41 (ifnull 73)) ;;to TAG_1
                                      (44 (aload_3)) 
                                      (45 (iload 4)) 
                                      (47 (aload_1)) 
                                      (48 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (53 (checkcast (class "java.lang.Character"))) 
                                      (56 (invokevirtual (methodCP "charValue" "java.lang.Character" () char))) 
                                      (59 (castore)) 
                                      (60 (iinc 4 1)) 
                                      (63 (aload_1)) 
                                      (64 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (69 (astore_1)) 
                                      (70 (goto 34))  ;;to TAG_2
                                      (73 (aload_3)) ;;at TAG_1
                                      (74 (areturn)) 
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap )))
                        (method "byte_array"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (array byte))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 92)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (newarray BYTE)) 
                                      (3 (astore_2)) 
                                      (4 (aload_1)) 
                                      (5 (instanceof (class "java.lang.Byte"))) 
                                      (8 (ifeq 43)) ;;to TAG_0
                                      (11 (aload_1)) 
                                      (12 (checkcast (class "java.lang.Byte"))) 
                                      (15 (invokevirtual (methodCP "byteValue" "java.lang.Byte" () byte))) 
                                      (18 (istore_3)) 
                                      (19 (iconst_0)) 
                                      (20 (istore 4)) 
                                      (22 (iload 4)) ;;at TAG_2
                                      (24 (aload_2)) 
                                      (25 (arraylength)) 
                                      (26 (if_icmpge 40)) ;;to TAG_1
                                      (29 (aload_2)) 
                                      (30 (iload 4)) 
                                      (32 (iload_3)) 
                                      (33 (bastore)) 
                                      (34 (iinc 4 1)) 
                                      (37 (goto 22))  ;;to TAG_2
                                      (40 (goto 90)) ;;to TAG_3;;at TAG_1
                                      (43 (aload_1)) ;;at TAG_0
                                      (44 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (47 (astore_3)) 
                                      (48 (iconst_0)) 
                                      (49 (istore 4)) 
                                      (51 (iload 4)) ;;at TAG_4
                                      (53 (iload_0)) 
                                      (54 (if_icmpge 90)) ;;to TAG_3
                                      (57 (aload_3)) 
                                      (58 (ifnull 90)) ;;to TAG_3
                                      (61 (aload_2)) 
                                      (62 (iload 4)) 
                                      (64 (aload_3)) 
                                      (65 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (70 (checkcast (class "java.lang.Byte"))) 
                                      (73 (invokevirtual (methodCP "byteValue" "java.lang.Byte" () byte))) 
                                      (76 (bastore)) 
                                      (77 (iinc 4 1)) 
                                      (80 (aload_3)) 
                                      (81 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (86 (astore_3)) 
                                      (87 (goto 51)) ;;to TAG_4
                                      (90 (aload_2)) ;;at TAG_3
                                      (91 (areturn)) 
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "byte_array"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array byte))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 75)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Number"))) 
                                      (4 (ifeq 17)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "java.lang.Number"))) 
                                      (11 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (14 (newarray BYTE)) 
                                      (16 (areturn)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (21 (astore_1)) 
                                      (22 (aload_1)) 
                                      (23 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (26 (istore_2)) 
                                      (27 (iload_2)) 
                                      (28 (newarray BYTE)) 
                                      (30 (astore_3)) 
                                      (31 (iconst_0)) 
                                      (32 (istore 4)) 
                                      (34 (iload 4)) ;;at TAG_2
                                      (36 (iload_2)) 
                                      (37 (if_icmpge 73)) ;;to TAG_1
                                      (40 (aload_1)) 
                                      (41 (ifnull 73)) ;;to TAG_1
                                      (44 (aload_3)) 
                                      (45 (iload 4)) 
                                      (47 (aload_1)) 
                                      (48 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (53 (checkcast (class "java.lang.Byte"))) 
                                      (56 (invokevirtual (methodCP "byteValue" "java.lang.Byte" () byte))) 
                                      (59 (bastore)) 
                                      (60 (iinc 4 1)) 
                                      (63 (aload_1)) 
                                      (64 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (69 (astore_1)) 
                                      (70 (goto 34))  ;;to TAG_2
                                      (73 (aload_3)) ;;at TAG_1
                                      (74 (areturn)) 
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap )))
                        (method "boolean_array"
                              (parameters int (class "java.lang.Object"))
                              (returntype . (array boolean))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 92)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (newarray BOOLEAN)) 
                                      (3 (astore_2)) 
                                      (4 (aload_1)) 
                                      (5 (instanceof (class "java.lang.Boolean"))) 
                                      (8 (ifeq 43)) ;;to TAG_0
                                      (11 (aload_1)) 
                                      (12 (checkcast (class "java.lang.Boolean"))) 
                                      (15 (invokevirtual (methodCP "booleanValue" "java.lang.Boolean" () boolean))) 
                                      (18 (istore_3)) 
                                      (19 (iconst_0)) 
                                      (20 (istore 4)) 
                                      (22 (iload 4)) ;;at TAG_2
                                      (24 (aload_2)) 
                                      (25 (arraylength)) 
                                      (26 (if_icmpge 40)) ;;to TAG_1
                                      (29 (aload_2)) 
                                      (30 (iload 4)) 
                                      (32 (iload_3)) 
                                      (33 (bastore)) 
                                      (34 (iinc 4 1)) 
                                      (37 (goto 22))  ;;to TAG_2
                                      (40 (goto 90)) ;;to TAG_3;;at TAG_1
                                      (43 (aload_1)) ;;at TAG_0
                                      (44 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (47 (astore_3)) 
                                      (48 (iconst_0)) 
                                      (49 (istore 4)) 
                                      (51 (iload 4)) ;;at TAG_4
                                      (53 (iload_0)) 
                                      (54 (if_icmpge 90)) ;;to TAG_3
                                      (57 (aload_3)) 
                                      (58 (ifnull 90)) ;;to TAG_3
                                      (61 (aload_2)) 
                                      (62 (iload 4)) 
                                      (64 (aload_3)) 
                                      (65 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (70 (checkcast (class "java.lang.Boolean"))) 
                                      (73 (invokevirtual (methodCP "booleanValue" "java.lang.Boolean" () boolean))) 
                                      (76 (bastore)) 
                                      (77 (iinc 4 1)) 
                                      (80 (aload_3)) 
                                      (81 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (86 (astore_3)) 
                                      (87 (goto 51)) ;;to TAG_4
                                      (90 (aload_2)) ;;at TAG_3
                                      (91 (areturn)) 
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "boolean_array"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array boolean))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 75)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Number"))) 
                                      (4 (ifeq 17)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "java.lang.Number"))) 
                                      (11 (invokevirtual (methodCP "intValue" "java.lang.Number" () int))) 
                                      (14 (newarray BOOLEAN)) 
                                      (16 (areturn)) 
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (invokestatic (methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq")))) 
                                      (21 (astore_1)) 
                                      (22 (aload_1)) 
                                      (23 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (26 (istore_2)) 
                                      (27 (iload_2)) 
                                      (28 (newarray BOOLEAN)) 
                                      (30 (astore_3)) 
                                      (31 (iconst_0)) 
                                      (32 (istore 4)) 
                                      (34 (iload 4)) ;;at TAG_2
                                      (36 (iload_2)) 
                                      (37 (if_icmpge 73)) ;;to TAG_1
                                      (40 (aload_1)) 
                                      (41 (ifnull 73)) ;;to TAG_1
                                      (44 (aload_3)) 
                                      (45 (iload 4)) 
                                      (47 (aload_1)) 
                                      (48 (invokeinterface (methodCP "first" "clojure.lang.ISeq" () (class "java.lang.Object")) 1)) 
                                      (53 (checkcast (class "java.lang.Boolean"))) 
                                      (56 (invokevirtual (methodCP "booleanValue" "java.lang.Boolean" () boolean))) 
                                      (59 (bastore)) 
                                      (60 (iinc 4 1)) 
                                      (63 (aload_1)) 
                                      (64 (invokeinterface (methodCP "next" "clojure.lang.ISeq" () (class "clojure.lang.ISeq")) 1)) 
                                      (69 (astore_1)) 
                                      (70 (goto 34))  ;;to TAG_2
                                      (73 (aload_3)) ;;at TAG_1
                                      (74 (areturn)) 
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap )))
                        (method "booleans"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array boolean))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (array boolean)))
                                      (4 (checkcast (array boolean)))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "bytes"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array byte))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (array byte)))
                                      (4 (checkcast (array byte)))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "chars"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array char))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (array char)))
                                      (4 (checkcast (array char)))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "shorts"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array short))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (array short)))
                                      (4 (checkcast (array short)))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "floats"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array float))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (array float)))
                                      (4 (checkcast (array float)))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doubles"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array double))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (array double)))
                                      (4 (checkcast (array double)))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "ints"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array int))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (array int)))
                                      (4 (checkcast (array int)))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "longs"
                              (parameters (class "java.lang.Object"))
                              (returntype . (array long))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (array long)))
                                      (4 (checkcast (array long)))
                                      (7 (areturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "num"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (class "java.lang.Number")))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "num"
                              (parameters float)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (fload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Float" (float) (class "java.lang.Float"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "num"
                              (parameters double)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 5)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dload_2))
                                      (2 (dadd))
                                      (3 (dreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addP"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dload_2))
                                      (2 (dadd))
                                      (3 (dreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minus"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dload_2))
                                      (2 (dsub))
                                      (3 (dreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minusP"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dload_2))
                                      (2 (dsub))
                                      (3 (dreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minus"
                              (parameters double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 3)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dneg))
                                      (2 (dreturn))
                                      (endofcode 3))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minusP"
                              (parameters double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 3)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dneg))
                                      (2 (dreturn))
                                      (endofcode 3))
                                   (Exceptions )
                                   (StackMap )))
                        (method "inc"
                              (parameters double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dconst_1))
                                      (2 (dadd))
                                      (3 (dreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "incP"
                              (parameters double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dconst_1))
                                      (2 (dadd))
                                      (3 (dreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "dec"
                              (parameters double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dconst_1))
                                      (2 (dsub))
                                      (3 (dreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "decP"
                              (parameters double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dconst_1))
                                      (2 (dsub))
                                      (3 (dreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dload_2))
                                      (2 (dmul))
                                      (3 (dreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiplyP"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dload_2))
                                      (2 (dmul))
                                      (3 (dreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dload_2))
                                      (2 (ddiv))
                                      (3 (dreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters double double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (dload_2)) 
                                      (2 (dcmpl)) 
                                      (3 (ifne 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters double double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (dload_2)) 
                                      (2 (dcmpg)) 
                                      (3 (ifge 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lte"
                              (parameters double double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (dload_2)) 
                                      (2 (dcmpg)) 
                                      (3 (ifgt 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gt"
                              (parameters double double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (dload_2)) 
                                      (2 (dcmpl)) 
                                      (3 (ifle 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gte"
                              (parameters double double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (dload_2)) 
                                      (2 (dcmpl)) 
                                      (3 (iflt 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isPos"
                              (parameters double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (dconst_0)) 
                                      (2 (dcmpl)) 
                                      (3 (ifle 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isNeg"
                              (parameters double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (dconst_0)) 
                                      (2 (dcmpg)) 
                                      (3 (ifge 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isZero"
                              (parameters double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (dconst_0)) 
                                      (2 (dcmpl)) 
                                      (3 (ifne 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "throwIntOverflow"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 0) (code_length . 10)
                                   (parsedcode
                                      (0 (new (class "java.lang.ArithmeticException")))
                                      (3 (dup))
                                      (4 (ldc 4))         ;;STRING:: "integer overflow"
                                      (6 (invokespecial
                    (methodCP "<init>" "java.lang.ArithmeticException" ((class "java.lang.String")) void)))
                                      (9 (athrow))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_int_add"
                              (parameters int int)
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (iload_1))
                                      (2 (iadd))
                                      (3 (ireturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_int_subtract"
                              (parameters int int)
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (iload_1))
                                      (2 (isub))
                                      (3 (ireturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_int_negate"
                              (parameters int)
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 3)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (ineg))
                                      (2 (ireturn))
                                      (endofcode 3))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_int_inc"
                              (parameters int)
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 4)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (iconst_1))
                                      (2 (iadd))
                                      (3 (ireturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_int_dec"
                              (parameters int)
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 4)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (iconst_1))
                                      (2 (isub))
                                      (3 (ireturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_int_multiply"
                              (parameters int int)
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (iload_1))
                                      (2 (imul))
                                      (3 (ireturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "not"
                              (parameters (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (invokestatic
                    (methodCP "not" "clojure.lang.Numbers" (long) long)))
                                      (7 (lreturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "not"
                              (parameters long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (ldc2_w 5))      ;; LONG:: "-1"
                                      (4 (lxor))
                                      (5 (lreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "and"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (8 (invokestatic
                    (methodCP "and" "clojure.lang.Numbers" (long long) long)))
                                      (11 (lreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "and"
                              (parameters (class "java.lang.Object") long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (lload_1))
                                      (5 (invokestatic
                    (methodCP "and" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "and"
                              (parameters long (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (5 (invokestatic
                    (methodCP "and" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "and"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lload_2))
                                      (2 (land))
                                      (3 (lreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "or"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (8 (invokestatic
                    (methodCP "or" "clojure.lang.Numbers" (long long) long)))
                                      (11 (lreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "or"
                              (parameters (class "java.lang.Object") long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (lload_1))
                                      (5 (invokestatic
                    (methodCP "or" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "or"
                              (parameters long (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (5 (invokestatic
                    (methodCP "or" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "or"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lload_2))
                                      (2 (lor))
                                      (3 (lreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "xor"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (8 (invokestatic
                    (methodCP "xor" "clojure.lang.Numbers" (long long) long)))
                                      (11 (lreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "xor"
                              (parameters (class "java.lang.Object") long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (lload_1))
                                      (5 (invokestatic
                    (methodCP "xor" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "xor"
                              (parameters long (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (5 (invokestatic
                    (methodCP "xor" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "xor"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lload_2))
                                      (2 (lxor))
                                      (3 (lreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "andNot"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (8 (invokestatic
                    (methodCP "andNot" "clojure.lang.Numbers" (long long) long)))
                                      (11 (lreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "andNot"
                              (parameters (class "java.lang.Object") long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (lload_1))
                                      (5 (invokestatic
                    (methodCP "andNot" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "andNot"
                              (parameters long (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (5 (invokestatic
                    (methodCP "andNot" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "andNot"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 8)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lload_2))
                                      (2 (ldc2_w 5))      ;; LONG:: "-1"
                                      (5 (lxor))
                                      (6 (land))
                                      (7 (lreturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "clearBit"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (8 (invokestatic
                    (methodCP "clearBit" "clojure.lang.Numbers" (long long) long)))
                                      (11 (lreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "clearBit"
                              (parameters (class "java.lang.Object") long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (lload_1))
                                      (5 (invokestatic
                    (methodCP "clearBit" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "clearBit"
                              (parameters long (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (5 (invokestatic
                    (methodCP "clearBit" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "clearBit"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 11)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lconst_1))
                                      (2 (lload_2))
                                      (3 (l2i))
                                      (4 (lshl))
                                      (5 (ldc2_w 5))      ;; LONG:: "-1"
                                      (8 (lxor))
                                      (9 (land))
                                      (10 (lreturn))
                                      (endofcode 11))
                                   (Exceptions )
                                   (StackMap )))
                        (method "setBit"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (8 (invokestatic
                    (methodCP "setBit" "clojure.lang.Numbers" (long long) long)))
                                      (11 (lreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "setBit"
                              (parameters (class "java.lang.Object") long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (lload_1))
                                      (5 (invokestatic
                    (methodCP "setBit" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "setBit"
                              (parameters long (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (5 (invokestatic
                    (methodCP "setBit" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "setBit"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 7)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lconst_1))
                                      (2 (lload_2))
                                      (3 (l2i))
                                      (4 (lshl))
                                      (5 (lor))
                                      (6 (lreturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "flipBit"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (8 (invokestatic
                    (methodCP "flipBit" "clojure.lang.Numbers" (long long) long)))
                                      (11 (lreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "flipBit"
                              (parameters (class "java.lang.Object") long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (lload_1))
                                      (5 (invokestatic
                    (methodCP "flipBit" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "flipBit"
                              (parameters long (class "java.lang.Object"))
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (5 (invokestatic
                    (methodCP "flipBit" "clojure.lang.Numbers" (long long) long)))
                                      (8 (lreturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "flipBit"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 7)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lconst_1))
                                      (2 (lload_2))
                                      (3 (l2i))
                                      (4 (lshl))
                                      (5 (lxor))
                                      (6 (lreturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "testBit"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (aload_1))
                                      (5 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (8 (invokestatic
                    (methodCP "testBit" "clojure.lang.Numbers" (long long) boolean)))
                                      (11 (ireturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "testBit"
                              (parameters (class "java.lang.Object") long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (4 (lload_1))
                                      (5 (invokestatic
                    (methodCP "testBit" "clojure.lang.Numbers" (long long) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "testBit"
                              (parameters long (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "bitOpsCast" "clojure.lang.Numbers" ((class "java.lang.Object")) long)))
                                      (5 (invokestatic
                    (methodCP "testBit" "clojure.lang.Numbers" (long long) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "testBit"
                              (parameters long long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 17)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lconst_1)) 
                                      (2 (lload_2)) 
                                      (3 (l2i)) 
                                      (4 (lshl)) 
                                      (5 (land)) 
                                      (6 (lconst_0)) 
                                      (7 (lcmp)) 
                                      (8 (ifeq 15))  ;;to TAG_0
                                      (11 (iconst_1)) 
                                      (12 (goto 16)) ;;to TAG_1
                                      (15 (iconst_0)) ;;at TAG_0
                                      (16 (ireturn)) ;;at TAG_1
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_int_divide"
                              (parameters int int)
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (iload_1))
                                      (2 (idiv))
                                      (3 (ireturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_int_remainder"
                              (parameters int int)
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (iload_0))
                                      (1 (iload_1))
                                      (2 (irem))
                                      (3 (ireturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "num"
                              (parameters long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 5)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_add"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lload_2))
                                      (2 (ladd))
                                      (3 (lreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_minus"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lload_2))
                                      (2 (lsub))
                                      (3 (lreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_multiply"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lload_2))
                                      (2 (lmul))
                                      (3 (lreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_minus"
                              (parameters long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 3)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lneg))
                                      (2 (lreturn))
                                      (endofcode 3))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_inc"
                              (parameters long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lconst_1))
                                      (2 (ladd))
                                      (3 (lreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_dec"
                              (parameters long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 4)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lconst_1))
                                      (2 (lsub))
                                      (3 (lreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_add"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_minus"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_multiply"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (aload_1))
                                      (2 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_minus"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.lang.Number"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_inc"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "inc" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.lang.Number"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_dec"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokestatic
                    (methodCP "dec" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.lang.Number"))))
                                      (4 (areturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_add"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 6)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dload_2))
                                      (2 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" (double double) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_minus"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 6)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dload_2))
                                      (2 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" (double double) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_multiply"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 6)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dload_2))
                                      (2 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" (double double) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_minus"
                              (parameters double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 5)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" (double) double)))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_inc"
                              (parameters double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 5)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (invokestatic
                    (methodCP "inc" "clojure.lang.Numbers" (double) double)))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_dec"
                              (parameters double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 5)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (invokestatic
                    (methodCP "dec" "clojure.lang.Numbers" (double) double)))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_add"
                              (parameters double (class "java.lang.Object"))
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 6)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" (double (class "java.lang.Object")) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_minus"
                              (parameters double (class "java.lang.Object"))
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 6)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" (double (class "java.lang.Object")) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_multiply"
                              (parameters double (class "java.lang.Object"))
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 6)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" (double (class "java.lang.Object")) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_add"
                              (parameters (class "java.lang.Object") double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (dload_1))
                                      (2 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" ((class "java.lang.Object") double) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_minus"
                              (parameters (class "java.lang.Object") double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (dload_1))
                                      (2 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" ((class "java.lang.Object") double) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_multiply"
                              (parameters (class "java.lang.Object") double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (dload_1))
                                      (2 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" ((class "java.lang.Object") double) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_add"
                              (parameters double long)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 6)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (lload_2))
                                      (2 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" (double long) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_minus"
                              (parameters double long)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 6)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (lload_2))
                                      (2 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" (double long) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_multiply"
                              (parameters double long)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 6)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (lload_2))
                                      (2 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" (double long) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_add"
                              (parameters long double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 6)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (dload_2))
                                      (2 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" (long double) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_minus"
                              (parameters long double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 6)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (dload_2))
                                      (2 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" (long double) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_multiply"
                              (parameters long double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 6)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (dload_2))
                                      (2 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" (long double) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_add"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 6)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" (long (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_minus"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 6)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" (long (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_multiply"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 6)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (aload_2))
                                      (2 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" (long (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_add"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" ((class "java.lang.Object") long) (class "java.lang.Number"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_minus"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" ((class "java.lang.Object") long) (class "java.lang.Number"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unchecked_multiply"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 6)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" ((class "java.lang.Object") long) (class "java.lang.Number"))))
                                      (5 (areturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters double (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "quotient" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters (class "java.lang.Object") double)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (dload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double"))))
                                      (5 (invokestatic
                    (methodCP "quotient" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "quotient" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "quotient" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters double long)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 7)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (lload_2))
                                      (2 (l2d))
                                      (3 (invokestatic
                    (methodCP "quotient" "clojure.lang.Numbers" (double double) double)))
                                      (6 (dreturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters long double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 7)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (l2d))
                                      (2 (dload_2))
                                      (3 (invokestatic
                    (methodCP "quotient" "clojure.lang.Numbers" (double double) double)))
                                      (6 (dreturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters double (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "remainder" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters (class "java.lang.Object") double)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (dload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double"))))
                                      (5 (invokestatic
                    (methodCP "remainder" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "remainder" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "remainder" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters double long)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 7)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (lload_2))
                                      (2 (l2d))
                                      (3 (invokestatic
                    (methodCP "remainder" "clojure.lang.Numbers" (double double) double)))
                                      (6 (dreturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters long double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 7)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (l2d))
                                      (2 (dload_2))
                                      (3 (invokestatic
                    (methodCP "remainder" "clojure.lang.Numbers" (double double) double)))
                                      (6 (dreturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 31)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (ladd)) 
                                      (3 (lstore 4)) 
                                      (5 (lload 4)) 
                                      (7 (lload_0)) 
                                      (8 (lxor)) 
                                      (9 (lconst_0)) 
                                      (10 (lcmp)) 
                                      (11 (ifge 28))  ;;to TAG_0
                                      (14 (lload 4)) 
                                      (16 (lload_2)) 
                                      (17 (lxor)) 
                                      (18 (lconst_0)) 
                                      (19 (lcmp)) 
                                      (20 (ifge 28))  ;;to TAG_0
                                      (23 (invokestatic (methodCP "throwIntOverflow" "clojure.lang.Numbers" () int))) 
                                      (26 (i2l)) 
                                      (27 (lreturn)) 
                                      (28 (lload 4)) ;;at TAG_0
                                      (30 (lreturn)) 
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addP"
                              (parameters long long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 41)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (ladd)) 
                                      (3 (lstore 4)) 
                                      (5 (lload 4)) 
                                      (7 (lload_0)) 
                                      (8 (lxor)) 
                                      (9 (lconst_0)) 
                                      (10 (lcmp)) 
                                      (11 (ifge 35))  ;;to TAG_0
                                      (14 (lload 4)) 
                                      (16 (lload_2)) 
                                      (17 (lxor)) 
                                      (18 (lconst_0)) 
                                      (19 (lcmp)) 
                                      (20 (ifge 35))  ;;to TAG_0
                                      (23 (lload_0)) 
                                      (24 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (27 (lload_2)) 
                                      (28 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (31 (invokestatic (methodCP "addP" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (34 (areturn)) 
                                      (35 (lload 4)) ;;at TAG_0
                                      (37 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (40 (areturn)) 
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minus"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 6) (code_length . 35)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (lsub)) 
                                      (3 (lstore 4)) 
                                      (5 (lload 4)) 
                                      (7 (lload_0)) 
                                      (8 (lxor)) 
                                      (9 (lconst_0)) 
                                      (10 (lcmp)) 
                                      (11 (ifge 32))  ;;to TAG_0
                                      (14 (lload 4)) 
                                      (16 (lload_2)) 
                                      (17 (ldc2_w 5)) ;; LONG:: "-1"
                                      (20 (lxor)) 
                                      (21 (lxor)) 
                                      (22 (lconst_0)) 
                                      (23 (lcmp)) 
                                      (24 (ifge 32))  ;;to TAG_0
                                      (27 (invokestatic (methodCP "throwIntOverflow" "clojure.lang.Numbers" () int))) 
                                      (30 (i2l)) 
                                      (31 (lreturn)) 
                                      (32 (lload 4)) ;;at TAG_0
                                      (34 (lreturn)) 
                                      (endofcode 35))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minusP"
                              (parameters long long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 6) (code_length . 45)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (lsub)) 
                                      (3 (lstore 4)) 
                                      (5 (lload 4)) 
                                      (7 (lload_0)) 
                                      (8 (lxor)) 
                                      (9 (lconst_0)) 
                                      (10 (lcmp)) 
                                      (11 (ifge 39))  ;;to TAG_0
                                      (14 (lload 4)) 
                                      (16 (lload_2)) 
                                      (17 (ldc2_w 5)) ;; LONG:: "-1"
                                      (20 (lxor)) 
                                      (21 (lxor)) 
                                      (22 (lconst_0)) 
                                      (23 (lcmp)) 
                                      (24 (ifge 39))  ;;to TAG_0
                                      (27 (lload_0)) 
                                      (28 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (31 (lload_2)) 
                                      (32 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (35 (invokestatic (methodCP "minusP" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (38 (areturn)) 
                                      (39 (lload 4)) ;;at TAG_0
                                      (41 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (44 (areturn)) 
                                      (endofcode 45))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minus"
                              (parameters long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 16)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (ldc2_w 6)) ;; LONG:: "-9223372036854775808"
                                      (4 (lcmp)) 
                                      (5 (ifne 13))  ;;to TAG_0
                                      (8 (invokestatic (methodCP "throwIntOverflow" "clojure.lang.Numbers" () int))) 
                                      (11 (i2l)) 
                                      (12 (lreturn)) 
                                      (13 (lload_0)) ;;at TAG_0
                                      (14 (lneg)) 
                                      (15 (lreturn)) 
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minusP"
                              (parameters long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 25)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (ldc2_w 6)) ;; LONG:: "-9223372036854775808"
                                      (4 (lcmp)) 
                                      (5 (ifne 19))  ;;to TAG_0
                                      (8 (lload_0)) 
                                      (9 (invokestatic (methodCP "valueOf" "java.math.BigInteger" (long) (class "java.math.BigInteger")))) 
                                      (12 (invokevirtual (methodCP "negate" "java.math.BigInteger" () (class "java.math.BigInteger")))) 
                                      (15 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (18 (areturn)) 
                                      (19 (lload_0)) ;;at TAG_0
                                      (20 (lneg)) 
                                      (21 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (24 (areturn)) 
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "inc"
                              (parameters long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 17)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (ldc2_w 7)) ;; LONG:: "9223372036854775807"
                                      (4 (lcmp)) 
                                      (5 (ifne 13))  ;;to TAG_0
                                      (8 (invokestatic (methodCP "throwIntOverflow" "clojure.lang.Numbers" () int))) 
                                      (11 (i2l)) 
                                      (12 (lreturn)) 
                                      (13 (lload_0)) ;;at TAG_0
                                      (14 (lconst_1)) 
                                      (15 (ladd)) 
                                      (16 (lreturn)) 
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "incP"
                              (parameters long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 26)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (ldc2_w 7)) ;; LONG:: "9223372036854775807"
                                      (4 (lcmp)) 
                                      (5 (ifne 19))  ;;to TAG_0
                                      (8 (getstatic (fieldCP "BIGINT_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigIntOps")))) 
                                      (11 (lload_0)) 
                                      (12 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (15 (invokevirtual (methodCP "inc" "clojure.lang.Numbers$BigIntOps" ((class "java.lang.Number")) (class "java.lang.Number")))) 
                                      (18 (areturn)) 
                                      (19 (lload_0)) ;;at TAG_0
                                      (20 (lconst_1)) 
                                      (21 (ladd)) 
                                      (22 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (25 (areturn)) 
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "dec"
                              (parameters long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 17)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (ldc2_w 6)) ;; LONG:: "-9223372036854775808"
                                      (4 (lcmp)) 
                                      (5 (ifne 13))  ;;to TAG_0
                                      (8 (invokestatic (methodCP "throwIntOverflow" "clojure.lang.Numbers" () int))) 
                                      (11 (i2l)) 
                                      (12 (lreturn)) 
                                      (13 (lload_0)) ;;at TAG_0
                                      (14 (lconst_1)) 
                                      (15 (lsub)) 
                                      (16 (lreturn)) 
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "decP"
                              (parameters long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 26)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (ldc2_w 6)) ;; LONG:: "-9223372036854775808"
                                      (4 (lcmp)) 
                                      (5 (ifne 19))  ;;to TAG_0
                                      (8 (getstatic (fieldCP "BIGINT_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigIntOps")))) 
                                      (11 (lload_0)) 
                                      (12 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (15 (invokevirtual (methodCP "dec" "clojure.lang.Numbers$BigIntOps" ((class "java.lang.Number")) (class "java.lang.Number")))) 
                                      (18 (areturn)) 
                                      (19 (lload_0)) ;;at TAG_0
                                      (20 (lconst_1)) 
                                      (21 (lsub)) 
                                      (22 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (25 (areturn)) 
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 28)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (lmul)) 
                                      (3 (lstore 4)) 
                                      (5 (lload_2)) 
                                      (6 (lconst_0)) 
                                      (7 (lcmp)) 
                                      (8 (ifeq 25))  ;;to TAG_0
                                      (11 (lload 4)) 
                                      (13 (lload_2)) 
                                      (14 (ldiv)) 
                                      (15 (lload_0)) 
                                      (16 (lcmp)) 
                                      (17 (ifeq 25))  ;;to TAG_0
                                      (20 (invokestatic (methodCP "throwIntOverflow" "clojure.lang.Numbers" () int))) 
                                      (23 (i2l)) 
                                      (24 (lreturn)) 
                                      (25 (lload 4)) ;;at TAG_0
                                      (27 (lreturn)) 
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiplyP"
                              (parameters long long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 38)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (lmul)) 
                                      (3 (lstore 4)) 
                                      (5 (lload_2)) 
                                      (6 (lconst_0)) 
                                      (7 (lcmp)) 
                                      (8 (ifeq 32))  ;;to TAG_0
                                      (11 (lload 4)) 
                                      (13 (lload_2)) 
                                      (14 (ldiv)) 
                                      (15 (lload_0)) 
                                      (16 (lcmp)) 
                                      (17 (ifeq 32))  ;;to TAG_0
                                      (20 (lload_0)) 
                                      (21 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (24 (lload_2)) 
                                      (25 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (28 (invokestatic (methodCP "multiplyP" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (31 (areturn)) 
                                      (32 (lload 4)) ;;at TAG_0
                                      (34 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (37 (areturn)) 
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap )))
                        (method "quotient"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lload_2))
                                      (2 (ldiv))
                                      (3 (lreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "remainder"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 4)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (lload_2))
                                      (2 (lrem))
                                      (3 (lreturn))
                                      (endofcode 4))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters long long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (lcmp)) 
                                      (3 (ifne 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters long long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (lcmp)) 
                                      (3 (ifge 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lte"
                              (parameters long long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (lcmp)) 
                                      (3 (ifgt 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gt"
                              (parameters long long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (lcmp)) 
                                      (3 (ifle 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gte"
                              (parameters long long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (lcmp)) 
                                      (3 (iflt 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isPos"
                              (parameters long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lconst_0)) 
                                      (2 (lcmp)) 
                                      (3 (ifle 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isNeg"
                              (parameters long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lconst_0)) 
                                      (2 (lcmp)) 
                                      (3 (ifge 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isZero"
                              (parameters long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 2) (code_length . 12)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lconst_0)) 
                                      (2 (lcmp)) 
                                      (3 (ifne 10))  ;;to TAG_0
                                      (6 (iconst_1)) 
                                      (7 (goto 11)) ;;to TAG_1
                                      (10 (iconst_0)) ;;at TAG_0
                                      (11 (ireturn)) ;;at TAG_1
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addP"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "addP" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addP"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "addP" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters double (class "java.lang.Object"))
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (aload_2))
                                      (2 (checkcast (class "java.lang.Number")))
                                      (5 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (8 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" (double double) double)))
                                      (11 (dreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters (class "java.lang.Object") double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (class "java.lang.Number")))
                                      (4 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (7 (dload_1))
                                      (8 (invokestatic
                    (methodCP "add" "clojure.lang.Numbers" (double double) double)))
                                      (11 (dreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters double long)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (lload_2))
                                      (2 (l2d))
                                      (3 (dadd))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "add"
                              (parameters long double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (l2d))
                                      (2 (dload_2))
                                      (3 (dadd))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addP"
                              (parameters double (class "java.lang.Object"))
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (aload_2))
                                      (2 (checkcast (class "java.lang.Number")))
                                      (5 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (8 (invokestatic
                    (methodCP "addP" "clojure.lang.Numbers" (double double) double)))
                                      (11 (dreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addP"
                              (parameters (class "java.lang.Object") double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (class "java.lang.Number")))
                                      (4 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (7 (dload_1))
                                      (8 (invokestatic
                    (methodCP "addP" "clojure.lang.Numbers" (double double) double)))
                                      (11 (dreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addP"
                              (parameters double long)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (lload_2))
                                      (2 (l2d))
                                      (3 (dadd))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "addP"
                              (parameters long double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (l2d))
                                      (2 (dload_2))
                                      (3 (dadd))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minus"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minus"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minusP"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "minusP" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minusP"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "minusP" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minus"
                              (parameters double (class "java.lang.Object"))
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (aload_2))
                                      (2 (checkcast (class "java.lang.Number")))
                                      (5 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (8 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" (double double) double)))
                                      (11 (dreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minus"
                              (parameters (class "java.lang.Object") double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (class "java.lang.Number")))
                                      (4 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (7 (dload_1))
                                      (8 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" (double double) double)))
                                      (11 (dreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minus"
                              (parameters double long)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (lload_2))
                                      (2 (l2d))
                                      (3 (dsub))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minus"
                              (parameters long double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (l2d))
                                      (2 (dload_2))
                                      (3 (dsub))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minusP"
                              (parameters double (class "java.lang.Object"))
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (aload_2))
                                      (2 (checkcast (class "java.lang.Number")))
                                      (5 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (8 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" (double double) double)))
                                      (11 (dreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minusP"
                              (parameters (class "java.lang.Object") double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (class "java.lang.Number")))
                                      (4 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (7 (dload_1))
                                      (8 (invokestatic
                    (methodCP "minus" "clojure.lang.Numbers" (double double) double)))
                                      (11 (dreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minusP"
                              (parameters double long)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (lload_2))
                                      (2 (l2d))
                                      (3 (dsub))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "minusP"
                              (parameters long double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (l2d))
                                      (2 (dload_2))
                                      (3 (dsub))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiplyP"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "multiplyP" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiplyP"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "multiplyP" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters double (class "java.lang.Object"))
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (aload_2))
                                      (2 (checkcast (class "java.lang.Number")))
                                      (5 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (8 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" (double double) double)))
                                      (11 (dreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters (class "java.lang.Object") double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (class "java.lang.Number")))
                                      (4 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (7 (dload_1))
                                      (8 (invokestatic
                    (methodCP "multiply" "clojure.lang.Numbers" (double double) double)))
                                      (11 (dreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters double long)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (lload_2))
                                      (2 (l2d))
                                      (3 (dmul))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiply"
                              (parameters long double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (l2d))
                                      (2 (dload_2))
                                      (3 (dmul))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiplyP"
                              (parameters double (class "java.lang.Object"))
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (aload_2))
                                      (2 (checkcast (class "java.lang.Number")))
                                      (5 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (8 (invokestatic
                    (methodCP "multiplyP" "clojure.lang.Numbers" (double double) double)))
                                      (11 (dreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiplyP"
                              (parameters (class "java.lang.Object") double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 12)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (class "java.lang.Number")))
                                      (4 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (7 (dload_1))
                                      (8 (invokestatic
                    (methodCP "multiplyP" "clojure.lang.Numbers" (double double) double)))
                                      (11 (dreturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiplyP"
                              (parameters double long)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (lload_2))
                                      (2 (l2d))
                                      (3 (dmul))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "multiplyP"
                              (parameters long double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (l2d))
                                      (2 (dload_2))
                                      (3 (dmul))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "divide" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "divide" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (8 (areturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters double (class "java.lang.Object"))
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 10)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (aload_2))
                                      (2 (checkcast (class "java.lang.Number")))
                                      (5 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (8 (ddiv))
                                      (9 (dreturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters (class "java.lang.Object") double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (checkcast (class "java.lang.Number")))
                                      (4 (invokevirtual
                    (methodCP "doubleValue" "java.lang.Number" () double)))
                                      (7 (dload_1))
                                      (8 (ddiv))
                                      (9 (dreturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters double long)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (lload_2))
                                      (2 (l2d))
                                      (3 (ddiv))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters long double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 5)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (l2d))
                                      (2 (dload_2))
                                      (3 (ddiv))
                                      (4 (dreturn))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "divide"
                              (parameters long long)
                              (returntype . (class "java.lang.Number"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 4) (code_length . 12)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (lload_2))
                                      (5 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (8 (invokestatic
                    (methodCP "divide" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number"))))
                                      (11 (areturn))
                                      (endofcode 12))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters long (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "lt" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters (class "java.lang.Object") long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "lt" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters double (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (aload_2)) 
                                      (2 (checkcast (class "java.lang.Number"))) 
                                      (5 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (8 (dcmpg)) 
                                      (9 (ifge 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters (class "java.lang.Object") double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (checkcast (class "java.lang.Number"))) 
                                      (4 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (7 (dload_1)) 
                                      (8 (dcmpg)) 
                                      (9 (ifge 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters double long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (lload_2)) 
                                      (2 (l2d)) 
                                      (3 (dcmpg)) 
                                      (4 (ifge 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lt"
                              (parameters long double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (l2d)) 
                                      (2 (dload_2)) 
                                      (3 (dcmpg)) 
                                      (4 (ifge 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lte"
                              (parameters long (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "lte" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lte"
                              (parameters (class "java.lang.Object") long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "lte" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lte"
                              (parameters double (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (aload_2)) 
                                      (2 (checkcast (class "java.lang.Number"))) 
                                      (5 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (8 (dcmpg)) 
                                      (9 (ifgt 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lte"
                              (parameters (class "java.lang.Object") double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (checkcast (class "java.lang.Number"))) 
                                      (4 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (7 (dload_1)) 
                                      (8 (dcmpg)) 
                                      (9 (ifgt 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lte"
                              (parameters double long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (lload_2)) 
                                      (2 (l2d)) 
                                      (3 (dcmpg)) 
                                      (4 (ifgt 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "lte"
                              (parameters long double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (l2d)) 
                                      (2 (dload_2)) 
                                      (3 (dcmpg)) 
                                      (4 (ifgt 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gt"
                              (parameters long (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "gt" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gt"
                              (parameters (class "java.lang.Object") long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "gt" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gt"
                              (parameters double (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (aload_2)) 
                                      (2 (checkcast (class "java.lang.Number"))) 
                                      (5 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (8 (dcmpl)) 
                                      (9 (ifle 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gt"
                              (parameters (class "java.lang.Object") double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (checkcast (class "java.lang.Number"))) 
                                      (4 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (7 (dload_1)) 
                                      (8 (dcmpl)) 
                                      (9 (ifle 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gt"
                              (parameters double long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (lload_2)) 
                                      (2 (l2d)) 
                                      (3 (dcmpl)) 
                                      (4 (ifle 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gt"
                              (parameters long double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (l2d)) 
                                      (2 (dload_2)) 
                                      (3 (dcmpl)) 
                                      (4 (ifle 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gte"
                              (parameters long (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "gte" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gte"
                              (parameters (class "java.lang.Object") long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "gte" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gte"
                              (parameters double (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (aload_2)) 
                                      (2 (checkcast (class "java.lang.Number"))) 
                                      (5 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (8 (dcmpl)) 
                                      (9 (iflt 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gte"
                              (parameters (class "java.lang.Object") double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (checkcast (class "java.lang.Number"))) 
                                      (4 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (7 (dload_1)) 
                                      (8 (dcmpl)) 
                                      (9 (iflt 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gte"
                              (parameters double long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (lload_2)) 
                                      (2 (l2d)) 
                                      (3 (dcmpl)) 
                                      (4 (iflt 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "gte"
                              (parameters long double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (l2d)) 
                                      (2 (dload_2)) 
                                      (3 (dcmpl)) 
                                      (4 (iflt 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters long (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (lload_0))
                                      (1 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (4 (aload_2))
                                      (5 (invokestatic
                    (methodCP "equiv" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Object") long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 9)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (lload_1))
                                      (2 (invokestatic
                    (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (5 (invokestatic
                    (methodCP "equiv" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean)))
                                      (8 (ireturn))
                                      (endofcode 9))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters double (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (aload_2)) 
                                      (2 (checkcast (class "java.lang.Number"))) 
                                      (5 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (8 (dcmpl)) 
                                      (9 (ifne 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters (class "java.lang.Object") double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 18)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (checkcast (class "java.lang.Number"))) 
                                      (4 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (7 (dload_1)) 
                                      (8 (dcmpl)) 
                                      (9 (ifne 16))  ;;to TAG_0
                                      (12 (iconst_1)) 
                                      (13 (goto 17)) ;;to TAG_1
                                      (16 (iconst_0)) ;;at TAG_0
                                      (17 (ireturn)) ;;at TAG_1
                                      (endofcode 18))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters double long)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (lload_2)) 
                                      (2 (l2d)) 
                                      (3 (dcmpl)) 
                                      (4 (ifne 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "equiv"
                              (parameters long double)
                              (returntype . boolean)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 13)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (l2d)) 
                                      (2 (dload_2)) 
                                      (3 (dcmpl)) 
                                      (4 (ifne 11))  ;;to TAG_0
                                      (7 (iconst_1)) 
                                      (8 (goto 12)) ;;to TAG_1
                                      (11 (iconst_0)) ;;at TAG_0
                                      (12 (ireturn)) ;;at TAG_1
                                      (endofcode 13))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isNaN"
                              (parameters (class "java.lang.Object"))
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 40)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (instanceof (class "java.lang.Double"))) 
                                      (4 (ifeq 17)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (checkcast (class "java.lang.Double"))) 
                                      (11 (invokevirtual (methodCP "isNaN" "java.lang.Double" () boolean))) 
                                      (14 (ifne 34)) ;;to TAG_1
                                      (17 (aload_0)) ;;at TAG_0
                                      (18 (instanceof (class "java.lang.Float"))) 
                                      (21 (ifeq 38))  ;;to TAG_2
                                      (24 (aload_0)) 
                                      (25 (checkcast (class "java.lang.Float"))) 
                                      (28 (invokevirtual (methodCP "isNaN" "java.lang.Float" () boolean))) 
                                      (31 (ifeq 38))  ;;to TAG_2
                                      (34 (iconst_1)) ;;at TAG_1
                                      (35 (goto 39)) ;;to TAG_3
                                      (38 (iconst_0)) ;;at TAG_2
                                      (39 (ireturn)) ;;at TAG_3
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "max"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 6)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dload_2))
                                      (2 (invokestatic
                    (methodCP "max" "java.lang.Math" (double double) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "max"
                              (parameters double long)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 29)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (invokestatic (methodCP "isNaN" "java.lang.Double" (double) boolean))) 
                                      (4 (ifeq 12))  ;;to TAG_0
                                      (7 (dload_0)) 
                                      (8 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (11 (areturn)) 
                                      (12 (dload_0)) ;;at TAG_0
                                      (13 (lload_2)) 
                                      (14 (l2d)) 
                                      (15 (dcmpl)) 
                                      (16 (ifle 24)) ;;to TAG_1
                                      (19 (dload_0)) 
                                      (20 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (23 (areturn)) 
                                      (24 (lload_2)) ;;at TAG_1
                                      (25 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (28 (areturn)) 
                                      (endofcode 29))
                                   (Exceptions )
                                   (StackMap )))
                        (method "max"
                              (parameters double (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 40)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (invokestatic (methodCP "isNaN" "java.lang.Double" (double) boolean))) 
                                      (4 (ifeq 12)) ;;to TAG_0
                                      (7 (dload_0)) 
                                      (8 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (11 (areturn)) 
                                      (12 (aload_2)) ;;at TAG_0
                                      (13 (invokestatic (methodCP "isNaN" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (16 (ifeq 21)) ;;to TAG_1
                                      (19 (aload_2)) 
                                      (20 (areturn)) 
                                      (21 (dload_0)) ;;at TAG_1
                                      (22 (aload_2)) 
                                      (23 (checkcast (class "java.lang.Number"))) 
                                      (26 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (29 (dcmpl)) 
                                      (30 (ifle 38))  ;;to TAG_2
                                      (33 (dload_0)) 
                                      (34 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (37 (areturn)) 
                                      (38 (aload_2)) ;;at TAG_2
                                      (39 (areturn)) 
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "max"
                              (parameters long double)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 29)
                                   (parsedcode
                                      (0 (dload_2)) 
                                      (1 (invokestatic (methodCP "isNaN" "java.lang.Double" (double) boolean))) 
                                      (4 (ifeq 12))  ;;to TAG_0
                                      (7 (dload_2)) 
                                      (8 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (11 (areturn)) 
                                      (12 (lload_0)) ;;at TAG_0
                                      (13 (l2d)) 
                                      (14 (dload_2)) 
                                      (15 (dcmpl)) 
                                      (16 (ifle 24)) ;;to TAG_1
                                      (19 (lload_0)) 
                                      (20 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (23 (areturn)) 
                                      (24 (dload_2)) ;;at TAG_1
                                      (25 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (28 (areturn)) 
                                      (endofcode 29))
                                   (Exceptions )
                                   (StackMap )))
                        (method "max"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 10)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (lcmp)) 
                                      (3 (ifle 8))  ;;to TAG_0
                                      (6 (lload_0)) 
                                      (7 (lreturn)) 
                                      (8 (lload_2)) ;;at TAG_0
                                      (9 (lreturn)) 
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "max"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 24)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (invokestatic (methodCP "isNaN" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 9))  ;;to TAG_0
                                      (7 (aload_2)) 
                                      (8 (areturn)) 
                                      (9 (lload_0)) ;;at TAG_0
                                      (10 (aload_2)) 
                                      (11 (invokestatic (methodCP "gt" "clojure.lang.Numbers" (long (class "java.lang.Object")) boolean))) 
                                      (14 (ifeq 22)) ;;to TAG_1
                                      (17 (lload_0)) 
                                      (18 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (21 (areturn)) 
                                      (22 (aload_2)) ;;at TAG_1
                                      (23 (areturn)) 
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap )))
                        (method "max"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 24)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "isNaN" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 9))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (areturn)) 
                                      (9 (aload_0)) ;;at TAG_0
                                      (10 (lload_1)) 
                                      (11 (invokestatic (methodCP "gt" "clojure.lang.Numbers" ((class "java.lang.Object") long) boolean))) 
                                      (14 (ifeq 19)) ;;to TAG_1
                                      (17 (aload_0)) 
                                      (18 (areturn)) 
                                      (19 (lload_1)) ;;at TAG_1
                                      (20 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (23 (areturn)) 
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap )))
                        (method "max"
                              (parameters (class "java.lang.Object") double)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 40)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "isNaN" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 9)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (areturn)) 
                                      (9 (dload_1)) ;;at TAG_0
                                      (10 (invokestatic (methodCP "isNaN" "java.lang.Double" (double) boolean))) 
                                      (13 (ifeq 21)) ;;to TAG_1
                                      (16 (dload_1)) 
                                      (17 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (20 (areturn)) 
                                      (21 (aload_0)) ;;at TAG_1
                                      (22 (checkcast (class "java.lang.Number"))) 
                                      (25 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (28 (dload_1)) 
                                      (29 (dcmpl)) 
                                      (30 (ifle 35))  ;;to TAG_2
                                      (33 (aload_0)) 
                                      (34 (areturn)) 
                                      (35 (dload_1)) ;;at TAG_2
                                      (36 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (39 (areturn)) 
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "max"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 30)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "isNaN" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 9)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (areturn)) 
                                      (9 (aload_1)) ;;at TAG_0
                                      (10 (invokestatic (methodCP "isNaN" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (13 (ifeq 18)) ;;to TAG_1
                                      (16 (aload_1)) 
                                      (17 (areturn)) 
                                      (18 (aload_0)) ;;at TAG_1
                                      (19 (aload_1)) 
                                      (20 (invokestatic (methodCP "gt" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (23 (ifeq 28))  ;;to TAG_2
                                      (26 (aload_0)) 
                                      (27 (areturn)) 
                                      (28 (aload_1)) ;;at TAG_2
                                      (29 (areturn)) 
                                      (endofcode 30))
                                   (Exceptions )
                                   (StackMap )))
                        (method "min"
                              (parameters double double)
                              (returntype . double)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 6)
                                   (parsedcode
                                      (0 (dload_0))
                                      (1 (dload_2))
                                      (2 (invokestatic
                    (methodCP "min" "java.lang.Math" (double double) double)))
                                      (5 (dreturn))
                                      (endofcode 6))
                                   (Exceptions )
                                   (StackMap )))
                        (method "min"
                              (parameters double long)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 29)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (invokestatic (methodCP "isNaN" "java.lang.Double" (double) boolean))) 
                                      (4 (ifeq 12))  ;;to TAG_0
                                      (7 (dload_0)) 
                                      (8 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (11 (areturn)) 
                                      (12 (dload_0)) ;;at TAG_0
                                      (13 (lload_2)) 
                                      (14 (l2d)) 
                                      (15 (dcmpg)) 
                                      (16 (ifge 24)) ;;to TAG_1
                                      (19 (dload_0)) 
                                      (20 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (23 (areturn)) 
                                      (24 (lload_2)) ;;at TAG_1
                                      (25 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (28 (areturn)) 
                                      (endofcode 29))
                                   (Exceptions )
                                   (StackMap )))
                        (method "min"
                              (parameters double (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 40)
                                   (parsedcode
                                      (0 (dload_0)) 
                                      (1 (invokestatic (methodCP "isNaN" "java.lang.Double" (double) boolean))) 
                                      (4 (ifeq 12)) ;;to TAG_0
                                      (7 (dload_0)) 
                                      (8 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (11 (areturn)) 
                                      (12 (aload_2)) ;;at TAG_0
                                      (13 (invokestatic (methodCP "isNaN" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (16 (ifeq 21)) ;;to TAG_1
                                      (19 (aload_2)) 
                                      (20 (areturn)) 
                                      (21 (dload_0)) ;;at TAG_1
                                      (22 (aload_2)) 
                                      (23 (checkcast (class "java.lang.Number"))) 
                                      (26 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (29 (dcmpg)) 
                                      (30 (ifge 38))  ;;to TAG_2
                                      (33 (dload_0)) 
                                      (34 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (37 (areturn)) 
                                      (38 (aload_2)) ;;at TAG_2
                                      (39 (areturn)) 
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "min"
                              (parameters long double)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 29)
                                   (parsedcode
                                      (0 (dload_2)) 
                                      (1 (invokestatic (methodCP "isNaN" "java.lang.Double" (double) boolean))) 
                                      (4 (ifeq 12))  ;;to TAG_0
                                      (7 (dload_2)) 
                                      (8 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (11 (areturn)) 
                                      (12 (lload_0)) ;;at TAG_0
                                      (13 (l2d)) 
                                      (14 (dload_2)) 
                                      (15 (dcmpg)) 
                                      (16 (ifge 24)) ;;to TAG_1
                                      (19 (lload_0)) 
                                      (20 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (23 (areturn)) 
                                      (24 (dload_2)) ;;at TAG_1
                                      (25 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (28 (areturn)) 
                                      (endofcode 29))
                                   (Exceptions )
                                   (StackMap )))
                        (method "min"
                              (parameters long long)
                              (returntype . long)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 10)
                                   (parsedcode
                                      (0 (lload_0)) 
                                      (1 (lload_2)) 
                                      (2 (lcmp)) 
                                      (3 (ifge 8))  ;;to TAG_0
                                      (6 (lload_0)) 
                                      (7 (lreturn)) 
                                      (8 (lload_2)) ;;at TAG_0
                                      (9 (lreturn)) 
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "min"
                              (parameters long (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 24)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (invokestatic (methodCP "isNaN" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 9))  ;;to TAG_0
                                      (7 (aload_2)) 
                                      (8 (areturn)) 
                                      (9 (lload_0)) ;;at TAG_0
                                      (10 (aload_2)) 
                                      (11 (invokestatic (methodCP "lt" "clojure.lang.Numbers" (long (class "java.lang.Object")) boolean))) 
                                      (14 (ifeq 22)) ;;to TAG_1
                                      (17 (lload_0)) 
                                      (18 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (21 (areturn)) 
                                      (22 (aload_2)) ;;at TAG_1
                                      (23 (areturn)) 
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap )))
                        (method "min"
                              (parameters (class "java.lang.Object") long)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 24)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "isNaN" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 9))  ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (areturn)) 
                                      (9 (aload_0)) ;;at TAG_0
                                      (10 (lload_1)) 
                                      (11 (invokestatic (methodCP "lt" "clojure.lang.Numbers" ((class "java.lang.Object") long) boolean))) 
                                      (14 (ifeq 19)) ;;to TAG_1
                                      (17 (aload_0)) 
                                      (18 (areturn)) 
                                      (19 (lload_1)) ;;at TAG_1
                                      (20 (invokestatic (methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long")))) 
                                      (23 (areturn)) 
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap )))
                        (method "min"
                              (parameters (class "java.lang.Object") double)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 40)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "isNaN" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 9)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (areturn)) 
                                      (9 (dload_1)) ;;at TAG_0
                                      (10 (invokestatic (methodCP "isNaN" "java.lang.Double" (double) boolean))) 
                                      (13 (ifeq 21)) ;;to TAG_1
                                      (16 (dload_1)) 
                                      (17 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (20 (areturn)) 
                                      (21 (aload_0)) ;;at TAG_1
                                      (22 (checkcast (class "java.lang.Number"))) 
                                      (25 (invokevirtual (methodCP "doubleValue" "java.lang.Number" () double))) 
                                      (28 (dload_1)) 
                                      (29 (dcmpg)) 
                                      (30 (ifge 35))  ;;to TAG_2
                                      (33 (aload_0)) 
                                      (34 (areturn)) 
                                      (35 (dload_1)) ;;at TAG_2
                                      (36 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (39 (areturn)) 
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "min"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 30)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokestatic (methodCP "isNaN" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 9)) ;;to TAG_0
                                      (7 (aload_0)) 
                                      (8 (areturn)) 
                                      (9 (aload_1)) ;;at TAG_0
                                      (10 (invokestatic (methodCP "isNaN" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (13 (ifeq 18)) ;;to TAG_1
                                      (16 (aload_1)) 
                                      (17 (areturn)) 
                                      (18 (aload_0)) ;;at TAG_1
                                      (19 (aload_1)) 
                                      (20 (invokestatic (methodCP "lt" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (23 (ifeq 28))  ;;to TAG_2
                                      (26 (aload_0)) 
                                      (27 (areturn)) 
                                      (28 (aload_1)) ;;at TAG_2
                                      (29 (areturn)) 
                                      (endofcode 30))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 51)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.Numbers$LongOps")))
                                      (3 (dup))
                                      (4 (invokespecial
                    (methodCP "<init>" "clojure.lang.Numbers$LongOps" () void)))
                                      (7 (putstatic (fieldCP "LONG_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$LongOps"))))
                                      (10 (new (class "clojure.lang.Numbers$DoubleOps")))
                                      (13 (dup))
                                      (14 (invokespecial
                    (methodCP "<init>" "clojure.lang.Numbers$DoubleOps" () void)))
                                      (17 (putstatic (fieldCP "DOUBLE_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$DoubleOps"))))
                                      (20 (new (class "clojure.lang.Numbers$RatioOps")))
                                      (23 (dup))
                                      (24 (invokespecial
                    (methodCP "<init>" "clojure.lang.Numbers$RatioOps" () void)))
                                      (27 (putstatic (fieldCP "RATIO_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$RatioOps"))))
                                      (30 (new (class "clojure.lang.Numbers$BigIntOps")))
                                      (33 (dup))
                                      (34 (invokespecial
                    (methodCP "<init>" "clojure.lang.Numbers$BigIntOps" () void)))
                                      (37 (putstatic (fieldCP "BIGINT_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigIntOps"))))
                                      (40 (new (class "clojure.lang.Numbers$BigDecimalOps")))
                                      (43 (dup))
                                      (44 (invokespecial
                    (methodCP "<init>" "clojure.lang.Numbers$BigDecimalOps" () void)))
                                      (47 (putstatic (fieldCP "BIGDECIMAL_OPS" "clojure.lang.Numbers" (class "clojure.lang.Numbers$BigDecimalOps"))))
                                      (50 (return))
                                      (endofcode 51))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))#|ACL2s-ToDo-Line|#



;(defconst *Numbers-class-table*
;  (make-static-class-decls 
;   *clojure.lang.Numbers*))

;(defconst *package-name-map* 
;  ("clojure.lang.Numbers" . "clojure.lang"))

