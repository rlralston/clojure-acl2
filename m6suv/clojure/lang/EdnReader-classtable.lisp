; EdnReader-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:51 CDT 2014.
;

(defconst *clojure.lang.EdnReader*
 (make-class-def
      '(class "clojure.lang.EdnReader"
            "java.lang.Object"
            (constant_pool
                        (STRING  "EOF while reading")
                        (STRING  "Invalid leading character: ")
                        (STRING  "Invalid constituent character: ")
                        (STRING  "Invalid number: ")
                        (STRING  "Invalid unicode character: \\")
                        (STRING  "Invalid digit: ")
                        (STRING  "Invalid character length: ")
                        (STRING  ", should be: ")
                        (STRING  "nil")
                        (STRING  "true")
                        (STRING  "false")
                        (STRING  "/")
                        (STRING  "Invalid token: ")
                        (STRING  ":/")
                        (STRING  ":")
                        (STRING  "::")
                        (STRING  "-")
                        (STRING  "+")
                        (STRING  "EOF while reading, starting at line ")
                        (STRING  "[:]?([\\D&&[^/]].*/)?([\\D&&[^/]][^/]*)")
                        (STRING  "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?")
                        (STRING  "([-+]?[0-9]+)/([0-9]+)")
                        (STRING  "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?")
                        (STRING  "eof"))
            (fields
                        (field "macros" (array (class "clojure.lang.IFn")) (accessflags  *class*  *static* ) -1)
                        (field "dispatchMacros" (array (class "clojure.lang.IFn")) (accessflags  *class*  *static* ) -1)
                        (field "symbolPat" (class "java.util.regex.Pattern") (accessflags  *class*  *static* ) -1)
                        (field "intPat" (class "java.util.regex.Pattern") (accessflags  *class*  *static* ) -1)
                        (field "ratioPat" (class "java.util.regex.Pattern") (accessflags  *class*  *static* ) -1)
                        (field "floatPat" (class "java.util.regex.Pattern") (accessflags  *class*  *static* ) -1)
                        (field "SLASH" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *static* ) -1)
                        (field "taggedReader" (class "clojure.lang.IFn") (accessflags  *class*  *static* ) -1)
                        (field "EOF" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "nonConstituent"
                              (parameters int)
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 24)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (bipush 64)) 
                                      (3 (if_icmpeq 18)) ;;to TAG_0
                                      (6 (iload_0)) 
                                      (7 (bipush 96)) 
                                      (9 (if_icmpeq 18)) ;;to TAG_0
                                      (12 (iload_0)) 
                                      (13 (bipush 126)) 
                                      (15 (if_icmpne 22)) ;;to TAG_1
                                      (18 (iconst_1)) ;;at TAG_0
                                      (19 (goto 23))  ;;to TAG_2
                                      (22 (iconst_0)) ;;at TAG_1
                                      (23 (ireturn)) ;;at TAG_2
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap )))
                        (method "readString"
                              (parameters (class "java.lang.String") (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 4) (code_length . 28)
                                   (parsedcode
                                      (0 (new (class "java.io.PushbackReader"))) 
                                      (3 (dup)) 
                                      (4 (new (class "java.io.StringReader"))) 
                                      (7 (dup)) 
                                      (8 (aload_0)) 
                                      (9 (invokespecial (methodCP "<init>" "java.io.StringReader" ((class "java.lang.String")) void))) 
                                      (12 (invokespecial (methodCP "<init>" "java.io.PushbackReader" ((class "java.io.Reader")) void))) 
                                      (15 (astore_2)) 
                                      (16 (aload_2)) ;;at TAG_0
                                      (17 (aload_1)) 
                                      (18 (invokestatic (methodCP "read" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") (class "clojure.lang.IPersistentMap")) (class "java.lang.Object")))) 
                                      (21 (areturn)) ;;at TAG_1
                                      (22 (astore_3)) ;;at TAG_2
                                      (23 (aload_3)) 
                                      (24 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (27 (athrow)) 
                                      (endofcode 28))
                                   (Exceptions 
                                     (handler 16 21  22 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "isWhitespace"
                              (parameters int)
                              (returntype . boolean)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 19)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (invokestatic (methodCP "isWhitespace" "java.lang.Character" (int) boolean))) 
                                      (4 (ifne 13)) ;;to TAG_0
                                      (7 (iload_0)) 
                                      (8 (bipush 44)) 
                                      (10 (if_icmpne 17)) ;;to TAG_1
                                      (13 (iconst_1)) ;;at TAG_0
                                      (14 (goto 18))  ;;to TAG_2
                                      (17 (iconst_0)) ;;at TAG_1
                                      (18 (ireturn)) ;;at TAG_2
                                      (endofcode 19))
                                   (Exceptions )
                                   (StackMap )))
                        (method "unread"
                              (parameters (class "java.io.PushbackReader") int)
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 20)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (iconst_m1)) 
                                      (2 (if_icmpeq 19)) ;;to TAG_0
                                      (5 (aload_0)) ;;at TAG_1
                                      (6 (iload_1)) 
                                      (7 (invokevirtual (methodCP "unread" "java.io.PushbackReader" (int) void))) 
                                      (10 (goto 19)) ;;to TAG_0;;at TAG_2
                                      (13 (astore_2)) ;;at TAG_3
                                      (14 (aload_2)) 
                                      (15 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (18 (athrow)) 
                                      (19 (return)) ;;at TAG_0
                                      (endofcode 20))
                                   (Exceptions 
                                     (handler 5 10  13 (class "java.io.IOException")))
                                   (StackMap )))
                        (method "read1"
                              (parameters (class "java.io.Reader"))
                              (returntype . int)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 2) (code_length . 11)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_0
                                      (1 (invokevirtual (methodCP "read" "java.io.Reader" () int))) 
                                      (4 (ireturn)) ;;at TAG_1
                                      (5 (astore_1)) ;;at TAG_2
                                      (6 (aload_1)) 
                                      (7 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (10 (athrow)) 
                                      (endofcode 11))
                                   (Exceptions 
                                     (handler 0 4  5 (class "java.io.IOException")))
                                   (StackMap )))
                        (method "read"
                              (parameters (class "java.io.PushbackReader") (class "clojure.lang.IPersistentMap"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 2) (code_length . 33)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (aload_1)) 
                                      (2 (getstatic (fieldCP "EOF" "clojure.lang.EdnReader" (class "clojure.lang.Keyword")))) 
                                      (5 (invokeinterface (methodCP "containsKey" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) boolean) 2)) 
                                      (10 (ifne 17))  ;;to TAG_0
                                      (13 (iconst_1)) 
                                      (14 (goto 18)) ;;to TAG_1
                                      (17 (iconst_0)) ;;at TAG_0
                                      (18 (aload_1)) ;;at TAG_1
                                      (19 (getstatic (fieldCP "EOF" "clojure.lang.EdnReader" (class "clojure.lang.Keyword")))) 
                                      (22 (invokeinterface (methodCP "valAt" "clojure.lang.IPersistentMap" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (27 (iconst_0)) 
                                      (28 (aload_1)) 
                                      (29 (invokestatic (methodCP "read" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (32 (areturn)) 
                                      (endofcode 33))
                                   (Exceptions )
                                   (StackMap )))
                        (method "read"
                              (parameters (class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 9) (code_length . 248)
                                   (parsedcode
                                      (0 (aload_0)) ;;at TAG_9
                                      (1 (invokestatic (methodCP "read1" "clojure.lang.EdnReader" ((class "java.io.Reader")) int))) 
                                      (4 (istore 5)) 
                                      (6 (iload 5)) ;;at TAG_1
                                      (8 (invokestatic (methodCP "isWhitespace" "clojure.lang.EdnReader" (int) boolean))) 
                                      (11 (ifeq 23)) ;;to TAG_0
                                      (14 (aload_0)) 
                                      (15 (invokestatic (methodCP "read1" "clojure.lang.EdnReader" ((class "java.io.Reader")) int))) 
                                      (18 (istore 5)) 
                                      (20 (goto 6)) ;;to TAG_1
                                      (23 (iload 5)) ;;at TAG_0
                                      (25 (iconst_m1)) 
                                      (26 (if_icmpne 41)) ;;to TAG_2
                                      (29 (iload_1)) 
                                      (30 (ifeq 39)) ;;to TAG_3
                                      (33 (ldc 0)) ;;STRING:: "EOF while reading"
                                      (35 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (38 (athrow)) 
                                      (39 (aload_2)) ;;at TAG_3
                                      (40 (areturn)) ;;at TAG_17
                                      (41 (iload 5)) ;;at TAG_2
                                      (43 (invokestatic (methodCP "isDigit" "java.lang.Character" (int) boolean))) 
                                      (46 (ifeq 69)) ;;to TAG_4
                                      (49 (aload_0)) 
                                      (50 (iload 5)) 
                                      (52 (i2c)) 
                                      (53 (invokestatic (methodCP "readNumber" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") char) (class "java.lang.Object")))) 
                                      (56 (astore 6)) 
                                      (58 (invokestatic (methodCP "suppressRead" "clojure.lang.RT" () boolean))) 
                                      (61 (ifeq 66))  ;;to TAG_5
                                      (64 (aconst_null)) 
                                      (65 (areturn)) ;;at TAG_19
                                      (66 (aload 6)) ;;at TAG_5
                                      (68 (areturn)) ;;at TAG_20
                                      (69 (iload 5)) ;;at TAG_4
                                      (71 (invokestatic (methodCP "getMacro" "clojure.lang.EdnReader" (int) (class "clojure.lang.IFn")))) 
                                      (74 (astore 6)) 
                                      (76 (aload 6)) 
                                      (78 (ifnull 119)) ;;to TAG_6
                                      (81 (aload 6)) 
                                      (83 (aload_0)) 
                                      (84 (iload 5)) 
                                      (86 (i2c)) 
                                      (87 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (90 (aload 4)) 
                                      (92 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (97 (astore 7)) 
                                      (99 (invokestatic (methodCP "suppressRead" "clojure.lang.RT" () boolean))) 
                                      (102 (ifeq 107)) ;;to TAG_7
                                      (105 (aconst_null)) 
                                      (106 (areturn)) ;;at TAG_21
                                      (107 (aload 7)) ;;at TAG_7
                                      (109 (aload_0)) 
                                      (110 (if_acmpne 116)) ;;to TAG_8
                                      (113 (goto 0)) ;;to TAG_9
                                      (116 (aload 7)) ;;at TAG_8
                                      (118 (areturn)) ;;at TAG_22
                                      (119 (iload 5)) ;;at TAG_6
                                      (121 (bipush 43)) 
                                      (123 (if_icmpeq 133)) ;;to TAG_10
                                      (126 (iload 5)) 
                                      (128 (bipush 45)) 
                                      (130 (if_icmpne 179)) ;;to TAG_11
                                      (133 (aload_0)) ;;at TAG_10
                                      (134 (invokestatic (methodCP "read1" "clojure.lang.EdnReader" ((class "java.io.Reader")) int))) 
                                      (137 (istore 7)) 
                                      (139 (iload 7)) 
                                      (141 (invokestatic (methodCP "isDigit" "java.lang.Character" (int) boolean))) 
                                      (144 (ifeq 173)) ;;to TAG_12
                                      (147 (aload_0)) 
                                      (148 (iload 7)) 
                                      (150 (invokestatic (methodCP "unread" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") int) void))) 
                                      (153 (aload_0)) 
                                      (154 (iload 5)) 
                                      (156 (i2c)) 
                                      (157 (invokestatic (methodCP "readNumber" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") char) (class "java.lang.Object")))) 
                                      (160 (astore 8)) 
                                      (162 (invokestatic (methodCP "suppressRead" "clojure.lang.RT" () boolean))) 
                                      (165 (ifeq 170)) ;;to TAG_13
                                      (168 (aconst_null)) 
                                      (169 (areturn)) ;;at TAG_23
                                      (170 (aload 8)) ;;at TAG_13
                                      (172 (areturn)) ;;at TAG_24
                                      (173 (aload_0)) ;;at TAG_12
                                      (174 (iload 7)) 
                                      (176 (invokestatic (methodCP "unread" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") int) void))) 
                                      (179 (aload_0)) ;;at TAG_11
                                      (180 (iload 5)) 
                                      (182 (i2c)) 
                                      (183 (iconst_1)) 
                                      (184 (invokestatic (methodCP "readToken" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") char boolean) (class "java.lang.String")))) 
                                      (187 (astore 7)) 
                                      (189 (invokestatic (methodCP "suppressRead" "clojure.lang.RT" () boolean))) 
                                      (192 (ifeq 197)) ;;to TAG_14
                                      (195 (aconst_null)) 
                                      (196 (areturn)) ;;at TAG_25
                                      (197 (aload 7)) ;;at TAG_14
                                      (199 (invokestatic (methodCP "interpretToken" "clojure.lang.EdnReader" ((class "java.lang.String")) (class "java.lang.Object")))) 
                                      (202 (areturn)) ;;at TAG_26
                                      (203 (astore 5)) ;;at TAG_18
                                      (205 (iload_3)) 
                                      (206 (ifne 216)) ;;to TAG_15
                                      (209 (aload_0)) 
                                      (210 (instanceof (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (213 (ifne 222)) ;;to TAG_16
                                      (216 (aload 5)) ;;at TAG_15
                                      (218 (invokestatic (methodCP "sneakyThrow" "clojure.lang.Util" ((class "java.lang.Throwable")) (class "java.lang.RuntimeException")))) 
                                      (221 (athrow)) 
                                      (222 (aload_0)) ;;at TAG_16
                                      (223 (checkcast (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (226 (astore 6)) 
                                      (228 (new (class "clojure.lang.EdnReader$ReaderException"))) 
                                      (231 (dup)) 
                                      (232 (aload 6)) 
                                      (234 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (237 (aload 6)) 
                                      (239 (invokevirtual (methodCP "getColumnNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (242 (aload 5)) 
                                      (244 (invokespecial (methodCP "<init>" "clojure.lang.EdnReader$ReaderException" (int int (class "java.lang.Throwable")) void))) 
                                      (247 (athrow)) 
                                      (endofcode 248))
                                   (Exceptions 
                                     (handler 0 40  203 (class "java.lang.Exception"))
                                     (handler 41 65  203 (class "java.lang.Exception"))
                                     (handler 66 68  203 (class "java.lang.Exception"))
                                     (handler 69 106  203 (class "java.lang.Exception"))
                                     (handler 107 118  203 (class "java.lang.Exception"))
                                     (handler 119 169  203 (class "java.lang.Exception"))
                                     (handler 170 172  203 (class "java.lang.Exception"))
                                     (handler 173 196  203 (class "java.lang.Exception"))
                                     (handler 197 202  203 (class "java.lang.Exception")))
                                   (StackMap )))
                        (method "readToken"
                              (parameters (class "java.io.PushbackReader") char boolean)
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 131)
                                   (parsedcode
                                      (0 (new (class "java.lang.StringBuilder"))) 
                                      (3 (dup)) 
                                      (4 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (7 (astore_3)) 
                                      (8 (iload_2)) 
                                      (9 (ifeq 42)) ;;to TAG_0
                                      (12 (iload_1)) 
                                      (13 (invokestatic (methodCP "nonConstituent" "clojure.lang.EdnReader" (int) boolean))) 
                                      (16 (ifeq 42)) ;;to TAG_0
                                      (19 (new (class "java.lang.StringBuilder"))) 
                                      (22 (dup)) 
                                      (23 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (26 (ldc 1)) ;;STRING:: "Invalid leading character: "
                                      (28 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (31 (iload_1)) 
                                      (32 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (35 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (38 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (41 (athrow)) 
                                      (42 (aload_3)) ;;at TAG_0
                                      (43 (iload_1)) 
                                      (44 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (47 (pop)) 
                                      (48 (aload_0)) ;;at TAG_4
                                      (49 (invokestatic (methodCP "read1" "clojure.lang.EdnReader" ((class "java.io.Reader")) int))) 
                                      (52 (istore 4)) 
                                      (54 (iload 4)) 
                                      (56 (iconst_m1)) 
                                      (57 (if_icmpeq 76)) ;;to TAG_1
                                      (60 (iload 4)) 
                                      (62 (invokestatic (methodCP "isWhitespace" "clojure.lang.EdnReader" (int) boolean))) 
                                      (65 (ifne 76)) ;;to TAG_1
                                      (68 (iload 4)) 
                                      (70 (invokestatic (methodCP "isTerminatingMacro" "clojure.lang.EdnReader" (int) boolean))) 
                                      (73 (ifeq 87))  ;;to TAG_2
                                      (76 (aload_0)) ;;at TAG_1
                                      (77 (iload 4)) 
                                      (79 (invokestatic (methodCP "unread" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") int) void))) 
                                      (82 (aload_3)) 
                                      (83 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (86 (areturn)) 
                                      (87 (iload 4)) ;;at TAG_2
                                      (89 (invokestatic (methodCP "nonConstituent" "clojure.lang.EdnReader" (int) boolean))) 
                                      (92 (ifeq 120)) ;;to TAG_3
                                      (95 (new (class "java.lang.StringBuilder"))) 
                                      (98 (dup)) 
                                      (99 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (102 (ldc 2)) ;;STRING:: "Invalid constituent character: "
                                      (104 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (107 (iload 4)) 
                                      (109 (i2c)) 
                                      (110 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (113 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (116 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (119 (athrow)) 
                                      (120 (aload_3)) ;;at TAG_3
                                      (121 (iload 4)) 
                                      (123 (i2c)) 
                                      (124 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (127 (pop)) 
                                      (128 (goto 48)) ;;to TAG_4
                                      (endofcode 131))
                                   (Exceptions )
                                   (StackMap )))
                        (method "readNumber"
                              (parameters (class "java.io.PushbackReader") char)
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 102)
                                   (parsedcode
                                      (0 (new (class "java.lang.StringBuilder"))) 
                                      (3 (dup)) 
                                      (4 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (7 (astore_2)) 
                                      (8 (aload_2)) 
                                      (9 (iload_1)) 
                                      (10 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (13 (pop)) 
                                      (14 (aload_0)) ;;at TAG_3
                                      (15 (invokestatic (methodCP "read1" "clojure.lang.EdnReader" ((class "java.io.Reader")) int))) 
                                      (18 (istore_3)) 
                                      (19 (iload_3)) 
                                      (20 (iconst_m1)) 
                                      (21 (if_icmpeq 38)) ;;to TAG_0
                                      (24 (iload_3)) 
                                      (25 (invokestatic (methodCP "isWhitespace" "clojure.lang.EdnReader" (int) boolean))) 
                                      (28 (ifne 38)) ;;to TAG_0
                                      (31 (iload_3)) 
                                      (32 (invokestatic (methodCP "isMacro" "clojure.lang.EdnReader" (int) boolean))) 
                                      (35 (ifeq 46)) ;;to TAG_1
                                      (38 (aload_0)) ;;at TAG_0
                                      (39 (iload_3)) 
                                      (40 (invokestatic (methodCP "unread" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") int) void))) 
                                      (43 (goto 56))  ;;to TAG_2
                                      (46 (aload_2)) ;;at TAG_1
                                      (47 (iload_3)) 
                                      (48 (i2c)) 
                                      (49 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (52 (pop)) 
                                      (53 (goto 14)) ;;to TAG_3
                                      (56 (aload_2)) ;;at TAG_2
                                      (57 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (60 (astore_3)) 
                                      (61 (aload_3)) 
                                      (62 (invokestatic (methodCP "matchNumber" "clojure.lang.EdnReader" ((class "java.lang.String")) (class "java.lang.Object")))) 
                                      (65 (astore 4)) 
                                      (67 (aload 4)) 
                                      (69 (ifnonnull 99)) ;;to TAG_4
                                      (72 (new (class "java.lang.NumberFormatException"))) 
                                      (75 (dup)) 
                                      (76 (new (class "java.lang.StringBuilder"))) 
                                      (79 (dup)) 
                                      (80 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (83 (ldc 3)) ;;STRING:: "Invalid number: "
                                      (85 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (88 (aload_3)) 
                                      (89 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (92 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (95 (invokespecial (methodCP "<init>" "java.lang.NumberFormatException" ((class "java.lang.String")) void))) 
                                      (98 (athrow)) 
                                      (99 (aload 4)) ;;at TAG_4
                                      (101 (areturn)) 
                                      (endofcode 102))
                                   (Exceptions )
                                   (StackMap )))
                        (method "readUnicodeChar"
                              (parameters (class "java.lang.String") int int int)
                              (returntype . int)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 7) (code_length . 120)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (invokevirtual (methodCP "length" "java.lang.String" () int))) 
                                      (4 (iload_1)) 
                                      (5 (iload_2)) 
                                      (6 (iadd)) 
                                      (7 (if_icmpeq 37)) ;;to TAG_0
                                      (10 (new (class "java.lang.IllegalArgumentException"))) 
                                      (13 (dup)) 
                                      (14 (new (class "java.lang.StringBuilder"))) 
                                      (17 (dup)) 
                                      (18 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (21 (ldc 4)) ;;STRING:: "Invalid unicode character: \\"
                                      (23 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (26 (aload_0)) 
                                      (27 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (30 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (33 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (36 (athrow)) 
                                      (37 (iconst_0)) ;;at TAG_0
                                      (38 (istore 4)) 
                                      (40 (iload_1)) 
                                      (41 (istore 5)) 
                                      (43 (iload 5)) ;;at TAG_3
                                      (45 (iload_1)) 
                                      (46 (iload_2)) 
                                      (47 (iadd)) 
                                      (48 (if_icmpge 116)) ;;to TAG_1
                                      (51 (aload_0)) 
                                      (52 (iload 5)) 
                                      (54 (invokevirtual (methodCP "charAt" "java.lang.String" (int) char))) 
                                      (57 (iload_3)) 
                                      (58 (invokestatic (methodCP "digit" "java.lang.Character" (char int) int))) 
                                      (61 (istore 6)) 
                                      (63 (iload 6)) 
                                      (65 (iconst_m1)) 
                                      (66 (if_icmpne 101))  ;;to TAG_2
                                      (69 (new (class "java.lang.IllegalArgumentException"))) 
                                      (72 (dup)) 
                                      (73 (new (class "java.lang.StringBuilder"))) 
                                      (76 (dup)) 
                                      (77 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (80 (ldc 5)) ;;STRING:: "Invalid digit: "
                                      (82 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (85 (aload_0)) 
                                      (86 (iload 5)) 
                                      (88 (invokevirtual (methodCP "charAt" "java.lang.String" (int) char))) 
                                      (91 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (94 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (97 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (100 (athrow)) 
                                      (101 (iload 4)) ;;at TAG_2
                                      (103 (iload_3)) 
                                      (104 (imul)) 
                                      (105 (iload 6)) 
                                      (107 (iadd)) 
                                      (108 (istore 4)) 
                                      (110 (iinc 5 1)) 
                                      (113 (goto 43)) ;;to TAG_3
                                      (116 (iload 4)) ;;at TAG_1
                                      (118 (i2c)) 
                                      (119 (ireturn)) 
                                      (endofcode 120))
                                   (Exceptions )
                                   (StackMap )))
                        (method "readUnicodeChar"
                              (parameters (class "java.io.PushbackReader") int int int boolean)
                              (returntype . int)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 9) (code_length . 196)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (iload_2)) 
                                      (2 (invokestatic (methodCP "digit" "java.lang.Character" (int int) int))) 
                                      (5 (istore 5)) 
                                      (7 (iload 5)) 
                                      (9 (iconst_m1)) 
                                      (10 (if_icmpne 41)) ;;to TAG_0
                                      (13 (new (class "java.lang.IllegalArgumentException"))) 
                                      (16 (dup)) 
                                      (17 (new (class "java.lang.StringBuilder"))) 
                                      (20 (dup)) 
                                      (21 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (24 (ldc 5)) ;;STRING:: "Invalid digit: "
                                      (26 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (29 (iload_1)) 
                                      (30 (i2c)) 
                                      (31 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (34 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (37 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (40 (athrow)) 
                                      (41 (iconst_1)) ;;at TAG_0
                                      (42 (istore 6)) 
                                      (44 (iload 6)) ;;at TAG_5
                                      (46 (iload_3)) 
                                      (47 (if_icmpge 145)) ;;to TAG_1
                                      (50 (aload_0)) 
                                      (51 (invokestatic (methodCP "read1" "clojure.lang.EdnReader" ((class "java.io.Reader")) int))) 
                                      (54 (istore 7)) 
                                      (56 (iload 7)) 
                                      (58 (iconst_m1)) 
                                      (59 (if_icmpeq 78))  ;;to TAG_2
                                      (62 (iload 7)) 
                                      (64 (invokestatic (methodCP "isWhitespace" "clojure.lang.EdnReader" (int) boolean))) 
                                      (67 (ifne 78))  ;;to TAG_2
                                      (70 (iload 7)) 
                                      (72 (invokestatic (methodCP "isMacro" "clojure.lang.EdnReader" (int) boolean))) 
                                      (75 (ifeq 87)) ;;to TAG_3
                                      (78 (aload_0)) ;;at TAG_2
                                      (79 (iload 7)) 
                                      (81 (invokestatic (methodCP "unread" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") int) void))) 
                                      (84 (goto 145)) ;;to TAG_1
                                      (87 (iload 7)) ;;at TAG_3
                                      (89 (iload_2)) 
                                      (90 (invokestatic (methodCP "digit" "java.lang.Character" (int int) int))) 
                                      (93 (istore 8)) 
                                      (95 (iload 8)) 
                                      (97 (iconst_m1)) 
                                      (98 (if_icmpne 130)) ;;to TAG_4
                                      (101 (new (class "java.lang.IllegalArgumentException"))) 
                                      (104 (dup)) 
                                      (105 (new (class "java.lang.StringBuilder"))) 
                                      (108 (dup)) 
                                      (109 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (112 (ldc 5)) ;;STRING:: "Invalid digit: "
                                      (114 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (117 (iload 7)) 
                                      (119 (i2c)) 
                                      (120 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (123 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (126 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (129 (athrow)) 
                                      (130 (iload 5)) ;;at TAG_4
                                      (132 (iload_2)) 
                                      (133 (imul)) 
                                      (134 (iload 8)) 
                                      (136 (iadd)) 
                                      (137 (istore 5)) 
                                      (139 (iinc 6 1)) 
                                      (142 (goto 44)) ;;to TAG_5
                                      (145 (iload 6)) ;;at TAG_1
                                      (147 (iload_3)) 
                                      (148 (if_icmpeq 193)) ;;to TAG_6
                                      (151 (iload 4)) 
                                      (153 (ifeq 193)) ;;to TAG_6
                                      (156 (new (class "java.lang.IllegalArgumentException"))) 
                                      (159 (dup)) 
                                      (160 (new (class "java.lang.StringBuilder"))) 
                                      (163 (dup)) 
                                      (164 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (167 (ldc 6)) ;;STRING:: "Invalid character length: "
                                      (169 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (172 (iload 6)) 
                                      (174 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (177 (ldc 7)) ;;STRING:: ", should be: "
                                      (179 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (182 (iload_3)) 
                                      (183 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (186 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (189 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (192 (athrow)) 
                                      (193 (iload 5)) ;;at TAG_6
                                      (195 (ireturn)) 
                                      (endofcode 196))
                                   (Exceptions )
                                   (StackMap )))
                        (method "interpretToken"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 86)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (ldc 8)) ;;STRING:: "nil"
                                      (3 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (6 (ifeq 11)) ;;to TAG_0
                                      (9 (aconst_null)) 
                                      (10 (areturn)) 
                                      (11 (aload_0)) ;;at TAG_0
                                      (12 (ldc 9)) ;;STRING:: "true"
                                      (14 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (17 (ifeq 24)) ;;to TAG_1
                                      (20 (getstatic (fieldCP "T" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (23 (areturn)) 
                                      (24 (aload_0)) ;;at TAG_1
                                      (25 (ldc 10)) ;;STRING:: "false"
                                      (27 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (30 (ifeq 37))  ;;to TAG_2
                                      (33 (getstatic (fieldCP "F" "clojure.lang.RT" (class "java.lang.Boolean")))) 
                                      (36 (areturn)) 
                                      (37 (aload_0)) ;;at TAG_2
                                      (38 (ldc 11)) ;;STRING:: "/"
                                      (40 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (43 (ifeq 50)) ;;to TAG_3
                                      (46 (getstatic (fieldCP "SLASH" "clojure.lang.EdnReader" (class "clojure.lang.Symbol")))) 
                                      (49 (areturn)) 
                                      (50 (aconst_null)) ;;at TAG_3
                                      (51 (astore_1)) 
                                      (52 (aload_0)) 
                                      (53 (invokestatic (methodCP "matchSymbol" "clojure.lang.EdnReader" ((class "java.lang.String")) (class "java.lang.Object")))) 
                                      (56 (astore_1)) 
                                      (57 (aload_1)) 
                                      (58 (ifnull 63)) ;;to TAG_4
                                      (61 (aload_1)) 
                                      (62 (areturn)) 
                                      (63 (new (class "java.lang.StringBuilder"))) ;;at TAG_4
                                      (66 (dup)) 
                                      (67 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (70 (ldc 12)) ;;STRING:: "Invalid token: "
                                      (72 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (75 (aload_0)) 
                                      (76 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (79 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (82 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (85 (athrow)) 
                                      (endofcode 86))
                                   (Exceptions )
                                   (StackMap )))
                        (method "matchSymbol"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 7) (code_length . 132)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "symbolPat" "clojure.lang.EdnReader" (class "java.util.regex.Pattern")))) 
                                      (3 (aload_0)) 
                                      (4 (invokevirtual (methodCP "matcher" "java.util.regex.Pattern" ((class "java.lang.CharSequence")) (class "java.util.regex.Matcher")))) 
                                      (7 (astore_1)) 
                                      (8 (aload_1)) 
                                      (9 (invokevirtual (methodCP "matches" "java.util.regex.Matcher" () boolean))) 
                                      (12 (ifeq 130)) ;;to TAG_0
                                      (15 (aload_1)) 
                                      (16 (invokevirtual (methodCP "groupCount" "java.util.regex.Matcher" () int))) 
                                      (19 (istore_2)) 
                                      (20 (aload_1)) 
                                      (21 (iconst_1)) 
                                      (22 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (25 (astore_3)) 
                                      (26 (aload_1)) 
                                      (27 (iconst_2)) 
                                      (28 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (31 (astore 4)) 
                                      (33 (aload_3)) 
                                      (34 (ifnull 46))  ;;to TAG_1
                                      (37 (aload_3)) 
                                      (38 (ldc 13)) ;;STRING:: ":/"
                                      (40 (invokevirtual (methodCP "endsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (43 (ifne 67)) ;;to TAG_2
                                      (46 (aload 4)) ;;at TAG_1
                                      (48 (ldc 14)) ;;STRING:: ":"
                                      (50 (invokevirtual (methodCP "endsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (53 (ifne 67)) ;;to TAG_2
                                      (56 (aload_0)) 
                                      (57 (ldc 15)) ;;STRING:: "::"
                                      (59 (iconst_1)) 
                                      (60 (invokevirtual (methodCP "indexOf" "java.lang.String" ((class "java.lang.String") int) int))) 
                                      (63 (iconst_m1)) 
                                      (64 (if_icmpeq 69)) ;;to TAG_3
                                      (67 (aconst_null)) ;;at TAG_2
                                      (68 (areturn)) 
                                      (69 (aload_0)) ;;at TAG_3
                                      (70 (ldc 15)) ;;STRING:: "::"
                                      (72 (invokevirtual (methodCP "startsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (75 (ifeq 80)) ;;to TAG_4
                                      (78 (aconst_null)) 
                                      (79 (areturn)) 
                                      (80 (aload_0)) ;;at TAG_4
                                      (81 (iconst_0)) 
                                      (82 (invokevirtual (methodCP "charAt" "java.lang.String" (int) char))) 
                                      (85 (bipush 58)) 
                                      (87 (if_icmpne 94)) ;;to TAG_5
                                      (90 (iconst_1)) 
                                      (91 (goto 95)) ;;to TAG_6
                                      (94 (iconst_0)) ;;at TAG_5
                                      (95 (istore 5)) ;;at TAG_6
                                      (97 (aload_0)) 
                                      (98 (iload 5)) 
                                      (100 (ifeq 107)) ;;to TAG_7
                                      (103 (iconst_1)) 
                                      (104 (goto 108)) ;;to TAG_8
                                      (107 (iconst_0)) ;;at TAG_7
                                      (108 (invokevirtual (methodCP "substring" "java.lang.String" (int) (class "java.lang.String")))) ;;at TAG_8
                                      (111 (invokestatic (methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol")))) 
                                      (114 (astore 6)) 
                                      (116 (iload 5)) 
                                      (118 (ifeq 127)) ;;to TAG_9
                                      (121 (aload 6)) 
                                      (123 (invokestatic (methodCP "intern" "clojure.lang.Keyword" ((class "clojure.lang.Symbol")) (class "clojure.lang.Keyword")))) 
                                      (126 (areturn)) 
                                      (127 (aload 6)) ;;at TAG_9
                                      (129 (areturn)) 
                                      (130 (aconst_null)) ;;at TAG_0
                                      (131 (areturn)) 
                                      (endofcode 132))
                                   (Exceptions )
                                   (StackMap )))
                        (method "matchNumber"
                              (parameters (class "java.lang.String"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 6) (code_length . 318)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "intPat" "clojure.lang.EdnReader" (class "java.util.regex.Pattern")))) 
                                      (3 (aload_0)) 
                                      (4 (invokevirtual (methodCP "matcher" "java.util.regex.Pattern" ((class "java.lang.CharSequence")) (class "java.util.regex.Matcher")))) 
                                      (7 (astore_1)) 
                                      (8 (aload_1)) 
                                      (9 (invokevirtual (methodCP "matches" "java.util.regex.Matcher" () boolean))) 
                                      (12 (ifeq 200)) ;;to TAG_0
                                      (15 (aload_1)) 
                                      (16 (iconst_2)) 
                                      (17 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (20 (ifnull 41))  ;;to TAG_1
                                      (23 (aload_1)) 
                                      (24 (bipush 8)) 
                                      (26 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (29 (ifnull 36)) ;;to TAG_2
                                      (32 (getstatic (fieldCP "ZERO" "clojure.lang.BigInt" (class "clojure.lang.BigInt")))) 
                                      (35 (areturn)) 
                                      (36 (lconst_0)) ;;at TAG_2
                                      (37 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (40 (areturn)) 
                                      (41 (aload_1)) ;;at TAG_1
                                      (42 (iconst_1)) 
                                      (43 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (46 (ldc 16)) ;;STRING:: "-"
                                      (48 (invokevirtual (methodCP "equals" "java.lang.String" ((class "java.lang.Object")) boolean))) 
                                      (51 (istore_2)) 
                                      (52 (bipush 10)) 
                                      (54 (istore 4)) 
                                      (56 (aload_1)) 
                                      (57 (iconst_3)) 
                                      (58 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (61 (dup)) 
                                      (62 (astore_3)) 
                                      (63 (ifnull 73)) ;;to TAG_3
                                      (66 (bipush 10)) 
                                      (68 (istore 4)) 
                                      (70 (goto 129)) ;;to TAG_4
                                      (73 (aload_1)) ;;at TAG_3
                                      (74 (iconst_4)) 
                                      (75 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (78 (dup)) 
                                      (79 (astore_3)) 
                                      (80 (ifnull 90)) ;;to TAG_5
                                      (83 (bipush 16)) 
                                      (85 (istore 4)) 
                                      (87 (goto 129)) ;;to TAG_4
                                      (90 (aload_1)) ;;at TAG_5
                                      (91 (iconst_5)) 
                                      (92 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (95 (dup)) 
                                      (96 (astore_3)) 
                                      (97 (ifnull 107)) ;;to TAG_6
                                      (100 (bipush 8)) 
                                      (102 (istore 4)) 
                                      (104 (goto 129)) ;;to TAG_4
                                      (107 (aload_1)) ;;at TAG_6
                                      (108 (bipush 7)) 
                                      (110 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (113 (dup)) 
                                      (114 (astore_3)) 
                                      (115 (ifnull 129)) ;;to TAG_4
                                      (118 (aload_1)) 
                                      (119 (bipush 6)) 
                                      (121 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (124 (invokestatic (methodCP "parseInt" "java.lang.Integer" ((class "java.lang.String")) int))) 
                                      (127 (istore 4)) 
                                      (129 (aload_3)) ;;at TAG_4
                                      (130 (ifnonnull 135)) ;;to TAG_7
                                      (133 (aconst_null)) 
                                      (134 (areturn)) 
                                      (135 (new (class "java.math.BigInteger"))) ;;at TAG_7
                                      (138 (dup)) 
                                      (139 (aload_3)) 
                                      (140 (iload 4)) 
                                      (142 (invokespecial (methodCP "<init>" "java.math.BigInteger" ((class "java.lang.String") int) void))) 
                                      (145 (astore 5)) 
                                      (147 (iload_2)) 
                                      (148 (ifeq 158)) ;;to TAG_8
                                      (151 (aload 5)) 
                                      (153 (invokevirtual (methodCP "negate" "java.math.BigInteger" () (class "java.math.BigInteger")))) 
                                      (156 (astore 5)) 
                                      (158 (aload_1)) ;;at TAG_8
                                      (159 (bipush 8)) 
                                      (161 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (164 (ifnull 173)) ;;to TAG_9
                                      (167 (aload 5)) 
                                      (169 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (172 (areturn)) 
                                      (173 (aload 5)) ;;at TAG_9
                                      (175 (invokevirtual (methodCP "bitLength" "java.math.BigInteger" () int))) 
                                      (178 (bipush 64)) 
                                      (180 (if_icmpge 194)) ;;to TAG_10
                                      (183 (aload 5)) 
                                      (185 (invokevirtual (methodCP "longValue" "java.math.BigInteger" () long))) 
                                      (188 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (191 (goto 199)) ;;to TAG_11
                                      (194 (aload 5)) ;;at TAG_10
                                      (196 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (199 (areturn)) ;;at TAG_11
                                      (200 (getstatic (fieldCP "floatPat" "clojure.lang.EdnReader" (class "java.util.regex.Pattern")))) ;;at TAG_0
                                      (203 (aload_0)) 
                                      (204 (invokevirtual (methodCP "matcher" "java.util.regex.Pattern" ((class "java.lang.CharSequence")) (class "java.util.regex.Matcher")))) 
                                      (207 (astore_1)) 
                                      (208 (aload_1)) 
                                      (209 (invokevirtual (methodCP "matches" "java.util.regex.Matcher" () boolean))) 
                                      (212 (ifeq 244)) ;;to TAG_12
                                      (215 (aload_1)) 
                                      (216 (iconst_4)) 
                                      (217 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (220 (ifnull 236)) ;;to TAG_13
                                      (223 (new (class "java.math.BigDecimal"))) 
                                      (226 (dup)) 
                                      (227 (aload_1)) 
                                      (228 (iconst_1)) 
                                      (229 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (232 (invokespecial (methodCP "<init>" "java.math.BigDecimal" ((class "java.lang.String")) void))) 
                                      (235 (areturn)) 
                                      (236 (aload_0)) ;;at TAG_13
                                      (237 (invokestatic (methodCP "parseDouble" "java.lang.Double" ((class "java.lang.String")) double))) 
                                      (240 (invokestatic (methodCP "valueOf" "java.lang.Double" (double) (class "java.lang.Double")))) 
                                      (243 (areturn)) 
                                      (244 (getstatic (fieldCP "ratioPat" "clojure.lang.EdnReader" (class "java.util.regex.Pattern")))) ;;at TAG_12
                                      (247 (aload_0)) 
                                      (248 (invokevirtual (methodCP "matcher" "java.util.regex.Pattern" ((class "java.lang.CharSequence")) (class "java.util.regex.Matcher")))) 
                                      (251 (astore_1)) 
                                      (252 (aload_1)) 
                                      (253 (invokevirtual (methodCP "matches" "java.util.regex.Matcher" () boolean))) 
                                      (256 (ifeq 316)) ;;to TAG_14
                                      (259 (aload_1)) 
                                      (260 (iconst_1)) 
                                      (261 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (264 (astore_2)) 
                                      (265 (aload_2)) 
                                      (266 (ldc 17)) ;;STRING:: "+"
                                      (268 (invokevirtual (methodCP "startsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (271 (ifeq 280)) ;;to TAG_15
                                      (274 (aload_2)) 
                                      (275 (iconst_1)) 
                                      (276 (invokevirtual (methodCP "substring" "java.lang.String" (int) (class "java.lang.String")))) 
                                      (279 (astore_2)) 
                                      (280 (new (class "java.math.BigInteger"))) ;;at TAG_15
                                      (283 (dup)) 
                                      (284 (aload_2)) 
                                      (285 (invokespecial (methodCP "<init>" "java.math.BigInteger" ((class "java.lang.String")) void))) 
                                      (288 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (291 (invokestatic (methodCP "reduceBigInt" "clojure.lang.Numbers" ((class "clojure.lang.BigInt")) (class "java.lang.Number")))) 
                                      (294 (new (class "java.math.BigInteger"))) 
                                      (297 (dup)) 
                                      (298 (aload_1)) 
                                      (299 (iconst_2)) 
                                      (300 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (303 (invokespecial (methodCP "<init>" "java.math.BigInteger" ((class "java.lang.String")) void))) 
                                      (306 (invokestatic (methodCP "fromBigInteger" "clojure.lang.BigInt" ((class "java.math.BigInteger")) (class "clojure.lang.BigInt")))) 
                                      (309 (invokestatic (methodCP "reduceBigInt" "clojure.lang.Numbers" ((class "clojure.lang.BigInt")) (class "java.lang.Number")))) 
                                      (312 (invokestatic (methodCP "divide" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (315 (areturn)) 
                                      (316 (aconst_null)) ;;at TAG_14
                                      (317 (areturn)) 
                                      (endofcode 318))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getMacro"
                              (parameters int)
                              (returntype . (class "clojure.lang.IFn"))
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 16)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn"))))) 
                                      (4 (arraylength)) 
                                      (5 (if_icmpge 14))  ;;to TAG_0
                                      (8 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn"))))) 
                                      (11 (iload_0)) 
                                      (12 (aaload)) 
                                      (13 (areturn)) 
                                      (14 (aconst_null)) ;;at TAG_0
                                      (15 (areturn)) 
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isMacro"
                              (parameters int)
                              (returntype . boolean)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn"))))) 
                                      (4 (arraylength)) 
                                      (5 (if_icmpge 20))  ;;to TAG_0
                                      (8 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn"))))) 
                                      (11 (iload_0)) 
                                      (12 (aaload)) 
                                      (13 (ifnull 20))  ;;to TAG_0
                                      (16 (iconst_1)) 
                                      (17 (goto 21)) ;;to TAG_1
                                      (20 (iconst_0)) ;;at TAG_0
                                      (21 (ireturn)) ;;at TAG_1
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "isTerminatingMacro"
                              (parameters int)
                              (returntype . boolean)
                              (accessflags  *class*  *private*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 25)
                                   (parsedcode
                                      (0 (iload_0)) 
                                      (1 (bipush 35)) 
                                      (3 (if_icmpeq 23))  ;;to TAG_0
                                      (6 (iload_0)) 
                                      (7 (bipush 39)) 
                                      (9 (if_icmpeq 23))  ;;to TAG_0
                                      (12 (iload_0)) 
                                      (13 (invokestatic (methodCP "isMacro" "clojure.lang.EdnReader" (int) boolean))) 
                                      (16 (ifeq 23))  ;;to TAG_0
                                      (19 (iconst_1)) 
                                      (20 (goto 24)) ;;to TAG_1
                                      (23 (iconst_0)) ;;at TAG_0
                                      (24 (ireturn)) ;;at TAG_1
                                      (endofcode 25))
                                   (Exceptions )
                                   (StackMap )))
                        (method "readDelimitedList"
                              (parameters char (class "java.io.PushbackReader") boolean (class "java.lang.Object"))
                              (returntype . (class "java.util.List"))
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 9) (code_length . 184)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (instanceof (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (4 (ifeq 17)) ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (checkcast (class "clojure.lang.LineNumberingPushbackReader"))) 
                                      (11 (invokevirtual (methodCP "getLineNumber" "clojure.lang.LineNumberingPushbackReader" () int))) 
                                      (14 (goto 18))  ;;to TAG_1
                                      (17 (iconst_m1)) ;;at TAG_0
                                      (18 (istore 4)) ;;at TAG_1
                                      (20 (new (class "java.util.ArrayList"))) 
                                      (23 (dup)) 
                                      (24 (invokespecial (methodCP "<init>" "java.util.ArrayList" () void))) 
                                      (27 (astore 5)) 
                                      (29 (aload_1)) ;;at TAG_11
                                      (30 (invokestatic (methodCP "read1" "clojure.lang.EdnReader" ((class "java.io.Reader")) int))) 
                                      (33 (istore 6)) 
                                      (35 (iload 6)) ;;at TAG_3
                                      (37 (invokestatic (methodCP "isWhitespace" "clojure.lang.EdnReader" (int) boolean))) 
                                      (40 (ifeq 52)) ;;to TAG_2
                                      (43 (aload_1)) 
                                      (44 (invokestatic (methodCP "read1" "clojure.lang.EdnReader" ((class "java.io.Reader")) int))) 
                                      (47 (istore 6)) 
                                      (49 (goto 35)) ;;to TAG_3
                                      (52 (iload 6)) ;;at TAG_2
                                      (54 (iconst_m1)) 
                                      (55 (if_icmpne 93)) ;;to TAG_4
                                      (58 (iload 4)) 
                                      (60 (ifge 69)) ;;to TAG_5
                                      (63 (ldc 0)) ;;STRING:: "EOF while reading"
                                      (65 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (68 (athrow)) 
                                      (69 (new (class "java.lang.StringBuilder"))) ;;at TAG_5
                                      (72 (dup)) 
                                      (73 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (76 (ldc 18)) ;;STRING:: "EOF while reading, starting at line "
                                      (78 (invokevirtual (methodCP "append" "java.lang.StringBuilder" ((class "java.lang.String")) (class "java.lang.StringBuilder")))) 
                                      (81 (iload 4)) 
                                      (83 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (int) (class "java.lang.StringBuilder")))) 
                                      (86 (invokevirtual (methodCP "toString" "java.lang.StringBuilder" () (class "java.lang.String")))) 
                                      (89 (invokestatic (methodCP "runtimeException" "clojure.lang.Util" ((class "java.lang.String")) (class "java.lang.RuntimeException")))) 
                                      (92 (athrow)) 
                                      (93 (iload 6)) ;;at TAG_4
                                      (95 (iload_0)) 
                                      (96 (if_icmpne 102)) ;;to TAG_6
                                      (99 (goto 181)) ;;to TAG_7
                                      (102 (iload 6)) ;;at TAG_6
                                      (104 (invokestatic (methodCP "getMacro" "clojure.lang.EdnReader" (int) (class "clojure.lang.IFn")))) 
                                      (107 (astore 7)) 
                                      (109 (aload 7)) 
                                      (111 (ifnull 148)) ;;to TAG_8
                                      (114 (aload 7)) 
                                      (116 (aload_1)) 
                                      (117 (iload 6)) 
                                      (119 (i2c)) 
                                      (120 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (123 (aload_3)) 
                                      (124 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (129 (astore 8)) 
                                      (131 (aload 8)) 
                                      (133 (aload_1)) 
                                      (134 (if_acmpeq 145)) ;;to TAG_9
                                      (137 (aload 5)) 
                                      (139 (aload 8)) 
                                      (141 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (144 (pop)) 
                                      (145 (goto 178)) ;;to TAG_10;;at TAG_9
                                      (148 (aload_1)) ;;at TAG_8
                                      (149 (iload 6)) 
                                      (151 (invokestatic (methodCP "unread" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") int) void))) 
                                      (154 (aload_1)) 
                                      (155 (iconst_1)) 
                                      (156 (aconst_null)) 
                                      (157 (iload_2)) 
                                      (158 (aload_3)) 
                                      (159 (invokestatic (methodCP "read" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") boolean (class "java.lang.Object") boolean (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (162 (astore 8)) 
                                      (164 (aload 8)) 
                                      (166 (aload_1)) 
                                      (167 (if_acmpeq 178)) ;;to TAG_10
                                      (170 (aload 5)) 
                                      (172 (aload 8)) 
                                      (174 (invokevirtual (methodCP "add" "java.util.ArrayList" ((class "java.lang.Object")) boolean))) 
                                      (177 (pop)) 
                                      (178 (goto 29)) ;;to TAG_11;;at TAG_10
                                      (181 (aload 5)) ;;at TAG_7
                                      (183 (areturn)) 
                                      (endofcode 184))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$000"
                              (parameters (class "java.io.PushbackReader") int int int boolean)
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (iload_2))
                                      (3 (iload_3))
                                      (4 (iload 4))
                                      (6 (invokestatic
					(methodCP "readUnicodeChar" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") int int int boolean) int)))
                                      (9 (ireturn))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$100"
                              (parameters (class "java.io.PushbackReader") char boolean)
                              (returntype . (class "java.lang.String"))
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 7)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (iload_2))
                                      (3 (invokestatic
					(methodCP "readToken" "clojure.lang.EdnReader" ((class "java.io.PushbackReader") char boolean) (class "java.lang.String"))))
                                      (6 (areturn))
                                      (endofcode 7))
                                   (Exceptions )
                                   (StackMap )))
                        (method "access$200"
                              (parameters (class "java.lang.String") int int int)
                              (returntype . int)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 8)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (iload_1))
                                      (2 (iload_2))
                                      (3 (iload_3))
                                      (4 (invokestatic
					(methodCP "readUnicodeChar" "clojure.lang.EdnReader" ((class "java.lang.String") int int int) int)))
                                      (7 (ireturn))
                                      (endofcode 8))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 0) (code_length . 273)
                                   (parsedcode
                                      (0 (sipush 256))
                                      (3 (anewarray (class "clojure.lang.IFn")))
                                      (6 (putstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (9 (sipush 256))
                                      (12 (anewarray (class "clojure.lang.IFn")))
                                      (15 (putstatic (fieldCP "dispatchMacros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (18 (ldc 19))       ;;STRING:: "[:]?([\\D&&[^/]].*/)?([\\D&&[^/]][^/]*)"
                                      (20 (invokestatic
					(methodCP "compile" "java.util.regex.Pattern" ((class "java.lang.String")) (class "java.util.regex.Pattern"))))
                                      (23 (putstatic (fieldCP "symbolPat" "clojure.lang.EdnReader" (class "java.util.regex.Pattern"))))
                                      (26 (ldc 20))       ;;STRING:: "([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?"
                                      (28 (invokestatic
					(methodCP "compile" "java.util.regex.Pattern" ((class "java.lang.String")) (class "java.util.regex.Pattern"))))
                                      (31 (putstatic (fieldCP "intPat" "clojure.lang.EdnReader" (class "java.util.regex.Pattern"))))
                                      (34 (ldc 21))       ;;STRING:: "([-+]?[0-9]+)/([0-9]+)"
                                      (36 (invokestatic
					(methodCP "compile" "java.util.regex.Pattern" ((class "java.lang.String")) (class "java.util.regex.Pattern"))))
                                      (39 (putstatic (fieldCP "ratioPat" "clojure.lang.EdnReader" (class "java.util.regex.Pattern"))))
                                      (42 (ldc 22))       ;;STRING:: "([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?"
                                      (44 (invokestatic
					(methodCP "compile" "java.util.regex.Pattern" ((class "java.lang.String")) (class "java.util.regex.Pattern"))))
                                      (47 (putstatic (fieldCP "floatPat" "clojure.lang.EdnReader" (class "java.util.regex.Pattern"))))
                                      (50 (ldc 11))       ;;STRING:: "/"
                                      (52 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (55 (putstatic (fieldCP "SLASH" "clojure.lang.EdnReader" (class "clojure.lang.Symbol"))))
                                      (58 (new (class "clojure.lang.EdnReader$TaggedReader")))
                                      (61 (dup))
                                      (62 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$TaggedReader" () void)))
                                      (65 (putstatic (fieldCP "taggedReader" "clojure.lang.EdnReader" (class "clojure.lang.IFn"))))
                                      (68 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (71 (bipush 34))
                                      (73 (new (class "clojure.lang.EdnReader$StringReader")))
                                      (76 (dup))
                                      (77 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$StringReader" () void)))
                                      (80 (aastore))
                                      (81 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (84 (bipush 59))
                                      (86 (new (class "clojure.lang.EdnReader$CommentReader")))
                                      (89 (dup))
                                      (90 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$CommentReader" () void)))
                                      (93 (aastore))
                                      (94 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (97 (bipush 94))
                                      (99 (new (class "clojure.lang.EdnReader$MetaReader")))
                                      (102 (dup))
                                      (103 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$MetaReader" () void)))
                                      (106 (aastore))
                                      (107 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (110 (bipush 40))
                                      (112 (new (class "clojure.lang.EdnReader$ListReader")))
                                      (115 (dup))
                                      (116 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$ListReader" () void)))
                                      (119 (aastore))
                                      (120 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (123 (bipush 41))
                                      (125 (new (class "clojure.lang.EdnReader$UnmatchedDelimiterReader")))
                                      (128 (dup))
                                      (129 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$UnmatchedDelimiterReader" () void)))
                                      (132 (aastore))
                                      (133 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (136 (bipush 91))
                                      (138 (new (class "clojure.lang.EdnReader$VectorReader")))
                                      (141 (dup))
                                      (142 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$VectorReader" () void)))
                                      (145 (aastore))
                                      (146 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (149 (bipush 93))
                                      (151 (new (class "clojure.lang.EdnReader$UnmatchedDelimiterReader")))
                                      (154 (dup))
                                      (155 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$UnmatchedDelimiterReader" () void)))
                                      (158 (aastore))
                                      (159 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (162 (bipush 123))
                                      (164 (new (class "clojure.lang.EdnReader$MapReader")))
                                      (167 (dup))
                                      (168 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$MapReader" () void)))
                                      (171 (aastore))
                                      (172 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (175 (bipush 125))
                                      (177 (new (class "clojure.lang.EdnReader$UnmatchedDelimiterReader")))
                                      (180 (dup))
                                      (181 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$UnmatchedDelimiterReader" () void)))
                                      (184 (aastore))
                                      (185 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (188 (bipush 92))
                                      (190 (new (class "clojure.lang.EdnReader$CharacterReader")))
                                      (193 (dup))
                                      (194 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$CharacterReader" () void)))
                                      (197 (aastore))
                                      (198 (getstatic (fieldCP "macros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (201 (bipush 35))
                                      (203 (new (class "clojure.lang.EdnReader$DispatchReader")))
                                      (206 (dup))
                                      (207 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$DispatchReader" () void)))
                                      (210 (aastore))
                                      (211 (getstatic (fieldCP "dispatchMacros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (214 (bipush 94))
                                      (216 (new (class "clojure.lang.EdnReader$MetaReader")))
                                      (219 (dup))
                                      (220 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$MetaReader" () void)))
                                      (223 (aastore))
                                      (224 (getstatic (fieldCP "dispatchMacros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (227 (bipush 123))
                                      (229 (new (class "clojure.lang.EdnReader$SetReader")))
                                      (232 (dup))
                                      (233 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$SetReader" () void)))
                                      (236 (aastore))
                                      (237 (getstatic (fieldCP "dispatchMacros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (240 (bipush 60))
                                      (242 (new (class "clojure.lang.EdnReader$UnreadableReader")))
                                      (245 (dup))
                                      (246 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$UnreadableReader" () void)))
                                      (249 (aastore))
                                      (250 (getstatic (fieldCP "dispatchMacros" "clojure.lang.EdnReader" (array (class "clojure.lang.IFn")))))
                                      (253 (bipush 95))
                                      (255 (new (class "clojure.lang.EdnReader$DiscardReader")))
                                      (258 (dup))
                                      (259 (invokespecial
					(methodCP "<init>" "clojure.lang.EdnReader$DiscardReader" () void)))
                                      (262 (aastore))
                                      (263 (aconst_null))
                                      (264 (ldc 23))      ;;STRING:: "eof"
                                      (266 (invokestatic
					(methodCP "intern" "clojure.lang.Keyword" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (269 (putstatic (fieldCP "EOF" "clojure.lang.EdnReader" (class "clojure.lang.Keyword"))))
                                      (272 (return))
                                      (endofcode 273))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *EdnReader-class-table*
  (make-static-class-decls 
   *clojure.lang.EdnReader*))

(defconst *package-name-map* 
  ("clojure.lang.EdnReader" . "clojure.lang"))

