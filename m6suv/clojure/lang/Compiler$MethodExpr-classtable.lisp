; Compiler$MethodExpr-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:50 CDT 2014.
;

(defconst *clojure.lang.Compiler$MethodExpr*
 (make-class-def
      '(class "clojure.lang.Compiler$MethodExpr"
            "clojure.lang.Compiler$HostExpr"
            (constant_pool
                        (STRING  "int uncheckedIntCast(long)")
                        (STRING  "int intCast(long)"))
            (fields)
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.Compiler$HostExpr" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitArgsAsArray"
                              (parameters (class "clojure.lang.IPersistentVector") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter"))
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 72)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (aload_0)) 
                                      (2 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (7 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (10 (aload_2)) 
                                      (11 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (14 (invokevirtual (methodCP "newArray" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (17 (iconst_0)) 
                                      (18 (istore_3)) 
                                      (19 (iload_3)) ;;at TAG_1
                                      (20 (aload_0)) 
                                      (21 (invokeinterface (methodCP "count" "clojure.lang.IPersistentVector" () int) 1)) 
                                      (26 (if_icmpge 71))  ;;to TAG_0
                                      (29 (aload_2)) 
                                      (30 (invokevirtual (methodCP "dup" "clojure.asm.commons.GeneratorAdapter" () void))) 
                                      (33 (aload_2)) 
                                      (34 (iload_3)) 
                                      (35 (invokevirtual (methodCP "push" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (38 (aload_0)) 
                                      (39 (iload_3)) 
                                      (40 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (45 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (48 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (51 (aload_1)) 
                                      (52 (aload_2)) 
                                      (53 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (58 (aload_2)) 
                                      (59 (invokestatic (methodCP "access$600" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (62 (invokevirtual (methodCP "arrayStore" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type")) void))) 
                                      (65 (iinc 3 1)) 
                                      (68 (goto 19)) ;;to TAG_1
                                      (71 (return)) ;;at TAG_0
                                      (endofcode 72))
                                   (Exceptions )
                                   (StackMap )))
                        (method "emitTypedArgs"
                              (parameters (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (array (class "java.lang.Class")) (class "clojure.lang.IPersistentVector"))
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 8) (code_length . 322)
                                   (parsedcode
                                      (0 (iconst_0)) 
                                      (1 (istore 4)) 
                                      (3 (iload 4)) ;;at TAG_10
                                      (5 (aload_2)) 
                                      (6 (arraylength)) 
                                      (7 (if_icmpge 321)) ;;to TAG_0
                                      (10 (aload_3)) 
                                      (11 (iload 4)) 
                                      (13 (invokeinterface (methodCP "nth" "clojure.lang.IPersistentVector" (int) (class "java.lang.Object")) 2)) 
                                      (18 (checkcast (class "clojure.lang.Compiler$Expr"))) 
                                      (21 (astore 5)) 
                                      (23 (aload 5)) ;;at TAG_11
                                      (25 (invokestatic (methodCP "maybePrimitiveType" "clojure.lang.Compiler" ((class "clojure.lang.Compiler$Expr")) (class "java.lang.Class")))) 
                                      (28 (astore 6)) 
                                      (30 (aload 6)) 
                                      (32 (aload_2)) 
                                      (33 (iload 4)) 
                                      (35 (aaload)) 
                                      (36 (if_acmpne 61))  ;;to TAG_1
                                      (39 (aload 5)) 
                                      (41 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (44 (astore 7)) 
                                      (46 (aload 7)) 
                                      (48 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (51 (aload_0)) 
                                      (52 (aload_1)) 
                                      (53 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (58 (goto 302)) ;;to TAG_2
                                      (61 (aload 6)) ;;at TAG_1
                                      (63 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (66 (if_acmpne 108)) ;;to TAG_3
                                      (69 (aload_2)) 
                                      (70 (iload 4)) 
                                      (72 (aaload)) 
                                      (73 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (76 (if_acmpne 108)) ;;to TAG_3
                                      (79 (aload 5)) 
                                      (81 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (84 (astore 7)) 
                                      (86 (aload 7)) 
                                      (88 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (91 (aload_0)) 
                                      (92 (aload_1)) 
                                      (93 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (98 (aload_1)) 
                                      (99 (sipush 133)) 
                                      (102 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (105 (goto 302)) ;;to TAG_2
                                      (108 (aload 6)) ;;at TAG_3
                                      (110 (getstatic (fieldCP "TYPE" "java.lang.Long" (class "java.lang.Class")))) 
                                      (113 (if_acmpne 187)) ;;to TAG_4
                                      (116 (aload_2)) 
                                      (117 (iload 4)) 
                                      (119 (aaload)) 
                                      (120 (getstatic (fieldCP "TYPE" "java.lang.Integer" (class "java.lang.Class")))) 
                                      (123 (if_acmpne 187)) ;;to TAG_4
                                      (126 (aload 5)) 
                                      (128 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (131 (astore 7)) 
                                      (133 (aload 7)) 
                                      (135 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (138 (aload_0)) 
                                      (139 (aload_1)) 
                                      (140 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (145 (getstatic (fieldCP "UNCHECKED_MATH" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (148 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (151 (invokestatic (methodCP "booleanCast" "clojure.lang.RT" ((class "java.lang.Object")) boolean))) 
                                      (154 (ifeq 172)) ;;to TAG_5
                                      (157 (aload_1)) 
                                      (158 (invokestatic (methodCP "access$200" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (161 (ldc 0)) ;;STRING:: "int uncheckedIntCast(long)"
                                      (163 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (166 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (169 (goto 184)) ;;to TAG_6
                                      (172 (aload_1)) ;;at TAG_5
                                      (173 (invokestatic (methodCP "access$200" "clojure.lang.Compiler" () (class "clojure.asm.Type")))) 
                                      (176 (ldc 1)) ;;STRING:: "int intCast(long)"
                                      (178 (invokestatic (methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method")))) 
                                      (181 (invokevirtual (methodCP "invokeStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void))) 
                                      (184 (goto 302)) ;;to TAG_2;;at TAG_6
                                      (187 (aload 6)) ;;at TAG_4
                                      (189 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (192 (if_acmpne 234)) ;;to TAG_7
                                      (195 (aload_2)) 
                                      (196 (iload 4)) 
                                      (198 (aaload)) 
                                      (199 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (202 (if_acmpne 234)) ;;to TAG_7
                                      (205 (aload 5)) 
                                      (207 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (210 (astore 7)) 
                                      (212 (aload 7)) 
                                      (214 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (217 (aload_0)) 
                                      (218 (aload_1)) 
                                      (219 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (224 (aload_1)) 
                                      (225 (sipush 141)) 
                                      (228 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (231 (goto 302)) ;;to TAG_2
                                      (234 (aload 6)) ;;at TAG_7
                                      (236 (getstatic (fieldCP "TYPE" "java.lang.Double" (class "java.lang.Class")))) 
                                      (239 (if_acmpne 281)) ;;to TAG_8
                                      (242 (aload_2)) 
                                      (243 (iload 4)) 
                                      (245 (aaload)) 
                                      (246 (getstatic (fieldCP "TYPE" "java.lang.Float" (class "java.lang.Class")))) 
                                      (249 (if_acmpne 281)) ;;to TAG_8
                                      (252 (aload 5)) 
                                      (254 (checkcast (class "clojure.lang.Compiler$MaybePrimitiveExpr"))) 
                                      (257 (astore 7)) 
                                      (259 (aload 7)) 
                                      (261 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (264 (aload_0)) 
                                      (265 (aload_1)) 
                                      (266 (invokeinterface (methodCP "emitUnboxed" "clojure.lang.Compiler$MaybePrimitiveExpr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (271 (aload_1)) 
                                      (272 (sipush 144)) 
                                      (275 (invokevirtual (methodCP "visitInsn" "clojure.asm.commons.GeneratorAdapter" (int) void))) 
                                      (278 (goto 302)) ;;to TAG_2
                                      (281 (aload 5)) ;;at TAG_8
                                      (283 (getstatic (fieldCP "EXPRESSION" "clojure.lang.Compiler$C" (class "clojure.lang.Compiler$C")))) 
                                      (286 (aload_0)) 
                                      (287 (aload_1)) 
                                      (288 (invokeinterface (methodCP "emit" "clojure.lang.Compiler$Expr" ((class "clojure.lang.Compiler$C") (class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter")) void) 4)) 
                                      (293 (aload_0)) 
                                      (294 (aload_1)) 
                                      (295 (aload_2)) 
                                      (296 (iload 4)) 
                                      (298 (aaload)) 
                                      (299 (invokestatic (methodCP "emitUnboxArg" "clojure.lang.Compiler$HostExpr" ((class "clojure.lang.Compiler$ObjExpr") (class "clojure.asm.commons.GeneratorAdapter") (class "java.lang.Class")) void))) 
                                      (302 (goto 315)) ;;to TAG_9;;at TAG_2
                                      (305 (astore 6)) ;;at TAG_12
                                      (307 (aload 6)) 
                                      (309 (invokestatic (methodCP "errPrintWriter" "clojure.lang.RT" () (class "java.io.PrintWriter")))) 
                                      (312 (invokevirtual (methodCP "printStackTrace" "java.lang.Exception" ((class "java.io.PrintWriter")) void))) 
                                      (315 (iinc 4 1)) ;;at TAG_9
                                      (318 (goto 3)) ;;to TAG_10
                                      (321 (return)) ;;at TAG_0
                                      (endofcode 322))
                                   (Exceptions 
                                     (handler 23 302  305 (class "java.lang.Exception")))
                                   (StackMap ))))
            (interfaces)
            (accessflags  *abstract*  *class*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "InnerClasses")))))


(defconst *Compiler$MethodExpr-class-table*
  (make-static-class-decls 
   *clojure.lang.Compiler$MethodExpr*))

(defconst *package-name-map* 
  ("clojure.lang.Compiler$MethodExpr" . "clojure.lang"))

