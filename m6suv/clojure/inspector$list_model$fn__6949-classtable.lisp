; inspector$list_model$fn__6949-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:49 CDT 2014.
;

(defconst *clojure.inspector$list_model$fn__6949*
 (make-class-def
      '(class "clojure.inspector$list_model$fn__6949"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "=")
                        (STRING  "print-str"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "get_value" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "get_label" (class "java.lang.Object") (accessflags  *class* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 41)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "="
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.inspector$list_model$fn__6949" (class "clojure.lang.Var"))))
                                      (13 (lconst_0))
                                      (14 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (17 (putstatic (fieldCP "const__1" "clojure.inspector$list_model$fn__6949" (class "java.lang.Object"))))
                                      (20 (lconst_1))
                                      (21 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (24 (putstatic (fieldCP "const__2" "clojure.inspector$list_model$fn__6949" (class "java.lang.Object"))))
                                      (27 (ldc 0))        ;;STRING:: "clojure.core"
                                      (29 (ldc 2))        ;;STRING:: "print-str"
                                      (31 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (34 (checkcast (class "clojure.lang.Var")))
                                      (37 (putstatic (fieldCP "const__3" "clojure.inspector$list_model$fn__6949" (class "clojure.lang.Var"))))
                                      (40 (return))
                                      (endofcode 41))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 3) (code_length . 15)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "get_value" "clojure.inspector$list_model$fn__6949" (class "java.lang.Object"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "get_label" "clojure.inspector$list_model$fn__6949" (class "java.lang.Object"))))
                                      (14 (return))
                                      (endofcode 15))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 72)
                                   (parsedcode
                                      (0 (lconst_0)) 
                                      (1 (aload_3)) 
                                      (2 (invokestatic (methodCP "equiv" "clojure.lang.Util" (long (class "java.lang.Object")) boolean))) 
                                      (5 (ifeq 27)) ;;to TAG_0
                                      (8 (aload_0)) 
                                      (9 (getfield (fieldCP "get_label" "clojure.inspector$list_model$fn__6949" (class "java.lang.Object")))) 
                                      (12 (checkcast (class "clojure.lang.IFn"))) 
                                      (15 (aload_2)) 
                                      (16 (aconst_null)) 
                                      (17 (astore_2)) 
                                      (18 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (23 (goto 71)) ;;to TAG_1
                                      (26 (pop)) 
                                      (27 (lconst_1)) ;;at TAG_0
                                      (28 (aload_3)) 
                                      (29 (aconst_null)) 
                                      (30 (astore_3)) 
                                      (31 (invokestatic (methodCP "equiv" "clojure.lang.Util" (long (class "java.lang.Object")) boolean))) 
                                      (34 (ifeq 70))  ;;to TAG_2
                                      (37 (getstatic (fieldCP "const__3" "clojure.inspector$list_model$fn__6949" (class "clojure.lang.Var")))) 
                                      (40 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (43 (checkcast (class "clojure.lang.IFn"))) 
                                      (46 (aload_0)) 
                                      (47 (getfield (fieldCP "get_value" "clojure.inspector$list_model$fn__6949" (class "java.lang.Object")))) 
                                      (50 (checkcast (class "clojure.lang.IFn"))) 
                                      (53 (aload_2)) 
                                      (54 (aconst_null)) 
                                      (55 (astore_2)) 
                                      (56 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (61 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (66 (goto 71)) ;;to TAG_1
                                      (69 (pop)) 
                                      (70 (aconst_null)) ;;at TAG_2
                                      (71 (areturn)) ;;at TAG_1
                                      (endofcode 72))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *inspector$list_model$fn__6949-class-table*
  (make-static-class-decls 
   *clojure.inspector$list_model$fn__6949*))

(defconst *package-name-map* 
  ("clojure.inspector$list_model$fn__6949" . "clojure"))

