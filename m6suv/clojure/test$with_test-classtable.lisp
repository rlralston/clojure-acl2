; test$with_test-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:59 CDT 2014.
;

(defconst *clojure.test$with_test*
 (make-class-def
      '(class "clojure.test$with_test"
            "clojure.lang.RestFn"
            (constant_pool
                        (STRING  "clojure.test")
                        (STRING  "*load-tests*")
                        (STRING  "clojure.core")
                        (STRING  "seq")
                        (STRING  "concat")
                        (STRING  "list")
                        (STRING  "doto")
                        (STRING  "alter-meta!")
                        (STRING  "assoc")
                        (STRING  "test")
                        (STRING  "fn")
                        (STRING  "apply")
                        (STRING  "vector"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 143)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.test"
                                      (2 (ldc 1))         ;;STRING:: "*load-tests*"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.test$with_test" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.core"
                                      (15 (ldc 3))        ;;STRING:: "seq"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.test$with_test" (class "clojure.lang.Var"))))
                                      (26 (ldc 2))        ;;STRING:: "clojure.core"
                                      (28 (ldc 4))        ;;STRING:: "concat"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.test$with_test" (class "clojure.lang.Var"))))
                                      (39 (ldc 2))        ;;STRING:: "clojure.core"
                                      (41 (ldc 5))        ;;STRING:: "list"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.test$with_test" (class "clojure.lang.Var"))))
                                      (52 (ldc 2))        ;;STRING:: "clojure.core"
                                      (54 (ldc 6))        ;;STRING:: "doto"
                                      (56 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (59 (checkcast (class "clojure.lang.AFn")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.test$with_test" (class "clojure.lang.AFn"))))
                                      (65 (ldc 2))        ;;STRING:: "clojure.core"
                                      (67 (ldc 7))        ;;STRING:: "alter-meta!"
                                      (69 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (72 (checkcast (class "clojure.lang.AFn")))
                                      (75 (putstatic (fieldCP "const__5" "clojure.test$with_test" (class "clojure.lang.AFn"))))
                                      (78 (ldc 2))        ;;STRING:: "clojure.core"
                                      (80 (ldc 8))        ;;STRING:: "assoc"
                                      (82 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (85 (checkcast (class "clojure.lang.AFn")))
                                      (88 (putstatic (fieldCP "const__6" "clojure.test$with_test" (class "clojure.lang.AFn"))))
                                      (91 (aconst_null))
                                      (92 (ldc 9))        ;;STRING:: "test"
                                      (94 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (97 (checkcast (class "clojure.lang.Keyword")))
                                      (100 (putstatic (fieldCP "const__7" "clojure.test$with_test" (class "clojure.lang.Keyword"))))
                                      (103 (ldc 2))       ;;STRING:: "clojure.core"
                                      (105 (ldc 10))      ;;STRING:: "fn"
                                      (107 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (110 (checkcast (class "clojure.lang.AFn")))
                                      (113 (putstatic (fieldCP "const__8" "clojure.test$with_test" (class "clojure.lang.AFn"))))
                                      (116 (ldc 2))       ;;STRING:: "clojure.core"
                                      (118 (ldc 11))      ;;STRING:: "apply"
                                      (120 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (123 (checkcast (class "clojure.lang.Var")))
                                      (126 (putstatic (fieldCP "const__9" "clojure.test$with_test" (class "clojure.lang.Var"))))
                                      (129 (ldc 2))       ;;STRING:: "clojure.core"
                                      (131 (ldc 12))      ;;STRING:: "vector"
                                      (133 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (136 (checkcast (class "clojure.lang.Var")))
                                      (139 (putstatic (fieldCP "const__10" "clojure.test$with_test" (class "clojure.lang.Var"))))
                                      (142 (return))
                                      (endofcode 143))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.RestFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doInvoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 19) (max_locals . 5) (code_length . 305)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (dup)) 
                                      (7 (ifnull 300)) ;;to TAG_0
                                      (10 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (13 (if_acmpeq 301)) ;;to TAG_1
                                      (16 (getstatic (fieldCP "const__1" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (19 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (22 (checkcast (class "clojure.lang.IFn"))) 
                                      (25 (getstatic (fieldCP "const__2" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (28 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (31 (checkcast (class "clojure.lang.IFn"))) 
                                      (34 (getstatic (fieldCP "const__3" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (37 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (40 (checkcast (class "clojure.lang.IFn"))) 
                                      (43 (getstatic (fieldCP "const__4" "clojure.test$with_test" (class "clojure.lang.AFn")))) 
                                      (46 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (51 (getstatic (fieldCP "const__3" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (54 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (57 (checkcast (class "clojure.lang.IFn"))) 
                                      (60 (aload_3)) 
                                      (61 (aconst_null)) 
                                      (62 (astore_3)) 
                                      (63 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (68 (getstatic (fieldCP "const__3" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (71 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (74 (checkcast (class "clojure.lang.IFn"))) 
                                      (77 (getstatic (fieldCP "const__1" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (80 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (83 (checkcast (class "clojure.lang.IFn"))) 
                                      (86 (getstatic (fieldCP "const__2" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (89 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (92 (checkcast (class "clojure.lang.IFn"))) 
                                      (95 (getstatic (fieldCP "const__3" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (98 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (101 (checkcast (class "clojure.lang.IFn"))) 
                                      (104 (getstatic (fieldCP "const__5" "clojure.test$with_test" (class "clojure.lang.AFn")))) 
                                      (107 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (112 (getstatic (fieldCP "const__3" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (115 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (118 (checkcast (class "clojure.lang.IFn"))) 
                                      (121 (getstatic (fieldCP "const__6" "clojure.test$with_test" (class "clojure.lang.AFn")))) 
                                      (124 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (129 (getstatic (fieldCP "const__3" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (132 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (135 (checkcast (class "clojure.lang.IFn"))) 
                                      (138 (getstatic (fieldCP "const__7" "clojure.test$with_test" (class "clojure.lang.Keyword")))) 
                                      (141 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (146 (getstatic (fieldCP "const__3" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (149 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (152 (checkcast (class "clojure.lang.IFn"))) 
                                      (155 (getstatic (fieldCP "const__1" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (158 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (161 (checkcast (class "clojure.lang.IFn"))) 
                                      (164 (getstatic (fieldCP "const__2" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (167 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (170 (checkcast (class "clojure.lang.IFn"))) 
                                      (173 (getstatic (fieldCP "const__3" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (176 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (179 (checkcast (class "clojure.lang.IFn"))) 
                                      (182 (getstatic (fieldCP "const__8" "clojure.test$with_test" (class "clojure.lang.AFn")))) 
                                      (185 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (190 (getstatic (fieldCP "const__3" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (193 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (196 (checkcast (class "clojure.lang.IFn"))) 
                                      (199 (getstatic (fieldCP "const__9" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (202 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (205 (checkcast (class "clojure.lang.IFn"))) 
                                      (208 (getstatic (fieldCP "const__10" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (211 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (214 (getstatic (fieldCP "const__1" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (217 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (220 (checkcast (class "clojure.lang.IFn"))) 
                                      (223 (getstatic (fieldCP "const__2" "clojure.test$with_test" (class "clojure.lang.Var")))) 
                                      (226 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (229 (checkcast (class "clojure.lang.IFn"))) 
                                      (232 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (237 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (242 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (247 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (252 (aload 4)) 
                                      (254 (aconst_null)) 
                                      (255 (astore 4)) 
                                      (257 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (262 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (267 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (272 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (277 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (282 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (287 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (292 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (297 (goto 304))  ;;to TAG_2
                                      (300 (pop)) ;;at TAG_0
                                      (301 (aload_3)) ;;at TAG_1
                                      (302 (aconst_null)) 
                                      (303 (astore_3)) 
                                      (304 (areturn)) ;;at TAG_2
                                      (endofcode 305))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getRequiredArity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_3))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *test$with_test-class-table*
  (make-static-class-decls 
   *clojure.test$with_test*))

(defconst *package-name-map* 
  ("clojure.test$with_test" . "clojure"))

