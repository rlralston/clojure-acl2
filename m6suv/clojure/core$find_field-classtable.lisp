; core$find_field-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:42 CDT 2014.
;

(defconst *clojure.core$find_field*
 (make-class-def
      '(class "clojure.core$find_field"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "=")
                        (STRING  "java.lang.Object")
                        (STRING  "str")
                        (STRING  "first")
                        (STRING  "filter")
                        (STRING  "field, ")
                        (STRING  ", not defined in class, ")
                        (STRING  ", or its ancestors"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 61)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "="
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$find_field" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "java.lang.Object"
                                      (15 (invokestatic
					(methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class"))))
                                      (18 (putstatic (fieldCP "const__1" "clojure.core$find_field" (class "java.lang.Object"))))
                                      (21 (ldc 0))        ;;STRING:: "clojure.core"
                                      (23 (ldc 3))        ;;STRING:: "str"
                                      (25 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (28 (checkcast (class "clojure.lang.Var")))
                                      (31 (putstatic (fieldCP "const__2" "clojure.core$find_field" (class "clojure.lang.Var"))))
                                      (34 (ldc 0))        ;;STRING:: "clojure.core"
                                      (36 (ldc 4))        ;;STRING:: "first"
                                      (38 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (41 (checkcast (class "clojure.lang.Var")))
                                      (44 (putstatic (fieldCP "const__3" "clojure.core$find_field" (class "clojure.lang.Var"))))
                                      (47 (ldc 0))        ;;STRING:: "clojure.core"
                                      (49 (ldc 5))        ;;STRING:: "filter"
                                      (51 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (54 (checkcast (class "clojure.lang.Var")))
                                      (57 (putstatic (fieldCP "const__4" "clojure.core$find_field" (class "clojure.lang.Var"))))
                                      (60 (return))
                                      (endofcode 61))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 8) (code_length . 153)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (astore_3)) 
                                      (2 (aload_1)) 
                                      (3 (aconst_null)) 
                                      (4 (astore_1)) 
                                      (5 (astore 4)) 
                                      (7 (aload 4)) ;;at TAG_4
                                      (9 (getstatic (fieldCP "const__1" "clojure.core$find_field" (class "java.lang.Object")))) 
                                      (12 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (15 (ifeq 58)) ;;to TAG_0
                                      (18 (new (class "java.lang.Exception"))) 
                                      (21 (dup)) 
                                      (22 (getstatic (fieldCP "const__2" "clojure.core$find_field" (class "clojure.lang.Var")))) 
                                      (25 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (28 (checkcast (class "clojure.lang.IFn"))) 
                                      (31 (ldc 6)) ;;STRING:: "field, "
                                      (33 (aload_2)) 
                                      (34 (ldc 7)) ;;STRING:: ", not defined in class, "
                                      (36 (aload_3)) 
                                      (37 (ldc 8)) ;;STRING:: ", or its ancestors"
                                      (39 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 6)) 
                                      (44 (checkcast (class "java.lang.String"))) 
                                      (47 (invokespecial (methodCP "<init>" "java.lang.Exception" ((class "java.lang.String")) void))) 
                                      (50 (checkcast (class "java.lang.Throwable"))) 
                                      (53 (athrow)) 
                                      (54 (goto 152)) ;;to TAG_1
                                      (57 (pop)) 
                                      (58 (aload 4)) ;;at TAG_0
                                      (60 (checkcast (class "java.lang.Class"))) 
                                      (63 (invokevirtual (methodCP "getDeclaredFields" "java.lang.Class" () (array (class "java.lang.reflect.Field"))))) 
                                      (66 (astore 5)) 
                                      (68 (getstatic (fieldCP "const__3" "clojure.core$find_field" (class "clojure.lang.Var")))) 
                                      (71 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (74 (checkcast (class "clojure.lang.IFn"))) 
                                      (77 (getstatic (fieldCP "const__4" "clojure.core$find_field" (class "clojure.lang.Var")))) 
                                      (80 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (83 (checkcast (class "clojure.lang.IFn"))) 
                                      (86 (new (class "clojure.core$find_field$fn__5536"))) 
                                      (89 (dup)) 
                                      (90 (aload_2)) 
                                      (91 (invokespecial (methodCP "<init>" "clojure.core$find_field$fn__5536" ((class "java.lang.Object")) void))) 
                                      (94 (aload 5)) 
                                      (96 (aconst_null)) 
                                      (97 (astore 5)) 
                                      (99 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (104 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (109 (astore 6)) 
                                      (111 (aload 6)) 
                                      (113 (aconst_null)) 
                                      (114 (astore 6)) 
                                      (116 (astore 7)) 
                                      (118 (aload 7)) 
                                      (120 (dup)) 
                                      (121 (ifnull 138))  ;;to TAG_2
                                      (124 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (127 (if_acmpeq 139)) ;;to TAG_3
                                      (130 (aload 7)) 
                                      (132 (aconst_null)) 
                                      (133 (astore 7)) 
                                      (135 (goto 152)) ;;to TAG_1
                                      (138 (pop)) ;;at TAG_2
                                      (139 (aload 4)) ;;at TAG_3
                                      (141 (checkcast (class "java.lang.Class"))) 
                                      (144 (invokevirtual (methodCP "getSuperclass" "java.lang.Class" () (class "java.lang.Class")))) 
                                      (147 (astore 4)) 
                                      (149 (goto 7)) ;;to TAG_4
                                      (152 (areturn)) ;;at TAG_1
                                      (endofcode 153))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$find_field-class-table*
  (make-static-class-decls 
   *clojure.core$find_field*))

(defconst *package-name-map* 
  ("clojure.core$find_field" . "clojure"))

