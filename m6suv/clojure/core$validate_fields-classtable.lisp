; core$validate_fields-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:46 CDT 2014.
;

(defconst *clojure.core$validate_fields*
 (make-class-def
      '(class "clojure.core$validate_fields"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "vector?")
                        (STRING  "__extmap")
                        (STRING  "__meta")
                        (STRING  "some")
                        (STRING  "str")
                        (STRING  "No fields vector given.")
                        (STRING  "The names in ")
                        (STRING  " cannot be used as field names for types or records."))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 0) (code_length . 95)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "vector?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$validate_fields" (class "clojure.lang.Var"))))
                                      (13 (aconst_null))
                                      (14 (ldc 2))        ;;STRING:: "__extmap"
                                      (16 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (19 (checkcast (class "clojure.lang.AFn")))
                                      (22 (putstatic (fieldCP "const__1" "clojure.core$validate_fields" (class "clojure.lang.AFn"))))
                                      (25 (aconst_null))
                                      (26 (ldc 3))        ;;STRING:: "__meta"
                                      (28 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (31 (checkcast (class "clojure.lang.AFn")))
                                      (34 (putstatic (fieldCP "const__2" "clojure.core$validate_fields" (class "clojure.lang.AFn"))))
                                      (37 (iconst_2))
                                      (38 (anewarray (class "java.lang.Object")))
                                      (41 (dup))
                                      (42 (iconst_0))
                                      (43 (aconst_null))
                                      (44 (ldc 2))        ;;STRING:: "__extmap"
                                      (46 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (49 (aastore))
                                      (50 (dup))
                                      (51 (iconst_1))
                                      (52 (aconst_null))
                                      (53 (ldc 3))        ;;STRING:: "__meta"
                                      (55 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (58 (aastore))
                                      (59 (invokestatic
					(methodCP "create" "clojure.lang.PersistentHashSet" ((array (class "java.lang.Object"))) (class "clojure.lang.PersistentHashSet"))))
                                      (62 (checkcast (class "clojure.lang.AFn")))
                                      (65 (putstatic (fieldCP "const__3" "clojure.core$validate_fields" (class "clojure.lang.AFn"))))
                                      (68 (ldc 0))        ;;STRING:: "clojure.core"
                                      (70 (ldc 4))        ;;STRING:: "some"
                                      (72 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (75 (checkcast (class "clojure.lang.Var")))
                                      (78 (putstatic (fieldCP "const__4" "clojure.core$validate_fields" (class "clojure.lang.Var"))))
                                      (81 (ldc 0))        ;;STRING:: "clojure.core"
                                      (83 (ldc 5))        ;;STRING:: "str"
                                      (85 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (88 (checkcast (class "clojure.lang.Var")))
                                      (91 (putstatic (fieldCP "const__5" "clojure.core$validate_fields" (class "clojure.lang.Var"))))
                                      (94 (return))
                                      (endofcode 95))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 3) (code_length . 114)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$validate_fields" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (dup)) 
                                      (16 (ifnull 30)) ;;to TAG_0
                                      (19 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (22 (if_acmpeq 31)) ;;to TAG_1
                                      (25 (aconst_null)) 
                                      (26 (pop)) 
                                      (27 (goto 44))  ;;to TAG_2
                                      (30 (pop)) ;;at TAG_0
                                      (31 (new (class "java.lang.AssertionError"))) ;;at TAG_1
                                      (34 (dup)) 
                                      (35 (ldc 6)) ;;STRING:: "No fields vector given."
                                      (37 (invokespecial (methodCP "<init>" "java.lang.AssertionError" ((class "java.lang.Object")) void))) 
                                      (40 (checkcast (class "java.lang.Throwable"))) 
                                      (43 (athrow)) 
                                      (44 (getstatic (fieldCP "const__3" "clojure.core$validate_fields" (class "clojure.lang.AFn")))) ;;at TAG_2
                                      (47 (astore_2)) 
                                      (48 (getstatic (fieldCP "const__4" "clojure.core$validate_fields" (class "clojure.lang.Var")))) 
                                      (51 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (54 (checkcast (class "clojure.lang.IFn"))) 
                                      (57 (aload_2)) 
                                      (58 (aload_1)) 
                                      (59 (aconst_null)) 
                                      (60 (astore_1)) 
                                      (61 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (66 (dup)) 
                                      (67 (ifnull 111)) ;;to TAG_3
                                      (70 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (73 (if_acmpeq 112)) ;;to TAG_4
                                      (76 (new (class "java.lang.AssertionError"))) 
                                      (79 (dup)) 
                                      (80 (getstatic (fieldCP "const__5" "clojure.core$validate_fields" (class "clojure.lang.Var")))) 
                                      (83 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (86 (checkcast (class "clojure.lang.IFn"))) 
                                      (89 (ldc 7)) ;;STRING:: "The names in "
                                      (91 (aload_2)) 
                                      (92 (aconst_null)) 
                                      (93 (astore_2)) 
                                      (94 (ldc 8)) ;;STRING:: " cannot be used as field names for types or records."
                                      (96 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (101 (invokespecial (methodCP "<init>" "java.lang.AssertionError" ((class "java.lang.Object")) void))) 
                                      (104 (checkcast (class "java.lang.Throwable"))) 
                                      (107 (athrow)) 
                                      (108 (goto 113)) ;;to TAG_5
                                      (111 (pop)) ;;at TAG_3
                                      (112 (aconst_null)) ;;at TAG_4
                                      (113 (areturn)) ;;at TAG_5
                                      (endofcode 114))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$validate_fields-class-table*
  (make-static-class-decls 
   *clojure.core$validate_fields*))

(defconst *package-name-map* 
  ("clojure.core$validate_fields" . "clojure"))

