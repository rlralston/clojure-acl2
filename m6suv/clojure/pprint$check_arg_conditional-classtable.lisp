; pprint$check_arg_conditional-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:55 CDT 2014.
;

(defconst *clojure.pprint$check_arg_conditional*
 (make-class-def
      '(class "clojure.pprint$check_arg_conditional"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.pprint")
                        (STRING  "next-arg")
                        (STRING  "clojure.core")
                        (STRING  "nth")
                        (STRING  "clauses")
                        (STRING  "first")
                        (STRING  "execute-sub-format")
                        (STRING  "base-args"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "__site__0__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__0__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1)
                        (field "__site__1__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__1__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 0) (code_length . 131)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.pprint"
                                      (2 (ldc 1))         ;;STRING:: "next-arg"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$check_arg_conditional" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.core"
                                      (15 (ldc 3))        ;;STRING:: "nth"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$check_arg_conditional" (class "clojure.lang.Var"))))
                                      (26 (lconst_0))
                                      (27 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (30 (putstatic (fieldCP "const__2" "clojure.pprint$check_arg_conditional" (class "java.lang.Object"))))
                                      (33 (lconst_1))
                                      (34 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (37 (putstatic (fieldCP "const__3" "clojure.pprint$check_arg_conditional" (class "java.lang.Object"))))
                                      (40 (aconst_null))
                                      (41 (ldc 4))        ;;STRING:: "clauses"
                                      (43 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (46 (checkcast (class "clojure.lang.Keyword")))
                                      (49 (putstatic (fieldCP "const__4" "clojure.pprint$check_arg_conditional" (class "clojure.lang.Keyword"))))
                                      (52 (ldc 2))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "first"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__5" "clojure.pprint$check_arg_conditional" (class "clojure.lang.Var"))))
                                      (65 (ldc 0))        ;;STRING:: "clojure.pprint"
                                      (67 (ldc 6))        ;;STRING:: "execute-sub-format"
                                      (69 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (72 (checkcast (class "clojure.lang.Var")))
                                      (75 (putstatic (fieldCP "const__6" "clojure.pprint$check_arg_conditional" (class "clojure.lang.Var"))))
                                      (78 (aconst_null))
                                      (79 (ldc 7))        ;;STRING:: "base-args"
                                      (81 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (84 (checkcast (class "clojure.lang.Keyword")))
                                      (87 (putstatic (fieldCP "const__7" "clojure.pprint$check_arg_conditional" (class "clojure.lang.Keyword"))))
                                      (90 (new (class "clojure.lang.KeywordLookupSite")))
                                      (93 (dup))
                                      (94 (aconst_null))
                                      (95 (ldc 4))        ;;STRING:: "clauses"
                                      (97 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (100 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (103 (dup))
                                      (104 (putstatic (fieldCP "__site__0__" "clojure.pprint$check_arg_conditional" (class "clojure.lang.KeywordLookupSite"))))
                                      (107 (putstatic (fieldCP "__thunk__0__" "clojure.pprint$check_arg_conditional" (class "clojure.lang.ILookupThunk"))))
                                      (110 (new (class "clojure.lang.KeywordLookupSite")))
                                      (113 (dup))
                                      (114 (aconst_null))
                                      (115 (ldc 7))       ;;STRING:: "base-args"
                                      (117 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (120 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (123 (dup))
                                      (124 (putstatic (fieldCP "__site__1__" "clojure.pprint$check_arg_conditional" (class "clojure.lang.KeywordLookupSite"))))
                                      (127 (putstatic (fieldCP "__thunk__1__" "clojure.pprint$check_arg_conditional" (class "clojure.lang.ILookupThunk"))))
                                      (130 (return))
                                      (endofcode 131))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 9) (code_length . 234)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$check_arg_conditional" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_2)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (astore 4)) 
                                      (17 (aload 4)) 
                                      (19 (lconst_0)) 
                                      (20 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (23 (aconst_null)) 
                                      (24 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (27 (astore 5)) 
                                      (29 (aload 4)) 
                                      (31 (aconst_null)) 
                                      (32 (astore 4)) 
                                      (34 (lconst_1)) 
                                      (35 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (38 (aconst_null)) 
                                      (39 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (42 (astore 6)) 
                                      (44 (getstatic (fieldCP "__thunk__0__" "clojure.pprint$check_arg_conditional" (class "clojure.lang.ILookupThunk")))) 
                                      (47 (dup)) 
                                      (48 (aload_1)) 
                                      (49 (dup_x2)) 
                                      (50 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (55 (dup_x2)) 
                                      (56 (if_acmpeq 63)) ;;to TAG_0
                                      (59 (pop)) 
                                      (60 (goto 85))  ;;to TAG_1
                                      (63 (swap)) ;;at TAG_0
                                      (64 (pop)) 
                                      (65 (dup)) 
                                      (66 (getstatic (fieldCP "__site__0__" "clojure.pprint$check_arg_conditional" (class "clojure.lang.KeywordLookupSite")))) 
                                      (69 (swap)) 
                                      (70 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (75 (dup)) 
                                      (76 (putstatic (fieldCP "__thunk__0__" "clojure.pprint$check_arg_conditional" (class "clojure.lang.ILookupThunk")))) 
                                      (79 (swap)) 
                                      (80 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (85 (astore 7)) ;;at TAG_1
                                      (87 (aload 5)) 
                                      (89 (dup)) 
                                      (90 (ifnull 121)) ;;to TAG_2
                                      (93 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (96 (if_acmpeq 122)) ;;to TAG_3
                                      (99 (getstatic (fieldCP "const__5" "clojure.pprint$check_arg_conditional" (class "clojure.lang.Var")))) 
                                      (102 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (105 (checkcast (class "clojure.lang.IFn"))) 
                                      (108 (aload 7)) 
                                      (110 (aconst_null)) 
                                      (111 (astore 7)) 
                                      (113 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (118 (goto 123)) ;;to TAG_4
                                      (121 (pop)) ;;at TAG_2
                                      (122 (aconst_null)) ;;at TAG_3
                                      (123 (astore 8)) ;;at TAG_4
                                      (125 (aload 5)) 
                                      (127 (aconst_null)) 
                                      (128 (astore 5)) 
                                      (130 (dup)) 
                                      (131 (ifnull 227)) ;;to TAG_5
                                      (134 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (137 (if_acmpeq 228)) ;;to TAG_6
                                      (140 (aload 8)) 
                                      (142 (dup)) 
                                      (143 (ifnull 220)) ;;to TAG_7
                                      (146 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (149 (if_acmpeq 221)) ;;to TAG_8
                                      (152 (getstatic (fieldCP "const__6" "clojure.pprint$check_arg_conditional" (class "clojure.lang.Var")))) 
                                      (155 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (158 (checkcast (class "clojure.lang.IFn"))) 
                                      (161 (aload 8)) 
                                      (163 (aconst_null)) 
                                      (164 (astore 8)) 
                                      (166 (aload_2)) 
                                      (167 (aconst_null)) 
                                      (168 (astore_2)) 
                                      (169 (getstatic (fieldCP "__thunk__1__" "clojure.pprint$check_arg_conditional" (class "clojure.lang.ILookupThunk")))) 
                                      (172 (dup)) 
                                      (173 (aload_1)) 
                                      (174 (aconst_null)) 
                                      (175 (astore_1)) 
                                      (176 (dup_x2)) 
                                      (177 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (182 (dup_x2)) 
                                      (183 (if_acmpeq 190)) ;;to TAG_9
                                      (186 (pop)) 
                                      (187 (goto 212)) ;;to TAG_10
                                      (190 (swap)) ;;at TAG_9
                                      (191 (pop)) 
                                      (192 (dup)) 
                                      (193 (getstatic (fieldCP "__site__1__" "clojure.pprint$check_arg_conditional" (class "clojure.lang.KeywordLookupSite")))) 
                                      (196 (swap)) 
                                      (197 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (202 (dup)) 
                                      (203 (putstatic (fieldCP "__thunk__1__" "clojure.pprint$check_arg_conditional" (class "clojure.lang.ILookupThunk")))) 
                                      (206 (swap)) 
                                      (207 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (212 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) ;;at TAG_10
                                      (217 (goto 224)) ;;to TAG_11
                                      (220 (pop)) ;;at TAG_7
                                      (221 (aload_2)) ;;at TAG_8
                                      (222 (aconst_null)) 
                                      (223 (astore_2)) 
                                      (224 (goto 233)) ;;to TAG_12;;at TAG_11
                                      (227 (pop)) ;;at TAG_5
                                      (228 (aload 6)) ;;at TAG_6
                                      (230 (aconst_null)) 
                                      (231 (astore 6)) 
                                      (233 (areturn)) ;;at TAG_12
                                      (endofcode 234))
                                   (Exceptions )
                                   (StackMap )))
                        (method "swapThunk"
                              (parameters int (class "clojure.lang.ILookupThunk"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 39)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (tableswitch (tableswitchinfo 38 (0 . 1) (24 31))))  ;;to TAG_2;;to TAG_0;;to TAG_1
                                      (24 (aload_2)) ;;at TAG_1
                                      (25 (putstatic (fieldCP "__thunk__0__" "clojure.pprint$check_arg_conditional" (class "clojure.lang.ILookupThunk")))) 
                                      (28 (goto 38)) ;;to TAG_0
                                      (31 (aload_2)) ;;at TAG_2
                                      (32 (putstatic (fieldCP "__thunk__1__" "clojure.pprint$check_arg_conditional" (class "clojure.lang.ILookupThunk")))) 
                                      (35 (goto 38)) ;;to TAG_0
                                      (38 (return)) ;;at TAG_0
                                      (endofcode 39))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$check_arg_conditional-class-table*
  (make-static-class-decls 
   *clojure.pprint$check_arg_conditional*))

(defconst *package-name-map* 
  ("clojure.pprint$check_arg_conditional" . "clojure"))

