; xml$startparse_sax-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:59 CDT 2014.
;

(defconst *clojure.xml$startparse_sax*
 (make-class-def
      '(class "clojure.xml$startparse_sax"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "parse"))
            (fields)
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 0) (max_locals . 0) (code_length . 1)
                                   (parsedcode
                                      (0 (return))
                                      (endofcode 1))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 3) (code_length . 31)
                                   (parsedcode
                                      (0 (invokestatic
					(methodCP "newInstance" "javax.xml.parsers.SAXParserFactory" () (class "javax.xml.parsers.SAXParserFactory"))))
                                      (3 (checkcast (class "javax.xml.parsers.SAXParserFactory")))
                                      (6 (invokevirtual
					(methodCP "newSAXParser" "javax.xml.parsers.SAXParserFactory" () (class "javax.xml.parsers.SAXParser"))))
                                      (9 (ldc 0))         ;;STRING:: "parse"
                                      (11 (iconst_2))
                                      (12 (anewarray (class "java.lang.Object")))
                                      (15 (dup))
                                      (16 (iconst_0))
                                      (17 (aload_1))
                                      (18 (aconst_null))
                                      (19 (astore_1))
                                      (20 (aastore))
                                      (21 (dup))
                                      (22 (iconst_1))
                                      (23 (aload_2))
                                      (24 (aconst_null))
                                      (25 (astore_2))
                                      (26 (aastore))
                                      (27 (invokestatic
					(methodCP "invokeInstanceMethod" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.Object"))))
                                      (30 (areturn))
                                      (endofcode 31))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *xml$startparse_sax-class-table*
  (make-static-class-decls 
   *clojure.xml$startparse_sax*))

(defconst *package-name-map* 
  ("clojure.xml$startparse_sax" . "clojure"))

