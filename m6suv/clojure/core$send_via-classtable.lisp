; core$send_via-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:45 CDT 2014.
;

(defconst *clojure.core$send_via*
 (make-class-def
      '(class "clojure.core$send_via"
            "clojure.lang.RestFn"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "push-thread-bindings")
                        (STRING  "hash-map")
                        (STRING  "*agent*"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 40)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "push-thread-bindings"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$send_via" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "hash-map"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$send_via" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "*agent*"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$send_via" (class "clojure.lang.Var"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.RestFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doInvoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 5) (code_length . 78)
                                   (parsedcode
                                      (0 (aload_2))
                                      (1 (checkcast (class "clojure.lang.Agent")))
                                      (4 (getstatic (fieldCP "const__0" "clojure.core$send_via" (class "clojure.lang.Var"))))
                                      (7 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (10 (checkcast (class "clojure.lang.IFn")))
                                      (13 (getstatic (fieldCP "const__1" "clojure.core$send_via" (class "clojure.lang.Var"))))
                                      (16 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (19 (checkcast (class "clojure.lang.IFn")))
                                      (22 (getstatic (fieldCP "const__2" "clojure.core$send_via" (class "clojure.lang.Var"))))
                                      (25 (aload_2))
                                      (26 (aconst_null))
                                      (27 (astore_2))
                                      (28 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3))
                                      (33 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2))
                                      (38 (pop))
                                      (39 (new (class "clojure.core$send_via$fn__4115")))
                                      (42 (dup))
                                      (43 (aload_3))
                                      (44 (aconst_null))
                                      (45 (astore_3))
                                      (46 (invokespecial
					(methodCP "<init>" "clojure.core$send_via$fn__4115" ((class "java.lang.Object")) void)))
                                      (49 (checkcast (class "clojure.lang.IFn")))
                                      (52 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1))
                                      (57 (checkcast (class "clojure.lang.IFn")))
                                      (60 (aload 4))
                                      (62 (aconst_null))
                                      (63 (astore 4))
                                      (65 (checkcast (class "clojure.lang.ISeq")))
                                      (68 (aload_1))
                                      (69 (aconst_null))
                                      (70 (astore_1))
                                      (71 (checkcast (class "java.util.concurrent.Executor")))
                                      (74 (invokevirtual
					(methodCP "dispatch" "clojure.lang.Agent" ((class "clojure.lang.IFn") (class "clojure.lang.ISeq") (class "java.util.concurrent.Executor")) (class "java.lang.Object"))))
                                      (77 (areturn))
                                      (endofcode 78))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getRequiredArity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_3))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$send_via-class-table*
  (make-static-class-decls 
   *clojure.core$send_via*))

(defconst *package-name-map* 
  ("clojure.core$send_via" . "clojure"))

