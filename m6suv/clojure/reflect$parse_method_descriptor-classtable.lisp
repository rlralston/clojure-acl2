; reflect$parse_method_descriptor-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:57 CDT 2014.
;

(defconst *clojure.reflect$parse_method_descriptor*
 (make-class-def
      '(class "clojure.reflect$parse_method_descriptor"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "parameter-types")
                        (STRING  "clojure.core")
                        (STRING  "vec")
                        (STRING  "map")
                        (STRING  "clojure.reflect")
                        (STRING  "typesym")
                        (STRING  "return-type"))
            (fields
                        (field "const__0" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 64)
                                   (parsedcode
                                      (0 (aconst_null))
                                      (1 (ldc 0))         ;;STRING:: "parameter-types"
                                      (3 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (6 (checkcast (class "clojure.lang.Keyword")))
                                      (9 (putstatic (fieldCP "const__0" "clojure.reflect$parse_method_descriptor" (class "clojure.lang.Keyword"))))
                                      (12 (ldc 1))        ;;STRING:: "clojure.core"
                                      (14 (ldc 2))        ;;STRING:: "vec"
                                      (16 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (19 (checkcast (class "clojure.lang.Var")))
                                      (22 (putstatic (fieldCP "const__1" "clojure.reflect$parse_method_descriptor" (class "clojure.lang.Var"))))
                                      (25 (ldc 1))        ;;STRING:: "clojure.core"
                                      (27 (ldc 3))        ;;STRING:: "map"
                                      (29 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (32 (checkcast (class "clojure.lang.Var")))
                                      (35 (putstatic (fieldCP "const__2" "clojure.reflect$parse_method_descriptor" (class "clojure.lang.Var"))))
                                      (38 (ldc 4))        ;;STRING:: "clojure.reflect"
                                      (40 (ldc 5))        ;;STRING:: "typesym"
                                      (42 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (45 (checkcast (class "clojure.lang.Var")))
                                      (48 (putstatic (fieldCP "const__3" "clojure.reflect$parse_method_descriptor" (class "clojure.lang.Var"))))
                                      (51 (aconst_null))
                                      (52 (ldc 6))        ;;STRING:: "return-type"
                                      (54 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (57 (checkcast (class "clojure.lang.Keyword")))
                                      (60 (putstatic (fieldCP "const__4" "clojure.reflect$parse_method_descriptor" (class "clojure.lang.Keyword"))))
                                      (63 (return))
                                      (endofcode 64))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 2) (code_length . 90)
                                   (parsedcode
                                      (0 (iconst_4))
                                      (1 (anewarray (class "java.lang.Object")))
                                      (4 (dup))
                                      (5 (iconst_0))
                                      (6 (getstatic (fieldCP "const__0" "clojure.reflect$parse_method_descriptor" (class "clojure.lang.Keyword"))))
                                      (9 (aastore))
                                      (10 (dup))
                                      (11 (iconst_1))
                                      (12 (getstatic (fieldCP "const__1" "clojure.reflect$parse_method_descriptor" (class "clojure.lang.Var"))))
                                      (15 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (18 (checkcast (class "clojure.lang.IFn")))
                                      (21 (getstatic (fieldCP "const__2" "clojure.reflect$parse_method_descriptor" (class "clojure.lang.Var"))))
                                      (24 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (27 (checkcast (class "clojure.lang.IFn")))
                                      (30 (getstatic (fieldCP "const__3" "clojure.reflect$parse_method_descriptor" (class "clojure.lang.Var"))))
                                      (33 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (36 (aload_1))
                                      (37 (checkcast (class "java.lang.String")))
                                      (40 (invokestatic
					(methodCP "getArgumentTypes" "clojure.asm.Type" ((class "java.lang.String")) (array (class "clojure.asm.Type")))))
                                      (43 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3))
                                      (48 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2))
                                      (53 (aastore))
                                      (54 (dup))
                                      (55 (iconst_2))
                                      (56 (getstatic (fieldCP "const__4" "clojure.reflect$parse_method_descriptor" (class "clojure.lang.Keyword"))))
                                      (59 (aastore))
                                      (60 (dup))
                                      (61 (iconst_3))
                                      (62 (getstatic (fieldCP "const__3" "clojure.reflect$parse_method_descriptor" (class "clojure.lang.Var"))))
                                      (65 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (68 (checkcast (class "clojure.lang.IFn")))
                                      (71 (aload_1))
                                      (72 (aconst_null))
                                      (73 (astore_1))
                                      (74 (checkcast (class "java.lang.String")))
                                      (77 (invokestatic
					(methodCP "getReturnType" "clojure.asm.Type" ((class "java.lang.String")) (class "clojure.asm.Type"))))
                                      (80 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2))
                                      (85 (aastore))
                                      (86 (invokestatic
					(methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (89 (areturn))
                                      (endofcode 90))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *reflect$parse_method_descriptor-class-table*
  (make-static-class-decls 
   *clojure.reflect$parse_method_descriptor*))

(defconst *package-name-map* 
  ("clojure.reflect$parse_method_descriptor" . "clojure"))

