; repl$apropos-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:58 CDT 2014.
;

(defconst *clojure.repl$apropos*
 (make-class-def
      '(class "clojure.repl$apropos"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "instance?")
                        (STRING  "mapcat")
                        (STRING  "all-ns"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 40)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "instance?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.repl$apropos" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "mapcat"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.repl$apropos" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "all-ns"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.repl$apropos" (class "clojure.lang.Var"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 71)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (instanceof (class "java.util.regex.Pattern"))) 
                                      (4 (ifeq 21))  ;;to TAG_0
                                      (7 (new (class "clojure.repl$apropos$fn__8758"))) 
                                      (10 (dup)) 
                                      (11 (aload_1)) 
                                      (12 (aconst_null)) 
                                      (13 (astore_1)) 
                                      (14 (invokespecial (methodCP "<init>" "clojure.repl$apropos$fn__8758" ((class "java.lang.Object")) void))) 
                                      (17 (goto 31)) ;;to TAG_1
                                      (20 (pop)) 
                                      (21 (new (class "clojure.repl$apropos$fn__8760"))) ;;at TAG_0
                                      (24 (dup)) 
                                      (25 (aload_1)) 
                                      (26 (aconst_null)) 
                                      (27 (astore_1)) 
                                      (28 (invokespecial (methodCP "<init>" "clojure.repl$apropos$fn__8760" ((class "java.lang.Object")) void))) 
                                      (31 (astore_2)) ;;at TAG_1
                                      (32 (getstatic (fieldCP "const__1" "clojure.repl$apropos" (class "clojure.lang.Var")))) 
                                      (35 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (38 (checkcast (class "clojure.lang.IFn"))) 
                                      (41 (new (class "clojure.repl$apropos$fn__8762"))) 
                                      (44 (dup)) 
                                      (45 (aload_2)) 
                                      (46 (aconst_null)) 
                                      (47 (astore_2)) 
                                      (48 (invokespecial (methodCP "<init>" "clojure.repl$apropos$fn__8762" ((class "java.lang.Object")) void))) 
                                      (51 (getstatic (fieldCP "const__2" "clojure.repl$apropos" (class "clojure.lang.Var")))) 
                                      (54 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (57 (checkcast (class "clojure.lang.IFn"))) 
                                      (60 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (65 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (70 (areturn)) 
                                      (endofcode 71))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *repl$apropos-class-table*
  (make-static-class-decls 
   *clojure.repl$apropos*))

(defconst *package-name-map* 
  ("clojure.repl$apropos" . "clojure"))

