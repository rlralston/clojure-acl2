; reflect$type_reflect-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:58 CDT 2014.
;

(defconst *clojure.reflect$type_reflect*
 (make-class-def
      '(class "clojure.reflect$type_reflect"
            "clojure.lang.RestFn"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "merge")
                        (STRING  "reflector")
                        (STRING  "clojure.reflect")
                        (STRING  "default-reflector")
                        (STRING  "apply")
                        (STRING  "hash-map")
                        (STRING  "seq?")
                        (STRING  "seq")
                        (STRING  "get")
                        (STRING  "ancestors")
                        (STRING  "partial")
                        (STRING  "do-reflect")
                        (STRING  "bases")
                        (STRING  "set")
                        (STRING  "keys")
                        (STRING  "clojure.set")
                        (STRING  "difference")
                        (STRING  "mapcat")
                        (STRING  "vals")
                        (STRING  "merge-with")
                        (STRING  "into")
                        (STRING  "map"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__11" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__12" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__13" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__14" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__15" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__16" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__17" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__18" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__19" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "__site__0__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__0__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 0) (code_length . 278)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "merge"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (13 (aconst_null))
                                      (14 (ldc 2))        ;;STRING:: "reflector"
                                      (16 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (19 (checkcast (class "clojure.lang.Keyword")))
                                      (22 (putstatic (fieldCP "const__1" "clojure.reflect$type_reflect" (class "clojure.lang.Keyword"))))
                                      (25 (ldc 3))        ;;STRING:: "clojure.reflect"
                                      (27 (ldc 4))        ;;STRING:: "default-reflector"
                                      (29 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (32 (checkcast (class "clojure.lang.Var")))
                                      (35 (putstatic (fieldCP "const__2" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (38 (ldc 0))        ;;STRING:: "clojure.core"
                                      (40 (ldc 5))        ;;STRING:: "apply"
                                      (42 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (45 (checkcast (class "clojure.lang.Var")))
                                      (48 (putstatic (fieldCP "const__3" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (51 (ldc 0))        ;;STRING:: "clojure.core"
                                      (53 (ldc 6))        ;;STRING:: "hash-map"
                                      (55 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (58 (checkcast (class "clojure.lang.Var")))
                                      (61 (putstatic (fieldCP "const__4" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (64 (ldc 0))        ;;STRING:: "clojure.core"
                                      (66 (ldc 7))        ;;STRING:: "seq?"
                                      (68 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (71 (checkcast (class "clojure.lang.Var")))
                                      (74 (putstatic (fieldCP "const__5" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (77 (ldc 0))        ;;STRING:: "clojure.core"
                                      (79 (ldc 8))        ;;STRING:: "seq"
                                      (81 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (84 (checkcast (class "clojure.lang.Var")))
                                      (87 (putstatic (fieldCP "const__6" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (90 (ldc 0))        ;;STRING:: "clojure.core"
                                      (92 (ldc 9))        ;;STRING:: "get"
                                      (94 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (97 (checkcast (class "clojure.lang.Var")))
                                      (100 (putstatic (fieldCP "const__7" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (103 (aconst_null))
                                      (104 (ldc 10))      ;;STRING:: "ancestors"
                                      (106 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (109 (checkcast (class "clojure.lang.Keyword")))
                                      (112 (putstatic (fieldCP "const__8" "clojure.reflect$type_reflect" (class "clojure.lang.Keyword"))))
                                      (115 (ldc 0))       ;;STRING:: "clojure.core"
                                      (117 (ldc 11))      ;;STRING:: "partial"
                                      (119 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (122 (checkcast (class "clojure.lang.Var")))
                                      (125 (putstatic (fieldCP "const__9" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (128 (ldc 3))       ;;STRING:: "clojure.reflect"
                                      (130 (ldc 12))      ;;STRING:: "do-reflect"
                                      (132 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (135 (checkcast (class "clojure.lang.Var")))
                                      (138 (putstatic (fieldCP "const__10" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (141 (aconst_null))
                                      (142 (ldc 13))      ;;STRING:: "bases"
                                      (144 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (147 (checkcast (class "clojure.lang.Keyword")))
                                      (150 (putstatic (fieldCP "const__11" "clojure.reflect$type_reflect" (class "clojure.lang.Keyword"))))
                                      (153 (ldc 0))       ;;STRING:: "clojure.core"
                                      (155 (ldc 14))      ;;STRING:: "set"
                                      (157 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (160 (checkcast (class "clojure.lang.Var")))
                                      (163 (putstatic (fieldCP "const__12" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (166 (ldc 0))       ;;STRING:: "clojure.core"
                                      (168 (ldc 15))      ;;STRING:: "keys"
                                      (170 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (173 (checkcast (class "clojure.lang.Var")))
                                      (176 (putstatic (fieldCP "const__13" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (179 (ldc 16))      ;;STRING:: "clojure.set"
                                      (181 (ldc 17))      ;;STRING:: "difference"
                                      (183 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (186 (checkcast (class "clojure.lang.Var")))
                                      (189 (putstatic (fieldCP "const__14" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (192 (ldc 0))       ;;STRING:: "clojure.core"
                                      (194 (ldc 18))      ;;STRING:: "mapcat"
                                      (196 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (199 (checkcast (class "clojure.lang.Var")))
                                      (202 (putstatic (fieldCP "const__15" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (205 (ldc 0))       ;;STRING:: "clojure.core"
                                      (207 (ldc 19))      ;;STRING:: "vals"
                                      (209 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (212 (checkcast (class "clojure.lang.Var")))
                                      (215 (putstatic (fieldCP "const__16" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (218 (ldc 0))       ;;STRING:: "clojure.core"
                                      (220 (ldc 20))      ;;STRING:: "merge-with"
                                      (222 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (225 (checkcast (class "clojure.lang.Var")))
                                      (228 (putstatic (fieldCP "const__17" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (231 (ldc 0))       ;;STRING:: "clojure.core"
                                      (233 (ldc 21))      ;;STRING:: "into"
                                      (235 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (238 (checkcast (class "clojure.lang.Var")))
                                      (241 (putstatic (fieldCP "const__18" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (244 (ldc 0))       ;;STRING:: "clojure.core"
                                      (246 (ldc 22))      ;;STRING:: "map"
                                      (248 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (251 (checkcast (class "clojure.lang.Var")))
                                      (254 (putstatic (fieldCP "const__19" "clojure.reflect$type_reflect" (class "clojure.lang.Var"))))
                                      (257 (new (class "clojure.lang.KeywordLookupSite")))
                                      (260 (dup))
                                      (261 (aconst_null))
                                      (262 (ldc 13))      ;;STRING:: "bases"
                                      (264 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (267 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (270 (dup))
                                      (271 (putstatic (fieldCP "__site__0__" "clojure.reflect$type_reflect" (class "clojure.lang.KeywordLookupSite"))))
                                      (274 (putstatic (fieldCP "__thunk__0__" "clojure.reflect$type_reflect" (class "clojure.lang.ILookupThunk"))))
                                      (277 (return))
                                      (endofcode 278))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.RestFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doInvoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 9) (max_locals . 13) (code_length . 524)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (iconst_2)) 
                                      (10 (anewarray (class "java.lang.Object"))) 
                                      (13 (dup)) 
                                      (14 (iconst_0)) 
                                      (15 (getstatic (fieldCP "const__1" "clojure.reflect$type_reflect" (class "clojure.lang.Keyword")))) 
                                      (18 (aastore)) 
                                      (19 (dup)) 
                                      (20 (iconst_1)) 
                                      (21 (getstatic (fieldCP "const__2" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (24 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (27 (aastore)) 
                                      (28 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (31 (getstatic (fieldCP "const__3" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (34 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (37 (checkcast (class "clojure.lang.IFn"))) 
                                      (40 (getstatic (fieldCP "const__4" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (43 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (46 (aload_2)) 
                                      (47 (aconst_null)) 
                                      (48 (astore_2)) 
                                      (49 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (54 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (59 (astore_3)) 
                                      (60 (getstatic (fieldCP "const__5" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (63 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (66 (checkcast (class "clojure.lang.IFn"))) 
                                      (69 (aload_3)) 
                                      (70 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (75 (dup)) 
                                      (76 (ifnull 111)) ;;to TAG_0
                                      (79 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (82 (if_acmpeq 112))  ;;to TAG_1
                                      (85 (getstatic (fieldCP "const__6" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (88 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (91 (checkcast (class "clojure.lang.IFn"))) 
                                      (94 (aload_3)) 
                                      (95 (aconst_null)) 
                                      (96 (astore_3)) 
                                      (97 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (102 (checkcast (class "clojure.lang.ISeq"))) 
                                      (105 (invokestatic (methodCP "create" "clojure.lang.PersistentHashMap" ((class "clojure.lang.ISeq")) (class "clojure.lang.PersistentHashMap")))) 
                                      (108 (goto 115)) ;;to TAG_2
                                      (111 (pop)) ;;at TAG_0
                                      (112 (aload_3)) ;;at TAG_1
                                      (113 (aconst_null)) 
                                      (114 (astore_3)) 
                                      (115 (astore 4)) ;;at TAG_2
                                      (117 (aload 4)) 
                                      (119 (getstatic (fieldCP "const__1" "clojure.reflect$type_reflect" (class "clojure.lang.Keyword")))) 
                                      (122 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (125 (astore 5)) 
                                      (127 (aload 4)) 
                                      (129 (aconst_null)) 
                                      (130 (astore 4)) 
                                      (132 (getstatic (fieldCP "const__8" "clojure.reflect$type_reflect" (class "clojure.lang.Keyword")))) 
                                      (135 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (138 (astore 6)) 
                                      (140 (getstatic (fieldCP "const__9" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (143 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (146 (checkcast (class "clojure.lang.IFn"))) 
                                      (149 (getstatic (fieldCP "const__10" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (152 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (155 (aload 5)) 
                                      (157 (aconst_null)) 
                                      (158 (astore 5)) 
                                      (160 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (165 (astore 7)) 
                                      (167 (aload 7)) 
                                      (169 (checkcast (class "clojure.lang.IFn"))) 
                                      (172 (aload_1)) 
                                      (173 (aconst_null)) 
                                      (174 (astore_1)) 
                                      (175 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (180 (astore 8)) 
                                      (182 (aload 6)) 
                                      (184 (aconst_null)) 
                                      (185 (astore 6)) 
                                      (187 (dup)) 
                                      (188 (ifnull 517)) ;;to TAG_3
                                      (191 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (194 (if_acmpeq 518)) ;;to TAG_4
                                      (197 (new (class "clojure.reflect$type_reflect$make_ancestor_map__9021"))) 
                                      (200 (dup)) 
                                      (201 (aload 7)) 
                                      (203 (aconst_null)) 
                                      (204 (astore 7)) 
                                      (206 (invokespecial (methodCP "<init>" "clojure.reflect$type_reflect$make_ancestor_map__9021" ((class "java.lang.Object")) void))) 
                                      (209 (astore 9)) 
                                      (211 (aload 9)) 
                                      (213 (checkcast (class "clojure.lang.IFn"))) 
                                      (216 (getstatic (fieldCP "__thunk__0__" "clojure.reflect$type_reflect" (class "clojure.lang.ILookupThunk")))) 
                                      (219 (dup)) 
                                      (220 (aload 8)) 
                                      (222 (dup_x2)) 
                                      (223 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (228 (dup_x2)) 
                                      (229 (if_acmpeq 236)) ;;to TAG_5
                                      (232 (pop)) 
                                      (233 (goto 258)) ;;to TAG_6
                                      (236 (swap)) ;;at TAG_5
                                      (237 (pop)) 
                                      (238 (dup)) 
                                      (239 (getstatic (fieldCP "__site__0__" "clojure.reflect$type_reflect" (class "clojure.lang.KeywordLookupSite")))) 
                                      (242 (swap)) 
                                      (243 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (248 (dup)) 
                                      (249 (putstatic (fieldCP "__thunk__0__" "clojure.reflect$type_reflect" (class "clojure.lang.ILookupThunk")))) 
                                      (252 (swap)) 
                                      (253 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (258 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_6
                                      (263 (astore 10)) 
                                      (265 (getstatic (fieldCP "const__12" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) ;;at TAG_9
                                      (268 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (271 (checkcast (class "clojure.lang.IFn"))) 
                                      (274 (getstatic (fieldCP "const__13" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (277 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (280 (checkcast (class "clojure.lang.IFn"))) 
                                      (283 (aload 10)) 
                                      (285 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (290 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (295 (astore 11)) 
                                      (297 (getstatic (fieldCP "const__14" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (300 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (303 (checkcast (class "clojure.lang.IFn"))) 
                                      (306 (getstatic (fieldCP "const__12" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (309 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (312 (checkcast (class "clojure.lang.IFn"))) 
                                      (315 (getstatic (fieldCP "const__15" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (318 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (321 (checkcast (class "clojure.lang.IFn"))) 
                                      (324 (getstatic (fieldCP "const__11" "clojure.reflect$type_reflect" (class "clojure.lang.Keyword")))) 
                                      (327 (getstatic (fieldCP "const__16" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (330 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (333 (checkcast (class "clojure.lang.IFn"))) 
                                      (336 (aload 10)) 
                                      (338 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (343 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (348 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (353 (aload 11)) 
                                      (355 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (360 (astore 12)) 
                                      (362 (getstatic (fieldCP "const__6" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (365 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (368 (checkcast (class "clojure.lang.IFn"))) 
                                      (371 (aload 12)) 
                                      (373 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (378 (dup)) 
                                      (379 (ifnull 427)) ;;to TAG_7
                                      (382 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (385 (if_acmpeq 428)) ;;to TAG_8
                                      (388 (getstatic (fieldCP "const__0" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (391 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (394 (checkcast (class "clojure.lang.IFn"))) 
                                      (397 (aload 10)) 
                                      (399 (aload 9)) 
                                      (401 (checkcast (class "clojure.lang.IFn"))) 
                                      (404 (aload 12)) 
                                      (406 (aconst_null)) 
                                      (407 (astore 12)) 
                                      (409 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (414 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (419 (astore 10)) 
                                      (421 (goto 265)) ;;to TAG_9
                                      (424 (goto 514)) ;;to TAG_10
                                      (427 (pop)) ;;at TAG_7
                                      (428 (getstatic (fieldCP "const__3" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) ;;at TAG_8
                                      (431 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (434 (checkcast (class "clojure.lang.IFn"))) 
                                      (437 (getstatic (fieldCP "const__17" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (440 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (443 (getstatic (fieldCP "const__18" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (446 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (449 (aload 8)) 
                                      (451 (iconst_2)) 
                                      (452 (anewarray (class "java.lang.Object"))) 
                                      (455 (dup)) 
                                      (456 (iconst_0)) 
                                      (457 (getstatic (fieldCP "const__8" "clojure.reflect$type_reflect" (class "clojure.lang.Keyword")))) 
                                      (460 (aastore)) 
                                      (461 (dup)) 
                                      (462 (iconst_1)) 
                                      (463 (aload 11)) 
                                      (465 (aconst_null)) 
                                      (466 (astore 11)) 
                                      (468 (aastore)) 
                                      (469 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (472 (getstatic (fieldCP "const__19" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (475 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (478 (checkcast (class "clojure.lang.IFn"))) 
                                      (481 (new (class "clojure.reflect$type_reflect$fn__9023"))) 
                                      (484 (dup)) 
                                      (485 (invokespecial (methodCP "<init>" "clojure.reflect$type_reflect$fn__9023" () void))) 
                                      (488 (getstatic (fieldCP "const__16" "clojure.reflect$type_reflect" (class "clojure.lang.Var")))) 
                                      (491 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (494 (checkcast (class "clojure.lang.IFn"))) 
                                      (497 (aload 10)) 
                                      (499 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (504 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (509 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 6)) 
                                      (514 (goto 523)) ;;to TAG_11;;at TAG_10
                                      (517 (pop)) ;;at TAG_3
                                      (518 (aload 8)) ;;at TAG_4
                                      (520 (aconst_null)) 
                                      (521 (astore 8)) 
                                      (523 (areturn)) ;;at TAG_11
                                      (endofcode 524))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getRequiredArity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap )))
                        (method "swapThunk"
                              (parameters int (class "clojure.lang.ILookupThunk"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 28)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (tableswitch (tableswitchinfo 27 (0 . 0) (20))))  ;;to TAG_0;;to TAG_1
                                      (20 (aload_2)) ;;at TAG_1
                                      (21 (putstatic (fieldCP "__thunk__0__" "clojure.reflect$type_reflect" (class "clojure.lang.ILookupThunk")))) 
                                      (24 (goto 27))  ;;to TAG_0
                                      (27 (return)) ;;at TAG_0
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *reflect$type_reflect-class-table*
  (make-static-class-decls 
   *clojure.reflect$type_reflect*))

(defconst *package-name-map* 
  ("clojure.reflect$type_reflect" . "clojure"))

