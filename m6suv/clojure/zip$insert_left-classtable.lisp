; zip$insert_left-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:59 CDT 2014.
;

(defconst *clojure.zip$insert_left*
 (make-class-def
      '(class "clojure.zip$insert_left"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "nth")
                        (STRING  "seq?")
                        (STRING  "seq")
                        (STRING  "get")
                        (STRING  "l")
                        (STRING  "nil?")
                        (STRING  "with-meta")
                        (STRING  "assoc")
                        (STRING  "conj")
                        (STRING  "changed?")
                        (STRING  "meta")
                        (STRING  "Insert at top"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__11" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__12" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 156)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "nth"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.zip$insert_left" (class "clojure.lang.Var"))))
                                      (13 (lconst_0))
                                      (14 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (17 (putstatic (fieldCP "const__1" "clojure.zip$insert_left" (class "java.lang.Object"))))
                                      (20 (lconst_1))
                                      (21 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (24 (putstatic (fieldCP "const__2" "clojure.zip$insert_left" (class "java.lang.Object"))))
                                      (27 (ldc 0))        ;;STRING:: "clojure.core"
                                      (29 (ldc 2))        ;;STRING:: "seq?"
                                      (31 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (34 (checkcast (class "clojure.lang.Var")))
                                      (37 (putstatic (fieldCP "const__3" "clojure.zip$insert_left" (class "clojure.lang.Var"))))
                                      (40 (ldc 0))        ;;STRING:: "clojure.core"
                                      (42 (ldc 3))        ;;STRING:: "seq"
                                      (44 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (47 (checkcast (class "clojure.lang.Var")))
                                      (50 (putstatic (fieldCP "const__4" "clojure.zip$insert_left" (class "clojure.lang.Var"))))
                                      (53 (ldc 0))        ;;STRING:: "clojure.core"
                                      (55 (ldc 4))        ;;STRING:: "get"
                                      (57 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (60 (checkcast (class "clojure.lang.Var")))
                                      (63 (putstatic (fieldCP "const__5" "clojure.zip$insert_left" (class "clojure.lang.Var"))))
                                      (66 (aconst_null))
                                      (67 (ldc 5))        ;;STRING:: "l"
                                      (69 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (72 (checkcast (class "clojure.lang.Keyword")))
                                      (75 (putstatic (fieldCP "const__6" "clojure.zip$insert_left" (class "clojure.lang.Keyword"))))
                                      (78 (ldc 0))        ;;STRING:: "clojure.core"
                                      (80 (ldc 6))        ;;STRING:: "nil?"
                                      (82 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (85 (checkcast (class "clojure.lang.Var")))
                                      (88 (putstatic (fieldCP "const__7" "clojure.zip$insert_left" (class "clojure.lang.Var"))))
                                      (91 (ldc 0))        ;;STRING:: "clojure.core"
                                      (93 (ldc 7))        ;;STRING:: "with-meta"
                                      (95 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (98 (checkcast (class "clojure.lang.Var")))
                                      (101 (putstatic (fieldCP "const__8" "clojure.zip$insert_left" (class "clojure.lang.Var"))))
                                      (104 (ldc 0))       ;;STRING:: "clojure.core"
                                      (106 (ldc 8))       ;;STRING:: "assoc"
                                      (108 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (111 (checkcast (class "clojure.lang.Var")))
                                      (114 (putstatic (fieldCP "const__9" "clojure.zip$insert_left" (class "clojure.lang.Var"))))
                                      (117 (ldc 0))       ;;STRING:: "clojure.core"
                                      (119 (ldc 9))       ;;STRING:: "conj"
                                      (121 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (124 (checkcast (class "clojure.lang.Var")))
                                      (127 (putstatic (fieldCP "const__10" "clojure.zip$insert_left" (class "clojure.lang.Var"))))
                                      (130 (aconst_null))
                                      (131 (ldc 10))      ;;STRING:: "changed?"
                                      (133 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (136 (checkcast (class "clojure.lang.Keyword")))
                                      (139 (putstatic (fieldCP "const__11" "clojure.zip$insert_left" (class "clojure.lang.Keyword"))))
                                      (142 (ldc 0))       ;;STRING:: "clojure.core"
                                      (144 (ldc 11))      ;;STRING:: "meta"
                                      (146 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (149 (checkcast (class "clojure.lang.Var")))
                                      (152 (putstatic (fieldCP "const__12" "clojure.zip$insert_left" (class "clojure.lang.Var"))))
                                      (155 (return))
                                      (endofcode 156))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 11) (max_locals . 9) (code_length . 234)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (astore_3)) 
                                      (2 (aload_3)) 
                                      (3 (lconst_0)) 
                                      (4 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (7 (aconst_null)) 
                                      (8 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (11 (astore 4)) 
                                      (13 (aload_3)) 
                                      (14 (aconst_null)) 
                                      (15 (astore_3)) 
                                      (16 (lconst_1)) 
                                      (17 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (20 (aconst_null)) 
                                      (21 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (24 (astore 5)) 
                                      (26 (getstatic (fieldCP "const__3" "clojure.zip$insert_left" (class "clojure.lang.Var")))) 
                                      (29 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (32 (checkcast (class "clojure.lang.IFn"))) 
                                      (35 (aload 5)) 
                                      (37 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (42 (dup)) 
                                      (43 (ifnull 80)) ;;to TAG_0
                                      (46 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (49 (if_acmpeq 81)) ;;to TAG_1
                                      (52 (getstatic (fieldCP "const__4" "clojure.zip$insert_left" (class "clojure.lang.Var")))) 
                                      (55 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (58 (checkcast (class "clojure.lang.IFn"))) 
                                      (61 (aload 5)) 
                                      (63 (aconst_null)) 
                                      (64 (astore 5)) 
                                      (66 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (71 (checkcast (class "clojure.lang.ISeq"))) 
                                      (74 (invokestatic (methodCP "create" "clojure.lang.PersistentHashMap" ((class "clojure.lang.ISeq")) (class "clojure.lang.PersistentHashMap")))) 
                                      (77 (goto 86))  ;;to TAG_2
                                      (80 (pop)) ;;at TAG_0
                                      (81 (aload 5)) ;;at TAG_1
                                      (83 (aconst_null)) 
                                      (84 (astore 5)) 
                                      (86 (astore 6)) ;;at TAG_2
                                      (88 (aload 6)) 
                                      (90 (astore 7)) 
                                      (92 (aload 6)) 
                                      (94 (aconst_null)) 
                                      (95 (astore 6)) 
                                      (97 (getstatic (fieldCP "const__6" "clojure.zip$insert_left" (class "clojure.lang.Keyword")))) 
                                      (100 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (103 (astore 8)) 
                                      (105 (aload 7)) 
                                      (107 (aconst_null)) 
                                      (108 (invokestatic (methodCP "identical" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (111 (ifeq 134)) ;;to TAG_3
                                      (114 (new (class "java.lang.Exception"))) 
                                      (117 (dup)) 
                                      (118 (ldc 12)) ;;STRING:: "Insert at top"
                                      (120 (checkcast (class "java.lang.String"))) 
                                      (123 (invokespecial (methodCP "<init>" "java.lang.Exception" ((class "java.lang.String")) void))) 
                                      (126 (checkcast (class "java.lang.Throwable"))) 
                                      (129 (athrow)) 
                                      (130 (goto 233)) ;;to TAG_4
                                      (133 (pop)) 
                                      (134 (getstatic (fieldCP "const__8" "clojure.zip$insert_left" (class "clojure.lang.Var")))) ;;at TAG_3
                                      (137 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (140 (checkcast (class "clojure.lang.IFn"))) 
                                      (143 (iconst_2)) 
                                      (144 (anewarray (class "java.lang.Object"))) 
                                      (147 (dup)) 
                                      (148 (iconst_0)) 
                                      (149 (aload 4)) 
                                      (151 (aconst_null)) 
                                      (152 (astore 4)) 
                                      (154 (aastore)) 
                                      (155 (dup)) 
                                      (156 (iconst_1)) 
                                      (157 (getstatic (fieldCP "const__9" "clojure.zip$insert_left" (class "clojure.lang.Var")))) 
                                      (160 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (163 (checkcast (class "clojure.lang.IFn"))) 
                                      (166 (aload 7)) 
                                      (168 (aconst_null)) 
                                      (169 (astore 7)) 
                                      (171 (getstatic (fieldCP "const__6" "clojure.zip$insert_left" (class "clojure.lang.Keyword")))) 
                                      (174 (getstatic (fieldCP "const__10" "clojure.zip$insert_left" (class "clojure.lang.Var")))) 
                                      (177 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (180 (checkcast (class "clojure.lang.IFn"))) 
                                      (183 (aload 8)) 
                                      (185 (aconst_null)) 
                                      (186 (astore 8)) 
                                      (188 (aload_2)) 
                                      (189 (aconst_null)) 
                                      (190 (astore_2)) 
                                      (191 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (196 (getstatic (fieldCP "const__11" "clojure.zip$insert_left" (class "clojure.lang.Keyword")))) 
                                      (199 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (202 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 6)) 
                                      (207 (aastore)) 
                                      (208 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (211 (getstatic (fieldCP "const__12" "clojure.zip$insert_left" (class "clojure.lang.Var")))) 
                                      (214 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (217 (checkcast (class "clojure.lang.IFn"))) 
                                      (220 (aload_1)) 
                                      (221 (aconst_null)) 
                                      (222 (astore_1)) 
                                      (223 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (228 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (233 (areturn)) ;;at TAG_4
                                      (endofcode 234))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *zip$insert_left-class-table*
  (make-static-class-decls 
   *clojure.zip$insert_left*))

(defconst *package-name-map* 
  ("clojure.zip$insert_left" . "clojure"))

