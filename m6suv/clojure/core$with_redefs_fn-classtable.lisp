; core$with_redefs_fn-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:46 CDT 2014.
;

(defconst *clojure.core$with_redefs_fn*
 (make-class-def
      '(class "clojure.core$with_redefs_fn"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "zipmap")
                        (STRING  "keys")
                        (STRING  "map"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 40)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "zipmap"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$with_redefs_fn" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "keys"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$with_redefs_fn" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "map"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$with_redefs_fn" (class "clojure.lang.Var"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 7) (code_length . 146)
                                   (parsedcode
                                      (0 (new (class "clojure.core$with_redefs_fn$root_bind__6497"))) 
                                      (3 (dup)) 
                                      (4 (invokespecial (methodCP "<init>" "clojure.core$with_redefs_fn$root_bind__6497" () void))) 
                                      (7 (astore_3)) 
                                      (8 (getstatic (fieldCP "const__0" "clojure.core$with_redefs_fn" (class "clojure.lang.Var")))) 
                                      (11 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (14 (checkcast (class "clojure.lang.IFn"))) 
                                      (17 (getstatic (fieldCP "const__1" "clojure.core$with_redefs_fn" (class "clojure.lang.Var")))) 
                                      (20 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (23 (checkcast (class "clojure.lang.IFn"))) 
                                      (26 (aload_1)) 
                                      (27 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (32 (getstatic (fieldCP "const__2" "clojure.core$with_redefs_fn" (class "clojure.lang.Var")))) 
                                      (35 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (38 (checkcast (class "clojure.lang.IFn"))) 
                                      (41 (new (class "clojure.core$with_redefs_fn$fn__6507"))) 
                                      (44 (dup)) 
                                      (45 (invokespecial (methodCP "<init>" "clojure.core$with_redefs_fn$fn__6507" () void))) 
                                      (48 (getstatic (fieldCP "const__1" "clojure.core$with_redefs_fn" (class "clojure.lang.Var")))) 
                                      (51 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (54 (checkcast (class "clojure.lang.IFn"))) 
                                      (57 (aload_1)) 
                                      (58 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (63 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (68 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (73 (astore 4)) 
                                      (75 (aload_3)) ;;at TAG_1
                                      (76 (checkcast (class "clojure.lang.IFn"))) 
                                      (79 (aload_1)) 
                                      (80 (aconst_null)) 
                                      (81 (astore_1)) 
                                      (82 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (87 (pop)) 
                                      (88 (aload_2)) 
                                      (89 (aconst_null)) 
                                      (90 (astore_2)) 
                                      (91 (checkcast (class "clojure.lang.IFn"))) 
                                      (94 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (99 (astore 5)) 
                                      (101 (aload_3)) ;;at TAG_2
                                      (102 (aconst_null)) 
                                      (103 (astore_3)) 
                                      (104 (checkcast (class "clojure.lang.IFn"))) 
                                      (107 (aload 4)) 
                                      (109 (aconst_null)) 
                                      (110 (astore 4)) 
                                      (112 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (117 (pop)) 
                                      (118 (goto 143)) ;;to TAG_0
                                      (121 (astore 6)) ;;at TAG_3
                                      (123 (aload_3)) 
                                      (124 (aconst_null)) 
                                      (125 (astore_3)) 
                                      (126 (checkcast (class "clojure.lang.IFn"))) 
                                      (129 (aload 4)) 
                                      (131 (aconst_null)) 
                                      (132 (astore 4)) 
                                      (134 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (139 (pop)) 
                                      (140 (aload 6)) 
                                      (142 (athrow)) 
                                      (143 (aload 5)) ;;at TAG_0
                                      (145 (areturn)) 
                                      (endofcode 146))
                                   (Exceptions 
                                     (handler 75 101  121 (class "java.lang.Throwable")))
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$with_redefs_fn-class-table*
  (make-static-class-decls 
   *clojure.core$with_redefs_fn*))

(defconst *package-name-map* 
  ("clojure.core$with_redefs_fn" . "clojure"))

