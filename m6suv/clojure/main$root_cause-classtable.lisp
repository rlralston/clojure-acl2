; main$root_cause-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:53 CDT 2014.
;

(defconst *clojure.main$root_cause*
 (make-class-def
      '(class "clojure.main$root_cause"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "instance?")
                        (STRING  "not=")
                        (STRING  "NO_SOURCE_FILE"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 27)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "instance?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.main$root_cause" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "not="
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.main$root_cause" (class "clojure.lang.Var"))))
                                      (26 (return))
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 5) (code_length . 107)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aconst_null)) 
                                      (2 (astore_1)) 
                                      (3 (astore_2)) 
                                      (4 (aload_2)) ;;at TAG_8
                                      (5 (instanceof (class "clojure.lang.Compiler$CompilerException"))) 
                                      (8 (istore_3)) 
                                      (9 (iload_3)) 
                                      (10 (ifeq 40)) ;;to TAG_0
                                      (13 (getstatic (fieldCP "const__1" "clojure.main$root_cause" (class "clojure.lang.Var")))) 
                                      (16 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (19 (checkcast (class "clojure.lang.IFn"))) 
                                      (22 (aload_2)) 
                                      (23 (checkcast (class "clojure.lang.Compiler$CompilerException"))) 
                                      (26 (getfield (fieldCP "source" "clojure.lang.Compiler$CompilerException" (class "java.lang.String")))) 
                                      (29 (ldc 3)) ;;STRING:: "NO_SOURCE_FILE"
                                      (31 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (36 (goto 53))  ;;to TAG_1
                                      (39 (pop)) 
                                      (40 (iload_3)) ;;at TAG_0
                                      (41 (ifeq 50)) ;;to TAG_2
                                      (44 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (47 (goto 53))  ;;to TAG_1
                                      (50 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_2
                                      (53 (dup)) ;;at TAG_1
                                      (54 (ifnull 67)) ;;to TAG_3
                                      (57 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (60 (if_acmpeq 68)) ;;to TAG_4
                                      (63 (aload_2)) 
                                      (64 (goto 106)) ;;to TAG_5
                                      (67 (pop)) ;;at TAG_3
                                      (68 (aload_2)) ;;at TAG_4
                                      (69 (checkcast (class "java.lang.Throwable"))) 
                                      (72 (invokevirtual (methodCP "getCause" "java.lang.Throwable" () (class "java.lang.Throwable")))) 
                                      (75 (astore_3)) 
                                      (76 (aload_3)) 
                                      (77 (dup)) 
                                      (78 (ifnull 104)) ;;to TAG_6
                                      (81 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (84 (if_acmpeq 105)) ;;to TAG_7
                                      (87 (aload_3)) 
                                      (88 (aconst_null)) 
                                      (89 (astore_3)) 
                                      (90 (astore 4)) 
                                      (92 (aload 4)) 
                                      (94 (aconst_null)) 
                                      (95 (astore 4)) 
                                      (97 (astore_2)) 
                                      (98 (goto 4)) ;;to TAG_8
                                      (101 (goto 106)) ;;to TAG_5
                                      (104 (pop)) ;;at TAG_6
                                      (105 (aload_2)) ;;at TAG_7
                                      (106 (areturn)) ;;at TAG_5
                                      (endofcode 107))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *main$root_cause-class-table*
  (make-static-class-decls 
   *clojure.main$root_cause*))

(defconst *package-name-map* 
  ("clojure.main$root_cause" . "clojure"))

