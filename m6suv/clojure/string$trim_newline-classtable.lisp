; string$trim_newline-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:58 CDT 2014.
;

(defconst *clojure.string$trim_newline*
 (make-class-def
      '(class "clojure.string$trim_newline"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "zero?")
                        (STRING  "dec")
                        (STRING  "=")
                        (STRING  ""))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 63)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "zero?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.string$trim_newline" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "dec"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.string$trim_newline" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "="
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.string$trim_newline" (class "clojure.lang.Var"))))
                                      (39 (bipush 10))
                                      (41 (invokestatic
					(methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character"))))
                                      (44 (putstatic (fieldCP "const__3" "clojure.string$trim_newline" (class "java.lang.Object"))))
                                      (47 (bipush 13))
                                      (49 (invokestatic
					(methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character"))))
                                      (52 (putstatic (fieldCP "const__4" "clojure.string$trim_newline" (class "java.lang.Object"))))
                                      (55 (lconst_0))
                                      (56 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (59 (putstatic (fieldCP "const__5" "clojure.string$trim_newline" (class "java.lang.Object"))))
                                      (62 (return))
                                      (endofcode 63))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 6) (code_length . 118)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "java.lang.CharSequence"))) 
                                      (4 (invokeinterface (methodCP "length" "java.lang.CharSequence" () int) 1)) 
                                      (9 (i2l)) 
                                      (10 (lstore_2)) 
                                      (11 (lload_2)) ;;at TAG_5
                                      (12 (lconst_0)) 
                                      (13 (lcmp)) 
                                      (14 (ifne 23)) ;;to TAG_0
                                      (17 (ldc 4)) ;;STRING:: ""
                                      (19 (goto 117)) ;;to TAG_1
                                      (22 (pop)) 
                                      (23 (aload_1)) ;;at TAG_0
                                      (24 (checkcast (class "java.lang.CharSequence"))) 
                                      (27 (lload_2)) 
                                      (28 (invokestatic (methodCP "dec" "clojure.lang.Numbers" (long) long))) 
                                      (31 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (34 (invokeinterface (methodCP "charAt" "java.lang.CharSequence" (int) char) 2)) 
                                      (39 (istore 4)) 
                                      (41 (iload 4)) 
                                      (43 (getstatic (fieldCP "const__3" "clojure.string$trim_newline" (class "java.lang.Object")))) 
                                      (46 (checkcast (class "java.lang.Character"))) 
                                      (49 (invokevirtual (methodCP "charValue" "java.lang.Character" () char))) 
                                      (52 (invokestatic (methodCP "equiv" "clojure.lang.Util" (char char) boolean))) 
                                      (55 (istore 5)) 
                                      (57 (iload 5)) 
                                      (59 (ifeq 68))  ;;to TAG_2
                                      (62 (iload 5)) 
                                      (64 (goto 82)) ;;to TAG_3
                                      (67 (pop)) 
                                      (68 (iload 4)) ;;at TAG_2
                                      (70 (getstatic (fieldCP "const__4" "clojure.string$trim_newline" (class "java.lang.Object")))) 
                                      (73 (checkcast (class "java.lang.Character"))) 
                                      (76 (invokevirtual (methodCP "charValue" "java.lang.Character" () char))) 
                                      (79 (invokestatic (methodCP "equiv" "clojure.lang.Util" (char char) boolean))) 
                                      (82 (ifeq 97)) ;;to TAG_4;;at TAG_3
                                      (85 (lload_2)) 
                                      (86 (invokestatic (methodCP "dec" "clojure.lang.Numbers" (long) long))) 
                                      (89 (lstore_2)) 
                                      (90 (goto 11)) ;;to TAG_5
                                      (93 (goto 117)) ;;to TAG_1
                                      (96 (pop)) 
                                      (97 (aload_1)) ;;at TAG_4
                                      (98 (checkcast (class "java.lang.CharSequence"))) 
                                      (101 (lconst_0)) 
                                      (102 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (105 (lload_2)) 
                                      (106 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (109 (invokeinterface (methodCP "subSequence" "java.lang.CharSequence" (int int) (class "java.lang.CharSequence")) 3)) 
                                      (114 (invokevirtual (methodCP "toString" "java.lang.Object" () (class "java.lang.String")))) 
                                      (117 (areturn)) ;;at TAG_1
                                      (endofcode 118))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *string$trim_newline-class-table*
  (make-static-class-decls 
   *clojure.string$trim_newline*))

(defconst *package-name-map* 
  ("clojure.string$trim_newline" . "clojure"))

