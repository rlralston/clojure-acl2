; pprint$rtrim-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:57 CDT 2014.
;

(defconst *clojure.pprint$rtrim*
 (make-class-def
      '(class "clojure.pprint$rtrim"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "count")
                        (STRING  "pos?")
                        (STRING  "=")
                        (STRING  "nth")
                        (STRING  "dec")
                        (STRING  "neg?")
                        (STRING  "not")
                        (STRING  "subs")
                        (STRING  "inc")
                        (STRING  ""))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 125)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "count"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$rtrim" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "pos?"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$rtrim" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "="
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.pprint$rtrim" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "nth"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.pprint$rtrim" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "dec"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.pprint$rtrim" (class "clojure.lang.Var"))))
                                      (65 (ldc 0))        ;;STRING:: "clojure.core"
                                      (67 (ldc 6))        ;;STRING:: "neg?"
                                      (69 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (72 (checkcast (class "clojure.lang.Var")))
                                      (75 (putstatic (fieldCP "const__5" "clojure.pprint$rtrim" (class "clojure.lang.Var"))))
                                      (78 (ldc 0))        ;;STRING:: "clojure.core"
                                      (80 (ldc 7))        ;;STRING:: "not"
                                      (82 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (85 (checkcast (class "clojure.lang.Var")))
                                      (88 (putstatic (fieldCP "const__6" "clojure.pprint$rtrim" (class "clojure.lang.Var"))))
                                      (91 (ldc 0))        ;;STRING:: "clojure.core"
                                      (93 (ldc 8))        ;;STRING:: "subs"
                                      (95 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (98 (checkcast (class "clojure.lang.Var")))
                                      (101 (putstatic (fieldCP "const__7" "clojure.pprint$rtrim" (class "clojure.lang.Var"))))
                                      (104 (lconst_0))
                                      (105 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (108 (putstatic (fieldCP "const__8" "clojure.pprint$rtrim" (class "java.lang.Object"))))
                                      (111 (ldc 0))       ;;STRING:: "clojure.core"
                                      (113 (ldc 9))       ;;STRING:: "inc"
                                      (115 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (118 (checkcast (class "clojure.lang.Var")))
                                      (121 (putstatic (fieldCP "const__9" "clojure.pprint$rtrim" (class "clojure.lang.Var"))))
                                      (124 (return))
                                      (endofcode 125))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 7) (code_length . 180)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (4 (istore_3)) 
                                      (5 (iload_3)) 
                                      (6 (i2l)) 
                                      (7 (invokestatic (methodCP "isPos" "clojure.lang.Numbers" (long) boolean))) 
                                      (10 (istore 4)) 
                                      (12 (iload 4)) 
                                      (14 (ifeq 40)) ;;to TAG_0
                                      (17 (aload_1)) 
                                      (18 (aload_1)) 
                                      (19 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (22 (i2l)) 
                                      (23 (invokestatic (methodCP "dec" "clojure.lang.Numbers" (long) long))) 
                                      (26 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (29 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (32 (aload_2)) 
                                      (33 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (36 (goto 42))  ;;to TAG_1
                                      (39 (pop)) 
                                      (40 (iload 4)) ;;at TAG_0
                                      (42 (ifeq 176)) ;;to TAG_2;;at TAG_1
                                      (45 (iload_3)) 
                                      (46 (i2l)) 
                                      (47 (invokestatic (methodCP "dec" "clojure.lang.Numbers" (long) long))) 
                                      (50 (lstore 5)) 
                                      (52 (lload 5)) ;;at TAG_11
                                      (54 (lconst_0)) 
                                      (55 (lcmp)) 
                                      (56 (ifge 65)) ;;to TAG_3
                                      (59 (ldc 10)) ;;STRING:: ""
                                      (61 (goto 172)) ;;to TAG_4
                                      (64 (pop)) 
                                      (65 (getstatic (fieldCP "const__6" "clojure.pprint$rtrim" (class "clojure.lang.Var")))) ;;at TAG_3
                                      (68 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (71 (checkcast (class "clojure.lang.IFn"))) 
                                      (74 (aload_1)) 
                                      (75 (lload 5)) 
                                      (77 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (80 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (83 (aload_2)) 
                                      (84 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (87 (ifeq 96)) ;;to TAG_5
                                      (90 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (93 (goto 99)) ;;to TAG_6
                                      (96 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_5
                                      (99 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_6
                                      (104 (dup)) 
                                      (105 (ifnull 143)) ;;to TAG_7
                                      (108 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (111 (if_acmpeq 144)) ;;to TAG_8
                                      (114 (getstatic (fieldCP "const__7" "clojure.pprint$rtrim" (class "clojure.lang.Var")))) 
                                      (117 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (120 (checkcast (class "clojure.lang.IFn"))) 
                                      (123 (aload_1)) 
                                      (124 (getstatic (fieldCP "const__8" "clojure.pprint$rtrim" (class "java.lang.Object")))) 
                                      (127 (lload 5)) 
                                      (129 (invokestatic (methodCP "inc" "clojure.lang.Numbers" (long) long))) 
                                      (132 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (135 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (140 (goto 172)) ;;to TAG_4
                                      (143 (pop)) ;;at TAG_7
                                      (144 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_8
                                      (147 (dup)) 
                                      (148 (ifnull 170)) ;;to TAG_9
                                      (151 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (154 (if_acmpeq 171)) ;;to TAG_10
                                      (157 (lload 5)) 
                                      (159 (invokestatic (methodCP "dec" "clojure.lang.Numbers" (long) long))) 
                                      (162 (lstore 5)) 
                                      (164 (goto 52)) ;;to TAG_11
                                      (167 (goto 172)) ;;to TAG_4
                                      (170 (pop)) ;;at TAG_9
                                      (171 (aconst_null)) ;;at TAG_10
                                      (172 (goto 179)) ;;to TAG_12;;at TAG_4
                                      (175 (pop)) 
                                      (176 (aload_1)) ;;at TAG_2
                                      (177 (aconst_null)) 
                                      (178 (astore_1)) 
                                      (179 (areturn)) ;;at TAG_12
                                      (endofcode 180))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$rtrim-class-table*
  (make-static-class-decls 
   *clojure.pprint$rtrim*))

(defconst *package-name-map* 
  ("clojure.pprint$rtrim" . "clojure"))

