; core$slurp-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:45 CDT 2014.
;

(defconst *clojure.core$slurp*
 (make-class-def
      '(class "clojure.core$slurp"
            "clojure.lang.RestFn"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "normalize-slurp-opts")
                        (STRING  "apply")
                        (STRING  "clojure.java.io")
                        (STRING  "reader")
                        (STRING  "neg?")
                        (STRING  "str")
                        (STRING  "char"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 79)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "normalize-slurp-opts"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$slurp" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "apply"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$slurp" (class "clojure.lang.Var"))))
                                      (26 (ldc 3))        ;;STRING:: "clojure.java.io"
                                      (28 (ldc 4))        ;;STRING:: "reader"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$slurp" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 5))        ;;STRING:: "neg?"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.core$slurp" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 6))        ;;STRING:: "str"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.core$slurp" (class "clojure.lang.Var"))))
                                      (65 (ldc 0))        ;;STRING:: "clojure.core"
                                      (67 (ldc 7))        ;;STRING:: "char"
                                      (69 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (72 (checkcast (class "clojure.lang.Var")))
                                      (75 (putstatic (fieldCP "const__5" "clojure.core$slurp" (class "clojure.lang.Var"))))
                                      (78 (return))
                                      (endofcode 79))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.RestFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doInvoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 10) (code_length . 160)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$slurp" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_2)) 
                                      (10 (aconst_null)) 
                                      (11 (astore_2)) 
                                      (12 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (17 (astore_3)) 
                                      (18 (new (class "java.lang.StringBuilder"))) 
                                      (21 (dup)) 
                                      (22 (invokespecial (methodCP "<init>" "java.lang.StringBuilder" () void))) 
                                      (25 (astore 4)) 
                                      (27 (getstatic (fieldCP "const__1" "clojure.core$slurp" (class "clojure.lang.Var")))) 
                                      (30 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (33 (checkcast (class "clojure.lang.IFn"))) 
                                      (36 (getstatic (fieldCP "const__2" "clojure.core$slurp" (class "clojure.lang.Var")))) 
                                      (39 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (42 (aload_1)) 
                                      (43 (aconst_null)) 
                                      (44 (astore_1)) 
                                      (45 (aload_3)) 
                                      (46 (aconst_null)) 
                                      (47 (astore_3)) 
                                      (48 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (53 (astore 5)) 
                                      (55 (aload 5)) ;;at TAG_4
                                      (57 (checkcast (class "java.io.Reader"))) 
                                      (60 (invokevirtual (methodCP "read" "java.io.Reader" () int))) 
                                      (63 (i2l)) 
                                      (64 (lstore 6)) 
                                      (66 (lload 6)) ;;at TAG_2
                                      (68 (lconst_0)) 
                                      (69 (lcmp)) 
                                      (70 (ifge 93)) ;;to TAG_0
                                      (73 (getstatic (fieldCP "const__4" "clojure.core$slurp" (class "clojure.lang.Var")))) 
                                      (76 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (79 (checkcast (class "clojure.lang.IFn"))) 
                                      (82 (aload 4)) 
                                      (84 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (89 (goto 121)) ;;to TAG_1
                                      (92 (pop)) 
                                      (93 (aload 4)) ;;at TAG_0
                                      (95 (checkcast (class "java.lang.StringBuilder"))) 
                                      (98 (lload 6)) 
                                      (100 (invokestatic (methodCP "charCast" "clojure.lang.RT" (long) char))) 
                                      (103 (invokevirtual (methodCP "append" "java.lang.StringBuilder" (char) (class "java.lang.StringBuilder")))) 
                                      (106 (pop)) 
                                      (107 (aload 5)) 
                                      (109 (checkcast (class "java.io.Reader"))) 
                                      (112 (invokevirtual (methodCP "read" "java.io.Reader" () int))) 
                                      (115 (i2l)) 
                                      (116 (lstore 6)) 
                                      (118 (goto 66))  ;;to TAG_2
                                      (121 (astore 8)) ;;at TAG_1
                                      (123 (aload 5)) ;;at TAG_5
                                      (125 (aconst_null)) 
                                      (126 (astore 5)) 
                                      (128 (checkcast (class "java.io.Reader"))) 
                                      (131 (invokevirtual (methodCP "close" "java.io.Reader" () void))) 
                                      (134 (aconst_null)) 
                                      (135 (pop)) 
                                      (136 (goto 157)) ;;to TAG_3
                                      (139 (astore 9)) ;;at TAG_6
                                      (141 (aload 5)) 
                                      (143 (aconst_null)) 
                                      (144 (astore 5)) 
                                      (146 (checkcast (class "java.io.Reader"))) 
                                      (149 (invokevirtual (methodCP "close" "java.io.Reader" () void))) 
                                      (152 (aconst_null)) 
                                      (153 (pop)) 
                                      (154 (aload 9)) 
                                      (156 (athrow)) 
                                      (157 (aload 8)) ;;at TAG_3
                                      (159 (areturn)) 
                                      (endofcode 160))
                                   (Exceptions 
                                     (handler 55 123  139 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "getRequiredArity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_1))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$slurp-class-table*
  (make-static-class-decls 
   *clojure.core$slurp*))

(defconst *package-name-map* 
  ("clojure.core$slurp" . "clojure"))

