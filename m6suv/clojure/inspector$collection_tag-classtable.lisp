; inspector$collection_tag-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:49 CDT 2014.
;

(defconst *clojure.inspector$collection_tag*
 (make-class-def
      '(class "clojure.inspector$collection_tag"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "instance?")
                        (STRING  "entry")
                        (STRING  "map")
                        (STRING  "sequential?")
                        (STRING  "seq")
                        (STRING  "else")
                        (STRING  "atom"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 87)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "instance?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.inspector$collection_tag" (class "clojure.lang.Var"))))
                                      (13 (aconst_null))
                                      (14 (ldc 2))        ;;STRING:: "entry"
                                      (16 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (19 (checkcast (class "clojure.lang.Keyword")))
                                      (22 (putstatic (fieldCP "const__1" "clojure.inspector$collection_tag" (class "clojure.lang.Keyword"))))
                                      (25 (aconst_null))
                                      (26 (ldc 3))        ;;STRING:: "map"
                                      (28 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (31 (checkcast (class "clojure.lang.Keyword")))
                                      (34 (putstatic (fieldCP "const__2" "clojure.inspector$collection_tag" (class "clojure.lang.Keyword"))))
                                      (37 (ldc 0))        ;;STRING:: "clojure.core"
                                      (39 (ldc 4))        ;;STRING:: "sequential?"
                                      (41 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (44 (checkcast (class "clojure.lang.Var")))
                                      (47 (putstatic (fieldCP "const__3" "clojure.inspector$collection_tag" (class "clojure.lang.Var"))))
                                      (50 (aconst_null))
                                      (51 (ldc 5))        ;;STRING:: "seq"
                                      (53 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (56 (checkcast (class "clojure.lang.Keyword")))
                                      (59 (putstatic (fieldCP "const__4" "clojure.inspector$collection_tag" (class "clojure.lang.Keyword"))))
                                      (62 (aconst_null))
                                      (63 (ldc 6))        ;;STRING:: "else"
                                      (65 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (68 (checkcast (class "clojure.lang.Keyword")))
                                      (71 (putstatic (fieldCP "const__5" "clojure.inspector$collection_tag" (class "clojure.lang.Keyword"))))
                                      (74 (aconst_null))
                                      (75 (ldc 7))        ;;STRING:: "atom"
                                      (77 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (80 (checkcast (class "clojure.lang.Keyword")))
                                      (83 (putstatic (fieldCP "const__6" "clojure.inspector$collection_tag" (class "clojure.lang.Keyword"))))
                                      (86 (return))
                                      (endofcode 87))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 84)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (instanceof (class "java.util.Map$Entry"))) 
                                      (4 (ifeq 14)) ;;to TAG_0
                                      (7 (getstatic (fieldCP "const__1" "clojure.inspector$collection_tag" (class "clojure.lang.Keyword")))) 
                                      (10 (goto 83)) ;;to TAG_1
                                      (13 (pop)) 
                                      (14 (aload_1)) ;;at TAG_0
                                      (15 (instanceof (class "java.util.Map"))) 
                                      (18 (ifeq 28))  ;;to TAG_2
                                      (21 (getstatic (fieldCP "const__2" "clojure.inspector$collection_tag" (class "clojure.lang.Keyword")))) 
                                      (24 (goto 83)) ;;to TAG_1
                                      (27 (pop)) 
                                      (28 (getstatic (fieldCP "const__3" "clojure.inspector$collection_tag" (class "clojure.lang.Var")))) ;;at TAG_2
                                      (31 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (34 (checkcast (class "clojure.lang.IFn"))) 
                                      (37 (aload_1)) 
                                      (38 (aconst_null)) 
                                      (39 (astore_1)) 
                                      (40 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (45 (dup)) 
                                      (46 (ifnull 61)) ;;to TAG_3
                                      (49 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (52 (if_acmpeq 62)) ;;to TAG_4
                                      (55 (getstatic (fieldCP "const__4" "clojure.inspector$collection_tag" (class "clojure.lang.Keyword")))) 
                                      (58 (goto 83)) ;;to TAG_1
                                      (61 (pop)) ;;at TAG_3
                                      (62 (getstatic (fieldCP "const__5" "clojure.inspector$collection_tag" (class "clojure.lang.Keyword")))) ;;at TAG_4
                                      (65 (dup)) 
                                      (66 (ifnull 81)) ;;to TAG_5
                                      (69 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (72 (if_acmpeq 82)) ;;to TAG_6
                                      (75 (getstatic (fieldCP "const__6" "clojure.inspector$collection_tag" (class "clojure.lang.Keyword")))) 
                                      (78 (goto 83)) ;;to TAG_1
                                      (81 (pop)) ;;at TAG_5
                                      (82 (aconst_null)) ;;at TAG_6
                                      (83 (areturn)) ;;at TAG_1
                                      (endofcode 84))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *inspector$collection_tag-class-table*
  (make-static-class-decls 
   *clojure.inspector$collection_tag*))

(defconst *package-name-map* 
  ("clojure.inspector$collection_tag" . "clojure"))

