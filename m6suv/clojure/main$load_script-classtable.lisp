; main$load_script-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:53 CDT 2014.
;

(defconst *clojure.main$load_script*
 (make-class-def
      '(class "clojure.main$load_script"
            "clojure.lang.AFunction"
            (constant_pool
                        (LONG 2)
                        (STRING  "@")
                        (STRING  "@/"))
            (fields
                        (field "const__0" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 17)
                                   (parsedcode
                                      (0 (ldc2_w 0))      ;; LONG:: "2"
                                      (3 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (6 (putstatic (fieldCP "const__0" "clojure.main$load_script" (class "java.lang.Object"))))
                                      (9 (lconst_1))
                                      (10 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (13 (putstatic (fieldCP "const__1" "clojure.main$load_script" (class "java.lang.Object"))))
                                      (16 (return))
                                      (endofcode 17))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 2) (code_length . 71)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "java.lang.String"))) 
                                      (4 (ldc 1)) ;;STRING:: "@"
                                      (6 (checkcast (class "java.lang.String"))) 
                                      (9 (invokevirtual (methodCP "startsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (12 (ifeq 61)) ;;to TAG_0
                                      (15 (aload_1)) 
                                      (16 (checkcast (class "java.lang.String"))) 
                                      (19 (aload_1)) 
                                      (20 (aconst_null)) 
                                      (21 (astore_1)) 
                                      (22 (checkcast (class "java.lang.String"))) 
                                      (25 (ldc 2)) ;;STRING:: "@/"
                                      (27 (checkcast (class "java.lang.String"))) 
                                      (30 (invokevirtual (methodCP "startsWith" "java.lang.String" ((class "java.lang.String")) boolean))) 
                                      (33 (ifeq 43)) ;;to TAG_1
                                      (36 (ldc2_w 0)) ;; LONG:: "2"
                                      (39 (goto 44))  ;;to TAG_2
                                      (42 (pop)) 
                                      (43 (lconst_1)) ;;at TAG_1
                                      (44 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) ;;at TAG_2
                                      (47 (invokevirtual (methodCP "substring" "java.lang.String" (int) (class "java.lang.String")))) 
                                      (50 (checkcast (class "java.lang.String"))) 
                                      (53 (invokestatic (methodCP "loadResourceScript" "clojure.lang.RT" ((class "java.lang.String")) void))) 
                                      (56 (aconst_null)) 
                                      (57 (goto 70)) ;;to TAG_3
                                      (60 (pop)) 
                                      (61 (aload_1)) ;;at TAG_0
                                      (62 (aconst_null)) 
                                      (63 (astore_1)) 
                                      (64 (checkcast (class "java.lang.String"))) 
                                      (67 (invokestatic (methodCP "loadFile" "clojure.lang.Compiler" ((class "java.lang.String")) (class "java.lang.Object")))) 
                                      (70 (areturn)) ;;at TAG_3
                                      (endofcode 71))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *main$load_script-class-table*
  (make-static-class-decls 
   *clojure.main$load_script*))

(defconst *package-name-map* 
  ("clojure.main$load_script" . "clojure"))

