; pprint$column_writer$fn__7358-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:55 CDT 2014.
;

(defconst *clojure.pprint$column_writer$fn__7358*
 (make-class-def
      '(class "clojure.pprint$column_writer$fn__7358"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.pprint")
                        (STRING  "get-field")
                        (STRING  "base")
                        (STRING  "clojure.core")
                        (STRING  "=")
                        (STRING  "class")
                        (STRING  "java.lang.String")
                        (STRING  "int")
                        (STRING  "java.lang.Integer")
                        (STRING  "c-write-char")
                        (STRING  "java.lang.Long")
                        (STRING  "str")
                        (STRING  "No matching clause: "))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 123)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.pprint"
                                      (2 (ldc 1))         ;;STRING:: "get-field"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var"))))
                                      (13 (aconst_null))
                                      (14 (ldc 2))        ;;STRING:: "base"
                                      (16 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (19 (checkcast (class "clojure.lang.Keyword")))
                                      (22 (putstatic (fieldCP "const__1" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Keyword"))))
                                      (25 (ldc 3))        ;;STRING:: "clojure.core"
                                      (27 (ldc 4))        ;;STRING:: "="
                                      (29 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (32 (checkcast (class "clojure.lang.Var")))
                                      (35 (putstatic (fieldCP "const__2" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var"))))
                                      (38 (ldc 3))        ;;STRING:: "clojure.core"
                                      (40 (ldc 5))        ;;STRING:: "class"
                                      (42 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (45 (checkcast (class "clojure.lang.Var")))
                                      (48 (putstatic (fieldCP "const__3" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var"))))
                                      (51 (ldc 6))        ;;STRING:: "java.lang.String"
                                      (53 (invokestatic
					(methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class"))))
                                      (56 (putstatic (fieldCP "const__4" "clojure.pprint$column_writer$fn__7358" (class "java.lang.Object"))))
                                      (59 (ldc 3))        ;;STRING:: "clojure.core"
                                      (61 (ldc 7))        ;;STRING:: "int"
                                      (63 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (66 (checkcast (class "clojure.lang.Var")))
                                      (69 (putstatic (fieldCP "const__5" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var"))))
                                      (72 (bipush 10))
                                      (74 (invokestatic
					(methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character"))))
                                      (77 (putstatic (fieldCP "const__6" "clojure.pprint$column_writer$fn__7358" (class "java.lang.Object"))))
                                      (80 (ldc 8))        ;;STRING:: "java.lang.Integer"
                                      (82 (invokestatic
					(methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class"))))
                                      (85 (putstatic (fieldCP "const__7" "clojure.pprint$column_writer$fn__7358" (class "java.lang.Object"))))
                                      (88 (ldc 0))        ;;STRING:: "clojure.pprint"
                                      (90 (ldc 9))        ;;STRING:: "c-write-char"
                                      (92 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (95 (checkcast (class "clojure.lang.Var")))
                                      (98 (putstatic (fieldCP "const__8" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var"))))
                                      (101 (ldc 10))      ;;STRING:: "java.lang.Long"
                                      (103 (invokestatic
					(methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class"))))
                                      (106 (putstatic (fieldCP "const__9" "clojure.pprint$column_writer$fn__7358" (class "java.lang.Object"))))
                                      (109 (ldc 3))       ;;STRING:: "clojure.core"
                                      (111 (ldc 11))      ;;STRING:: "str"
                                      (113 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (116 (checkcast (class "clojure.lang.Var")))
                                      (119 (putstatic (fieldCP "const__10" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var"))))
                                      (122 (return))
                                      (endofcode 123))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 6) (code_length . 61)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var"))))
                                      (3 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (6 (checkcast (class "clojure.lang.IFn")))
                                      (9 (aload_1))
                                      (10 (aconst_null))
                                      (11 (astore_1))
                                      (12 (getstatic (fieldCP "const__1" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Keyword"))))
                                      (15 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3))
                                      (20 (astore 5))
                                      (22 (aload 5))
                                      (24 (aconst_null))
                                      (25 (astore 5))
                                      (27 (checkcast (class "java.io.Writer")))
                                      (30 (aload_2))
                                      (31 (aconst_null))
                                      (32 (astore_2))
                                      (33 (checkcast (array char)))
                                      (36 (aload_3))
                                      (37 (aconst_null))
                                      (38 (astore_3))
                                      (39 (checkcast (class "java.lang.Number")))
                                      (42 (invokestatic
					(methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int)))
                                      (45 (aload 4))
                                      (47 (aconst_null))
                                      (48 (astore 4))
                                      (50 (checkcast (class "java.lang.Number")))
                                      (53 (invokestatic
					(methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int)))
                                      (56 (invokevirtual
					(methodCP "write" "java.io.Writer" ((array char) int int) void)))
                                      (59 (aconst_null))
                                      (60 (areturn))
                                      (endofcode 61))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 7) (code_length . 261)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__2" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (astore_3)) 
                                      (7 (getstatic (fieldCP "const__3" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var")))) 
                                      (10 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (13 (checkcast (class "clojure.lang.IFn"))) 
                                      (16 (aload_2)) 
                                      (17 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (22 (astore 4)) 
                                      (24 (aload_3)) 
                                      (25 (checkcast (class "clojure.lang.IFn"))) 
                                      (28 (getstatic (fieldCP "const__4" "clojure.pprint$column_writer$fn__7358" (class "java.lang.Object")))) 
                                      (31 (aload 4)) 
                                      (33 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (38 (dup)) 
                                      (39 (ifnull 126)) ;;to TAG_0
                                      (42 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (45 (if_acmpeq 127)) ;;to TAG_1
                                      (48 (aload_2)) 
                                      (49 (aconst_null)) 
                                      (50 (astore_2)) 
                                      (51 (astore 5)) 
                                      (53 (aload 5)) 
                                      (55 (checkcast (class "java.lang.String"))) 
                                      (58 (getstatic (fieldCP "const__6" "clojure.pprint$column_writer$fn__7358" (class "java.lang.Object")))) 
                                      (61 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (64 (invokevirtual (methodCP "lastIndexOf" "java.lang.String" (int) int))) 
                                      (67 (istore 6)) 
                                      (69 (new (class "clojure.pprint$column_writer$fn__7358$fn__7362"))) 
                                      (72 (dup)) 
                                      (73 (aload_1)) 
                                      (74 (iload 6)) 
                                      (76 (aload 5)) 
                                      (78 (invokespecial (methodCP "<init>" "clojure.pprint$column_writer$fn__7358$fn__7362" ((class "java.lang.Object") int (class "java.lang.Object")) void))) 
                                      (81 (checkcast (class "java.util.concurrent.Callable"))) 
                                      (84 (invokestatic (methodCP "runInTransaction" "clojure.lang.LockingTransaction" ((class "java.util.concurrent.Callable")) (class "java.lang.Object")))) 
                                      (87 (pop)) 
                                      (88 (getstatic (fieldCP "const__0" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var")))) 
                                      (91 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (94 (checkcast (class "clojure.lang.IFn"))) 
                                      (97 (aload_1)) 
                                      (98 (aconst_null)) 
                                      (99 (astore_1)) 
                                      (100 (getstatic (fieldCP "const__1" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Keyword")))) 
                                      (103 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (108 (checkcast (class "java.io.Writer"))) 
                                      (111 (aload 5)) 
                                      (113 (aconst_null)) 
                                      (114 (astore 5)) 
                                      (116 (checkcast (class "java.lang.String"))) 
                                      (119 (invokevirtual (methodCP "write" "java.io.Writer" ((class "java.lang.String")) void))) 
                                      (122 (aconst_null)) 
                                      (123 (goto 260))  ;;to TAG_2
                                      (126 (pop)) ;;at TAG_0
                                      (127 (aload_3)) ;;at TAG_1
                                      (128 (checkcast (class "clojure.lang.IFn"))) 
                                      (131 (getstatic (fieldCP "const__7" "clojure.pprint$column_writer$fn__7358" (class "java.lang.Object")))) 
                                      (134 (aload 4)) 
                                      (136 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (141 (dup)) 
                                      (142 (ifnull 174)) ;;to TAG_3
                                      (145 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (148 (if_acmpeq 175)) ;;to TAG_4
                                      (151 (getstatic (fieldCP "const__8" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var")))) 
                                      (154 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (157 (checkcast (class "clojure.lang.IFn"))) 
                                      (160 (aload_1)) 
                                      (161 (aconst_null)) 
                                      (162 (astore_1)) 
                                      (163 (aload_2)) 
                                      (164 (aconst_null)) 
                                      (165 (astore_2)) 
                                      (166 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (171 (goto 260))  ;;to TAG_2
                                      (174 (pop)) ;;at TAG_3
                                      (175 (aload_3)) ;;at TAG_4
                                      (176 (aconst_null)) 
                                      (177 (astore_3)) 
                                      (178 (checkcast (class "clojure.lang.IFn"))) 
                                      (181 (getstatic (fieldCP "const__9" "clojure.pprint$column_writer$fn__7358" (class "java.lang.Object")))) 
                                      (184 (aload 4)) 
                                      (186 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (191 (dup)) 
                                      (192 (ifnull 224)) ;;to TAG_5
                                      (195 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (198 (if_acmpeq 225)) ;;to TAG_6
                                      (201 (getstatic (fieldCP "const__8" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var")))) 
                                      (204 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (207 (checkcast (class "clojure.lang.IFn"))) 
                                      (210 (aload_1)) 
                                      (211 (aconst_null)) 
                                      (212 (astore_1)) 
                                      (213 (aload_2)) 
                                      (214 (aconst_null)) 
                                      (215 (astore_2)) 
                                      (216 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (221 (goto 260))  ;;to TAG_2
                                      (224 (pop)) ;;at TAG_5
                                      (225 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_6
                                      (228 (dup)) 
                                      (229 (getstatic (fieldCP "const__10" "clojure.pprint$column_writer$fn__7358" (class "clojure.lang.Var")))) 
                                      (232 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (235 (checkcast (class "clojure.lang.IFn"))) 
                                      (238 (ldc 12)) ;;STRING:: "No matching clause: "
                                      (240 (aload 4)) 
                                      (242 (aconst_null)) 
                                      (243 (astore 4)) 
                                      (245 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (250 (checkcast (class "java.lang.String"))) 
                                      (253 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (256 (checkcast (class "java.lang.Throwable"))) 
                                      (259 (athrow)) 
                                      (260 (areturn)) ;;at TAG_2
                                      (endofcode 261))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$column_writer$fn__7358-class-table*
  (make-static-class-decls 
   *clojure.pprint$column_writer$fn__7358*))

(defconst *package-name-map* 
  ("clojure.pprint$column_writer$fn__7358" . "clojure"))

