; core$biginteger-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:40 CDT 2014.
;

(defconst *clojure.core$biginteger*
 (make-class-def
      '(class "clojure.core$biginteger"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "instance?")
                        (STRING  "decimal?")
                        (STRING  "ratio?")
                        (STRING  "number?")
                        (STRING  "long")
                        (STRING  "else")
                        (STRING  "java.math.BigInteger"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 78)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "instance?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$biginteger" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "decimal?"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$biginteger" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "ratio?"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$biginteger" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "number?"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.core$biginteger" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "long"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.core$biginteger" (class "clojure.lang.Var"))))
                                      (65 (aconst_null))
                                      (66 (ldc 6))        ;;STRING:: "else"
                                      (68 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (71 (checkcast (class "clojure.lang.Keyword")))
                                      (74 (putstatic (fieldCP "const__5" "clojure.core$biginteger" (class "clojure.lang.Keyword"))))
                                      (77 (return))
                                      (endofcode 78))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 185)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (instanceof (class "java.math.BigInteger"))) 
                                      (4 (ifeq 14)) ;;to TAG_0
                                      (7 (aload_1)) 
                                      (8 (aconst_null)) 
                                      (9 (astore_1)) 
                                      (10 (goto 184))  ;;to TAG_1
                                      (13 (pop)) 
                                      (14 (aload_1)) ;;at TAG_0
                                      (15 (instanceof (class "clojure.lang.BigInt"))) 
                                      (18 (ifeq 34)) ;;to TAG_2
                                      (21 (aload_1)) 
                                      (22 (aconst_null)) 
                                      (23 (astore_1)) 
                                      (24 (checkcast (class "clojure.lang.BigInt"))) 
                                      (27 (invokevirtual (methodCP "toBigInteger" "clojure.lang.BigInt" () (class "java.math.BigInteger")))) 
                                      (30 (goto 184))  ;;to TAG_1
                                      (33 (pop)) 
                                      (34 (getstatic (fieldCP "const__1" "clojure.core$biginteger" (class "clojure.lang.Var")))) ;;at TAG_2
                                      (37 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (40 (checkcast (class "clojure.lang.IFn"))) 
                                      (43 (aload_1)) 
                                      (44 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (49 (dup)) 
                                      (50 (ifnull 71)) ;;to TAG_3
                                      (53 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (56 (if_acmpeq 72)) ;;to TAG_4
                                      (59 (aload_1)) 
                                      (60 (aconst_null)) 
                                      (61 (astore_1)) 
                                      (62 (checkcast (class "java.math.BigDecimal"))) 
                                      (65 (invokevirtual (methodCP "toBigInteger" "java.math.BigDecimal" () (class "java.math.BigInteger")))) 
                                      (68 (goto 184))  ;;to TAG_1
                                      (71 (pop)) ;;at TAG_3
                                      (72 (getstatic (fieldCP "const__2" "clojure.core$biginteger" (class "clojure.lang.Var")))) ;;at TAG_4
                                      (75 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (78 (checkcast (class "clojure.lang.IFn"))) 
                                      (81 (aload_1)) 
                                      (82 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (87 (dup)) 
                                      (88 (ifnull 109)) ;;to TAG_5
                                      (91 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (94 (if_acmpeq 110)) ;;to TAG_6
                                      (97 (aload_1)) 
                                      (98 (aconst_null)) 
                                      (99 (astore_1)) 
                                      (100 (checkcast (class "clojure.lang.Ratio"))) 
                                      (103 (invokevirtual (methodCP "bigIntegerValue" "clojure.lang.Ratio" () (class "java.math.BigInteger")))) 
                                      (106 (goto 184))  ;;to TAG_1
                                      (109 (pop)) ;;at TAG_5
                                      (110 (getstatic (fieldCP "const__3" "clojure.core$biginteger" (class "clojure.lang.Var")))) ;;at TAG_6
                                      (113 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (116 (checkcast (class "clojure.lang.IFn"))) 
                                      (119 (aload_1)) 
                                      (120 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (125 (dup)) 
                                      (126 (ifnull 147)) ;;to TAG_7
                                      (129 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (132 (if_acmpeq 148)) ;;to TAG_8
                                      (135 (aload_1)) 
                                      (136 (aconst_null)) 
                                      (137 (astore_1)) 
                                      (138 (invokestatic (methodCP "longCast" "clojure.lang.RT" ((class "java.lang.Object")) long))) 
                                      (141 (invokestatic (methodCP "valueOf" "java.math.BigInteger" (long) (class "java.math.BigInteger")))) 
                                      (144 (goto 184))  ;;to TAG_1
                                      (147 (pop)) ;;at TAG_7
                                      (148 (getstatic (fieldCP "const__5" "clojure.core$biginteger" (class "clojure.lang.Keyword")))) ;;at TAG_8
                                      (151 (dup)) 
                                      (152 (ifnull 182)) ;;to TAG_9
                                      (155 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (158 (if_acmpeq 183)) ;;to TAG_10
                                      (161 (ldc 7)) ;;STRING:: "java.math.BigInteger"
                                      (163 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (166 (iconst_1)) 
                                      (167 (anewarray (class "java.lang.Object"))) 
                                      (170 (dup)) 
                                      (171 (iconst_0)) 
                                      (172 (aload_1)) 
                                      (173 (aconst_null)) 
                                      (174 (astore_1)) 
                                      (175 (aastore)) 
                                      (176 (invokestatic (methodCP "invokeConstructor" "clojure.lang.Reflector" ((class "java.lang.Class") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (179 (goto 184))  ;;to TAG_1
                                      (182 (pop)) ;;at TAG_9
                                      (183 (aconst_null)) ;;at TAG_10
                                      (184 (areturn)) ;;at TAG_1
                                      (endofcode 185))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$biginteger-class-table*
  (make-static-class-decls 
   *clojure.core$biginteger*))

(defconst *package-name-map* 
  ("clojure.core$biginteger" . "clojure"))

