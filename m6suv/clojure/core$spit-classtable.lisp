; core$spit-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:45 CDT 2014.
;

(defconst *clojure.core$spit*
 (make-class-def
      '(class "clojure.core$spit"
            "clojure.lang.RestFn"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "apply")
                        (STRING  "clojure.java.io")
                        (STRING  "writer")
                        (STRING  "str"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 40)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "apply"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$spit" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.java.io"
                                      (15 (ldc 3))        ;;STRING:: "writer"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$spit" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 4))        ;;STRING:: "str"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$spit" (class "clojure.lang.Var"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.RestFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doInvoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 7) (code_length . 96)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$spit" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (getstatic (fieldCP "const__1" "clojure.core$spit" (class "clojure.lang.Var")))) 
                                      (12 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (15 (aload_1)) 
                                      (16 (aconst_null)) 
                                      (17 (astore_1)) 
                                      (18 (aload_3)) 
                                      (19 (aconst_null)) 
                                      (20 (astore_3)) 
                                      (21 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (26 (astore 4)) 
                                      (28 (aload 4)) ;;at TAG_1
                                      (30 (checkcast (class "java.io.Writer"))) 
                                      (33 (getstatic (fieldCP "const__2" "clojure.core$spit" (class "clojure.lang.Var")))) 
                                      (36 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (39 (checkcast (class "clojure.lang.IFn"))) 
                                      (42 (aload_2)) 
                                      (43 (aconst_null)) 
                                      (44 (astore_2)) 
                                      (45 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (50 (checkcast (class "java.lang.String"))) 
                                      (53 (invokevirtual (methodCP "write" "java.io.Writer" ((class "java.lang.String")) void))) 
                                      (56 (aconst_null)) 
                                      (57 (astore 5)) 
                                      (59 (aload 4)) ;;at TAG_2
                                      (61 (aconst_null)) 
                                      (62 (astore 4)) 
                                      (64 (checkcast (class "java.io.Writer"))) 
                                      (67 (invokevirtual (methodCP "close" "java.io.Writer" () void))) 
                                      (70 (aconst_null)) 
                                      (71 (pop)) 
                                      (72 (goto 93)) ;;to TAG_0
                                      (75 (astore 6)) ;;at TAG_3
                                      (77 (aload 4)) 
                                      (79 (aconst_null)) 
                                      (80 (astore 4)) 
                                      (82 (checkcast (class "java.io.Writer"))) 
                                      (85 (invokevirtual (methodCP "close" "java.io.Writer" () void))) 
                                      (88 (aconst_null)) 
                                      (89 (pop)) 
                                      (90 (aload 6)) 
                                      (92 (athrow)) 
                                      (93 (aload 5)) ;;at TAG_0
                                      (95 (areturn)) 
                                      (endofcode 96))
                                   (Exceptions 
                                     (handler 28 59  75 (class "java.lang.Throwable")))
                                   (StackMap )))
                        (method "getRequiredArity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_2))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$spit-class-table*
  (make-static-class-decls 
   *clojure.core$spit*))

(defconst *package-name-map* 
  ("clojure.core$spit" . "clojure"))

