; main$repl_caught-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:53 CDT 2014.
;

(defconst *clojure.main$repl_caught*
 (make-class-def
      '(class "clojure.main$repl_caught"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.main")
                        (STRING  "repl-exception")
                        (STRING  "clojure.core")
                        (STRING  "zero?")
                        (STRING  "count")
                        (STRING  "aget")
                        (STRING  "int")
                        (STRING  "push-thread-bindings")
                        (STRING  "hash-map")
                        (STRING  "*out*")
                        (STRING  "*err*")
                        (STRING  "println")
                        (STRING  "str")
                        (STRING  "class")
                        (STRING  "instance?")
                        (STRING  "stack-element-str")
                        (STRING  "pop-thread-bindings")
                        (STRING  "getStackTrace")
                        (STRING  "clojure.lang.RT")
                        (STRING  " ")
                        (STRING  "getMessage")
                        (STRING  "[trace missing]"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__11" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__12" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__13" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__14" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__15" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 203)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.main"
                                      (2 (ldc 1))         ;;STRING:: "repl-exception"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.core"
                                      (15 (ldc 3))        ;;STRING:: "zero?"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (26 (ldc 2))        ;;STRING:: "clojure.core"
                                      (28 (ldc 4))        ;;STRING:: "count"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (39 (ldc 2))        ;;STRING:: "clojure.core"
                                      (41 (ldc 5))        ;;STRING:: "aget"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (52 (ldc 2))        ;;STRING:: "clojure.core"
                                      (54 (ldc 6))        ;;STRING:: "int"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (65 (lconst_0))
                                      (66 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (69 (putstatic (fieldCP "const__5" "clojure.main$repl_caught" (class "java.lang.Object"))))
                                      (72 (ldc 2))        ;;STRING:: "clojure.core"
                                      (74 (ldc 7))        ;;STRING:: "push-thread-bindings"
                                      (76 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (79 (checkcast (class "clojure.lang.Var")))
                                      (82 (putstatic (fieldCP "const__6" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (85 (ldc 2))        ;;STRING:: "clojure.core"
                                      (87 (ldc 8))        ;;STRING:: "hash-map"
                                      (89 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (92 (checkcast (class "clojure.lang.Var")))
                                      (95 (putstatic (fieldCP "const__7" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (98 (ldc 2))        ;;STRING:: "clojure.core"
                                      (100 (ldc 9))       ;;STRING:: "*out*"
                                      (102 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (105 (checkcast (class "clojure.lang.Var")))
                                      (108 (putstatic (fieldCP "const__8" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (111 (ldc 2))       ;;STRING:: "clojure.core"
                                      (113 (ldc 10))      ;;STRING:: "*err*"
                                      (115 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (118 (checkcast (class "clojure.lang.Var")))
                                      (121 (putstatic (fieldCP "const__9" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (124 (ldc 2))       ;;STRING:: "clojure.core"
                                      (126 (ldc 11))      ;;STRING:: "println"
                                      (128 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (131 (checkcast (class "clojure.lang.Var")))
                                      (134 (putstatic (fieldCP "const__10" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (137 (ldc 2))       ;;STRING:: "clojure.core"
                                      (139 (ldc 12))      ;;STRING:: "str"
                                      (141 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (144 (checkcast (class "clojure.lang.Var")))
                                      (147 (putstatic (fieldCP "const__11" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (150 (ldc 2))       ;;STRING:: "clojure.core"
                                      (152 (ldc 13))      ;;STRING:: "class"
                                      (154 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (157 (checkcast (class "clojure.lang.Var")))
                                      (160 (putstatic (fieldCP "const__12" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (163 (ldc 2))       ;;STRING:: "clojure.core"
                                      (165 (ldc 14))      ;;STRING:: "instance?"
                                      (167 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (170 (checkcast (class "clojure.lang.Var")))
                                      (173 (putstatic (fieldCP "const__13" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (176 (ldc 0))       ;;STRING:: "clojure.main"
                                      (178 (ldc 15))      ;;STRING:: "stack-element-str"
                                      (180 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (183 (checkcast (class "clojure.lang.Var")))
                                      (186 (putstatic (fieldCP "const__14" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (189 (ldc 2))       ;;STRING:: "clojure.core"
                                      (191 (ldc 16))      ;;STRING:: "pop-thread-bindings"
                                      (193 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (196 (checkcast (class "clojure.lang.Var")))
                                      (199 (putstatic (fieldCP "const__15" "clojure.main$repl_caught" (class "clojure.lang.Var"))))
                                      (202 (return))
                                      (endofcode 203))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 11) (max_locals . 7) (code_length . 279)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.main$repl_caught" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (aconst_null)) 
                                      (11 (astore_1)) 
                                      (12 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (17 (astore_2)) 
                                      (18 (aload_2)) 
                                      (19 (ldc 17)) ;;STRING:: "getStackTrace"
                                      (21 (invokestatic (methodCP "invokeNoArgInstanceMember" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String")) (class "java.lang.Object")))) 
                                      (24 (astore_3)) 
                                      (25 (aload_3)) 
                                      (26 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (29 (i2l)) 
                                      (30 (lconst_0)) 
                                      (31 (lcmp)) 
                                      (32 (ifne 40)) ;;to TAG_0
                                      (35 (aconst_null)) 
                                      (36 (goto 70))  ;;to TAG_1
                                      (39 (pop)) 
                                      (40 (ldc 18)) ;;at TAG_0;;STRING:: "clojure.lang.RT"
                                      (42 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (45 (ldc 5)) ;;STRING:: "aget"
                                      (47 (iconst_2)) 
                                      (48 (anewarray (class "java.lang.Object"))) 
                                      (51 (dup)) 
                                      (52 (iconst_0)) 
                                      (53 (aload_3)) 
                                      (54 (aconst_null)) 
                                      (55 (astore_3)) 
                                      (56 (aastore)) 
                                      (57 (dup)) 
                                      (58 (iconst_1)) 
                                      (59 (lconst_0)) 
                                      (60 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (63 (invokestatic (methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer")))) 
                                      (66 (aastore)) 
                                      (67 (invokestatic (methodCP "invokeStaticMethod" "clojure.lang.Reflector" ((class "java.lang.Class") (class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (70 (astore 4)) ;;at TAG_1
                                      (72 (getstatic (fieldCP "const__6" "clojure.main$repl_caught" (class "clojure.lang.Var")))) 
                                      (75 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (78 (checkcast (class "clojure.lang.IFn"))) 
                                      (81 (getstatic (fieldCP "const__7" "clojure.main$repl_caught" (class "clojure.lang.Var")))) 
                                      (84 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (87 (checkcast (class "clojure.lang.IFn"))) 
                                      (90 (getstatic (fieldCP "const__8" "clojure.main$repl_caught" (class "clojure.lang.Var")))) 
                                      (93 (getstatic (fieldCP "const__9" "clojure.main$repl_caught" (class "clojure.lang.Var")))) 
                                      (96 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (99 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (104 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (109 (pop)) 
                                      (110 (getstatic (fieldCP "const__10" "clojure.main$repl_caught" (class "clojure.lang.Var")))) ;;at TAG_8
                                      (113 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (116 (checkcast (class "clojure.lang.IFn"))) 
                                      (119 (getstatic (fieldCP "const__11" "clojure.main$repl_caught" (class "clojure.lang.Var")))) 
                                      (122 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (125 (checkcast (class "clojure.lang.IFn"))) 
                                      (128 (getstatic (fieldCP "const__12" "clojure.main$repl_caught" (class "clojure.lang.Var")))) 
                                      (131 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (134 (checkcast (class "clojure.lang.IFn"))) 
                                      (137 (aload_2)) 
                                      (138 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (143 (checkcast (class "java.lang.Class"))) 
                                      (146 (invokevirtual (methodCP "getSimpleName" "java.lang.Class" () (class "java.lang.String")))) 
                                      (149 (ldc 19)) ;;STRING:: " "
                                      (151 (aload_2)) 
                                      (152 (ldc 20)) ;;STRING:: "getMessage"
                                      (154 (invokestatic (methodCP "invokeNoArgInstanceMember" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String")) (class "java.lang.Object")))) 
                                      (157 (ldc 19)) ;;STRING:: " "
                                      (159 (aload_2)) 
                                      (160 (aconst_null)) 
                                      (161 (astore_2)) 
                                      (162 (instanceof (class "clojure.lang.Compiler$CompilerException"))) 
                                      (165 (ifeq 173)) ;;to TAG_2
                                      (168 (aconst_null)) 
                                      (169 (goto 226)) ;;to TAG_3
                                      (172 (pop)) 
                                      (173 (getstatic (fieldCP "const__11" "clojure.main$repl_caught" (class "clojure.lang.Var")))) ;;at TAG_2
                                      (176 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (179 (checkcast (class "clojure.lang.IFn"))) 
                                      (182 (ldc 19)) ;;STRING:: " "
                                      (184 (aload 4)) 
                                      (186 (dup)) 
                                      (187 (ifnull 218)) ;;to TAG_4
                                      (190 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (193 (if_acmpeq 219)) ;;to TAG_5
                                      (196 (getstatic (fieldCP "const__14" "clojure.main$repl_caught" (class "clojure.lang.Var")))) 
                                      (199 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (202 (checkcast (class "clojure.lang.IFn"))) 
                                      (205 (aload 4)) 
                                      (207 (aconst_null)) 
                                      (208 (astore 4)) 
                                      (210 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (215 (goto 221)) ;;to TAG_6
                                      (218 (pop)) ;;at TAG_4
                                      (219 (ldc 21)) ;;at TAG_5;;STRING:: "[trace missing]"
                                      (221 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) ;;at TAG_6
                                      (226 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 6)) ;;at TAG_3
                                      (231 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (236 (astore 5)) 
                                      (238 (getstatic (fieldCP "const__15" "clojure.main$repl_caught" (class "clojure.lang.Var")))) ;;at TAG_9
                                      (241 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (244 (checkcast (class "clojure.lang.IFn"))) 
                                      (247 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (252 (pop)) 
                                      (253 (goto 276)) ;;to TAG_7
                                      (256 (astore 6)) ;;at TAG_10
                                      (258 (getstatic (fieldCP "const__15" "clojure.main$repl_caught" (class "clojure.lang.Var")))) 
                                      (261 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (264 (checkcast (class "clojure.lang.IFn"))) 
                                      (267 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (272 (pop)) 
                                      (273 (aload 6)) 
                                      (275 (athrow)) 
                                      (276 (aload 5)) ;;at TAG_7
                                      (278 (areturn)) 
                                      (endofcode 279))
                                   (Exceptions 
                                     (handler 110 238  256 (class "java.lang.Throwable")))
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *main$repl_caught-class-table*
  (make-static-class-decls 
   *clojure.main$repl_caught*))

(defconst *package-name-map* 
  ("clojure.main$repl_caught" . "clojure"))

