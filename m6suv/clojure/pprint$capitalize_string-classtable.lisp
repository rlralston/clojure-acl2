; pprint$capitalize_string-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:55 CDT 2014.
;

(defconst *clojure.pprint$capitalize_string*
 (make-class-def
      '(class "clojure.pprint$capitalize_string"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "first")
                        (STRING  "str")
                        (STRING  "subs")
                        (STRING  "apply")
                        (STRING  "clojure.pprint")
                        (STRING  "consume"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 73)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "first"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$capitalize_string" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "str"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$capitalize_string" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "subs"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.pprint$capitalize_string" (class "clojure.lang.Var"))))
                                      (39 (lconst_1))
                                      (40 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (43 (putstatic (fieldCP "const__3" "clojure.pprint$capitalize_string" (class "java.lang.Object"))))
                                      (46 (ldc 0))        ;;STRING:: "clojure.core"
                                      (48 (ldc 4))        ;;STRING:: "apply"
                                      (50 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (53 (checkcast (class "clojure.lang.Var")))
                                      (56 (putstatic (fieldCP "const__4" "clojure.pprint$capitalize_string" (class "clojure.lang.Var"))))
                                      (59 (ldc 5))        ;;STRING:: "clojure.pprint"
                                      (61 (ldc 6))        ;;STRING:: "consume"
                                      (63 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (66 (checkcast (class "clojure.lang.Var")))
                                      (69 (putstatic (fieldCP "const__5" "clojure.pprint$capitalize_string" (class "clojure.lang.Var"))))
                                      (72 (return))
                                      (endofcode 73))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 6) (code_length . 217)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$capitalize_string" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (astore_3)) 
                                      (16 (aload_2)) 
                                      (17 (aconst_null)) 
                                      (18 (astore_2)) 
                                      (19 (astore 4)) 
                                      (21 (aload 4)) 
                                      (23 (dup)) 
                                      (24 (ifnull 82)) ;;to TAG_0
                                      (27 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (30 (if_acmpeq 83))  ;;to TAG_1
                                      (33 (aload_3)) 
                                      (34 (astore 5)) 
                                      (36 (aload 5)) 
                                      (38 (dup)) 
                                      (39 (ifnull 73)) ;;to TAG_2
                                      (42 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (45 (if_acmpeq 74)) ;;to TAG_3
                                      (48 (aload_3)) 
                                      (49 (checkcast (class "java.lang.Character"))) 
                                      (52 (invokevirtual (methodCP "charValue" "java.lang.Character" () char))) 
                                      (55 (invokestatic (methodCP "isLetter" "java.lang.Character" (char) boolean))) 
                                      (58 (ifeq 67)) ;;to TAG_4
                                      (61 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (64 (goto 70)) ;;to TAG_5
                                      (67 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_4
                                      (70 (goto 79)) ;;to TAG_6;;at TAG_5
                                      (73 (pop)) ;;at TAG_2
                                      (74 (aload 5)) ;;at TAG_3
                                      (76 (aconst_null)) 
                                      (77 (astore 5)) 
                                      (79 (goto 88)) ;;to TAG_7;;at TAG_6
                                      (82 (pop)) ;;at TAG_0
                                      (83 (aload 4)) ;;at TAG_1
                                      (85 (aconst_null)) 
                                      (86 (astore 4)) 
                                      (88 (dup)) ;;at TAG_7
                                      (89 (ifnull 150)) ;;to TAG_8
                                      (92 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (95 (if_acmpeq 151)) ;;to TAG_9
                                      (98 (getstatic (fieldCP "const__1" "clojure.pprint$capitalize_string" (class "clojure.lang.Var")))) 
                                      (101 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (104 (checkcast (class "clojure.lang.IFn"))) 
                                      (107 (aload_3)) 
                                      (108 (aconst_null)) 
                                      (109 (astore_3)) 
                                      (110 (checkcast (class "java.lang.Character"))) 
                                      (113 (invokevirtual (methodCP "charValue" "java.lang.Character" () char))) 
                                      (116 (invokestatic (methodCP "toUpperCase" "java.lang.Character" (char) char))) 
                                      (119 (invokestatic (methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character")))) 
                                      (122 (getstatic (fieldCP "const__2" "clojure.pprint$capitalize_string" (class "clojure.lang.Var")))) 
                                      (125 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (128 (checkcast (class "clojure.lang.IFn"))) 
                                      (131 (aload_1)) 
                                      (132 (aconst_null)) 
                                      (133 (astore_1)) 
                                      (134 (getstatic (fieldCP "const__3" "clojure.pprint$capitalize_string" (class "java.lang.Object")))) 
                                      (137 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (142 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (147 (goto 154)) ;;to TAG_10
                                      (150 (pop)) ;;at TAG_8
                                      (151 (aload_1)) ;;at TAG_9
                                      (152 (aconst_null)) 
                                      (153 (astore_1)) 
                                      (154 (astore 4)) ;;at TAG_10
                                      (156 (getstatic (fieldCP "const__4" "clojure.pprint$capitalize_string" (class "clojure.lang.Var")))) 
                                      (159 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (162 (checkcast (class "clojure.lang.IFn"))) 
                                      (165 (getstatic (fieldCP "const__1" "clojure.pprint$capitalize_string" (class "clojure.lang.Var")))) 
                                      (168 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (171 (getstatic (fieldCP "const__0" "clojure.pprint$capitalize_string" (class "clojure.lang.Var")))) 
                                      (174 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (177 (checkcast (class "clojure.lang.IFn"))) 
                                      (180 (getstatic (fieldCP "const__5" "clojure.pprint$capitalize_string" (class "clojure.lang.Var")))) 
                                      (183 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (186 (checkcast (class "clojure.lang.IFn"))) 
                                      (189 (new (class "clojure.pprint$capitalize_string$fn__7834"))) 
                                      (192 (dup)) 
                                      (193 (invokespecial (methodCP "<init>" "clojure.pprint$capitalize_string$fn__7834" () void))) 
                                      (196 (aload 4)) 
                                      (198 (aconst_null)) 
                                      (199 (astore 4)) 
                                      (201 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (206 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (211 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (216 (areturn)) 
                                      (endofcode 217))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$capitalize_string-class-table*
  (make-static-class-decls 
   *clojure.pprint$capitalize_string*))

(defconst *package-name-map* 
  ("clojure.pprint$capitalize_string" . "clojure"))

