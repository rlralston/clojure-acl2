; test$function_QMARK_-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:59 CDT 2014.
;

(defconst *clojure.test$function_QMARK_*
 (make-class-def
      '(class "clojure.test$function_QMARK_"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "symbol?")
                        (STRING  "resolve")
                        (STRING  "clojure.test")
                        (STRING  "get-possibly-unbound-var")
                        (STRING  "fn?")
                        (STRING  "not")
                        (STRING  "macro")
                        (STRING  "meta"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "__site__0__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__0__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 0) (code_length . 111)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "symbol?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.test$function_QMARK_" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "resolve"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.test$function_QMARK_" (class "clojure.lang.Var"))))
                                      (26 (ldc 3))        ;;STRING:: "clojure.test"
                                      (28 (ldc 4))        ;;STRING:: "get-possibly-unbound-var"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.test$function_QMARK_" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 5))        ;;STRING:: "fn?"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.test$function_QMARK_" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 6))        ;;STRING:: "not"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.test$function_QMARK_" (class "clojure.lang.Var"))))
                                      (65 (aconst_null))
                                      (66 (ldc 7))        ;;STRING:: "macro"
                                      (68 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (71 (checkcast (class "clojure.lang.Keyword")))
                                      (74 (putstatic (fieldCP "const__5" "clojure.test$function_QMARK_" (class "clojure.lang.Keyword"))))
                                      (77 (ldc 0))        ;;STRING:: "clojure.core"
                                      (79 (ldc 8))        ;;STRING:: "meta"
                                      (81 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (84 (checkcast (class "clojure.lang.Var")))
                                      (87 (putstatic (fieldCP "const__6" "clojure.test$function_QMARK_" (class "clojure.lang.Var"))))
                                      (90 (new (class "clojure.lang.KeywordLookupSite")))
                                      (93 (dup))
                                      (94 (aconst_null))
                                      (95 (ldc 7))        ;;STRING:: "macro"
                                      (97 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (100 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (103 (dup))
                                      (104 (putstatic (fieldCP "__site__0__" "clojure.test$function_QMARK_" (class "clojure.lang.KeywordLookupSite"))))
                                      (107 (putstatic (fieldCP "__thunk__0__" "clojure.test$function_QMARK_" (class "clojure.lang.ILookupThunk"))))
                                      (110 (return))
                                      (endofcode 111))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 7) (code_length . 239)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.test$function_QMARK_" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (dup)) 
                                      (16 (ifnull 220)) ;;to TAG_0
                                      (19 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (22 (if_acmpeq 221))  ;;to TAG_1
                                      (25 (getstatic (fieldCP "const__1" "clojure.test$function_QMARK_" (class "clojure.lang.Var")))) 
                                      (28 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (31 (checkcast (class "clojure.lang.IFn"))) 
                                      (34 (aload_1)) 
                                      (35 (aconst_null)) 
                                      (36 (astore_1)) 
                                      (37 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (42 (astore_2)) 
                                      (43 (aload_2)) 
                                      (44 (dup)) 
                                      (45 (ifnull 215)) ;;to TAG_2
                                      (48 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (51 (if_acmpeq 216)) ;;to TAG_3
                                      (54 (aload_2)) 
                                      (55 (aconst_null)) 
                                      (56 (astore_2)) 
                                      (57 (astore_3)) 
                                      (58 (getstatic (fieldCP "const__2" "clojure.test$function_QMARK_" (class "clojure.lang.Var")))) 
                                      (61 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (64 (checkcast (class "clojure.lang.IFn"))) 
                                      (67 (aload_3)) 
                                      (68 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (73 (astore 4)) 
                                      (75 (aload 4)) 
                                      (77 (dup)) 
                                      (78 (ifnull 210)) ;;to TAG_4
                                      (81 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (84 (if_acmpeq 211)) ;;to TAG_5
                                      (87 (aload 4)) 
                                      (89 (aconst_null)) 
                                      (90 (astore 4)) 
                                      (92 (astore 5)) 
                                      (94 (getstatic (fieldCP "const__3" "clojure.test$function_QMARK_" (class "clojure.lang.Var")))) 
                                      (97 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (100 (checkcast (class "clojure.lang.IFn"))) 
                                      (103 (aload 5)) 
                                      (105 (aconst_null)) 
                                      (106 (astore 5)) 
                                      (108 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (113 (astore 6)) 
                                      (115 (aload 6)) 
                                      (117 (dup)) 
                                      (118 (ifnull 201)) ;;to TAG_6
                                      (121 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (124 (if_acmpeq 202)) ;;to TAG_7
                                      (127 (getstatic (fieldCP "const__4" "clojure.test$function_QMARK_" (class "clojure.lang.Var")))) 
                                      (130 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (133 (checkcast (class "clojure.lang.IFn"))) 
                                      (136 (getstatic (fieldCP "__thunk__0__" "clojure.test$function_QMARK_" (class "clojure.lang.ILookupThunk")))) 
                                      (139 (dup)) 
                                      (140 (getstatic (fieldCP "const__6" "clojure.test$function_QMARK_" (class "clojure.lang.Var")))) 
                                      (143 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (146 (checkcast (class "clojure.lang.IFn"))) 
                                      (149 (aload_3)) 
                                      (150 (aconst_null)) 
                                      (151 (astore_3)) 
                                      (152 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (157 (dup_x2)) 
                                      (158 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (163 (dup_x2)) 
                                      (164 (if_acmpeq 171)) ;;to TAG_8
                                      (167 (pop)) 
                                      (168 (goto 193)) ;;to TAG_9
                                      (171 (swap)) ;;at TAG_8
                                      (172 (pop)) 
                                      (173 (dup)) 
                                      (174 (getstatic (fieldCP "__site__0__" "clojure.test$function_QMARK_" (class "clojure.lang.KeywordLookupSite")))) 
                                      (177 (swap)) 
                                      (178 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (183 (dup)) 
                                      (184 (putstatic (fieldCP "__thunk__0__" "clojure.test$function_QMARK_" (class "clojure.lang.ILookupThunk")))) 
                                      (187 (swap)) 
                                      (188 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (193 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_9
                                      (198 (goto 207)) ;;to TAG_10
                                      (201 (pop)) ;;at TAG_6
                                      (202 (aload 6)) ;;at TAG_7
                                      (204 (aconst_null)) 
                                      (205 (astore 6)) 
                                      (207 (goto 212)) ;;to TAG_11;;at TAG_10
                                      (210 (pop)) ;;at TAG_4
                                      (211 (aconst_null)) ;;at TAG_5
                                      (212 (goto 217)) ;;to TAG_12;;at TAG_11
                                      (215 (pop)) ;;at TAG_2
                                      (216 (aconst_null)) ;;at TAG_3
                                      (217 (goto 238)) ;;to TAG_13;;at TAG_12
                                      (220 (pop)) ;;at TAG_0
                                      (221 (getstatic (fieldCP "const__3" "clojure.test$function_QMARK_" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (224 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (227 (checkcast (class "clojure.lang.IFn"))) 
                                      (230 (aload_1)) 
                                      (231 (aconst_null)) 
                                      (232 (astore_1)) 
                                      (233 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (238 (areturn)) ;;at TAG_13
                                      (endofcode 239))
                                   (Exceptions )
                                   (StackMap )))
                        (method "swapThunk"
                              (parameters int (class "clojure.lang.ILookupThunk"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 28)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (tableswitch (tableswitchinfo 27 (0 . 0) (20))))  ;;to TAG_0;;to TAG_1
                                      (20 (aload_2)) ;;at TAG_1
                                      (21 (putstatic (fieldCP "__thunk__0__" "clojure.test$function_QMARK_" (class "clojure.lang.ILookupThunk")))) 
                                      (24 (goto 27))  ;;to TAG_0
                                      (27 (return)) ;;at TAG_0
                                      (endofcode 28))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *test$function_QMARK_-class-table*
  (make-static-class-decls 
   *clojure.test$function_QMARK_*))

(defconst *package-name-map* 
  ("clojure.test$function_QMARK_" . "clojure"))

