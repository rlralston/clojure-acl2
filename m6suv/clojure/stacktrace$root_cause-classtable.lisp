; stacktrace$root_cause-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:58 CDT 2014.
;

(defconst *clojure.stacktrace$root_cause*
 (make-class-def
      '(class "clojure.stacktrace$root_cause"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "getCause"))
            (fields)
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 0) (max_locals . 0) (code_length . 1)
                                   (parsedcode
                                      (0 (return))
                                      (endofcode 1))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 37)
                                   (parsedcode
                                      (0 (aload_1)) ;;at TAG_2
                                      (1 (ldc 0)) ;;STRING:: "getCause"
                                      (3 (invokestatic (methodCP "invokeNoArgInstanceMember" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String")) (class "java.lang.Object")))) 
                                      (6 (astore_2)) 
                                      (7 (aload_2)) 
                                      (8 (dup)) 
                                      (9 (ifnull 32)) ;;to TAG_0
                                      (12 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (15 (if_acmpeq 33)) ;;to TAG_1
                                      (18 (aload_2)) 
                                      (19 (aconst_null)) 
                                      (20 (astore_2)) 
                                      (21 (astore_3)) 
                                      (22 (aload_3)) 
                                      (23 (aconst_null)) 
                                      (24 (astore_3)) 
                                      (25 (astore_1)) 
                                      (26 (goto 0))  ;;to TAG_2
                                      (29 (goto 36)) ;;to TAG_3
                                      (32 (pop)) ;;at TAG_0
                                      (33 (aload_1)) ;;at TAG_1
                                      (34 (aconst_null)) 
                                      (35 (astore_1)) 
                                      (36 (areturn)) ;;at TAG_3
                                      (endofcode 37))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *stacktrace$root_cause-class-table*
  (make-static-class-decls 
   *clojure.stacktrace$root_cause*))

(defconst *package-name-map* 
  ("clojure.stacktrace$root_cause" . "clojure"))

