; pprint$base_str-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:55 CDT 2014.
;

(defconst *clojure.pprint$base_str*
 (make-class-def
      '(class "clojure.pprint$base_str"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "zero?")
                        (STRING  "float?")
                        (STRING  "bigdec")
                        (STRING  "ratio?")
                        (STRING  "/")
                        (STRING  "else")
                        (STRING  "apply")
                        (STRING  "str")
                        (STRING  "map")
                        (STRING  "clojure.pprint")
                        (STRING  "remainders")
                        (STRING  "0"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 130)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "zero?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$base_str" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "float?"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$base_str" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "bigdec"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.pprint$base_str" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "ratio?"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.pprint$base_str" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "/"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.pprint$base_str" (class "clojure.lang.Var"))))
                                      (65 (aconst_null))
                                      (66 (ldc 6))        ;;STRING:: "else"
                                      (68 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (71 (checkcast (class "clojure.lang.Keyword")))
                                      (74 (putstatic (fieldCP "const__5" "clojure.pprint$base_str" (class "clojure.lang.Keyword"))))
                                      (77 (ldc 0))        ;;STRING:: "clojure.core"
                                      (79 (ldc 7))        ;;STRING:: "apply"
                                      (81 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (84 (checkcast (class "clojure.lang.Var")))
                                      (87 (putstatic (fieldCP "const__6" "clojure.pprint$base_str" (class "clojure.lang.Var"))))
                                      (90 (ldc 0))        ;;STRING:: "clojure.core"
                                      (92 (ldc 8))        ;;STRING:: "str"
                                      (94 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (97 (checkcast (class "clojure.lang.Var")))
                                      (100 (putstatic (fieldCP "const__7" "clojure.pprint$base_str" (class "clojure.lang.Var"))))
                                      (103 (ldc 0))       ;;STRING:: "clojure.core"
                                      (105 (ldc 9))       ;;STRING:: "map"
                                      (107 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (110 (checkcast (class "clojure.lang.Var")))
                                      (113 (putstatic (fieldCP "const__8" "clojure.pprint$base_str" (class "clojure.lang.Var"))))
                                      (116 (ldc 10))      ;;STRING:: "clojure.pprint"
                                      (118 (ldc 11))      ;;STRING:: "remainders"
                                      (120 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (123 (checkcast (class "clojure.lang.Var")))
                                      (126 (putstatic (fieldCP "const__9" "clojure.pprint$base_str" (class "clojure.lang.Var"))))
                                      (129 (return))
                                      (endofcode 130))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 4) (code_length . 195)
                                   (parsedcode
                                      (0 (aload_2)) 
                                      (1 (invokestatic (methodCP "isZero" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (4 (ifeq 13)) ;;to TAG_0
                                      (7 (ldc 12)) ;;STRING:: "0"
                                      (9 (goto 194))  ;;to TAG_1
                                      (12 (pop)) 
                                      (13 (getstatic (fieldCP "const__1" "clojure.pprint$base_str" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (16 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (19 (checkcast (class "clojure.lang.IFn"))) 
                                      (22 (aload_2)) 
                                      (23 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (28 (dup)) 
                                      (29 (ifnull 56)) ;;to TAG_2
                                      (32 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (35 (if_acmpeq 57)) ;;to TAG_3
                                      (38 (getstatic (fieldCP "const__2" "clojure.pprint$base_str" (class "clojure.lang.Var")))) 
                                      (41 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (44 (checkcast (class "clojure.lang.IFn"))) 
                                      (47 (aload_2)) 
                                      (48 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (53 (goto 132)) ;;to TAG_4
                                      (56 (pop)) ;;at TAG_2
                                      (57 (getstatic (fieldCP "const__3" "clojure.pprint$base_str" (class "clojure.lang.Var")))) ;;at TAG_3
                                      (60 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (63 (checkcast (class "clojure.lang.IFn"))) 
                                      (66 (aload_2)) 
                                      (67 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (72 (dup)) 
                                      (73 (ifnull 112)) ;;to TAG_5
                                      (76 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (79 (if_acmpeq 113)) ;;to TAG_6
                                      (82 (aload_2)) 
                                      (83 (astore_3)) 
                                      (84 (aload_3)) 
                                      (85 (checkcast (class "clojure.lang.Ratio"))) 
                                      (88 (getfield (fieldCP "numerator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (91 (checkcast (class "java.math.BigInteger"))) 
                                      (94 (aload_3)) 
                                      (95 (aconst_null)) 
                                      (96 (astore_3)) 
                                      (97 (checkcast (class "clojure.lang.Ratio"))) 
                                      (100 (getfield (fieldCP "denominator" "clojure.lang.Ratio" (class "java.math.BigInteger")))) 
                                      (103 (checkcast (class "java.math.BigInteger"))) 
                                      (106 (invokestatic (methodCP "divide" "clojure.lang.Numbers" ((class "java.math.BigInteger") (class "java.math.BigInteger")) (class "java.lang.Number")))) 
                                      (109 (goto 132)) ;;to TAG_4
                                      (112 (pop)) ;;at TAG_5
                                      (113 (getstatic (fieldCP "const__5" "clojure.pprint$base_str" (class "clojure.lang.Keyword")))) ;;at TAG_6
                                      (116 (dup)) 
                                      (117 (ifnull 130)) ;;to TAG_7
                                      (120 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (123 (if_acmpeq 131)) ;;to TAG_8
                                      (126 (aload_2)) 
                                      (127 (goto 132)) ;;to TAG_4
                                      (130 (pop)) ;;at TAG_7
                                      (131 (aconst_null)) ;;at TAG_8
                                      (132 (astore_3)) ;;at TAG_4
                                      (133 (getstatic (fieldCP "const__6" "clojure.pprint$base_str" (class "clojure.lang.Var")))) 
                                      (136 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (139 (checkcast (class "clojure.lang.IFn"))) 
                                      (142 (getstatic (fieldCP "const__7" "clojure.pprint$base_str" (class "clojure.lang.Var")))) 
                                      (145 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (148 (getstatic (fieldCP "const__8" "clojure.pprint$base_str" (class "clojure.lang.Var")))) 
                                      (151 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (154 (checkcast (class "clojure.lang.IFn"))) 
                                      (157 (new (class "clojure.pprint$base_str$fn__7644"))) 
                                      (160 (dup)) 
                                      (161 (invokespecial (methodCP "<init>" "clojure.pprint$base_str$fn__7644" () void))) 
                                      (164 (getstatic (fieldCP "const__9" "clojure.pprint$base_str" (class "clojure.lang.Var")))) 
                                      (167 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (170 (checkcast (class "clojure.lang.IFn"))) 
                                      (173 (aload_1)) 
                                      (174 (aconst_null)) 
                                      (175 (astore_1)) 
                                      (176 (aload_2)) 
                                      (177 (aconst_null)) 
                                      (178 (astore_2)) 
                                      (179 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (184 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (189 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (194 (areturn)) ;;at TAG_1
                                      (endofcode 195))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$base_str-class-table*
  (make-static-class-decls 
   *clojure.pprint$base_str*))

(defconst *package-name-map* 
  ("clojure.pprint$base_str" . "clojure"))

