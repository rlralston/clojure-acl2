; data$diff-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:48 CDT 2014.
;

(defconst *clojure.data$diff*
 (make-class-def
      '(class "clojure.data$diff"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "=")
                        (STRING  "clojure.data")
                        (STRING  "equality-partition")
                        (STRING  "diff-similar")
                        (STRING  "atom-diff"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "__cached_class__0" (class "java.lang.Class") (accessflags  *class*  *private* ) -1)
                        (field "__cached_proto_fn__0" (class "clojure.lang.AFunction") (accessflags  *class*  *private* ) -1)
                        (field "__cached_proto_impl__0" (class "clojure.lang.IFn") (accessflags  *class*  *private* ) -1)
                        (field "__cached_class__1" (class "java.lang.Class") (accessflags  *class*  *private* ) -1)
                        (field "__cached_proto_fn__1" (class "clojure.lang.AFunction") (accessflags  *class*  *private* ) -1)
                        (field "__cached_proto_impl__1" (class "clojure.lang.IFn") (accessflags  *class*  *private* ) -1)
                        (field "__cached_class__2" (class "java.lang.Class") (accessflags  *class*  *private* ) -1)
                        (field "__cached_proto_fn__2" (class "clojure.lang.AFunction") (accessflags  *class*  *private* ) -1)
                        (field "__cached_proto_impl__2" (class "clojure.lang.IFn") (accessflags  *class*  *private* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 53)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "="
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.data$diff" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.data"
                                      (15 (ldc 3))        ;;STRING:: "equality-partition"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.data$diff" (class "clojure.lang.Var"))))
                                      (26 (ldc 2))        ;;STRING:: "clojure.data"
                                      (28 (ldc 4))        ;;STRING:: "diff-similar"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.data$diff" (class "clojure.lang.Var"))))
                                      (39 (ldc 2))        ;;STRING:: "clojure.data"
                                      (41 (ldc 5))        ;;STRING:: "atom-diff"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.data$diff" (class "clojure.lang.Var"))))
                                      (52 (return))
                                      (endofcode 53))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 216)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aload_2)) 
                                      (2 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (5 (ifeq 33)) ;;to TAG_0
                                      (8 (iconst_3)) 
                                      (9 (anewarray (class "java.lang.Object"))) 
                                      (12 (dup)) 
                                      (13 (iconst_0)) 
                                      (14 (aconst_null)) 
                                      (15 (aastore)) 
                                      (16 (dup)) 
                                      (17 (iconst_1)) 
                                      (18 (aconst_null)) 
                                      (19 (aastore)) 
                                      (20 (dup)) 
                                      (21 (iconst_2)) 
                                      (22 (aload_1)) 
                                      (23 (aconst_null)) 
                                      (24 (astore_1)) 
                                      (25 (aastore)) 
                                      (26 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (29 (goto 215))  ;;to TAG_1
                                      (32 (pop)) 
                                      (33 (aload_1)) ;;at TAG_0
                                      (34 (dup)) 
                                      (35 (invokestatic (methodCP "classOf" "clojure.lang.Util" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (38 (aload_0)) 
                                      (39 (getfield (fieldCP "__cached_class__0" "clojure.data$diff" (class "java.lang.Class")))) 
                                      (42 (if_acmpeq 61)) ;;to TAG_2
                                      (45 (dup)) 
                                      (46 (instanceof (class "clojure.data.EqualityPartition"))) 
                                      (49 (ifne 76)) ;;to TAG_3
                                      (52 (dup)) 
                                      (53 (invokestatic (methodCP "classOf" "clojure.lang.Util" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (56 (aload_0)) 
                                      (57 (swap)) 
                                      (58 (putfield (fieldCP "__cached_class__0" "clojure.data$diff" (class "java.lang.Class")))) 
                                      (61 (getstatic (fieldCP "const__1" "clojure.data$diff" (class "clojure.lang.Var")))) ;;at TAG_2
                                      (64 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (67 (swap)) 
                                      (68 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (73 (goto 81)) ;;to TAG_4
                                      (76 (invokeinterface (methodCP "equality_partition" "clojure.data.EqualityPartition" () (class "java.lang.Object")) 1)) ;;at TAG_3
                                      (81 (aload_2)) ;;at TAG_4
                                      (82 (dup)) 
                                      (83 (invokestatic (methodCP "classOf" "clojure.lang.Util" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (86 (aload_0)) 
                                      (87 (getfield (fieldCP "__cached_class__1" "clojure.data$diff" (class "java.lang.Class")))) 
                                      (90 (if_acmpeq 109)) ;;to TAG_5
                                      (93 (dup)) 
                                      (94 (instanceof (class "clojure.data.EqualityPartition"))) 
                                      (97 (ifne 124)) ;;to TAG_6
                                      (100 (dup)) 
                                      (101 (invokestatic (methodCP "classOf" "clojure.lang.Util" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (104 (aload_0)) 
                                      (105 (swap)) 
                                      (106 (putfield (fieldCP "__cached_class__1" "clojure.data$diff" (class "java.lang.Class")))) 
                                      (109 (getstatic (fieldCP "const__1" "clojure.data$diff" (class "clojure.lang.Var")))) ;;at TAG_5
                                      (112 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (115 (swap)) 
                                      (116 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (121 (goto 129)) ;;to TAG_7
                                      (124 (invokeinterface (methodCP "equality_partition" "clojure.data.EqualityPartition" () (class "java.lang.Object")) 1)) ;;at TAG_6
                                      (129 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) ;;at TAG_7
                                      (132 (ifeq 195)) ;;to TAG_8
                                      (135 (aload_1)) 
                                      (136 (aconst_null)) 
                                      (137 (astore_1)) 
                                      (138 (dup)) 
                                      (139 (invokestatic (methodCP "classOf" "clojure.lang.Util" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (142 (aload_0)) 
                                      (143 (getfield (fieldCP "__cached_class__2" "clojure.data$diff" (class "java.lang.Class")))) 
                                      (146 (if_acmpeq 165)) ;;to TAG_9
                                      (149 (dup)) 
                                      (150 (instanceof (class "clojure.data.Diff"))) 
                                      (153 (ifne 183)) ;;to TAG_10
                                      (156 (dup)) 
                                      (157 (invokestatic (methodCP "classOf" "clojure.lang.Util" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (160 (aload_0)) 
                                      (161 (swap)) 
                                      (162 (putfield (fieldCP "__cached_class__2" "clojure.data$diff" (class "java.lang.Class")))) 
                                      (165 (getstatic (fieldCP "const__2" "clojure.data$diff" (class "clojure.lang.Var")))) ;;at TAG_9
                                      (168 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (171 (swap)) 
                                      (172 (aload_2)) 
                                      (173 (aconst_null)) 
                                      (174 (astore_2)) 
                                      (175 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (180 (goto 191)) ;;to TAG_11
                                      (183 (aload_2)) ;;at TAG_10
                                      (184 (aconst_null)) 
                                      (185 (astore_2)) 
                                      (186 (invokeinterface (methodCP "diff_similar" "clojure.data.Diff" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (191 (goto 215))  ;;to TAG_1;;at TAG_11
                                      (194 (pop)) 
                                      (195 (getstatic (fieldCP "const__3" "clojure.data$diff" (class "clojure.lang.Var")))) ;;at TAG_8
                                      (198 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (201 (checkcast (class "clojure.lang.IFn"))) 
                                      (204 (aload_1)) 
                                      (205 (aconst_null)) 
                                      (206 (astore_1)) 
                                      (207 (aload_2)) 
                                      (208 (aconst_null)) 
                                      (209 (astore_2)) 
                                      (210 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (215 (areturn)) ;;at TAG_1
                                      (endofcode 216))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *data$diff-class-table*
  (make-static-class-decls 
   *clojure.data$diff*))

(defconst *package-name-map* 
  ("clojure.data$diff" . "clojure"))

