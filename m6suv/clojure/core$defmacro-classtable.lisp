; core$defmacro-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:41 CDT 2014.
;

(defconst *clojure.core$defmacro*
 (make-class-def
      '(class "clojure.core$defmacro"
            "clojure.lang.RestFn"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "vector?")
                        (STRING  "first")
                        (STRING  "list")
                        (STRING  "seq")
                        (STRING  "do")
                        (STRING  "cons")
                        (STRING  "defn")
                        (STRING  ".")
                        (STRING  "var")
                        (STRING  "setMacro")
                        (STRING  "line")
                        (STRING  "column"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 0) (code_length . 202)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "vector?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$defmacro" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "first"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$defmacro" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "list"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$defmacro" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "seq"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.core$defmacro" (class "clojure.lang.Var"))))
                                      (52 (aconst_null))
                                      (53 (ldc 5))        ;;STRING:: "do"
                                      (55 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (58 (checkcast (class "clojure.lang.AFn")))
                                      (61 (putstatic (fieldCP "const__4" "clojure.core$defmacro" (class "clojure.lang.AFn"))))
                                      (64 (ldc 0))        ;;STRING:: "clojure.core"
                                      (66 (ldc 6))        ;;STRING:: "cons"
                                      (68 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (71 (checkcast (class "clojure.lang.Var")))
                                      (74 (putstatic (fieldCP "const__5" "clojure.core$defmacro" (class "clojure.lang.Var"))))
                                      (77 (ldc 0))        ;;STRING:: "clojure.core"
                                      (79 (ldc 7))        ;;STRING:: "defn"
                                      (81 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (84 (checkcast (class "clojure.lang.AFn")))
                                      (87 (putstatic (fieldCP "const__6" "clojure.core$defmacro" (class "clojure.lang.AFn"))))
                                      (90 (aconst_null))
                                      (91 (ldc 8))        ;;STRING:: "."
                                      (93 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (96 (checkcast (class "clojure.lang.AFn")))
                                      (99 (putstatic (fieldCP "const__7" "clojure.core$defmacro" (class "clojure.lang.AFn"))))
                                      (102 (aconst_null))
                                      (103 (ldc 9))       ;;STRING:: "var"
                                      (105 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (108 (checkcast (class "clojure.lang.AFn")))
                                      (111 (putstatic (fieldCP "const__8" "clojure.core$defmacro" (class "clojure.lang.AFn"))))
                                      (114 (iconst_1))
                                      (115 (anewarray (class "java.lang.Object")))
                                      (118 (dup))
                                      (119 (iconst_0))
                                      (120 (aconst_null))
                                      (121 (ldc 10))      ;;STRING:: "setMacro"
                                      (123 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (126 (aastore))
                                      (127 (invokestatic
					(methodCP "asList" "java.util.Arrays" ((array (class "java.lang.Object"))) (class "java.util.List"))))
                                      (130 (invokestatic
					(methodCP "create" "clojure.lang.PersistentList" ((class "java.util.List")) (class "clojure.lang.IPersistentList"))))
                                      (133 (checkcast (class "clojure.lang.IObj")))
                                      (136 (iconst_4))
                                      (137 (anewarray (class "java.lang.Object")))
                                      (140 (dup))
                                      (141 (iconst_0))
                                      (142 (aconst_null))
                                      (143 (ldc 11))      ;;STRING:: "line"
                                      (145 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (148 (aastore))
                                      (149 (dup))
                                      (150 (iconst_1))
                                      (151 (sipush 465))
                                      (154 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (157 (aastore))
                                      (158 (dup))
                                      (159 (iconst_2))
                                      (160 (aconst_null))
                                      (161 (ldc 12))      ;;STRING:: "column"
                                      (163 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (166 (aastore))
                                      (167 (dup))
                                      (168 (iconst_3))
                                      (169 (bipush 49))
                                      (171 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (174 (aastore))
                                      (175 (invokestatic
					(methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (178 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (181 (invokeinterface
					(methodCP "withMeta" "clojure.lang.IObj" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")) 2))
                                      (186 (putstatic (fieldCP "const__9" "clojure.core$defmacro" (class "java.lang.Object"))))
                                      (189 (aconst_null))
                                      (190 (ldc 9))       ;;STRING:: "var"
                                      (192 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (195 (checkcast (class "clojure.lang.AFn")))
                                      (198 (putstatic (fieldCP "const__10" "clojure.core$defmacro" (class "clojure.lang.AFn"))))
                                      (201 (return))
                                      (endofcode 202))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.RestFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doInvoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 12) (code_length . 297)
                                   (parsedcode
                                      (0 (new (class "clojure.core$defmacro$fn__3880"))) 
                                      (3 (dup)) 
                                      (4 (aload_3)) 
                                      (5 (aload 4)) 
                                      (7 (invokespecial (methodCP "<init>" "clojure.core$defmacro$fn__3880" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (10 (checkcast (class "clojure.lang.IFn"))) 
                                      (13 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (18 (astore 5)) 
                                      (20 (new (class "clojure.core$defmacro$fn__3882"))) 
                                      (23 (dup)) 
                                      (24 (aload 4)) 
                                      (26 (aconst_null)) 
                                      (27 (astore 4)) 
                                      (29 (invokespecial (methodCP "<init>" "clojure.core$defmacro$fn__3882" ((class "java.lang.Object")) void))) 
                                      (32 (checkcast (class "clojure.lang.IFn"))) 
                                      (35 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (40 (astore 6)) 
                                      (42 (getstatic (fieldCP "const__0" "clojure.core$defmacro" (class "clojure.lang.Var")))) 
                                      (45 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (48 (checkcast (class "clojure.lang.IFn"))) 
                                      (51 (getstatic (fieldCP "const__1" "clojure.core$defmacro" (class "clojure.lang.Var")))) 
                                      (54 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (57 (checkcast (class "clojure.lang.IFn"))) 
                                      (60 (aload 6)) 
                                      (62 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (67 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (72 (dup)) 
                                      (73 (ifnull 104)) ;;to TAG_0
                                      (76 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (79 (if_acmpeq 105)) ;;to TAG_1
                                      (82 (getstatic (fieldCP "const__2" "clojure.core$defmacro" (class "clojure.lang.Var")))) 
                                      (85 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (88 (checkcast (class "clojure.lang.IFn"))) 
                                      (91 (aload 6)) 
                                      (93 (aconst_null)) 
                                      (94 (astore 6)) 
                                      (96 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (101 (goto 110))  ;;to TAG_2
                                      (104 (pop)) ;;at TAG_0
                                      (105 (aload 6)) ;;at TAG_1
                                      (107 (aconst_null)) 
                                      (108 (astore 6)) 
                                      (110 (astore 7)) ;;at TAG_2
                                      (112 (new (class "clojure.core$defmacro$add_implicit_args__3884"))) 
                                      (115 (dup)) 
                                      (116 (invokespecial (methodCP "<init>" "clojure.core$defmacro$add_implicit_args__3884" () void))) 
                                      (119 (astore 8)) 
                                      (121 (new (class "clojure.core$defmacro$add_args__3886"))) 
                                      (124 (dup)) 
                                      (125 (aload 8)) 
                                      (127 (aconst_null)) 
                                      (128 (astore 8)) 
                                      (130 (invokespecial (methodCP "<init>" "clojure.core$defmacro$add_args__3886" ((class "java.lang.Object")) void))) 
                                      (133 (astore 9)) 
                                      (135 (getstatic (fieldCP "const__3" "clojure.core$defmacro" (class "clojure.lang.Var")))) 
                                      (138 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (141 (checkcast (class "clojure.lang.IFn"))) 
                                      (144 (aload 9)) 
                                      (146 (aconst_null)) 
                                      (147 (astore 9)) 
                                      (149 (checkcast (class "clojure.lang.IFn"))) 
                                      (152 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (155 (aload 7)) 
                                      (157 (aconst_null)) 
                                      (158 (astore 7)) 
                                      (160 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (165 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (170 (astore 10)) 
                                      (172 (new (class "clojure.core$defmacro$fn__3888"))) 
                                      (175 (dup)) 
                                      (176 (aload 10)) 
                                      (178 (aconst_null)) 
                                      (179 (astore 10)) 
                                      (181 (aload 5)) 
                                      (183 (aconst_null)) 
                                      (184 (astore 5)) 
                                      (186 (invokespecial (methodCP "<init>" "clojure.core$defmacro$fn__3888" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (189 (checkcast (class "clojure.lang.IFn"))) 
                                      (192 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (197 (astore 11)) 
                                      (199 (getstatic (fieldCP "const__2" "clojure.core$defmacro" (class "clojure.lang.Var")))) 
                                      (202 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (205 (checkcast (class "clojure.lang.IFn"))) 
                                      (208 (getstatic (fieldCP "const__4" "clojure.core$defmacro" (class "clojure.lang.AFn")))) 
                                      (211 (getstatic (fieldCP "const__5" "clojure.core$defmacro" (class "clojure.lang.Var")))) 
                                      (214 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (217 (checkcast (class "clojure.lang.IFn"))) 
                                      (220 (getstatic (fieldCP "const__6" "clojure.core$defmacro" (class "clojure.lang.AFn")))) 
                                      (223 (aload 11)) 
                                      (225 (aconst_null)) 
                                      (226 (astore 11)) 
                                      (228 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (233 (getstatic (fieldCP "const__2" "clojure.core$defmacro" (class "clojure.lang.Var")))) 
                                      (236 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (239 (checkcast (class "clojure.lang.IFn"))) 
                                      (242 (getstatic (fieldCP "const__7" "clojure.core$defmacro" (class "clojure.lang.AFn")))) 
                                      (245 (getstatic (fieldCP "const__2" "clojure.core$defmacro" (class "clojure.lang.Var")))) 
                                      (248 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (251 (checkcast (class "clojure.lang.IFn"))) 
                                      (254 (getstatic (fieldCP "const__8" "clojure.core$defmacro" (class "clojure.lang.AFn")))) 
                                      (257 (aload_3)) 
                                      (258 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (263 (getstatic (fieldCP "const__9" "clojure.core$defmacro" (class "java.lang.Object")))) 
                                      (266 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (271 (getstatic (fieldCP "const__2" "clojure.core$defmacro" (class "clojure.lang.Var")))) 
                                      (274 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (277 (checkcast (class "clojure.lang.IFn"))) 
                                      (280 (getstatic (fieldCP "const__10" "clojure.core$defmacro" (class "clojure.lang.AFn")))) 
                                      (283 (aload_3)) 
                                      (284 (aconst_null)) 
                                      (285 (astore_3)) 
                                      (286 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (291 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (296 (areturn)) 
                                      (endofcode 297))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getRequiredArity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_3))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$defmacro-class-table*
  (make-static-class-decls 
   *clojure.core$defmacro*))

(defconst *package-name-map* 
  ("clojure.core$defmacro" . "clojure"))

