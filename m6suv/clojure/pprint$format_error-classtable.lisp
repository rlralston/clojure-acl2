; pprint$format_error-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:56 CDT 2014.
;

(defconst *clojure.pprint$format_error*
 (make-class-def
      '(class "clojure.pprint$format_error"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "str")
                        (STRING  "clojure.pprint")
                        (STRING  "*format-str*")
                        (STRING  "apply")
                        (STRING  "repeat")
                        (STRING  "^"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 69)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "str"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$format_error" (class "clojure.lang.Var"))))
                                      (13 (bipush 10))
                                      (15 (invokestatic
					(methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character"))))
                                      (18 (putstatic (fieldCP "const__1" "clojure.pprint$format_error" (class "java.lang.Object"))))
                                      (21 (ldc 2))        ;;STRING:: "clojure.pprint"
                                      (23 (ldc 3))        ;;STRING:: "*format-str*"
                                      (25 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (28 (checkcast (class "clojure.lang.Var")))
                                      (31 (putstatic (fieldCP "const__2" "clojure.pprint$format_error" (class "clojure.lang.Var"))))
                                      (34 (ldc 0))        ;;STRING:: "clojure.core"
                                      (36 (ldc 4))        ;;STRING:: "apply"
                                      (38 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (41 (checkcast (class "clojure.lang.Var")))
                                      (44 (putstatic (fieldCP "const__3" "clojure.pprint$format_error" (class "clojure.lang.Var"))))
                                      (47 (ldc 0))        ;;STRING:: "clojure.core"
                                      (49 (ldc 5))        ;;STRING:: "repeat"
                                      (51 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (54 (checkcast (class "clojure.lang.Var")))
                                      (57 (putstatic (fieldCP "const__4" "clojure.pprint$format_error" (class "clojure.lang.Var"))))
                                      (60 (bipush 32))
                                      (62 (invokestatic
					(methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character"))))
                                      (65 (putstatic (fieldCP "const__5" "clojure.pprint$format_error" (class "java.lang.Object"))))
                                      (68 (return))
                                      (endofcode 69))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 10) (max_locals . 4) (code_length . 93)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$format_error" (class "clojure.lang.Var"))))
                                      (3 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (6 (checkcast (class "clojure.lang.IFn")))
                                      (9 (aload_1))
                                      (10 (aconst_null))
                                      (11 (astore_1))
                                      (12 (getstatic (fieldCP "const__1" "clojure.pprint$format_error" (class "java.lang.Object"))))
                                      (15 (getstatic (fieldCP "const__2" "clojure.pprint$format_error" (class "clojure.lang.Var"))))
                                      (18 (invokevirtual
					(methodCP "get" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (21 (getstatic (fieldCP "const__1" "clojure.pprint$format_error" (class "java.lang.Object"))))
                                      (24 (getstatic (fieldCP "const__3" "clojure.pprint$format_error" (class "clojure.lang.Var"))))
                                      (27 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (30 (checkcast (class "clojure.lang.IFn")))
                                      (33 (getstatic (fieldCP "const__0" "clojure.pprint$format_error" (class "clojure.lang.Var"))))
                                      (36 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (39 (getstatic (fieldCP "const__4" "clojure.pprint$format_error" (class "clojure.lang.Var"))))
                                      (42 (invokevirtual
					(methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object"))))
                                      (45 (checkcast (class "clojure.lang.IFn")))
                                      (48 (aload_2))
                                      (49 (aconst_null))
                                      (50 (astore_2))
                                      (51 (getstatic (fieldCP "const__5" "clojure.pprint$format_error" (class "java.lang.Object"))))
                                      (54 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3))
                                      (59 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3))
                                      (64 (ldc 6))        ;;STRING:: "^"
                                      (66 (getstatic (fieldCP "const__1" "clojure.pprint$format_error" (class "java.lang.Object"))))
                                      (69 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 8))
                                      (74 (astore_3))
                                      (75 (new (class "java.lang.RuntimeException")))
                                      (78 (dup))
                                      (79 (aload_3))
                                      (80 (aconst_null))
                                      (81 (astore_3))
                                      (82 (checkcast (class "java.lang.String")))
                                      (85 (invokespecial
					(methodCP "<init>" "java.lang.RuntimeException" ((class "java.lang.String")) void)))
                                      (88 (checkcast (class "java.lang.Throwable")))
                                      (91 (athrow))
                                      (92 (areturn))
                                      (endofcode 93))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$format_error-class-table*
  (make-static-class-decls 
   *clojure.pprint$format_error*))

(defconst *package-name-map* 
  ("clojure.pprint$format_error" . "clojure"))

