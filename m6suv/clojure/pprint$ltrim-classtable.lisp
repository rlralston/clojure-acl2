; pprint$ltrim-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:56 CDT 2014.
;

(defconst *clojure.pprint$ltrim*
 (make-class-def
      '(class "clojure.pprint$ltrim"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "count")
                        (STRING  "pos?")
                        (STRING  "=")
                        (STRING  "nth")
                        (STRING  "not")
                        (STRING  "subs")
                        (STRING  "inc"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 99)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "count"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$ltrim" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "pos?"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$ltrim" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "="
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.pprint$ltrim" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "nth"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.pprint$ltrim" (class "clojure.lang.Var"))))
                                      (52 (lconst_0))
                                      (53 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (56 (putstatic (fieldCP "const__4" "clojure.pprint$ltrim" (class "java.lang.Object"))))
                                      (59 (ldc 0))        ;;STRING:: "clojure.core"
                                      (61 (ldc 5))        ;;STRING:: "not"
                                      (63 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (66 (checkcast (class "clojure.lang.Var")))
                                      (69 (putstatic (fieldCP "const__5" "clojure.pprint$ltrim" (class "clojure.lang.Var"))))
                                      (72 (ldc 0))        ;;STRING:: "clojure.core"
                                      (74 (ldc 6))        ;;STRING:: "subs"
                                      (76 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (79 (checkcast (class "clojure.lang.Var")))
                                      (82 (putstatic (fieldCP "const__6" "clojure.pprint$ltrim" (class "clojure.lang.Var"))))
                                      (85 (ldc 0))        ;;STRING:: "clojure.core"
                                      (87 (ldc 7))        ;;STRING:: "inc"
                                      (89 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (92 (checkcast (class "clojure.lang.Var")))
                                      (95 (putstatic (fieldCP "const__7" "clojure.pprint$ltrim" (class "clojure.lang.Var"))))
                                      (98 (return))
                                      (endofcode 99))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 8) (code_length . 164)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (4 (istore_3)) 
                                      (5 (iload_3)) 
                                      (6 (i2l)) 
                                      (7 (invokestatic (methodCP "isPos" "clojure.lang.Numbers" (long) boolean))) 
                                      (10 (istore 4)) 
                                      (12 (iload 4)) 
                                      (14 (ifeq 33)) ;;to TAG_0
                                      (17 (aload_1)) 
                                      (18 (lconst_0)) 
                                      (19 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (22 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (25 (aload_2)) 
                                      (26 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (29 (goto 35))  ;;to TAG_1
                                      (32 (pop)) 
                                      (33 (iload 4)) ;;at TAG_0
                                      (35 (ifeq 160)) ;;to TAG_2;;at TAG_1
                                      (38 (lconst_0)) 
                                      (39 (lstore 5)) 
                                      (41 (lload 5)) ;;at TAG_12
                                      (43 (iload_3)) 
                                      (44 (i2l)) 
                                      (45 (invokestatic (methodCP "equiv" "clojure.lang.Util" (long long) boolean))) 
                                      (48 (istore 7)) 
                                      (50 (iload 7)) 
                                      (52 (ifeq 73)) ;;to TAG_3
                                      (55 (iload 7)) 
                                      (57 (ifeq 66)) ;;to TAG_4
                                      (60 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (63 (goto 69)) ;;to TAG_5
                                      (66 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_4
                                      (69 (goto 112)) ;;to TAG_6;;at TAG_5
                                      (72 (pop)) 
                                      (73 (getstatic (fieldCP "const__5" "clojure.pprint$ltrim" (class "clojure.lang.Var")))) ;;at TAG_3
                                      (76 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (79 (checkcast (class "clojure.lang.IFn"))) 
                                      (82 (aload_1)) 
                                      (83 (lload 5)) 
                                      (85 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (88 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (91 (aload_2)) 
                                      (92 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (95 (ifeq 104)) ;;to TAG_7
                                      (98 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (101 (goto 107)) ;;to TAG_8
                                      (104 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_7
                                      (107 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_8
                                      (112 (dup)) ;;at TAG_6
                                      (113 (ifnull 145)) ;;to TAG_9
                                      (116 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (119 (if_acmpeq 146)) ;;to TAG_10
                                      (122 (getstatic (fieldCP "const__6" "clojure.pprint$ltrim" (class "clojure.lang.Var")))) 
                                      (125 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (128 (checkcast (class "clojure.lang.IFn"))) 
                                      (131 (aload_1)) 
                                      (132 (lload 5)) 
                                      (134 (invokestatic (methodCP "num" "clojure.lang.Numbers" (long) (class "java.lang.Number")))) 
                                      (137 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (142 (goto 156)) ;;to TAG_11
                                      (145 (pop)) ;;at TAG_9
                                      (146 (lload 5)) ;;at TAG_10
                                      (148 (invokestatic (methodCP "inc" "clojure.lang.Numbers" (long) long))) 
                                      (151 (lstore 5)) 
                                      (153 (goto 41)) ;;to TAG_12
                                      (156 (goto 163)) ;;to TAG_13;;at TAG_11
                                      (159 (pop)) 
                                      (160 (aload_1)) ;;at TAG_2
                                      (161 (aconst_null)) 
                                      (162 (astore_1)) 
                                      (163 (areturn)) ;;at TAG_13
                                      (endofcode 164))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$ltrim-class-table*
  (make-static-class-decls 
   *clojure.pprint$ltrim*))

(defconst *package-name-map* 
  ("clojure.pprint$ltrim" . "clojure"))

