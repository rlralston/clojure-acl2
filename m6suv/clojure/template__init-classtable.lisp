; template__init-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:58 CDT 2014.
;

(defconst *clojure.template__init*
 (make-class-def
      '(class "clojure.template__init"
            "java.lang.Object"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "in-ns")
                        (STRING  "clojure.template")
                        (STRING  "author")
                        (STRING  "Stuart Sierra")
                        (STRING  "doc")
                        (STRING  "Macros that expand to repeated copies of a template expression.")
                        (STRING  "apply-template")
                        (STRING  "file")
                        (STRING  "column")
                        (STRING  "line")
                        (STRING  "arglists")
                        (STRING  "argv")
                        (STRING  "expr")
                        (STRING  "values")
                        (STRING  "For use in macros.  argv is an argument list, as in defn.  expr is\n  a quoted expression using the symbols in argv.  values is a sequence\n  of values to be used for the arguments.\n\n  apply-template will recursively replace argument symbols in expr\n  with their corresponding values, returning a modified expr.\n\n  Example: (apply-template \n[x] \n(+ x x) \n[2])\n           ;=> (+ 2 2)")
                        (STRING  "clojure/template.clj")
                        (STRING  "do-template")
                        (STRING  "&")
                        (STRING  "Repeatedly copies expr (in a do block) for each group of arguments\n  in values.  values are automatically partitioned by the number of\n  arguments in argv, an argument vector as in defn.\n\n  Example: (macroexpand \n(do-template [x y] (+ y x) 2 4 3 5))\n           ;=> (do (+ 4 2) (+ 5 3))")
                        (STRING  "clojure.template__init"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__11" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__12" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__13" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__14" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__15" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__16" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "load"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 8) (max_locals . 0) (code_length . 129)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.template__init" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (getstatic (fieldCP "const__1" "clojure.template__init" (class "clojure.lang.AFn")))) 
                                      (12 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (17 (new (class "clojure.template$loading__4910__auto__"))) 
                                      (20 (dup)) 
                                      (21 (invokespecial (methodCP "<init>" "clojure.template$loading__4910__auto__" () void))) 
                                      (24 (checkcast (class "clojure.lang.IFn"))) 
                                      (27 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (32 (getstatic (fieldCP "const__1" "clojure.template__init" (class "clojure.lang.AFn")))) 
                                      (35 (checkcast (class "clojure.lang.Symbol"))) 
                                      (38 (getstatic (fieldCP "const__2" "clojure.template__init" (class "clojure.lang.AFn")))) 
                                      (41 (invokevirtual (methodCP "equals" "clojure.lang.Symbol" ((class "java.lang.Object")) boolean))) 
                                      (44 (ifeq 52))  ;;to TAG_0
                                      (47 (aconst_null)) 
                                      (48 (goto 67)) ;;to TAG_1
                                      (51 (pop)) 
                                      (52 (new (class "clojure.template$fn__7030"))) ;;at TAG_0
                                      (55 (dup)) 
                                      (56 (invokespecial (methodCP "<init>" "clojure.template$fn__7030" () void))) 
                                      (59 (checkcast (class "java.util.concurrent.Callable"))) 
                                      (62 (invokestatic (methodCP "runInTransaction" "clojure.lang.LockingTransaction" ((class "java.util.concurrent.Callable")) (class "java.lang.Object")))) 
                                      (65 (pop)) 
                                      (66 (aconst_null)) 
                                      (67 (getstatic (fieldCP "const__3" "clojure.template__init" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (70 (dup)) 
                                      (71 (getstatic (fieldCP "const__12" "clojure.template__init" (class "clojure.lang.AFn")))) 
                                      (74 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (77 (invokevirtual (methodCP "setMeta" "clojure.lang.Var" ((class "clojure.lang.IPersistentMap")) void))) 
                                      (80 (dup)) 
                                      (81 (new (class "clojure.template$apply_template"))) 
                                      (84 (dup)) 
                                      (85 (invokespecial (methodCP "<init>" "clojure.template$apply_template" () void))) 
                                      (88 (invokevirtual (methodCP "bindRoot" "clojure.lang.Var" ((class "java.lang.Object")) void))) 
                                      (91 (getstatic (fieldCP "const__13" "clojure.template__init" (class "clojure.lang.Var")))) 
                                      (94 (dup)) 
                                      (95 (getstatic (fieldCP "const__16" "clojure.template__init" (class "clojure.lang.AFn")))) 
                                      (98 (checkcast (class "clojure.lang.IPersistentMap"))) 
                                      (101 (invokevirtual (methodCP "setMeta" "clojure.lang.Var" ((class "clojure.lang.IPersistentMap")) void))) 
                                      (104 (dup)) 
                                      (105 (new (class "clojure.template$do_template"))) 
                                      (108 (dup)) 
                                      (109 (invokespecial (methodCP "<init>" "clojure.template$do_template" () void))) 
                                      (112 (invokevirtual (methodCP "bindRoot" "clojure.lang.Var" ((class "java.lang.Object")) void))) 
                                      (115 (getstatic (fieldCP "const__13" "clojure.template__init" (class "clojure.lang.Var")))) 
                                      (118 (checkcast (class "clojure.lang.Var"))) 
                                      (121 (invokevirtual (methodCP "setMacro" "clojure.lang.Var" () void))) 
                                      (124 (aconst_null)) 
                                      (125 (getstatic (fieldCP "const__13" "clojure.template__init" (class "clojure.lang.Var")))) 
                                      (128 (return)) 
                                      (endofcode 129))
                                   (Exceptions )
                                   (StackMap )))
                        (method "__init0"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 11) (max_locals . 0) (code_length . 587)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "in-ns"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.template__init" (class "clojure.lang.Var"))))
                                      (13 (aconst_null))
                                      (14 (ldc 2))        ;;STRING:: "clojure.template"
                                      (16 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (19 (checkcast (class "clojure.lang.IObj")))
                                      (22 (iconst_4))
                                      (23 (anewarray (class "java.lang.Object")))
                                      (26 (dup))
                                      (27 (iconst_0))
                                      (28 (aconst_null))
                                      (29 (ldc 3))        ;;STRING:: "author"
                                      (31 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (34 (aastore))
                                      (35 (dup))
                                      (36 (iconst_1))
                                      (37 (ldc 4))        ;;STRING:: "Stuart Sierra"
                                      (39 (aastore))
                                      (40 (dup))
                                      (41 (iconst_2))
                                      (42 (aconst_null))
                                      (43 (ldc 5))        ;;STRING:: "doc"
                                      (45 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (48 (aastore))
                                      (49 (dup))
                                      (50 (iconst_3))
                                      (51 (ldc 6))        ;;STRING:: "Macros that expand to repeated copies of a template expression."
                                      (53 (aastore))
                                      (54 (invokestatic
					(methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (57 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (60 (invokeinterface
					(methodCP "withMeta" "clojure.lang.IObj" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")) 2))
                                      (65 (checkcast (class "clojure.lang.AFn")))
                                      (68 (putstatic (fieldCP "const__1" "clojure.template__init" (class "clojure.lang.AFn"))))
                                      (71 (aconst_null))
                                      (72 (ldc 0))        ;;STRING:: "clojure.core"
                                      (74 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (77 (checkcast (class "clojure.lang.AFn")))
                                      (80 (putstatic (fieldCP "const__2" "clojure.template__init" (class "clojure.lang.AFn"))))
                                      (83 (ldc 2))        ;;STRING:: "clojure.template"
                                      (85 (ldc 7))        ;;STRING:: "apply-template"
                                      (87 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (90 (checkcast (class "clojure.lang.Var")))
                                      (93 (putstatic (fieldCP "const__3" "clojure.template__init" (class "clojure.lang.Var"))))
                                      (96 (aconst_null))
                                      (97 (ldc 8))        ;;STRING:: "file"
                                      (99 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (102 (checkcast (class "clojure.lang.Keyword")))
                                      (105 (putstatic (fieldCP "const__4" "clojure.template__init" (class "clojure.lang.Keyword"))))
                                      (108 (aconst_null))
                                      (109 (ldc 9))       ;;STRING:: "column"
                                      (111 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (114 (checkcast (class "clojure.lang.Keyword")))
                                      (117 (putstatic (fieldCP "const__5" "clojure.template__init" (class "clojure.lang.Keyword"))))
                                      (120 (iconst_1))
                                      (121 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (124 (putstatic (fieldCP "const__6" "clojure.template__init" (class "java.lang.Object"))))
                                      (127 (aconst_null))
                                      (128 (ldc 10))      ;;STRING:: "line"
                                      (130 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (133 (checkcast (class "clojure.lang.Keyword")))
                                      (136 (putstatic (fieldCP "const__7" "clojure.template__init" (class "clojure.lang.Keyword"))))
                                      (139 (bipush 30))
                                      (141 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (144 (putstatic (fieldCP "const__8" "clojure.template__init" (class "java.lang.Object"))))
                                      (147 (aconst_null))
                                      (148 (ldc 11))      ;;STRING:: "arglists"
                                      (150 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (153 (checkcast (class "clojure.lang.Keyword")))
                                      (156 (putstatic (fieldCP "const__9" "clojure.template__init" (class "clojure.lang.Keyword"))))
                                      (159 (iconst_1))
                                      (160 (anewarray (class "java.lang.Object")))
                                      (163 (dup))
                                      (164 (iconst_0))
                                      (165 (iconst_3))
                                      (166 (anewarray (class "java.lang.Object")))
                                      (169 (dup))
                                      (170 (iconst_0))
                                      (171 (aconst_null))
                                      (172 (ldc 12))      ;;STRING:: "argv"
                                      (174 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (177 (aastore))
                                      (178 (dup))
                                      (179 (iconst_1))
                                      (180 (aconst_null))
                                      (181 (ldc 13))      ;;STRING:: "expr"
                                      (183 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (186 (aastore))
                                      (187 (dup))
                                      (188 (iconst_2))
                                      (189 (aconst_null))
                                      (190 (ldc 14))      ;;STRING:: "values"
                                      (192 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (195 (aastore))
                                      (196 (invokestatic
					(methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector"))))
                                      (199 (aastore))
                                      (200 (invokestatic
					(methodCP "asList" "java.util.Arrays" ((array (class "java.lang.Object"))) (class "java.util.List"))))
                                      (203 (invokestatic
					(methodCP "create" "clojure.lang.PersistentList" ((class "java.util.List")) (class "clojure.lang.IPersistentList"))))
                                      (206 (putstatic (fieldCP "const__10" "clojure.template__init" (class "java.lang.Object"))))
                                      (209 (aconst_null))
                                      (210 (ldc 5))       ;;STRING:: "doc"
                                      (212 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (215 (checkcast (class "clojure.lang.Keyword")))
                                      (218 (putstatic (fieldCP "const__11" "clojure.template__init" (class "clojure.lang.Keyword"))))
                                      (221 (bipush 10))
                                      (223 (anewarray (class "java.lang.Object")))
                                      (226 (dup))
                                      (227 (iconst_0))
                                      (228 (aconst_null))
                                      (229 (ldc 11))      ;;STRING:: "arglists"
                                      (231 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (234 (aastore))
                                      (235 (dup))
                                      (236 (iconst_1))
                                      (237 (iconst_1))
                                      (238 (anewarray (class "java.lang.Object")))
                                      (241 (dup))
                                      (242 (iconst_0))
                                      (243 (iconst_3))
                                      (244 (anewarray (class "java.lang.Object")))
                                      (247 (dup))
                                      (248 (iconst_0))
                                      (249 (aconst_null))
                                      (250 (ldc 12))      ;;STRING:: "argv"
                                      (252 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (255 (aastore))
                                      (256 (dup))
                                      (257 (iconst_1))
                                      (258 (aconst_null))
                                      (259 (ldc 13))      ;;STRING:: "expr"
                                      (261 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (264 (aastore))
                                      (265 (dup))
                                      (266 (iconst_2))
                                      (267 (aconst_null))
                                      (268 (ldc 14))      ;;STRING:: "values"
                                      (270 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (273 (aastore))
                                      (274 (invokestatic
					(methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector"))))
                                      (277 (aastore))
                                      (278 (invokestatic
					(methodCP "asList" "java.util.Arrays" ((array (class "java.lang.Object"))) (class "java.util.List"))))
                                      (281 (invokestatic
					(methodCP "create" "clojure.lang.PersistentList" ((class "java.util.List")) (class "clojure.lang.IPersistentList"))))
                                      (284 (aastore))
                                      (285 (dup))
                                      (286 (iconst_2))
                                      (287 (aconst_null))
                                      (288 (ldc 9))       ;;STRING:: "column"
                                      (290 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (293 (aastore))
                                      (294 (dup))
                                      (295 (iconst_3))
                                      (296 (iconst_1))
                                      (297 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (300 (aastore))
                                      (301 (dup))
                                      (302 (iconst_4))
                                      (303 (aconst_null))
                                      (304 (ldc 5))       ;;STRING:: "doc"
                                      (306 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (309 (aastore))
                                      (310 (dup))
                                      (311 (iconst_5))
                                      (312 (ldc 15))      ;;STRING:: "For use in macros.  argv is an argument list, as in defn.  expr is\n  a quoted expression using the symbols in argv.  values is a sequence\n  of values to be used for the arguments.\n\n  apply-template will recursively replace argument symbols in expr\n  with their corresponding values, returning a modified expr.\n\n  Example: (apply-template \n[x] \n(+ x x) \n[2])\n           ;=> (+ 2 2)"
                                      (314 (aastore))
                                      (315 (dup))
                                      (316 (bipush 6))
                                      (318 (aconst_null))
                                      (319 (ldc 10))      ;;STRING:: "line"
                                      (321 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (324 (aastore))
                                      (325 (dup))
                                      (326 (bipush 7))
                                      (328 (bipush 30))
                                      (330 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (333 (aastore))
                                      (334 (dup))
                                      (335 (bipush 8))
                                      (337 (aconst_null))
                                      (338 (ldc 8))       ;;STRING:: "file"
                                      (340 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (343 (aastore))
                                      (344 (dup))
                                      (345 (bipush 9))
                                      (347 (ldc 16))      ;;STRING:: "clojure/template.clj"
                                      (349 (aastore))
                                      (350 (invokestatic
					(methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (353 (checkcast (class "clojure.lang.AFn")))
                                      (356 (putstatic (fieldCP "const__12" "clojure.template__init" (class "clojure.lang.AFn"))))
                                      (359 (ldc 2))       ;;STRING:: "clojure.template"
                                      (361 (ldc 17))      ;;STRING:: "do-template"
                                      (363 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (366 (checkcast (class "clojure.lang.Var")))
                                      (369 (putstatic (fieldCP "const__13" "clojure.template__init" (class "clojure.lang.Var"))))
                                      (372 (bipush 45))
                                      (374 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (377 (putstatic (fieldCP "const__14" "clojure.template__init" (class "java.lang.Object"))))
                                      (380 (iconst_1))
                                      (381 (anewarray (class "java.lang.Object")))
                                      (384 (dup))
                                      (385 (iconst_0))
                                      (386 (iconst_4))
                                      (387 (anewarray (class "java.lang.Object")))
                                      (390 (dup))
                                      (391 (iconst_0))
                                      (392 (aconst_null))
                                      (393 (ldc 12))      ;;STRING:: "argv"
                                      (395 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (398 (aastore))
                                      (399 (dup))
                                      (400 (iconst_1))
                                      (401 (aconst_null))
                                      (402 (ldc 13))      ;;STRING:: "expr"
                                      (404 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (407 (aastore))
                                      (408 (dup))
                                      (409 (iconst_2))
                                      (410 (aconst_null))
                                      (411 (ldc 18))      ;;STRING:: "&"
                                      (413 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (416 (aastore))
                                      (417 (dup))
                                      (418 (iconst_3))
                                      (419 (aconst_null))
                                      (420 (ldc 14))      ;;STRING:: "values"
                                      (422 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (425 (aastore))
                                      (426 (invokestatic
					(methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector"))))
                                      (429 (aastore))
                                      (430 (invokestatic
					(methodCP "asList" "java.util.Arrays" ((array (class "java.lang.Object"))) (class "java.util.List"))))
                                      (433 (invokestatic
					(methodCP "create" "clojure.lang.PersistentList" ((class "java.util.List")) (class "clojure.lang.IPersistentList"))))
                                      (436 (putstatic (fieldCP "const__15" "clojure.template__init" (class "java.lang.Object"))))
                                      (439 (bipush 10))
                                      (441 (anewarray (class "java.lang.Object")))
                                      (444 (dup))
                                      (445 (iconst_0))
                                      (446 (aconst_null))
                                      (447 (ldc 11))      ;;STRING:: "arglists"
                                      (449 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (452 (aastore))
                                      (453 (dup))
                                      (454 (iconst_1))
                                      (455 (iconst_1))
                                      (456 (anewarray (class "java.lang.Object")))
                                      (459 (dup))
                                      (460 (iconst_0))
                                      (461 (iconst_4))
                                      (462 (anewarray (class "java.lang.Object")))
                                      (465 (dup))
                                      (466 (iconst_0))
                                      (467 (aconst_null))
                                      (468 (ldc 12))      ;;STRING:: "argv"
                                      (470 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (473 (aastore))
                                      (474 (dup))
                                      (475 (iconst_1))
                                      (476 (aconst_null))
                                      (477 (ldc 13))      ;;STRING:: "expr"
                                      (479 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (482 (aastore))
                                      (483 (dup))
                                      (484 (iconst_2))
                                      (485 (aconst_null))
                                      (486 (ldc 18))      ;;STRING:: "&"
                                      (488 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (491 (aastore))
                                      (492 (dup))
                                      (493 (iconst_3))
                                      (494 (aconst_null))
                                      (495 (ldc 14))      ;;STRING:: "values"
                                      (497 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (500 (aastore))
                                      (501 (invokestatic
					(methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector"))))
                                      (504 (aastore))
                                      (505 (invokestatic
					(methodCP "asList" "java.util.Arrays" ((array (class "java.lang.Object"))) (class "java.util.List"))))
                                      (508 (invokestatic
					(methodCP "create" "clojure.lang.PersistentList" ((class "java.util.List")) (class "clojure.lang.IPersistentList"))))
                                      (511 (aastore))
                                      (512 (dup))
                                      (513 (iconst_2))
                                      (514 (aconst_null))
                                      (515 (ldc 9))       ;;STRING:: "column"
                                      (517 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (520 (aastore))
                                      (521 (dup))
                                      (522 (iconst_3))
                                      (523 (iconst_1))
                                      (524 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (527 (aastore))
                                      (528 (dup))
                                      (529 (iconst_4))
                                      (530 (aconst_null))
                                      (531 (ldc 5))       ;;STRING:: "doc"
                                      (533 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (536 (aastore))
                                      (537 (dup))
                                      (538 (iconst_5))
                                      (539 (ldc 19))      ;;STRING:: "Repeatedly copies expr (in a do block) for each group of arguments\n  in values.  values are automatically partitioned by the number of\n  arguments in argv, an argument vector as in defn.\n\n  Example: (macroexpand \n(do-template [x y] (+ y x) 2 4 3 5))\n           ;=> (do (+ 4 2) (+ 5 3))"
                                      (541 (aastore))
                                      (542 (dup))
                                      (543 (bipush 6))
                                      (545 (aconst_null))
                                      (546 (ldc 10))      ;;STRING:: "line"
                                      (548 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (551 (aastore))
                                      (552 (dup))
                                      (553 (bipush 7))
                                      (555 (bipush 45))
                                      (557 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (560 (aastore))
                                      (561 (dup))
                                      (562 (bipush 8))
                                      (564 (aconst_null))
                                      (565 (ldc 8))       ;;STRING:: "file"
                                      (567 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (570 (aastore))
                                      (571 (dup))
                                      (572 (bipush 9))
                                      (574 (ldc 16))      ;;STRING:: "clojure/template.clj"
                                      (576 (aastore))
                                      (577 (invokestatic
					(methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (580 (checkcast (class "clojure.lang.AFn")))
                                      (583 (putstatic (fieldCP "const__16" "clojure.template__init" (class "clojure.lang.AFn"))))
                                      (586 (return))
                                      (endofcode 587))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 1) (max_locals . 0) (code_length . 28)
                                   (parsedcode
                                      (0 (invokestatic (methodCP "__init0" "clojure.template__init" () void))) 
                                      (3 (ldc 20)) ;;STRING:: "clojure.template__init"
                                      (5 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (8 (invokevirtual (methodCP "getClassLoader" "java.lang.Class" () (class "java.lang.ClassLoader")))) 
                                      (11 (invokestatic (methodCP "pushNSandLoader" "clojure.lang.Compiler" ((class "java.lang.ClassLoader")) void))) 
                                      (14 (invokestatic (methodCP "load" "clojure.template__init" () void))) ;;at TAG_1
                                      (17 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) ;;at TAG_2
                                      (20 (goto 27)) ;;to TAG_0
                                      (23 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) ;;at TAG_3
                                      (26 (athrow)) 
                                      (27 (return)) ;;at TAG_0
                                      (endofcode 28))
                                   (Exceptions 
                                     (handler 14 17  23 (class "java.lang.Throwable")))
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes))))


(defconst *template__init-class-table*
  (make-static-class-decls 
   *clojure.template__init*))

(defconst *package-name-map* 
  ("clojure.template__init" . "clojure"))

