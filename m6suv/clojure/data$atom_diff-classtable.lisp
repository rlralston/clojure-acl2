; data$atom_diff-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:48 CDT 2014.
;

(defconst *clojure.data$atom_diff*
 (make-class-def
      '(class "clojure.data$atom_diff"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "="))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 14)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "="
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.data$atom_diff" (class "clojure.lang.Var"))))
                                      (13 (return))
                                      (endofcode 14))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 57)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aload_2)) 
                                      (2 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (5 (ifeq 33))  ;;to TAG_0
                                      (8 (iconst_3)) 
                                      (9 (anewarray (class "java.lang.Object"))) 
                                      (12 (dup)) 
                                      (13 (iconst_0)) 
                                      (14 (aconst_null)) 
                                      (15 (aastore)) 
                                      (16 (dup)) 
                                      (17 (iconst_1)) 
                                      (18 (aconst_null)) 
                                      (19 (aastore)) 
                                      (20 (dup)) 
                                      (21 (iconst_2)) 
                                      (22 (aload_1)) 
                                      (23 (aconst_null)) 
                                      (24 (astore_1)) 
                                      (25 (aastore)) 
                                      (26 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (29 (goto 56)) ;;to TAG_1
                                      (32 (pop)) 
                                      (33 (iconst_3)) ;;at TAG_0
                                      (34 (anewarray (class "java.lang.Object"))) 
                                      (37 (dup)) 
                                      (38 (iconst_0)) 
                                      (39 (aload_1)) 
                                      (40 (aconst_null)) 
                                      (41 (astore_1)) 
                                      (42 (aastore)) 
                                      (43 (dup)) 
                                      (44 (iconst_1)) 
                                      (45 (aload_2)) 
                                      (46 (aconst_null)) 
                                      (47 (astore_2)) 
                                      (48 (aastore)) 
                                      (49 (dup)) 
                                      (50 (iconst_2)) 
                                      (51 (aconst_null)) 
                                      (52 (aastore)) 
                                      (53 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (56 (areturn)) ;;at TAG_1
                                      (endofcode 57))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *data$atom_diff-class-table*
  (make-static-class-decls 
   *clojure.data$atom_diff*))

(defconst *package-name-map* 
  ("clojure.data$atom_diff" . "clojure"))

