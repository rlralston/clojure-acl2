; core$generate_class$emit_get_var__5577-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:42 CDT 2014.
;

(defconst *clojure.core$generate_class$emit_get_var__5577*
 (make-class-def
      '(class "clojure.core$generate_class$emit_get_var__5577"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "boolean isBound()")
                        (STRING  "Object get()"))
            (fields
                        (field "var_name" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "var_type" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "ctype" (class "java.lang.Object") (accessflags  *class* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 0) (max_locals . 0) (code_length . 1)
                                   (parsedcode
                                      (0 (return))
                                      (endofcode 1))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "var_name" "clojure.core$generate_class$emit_get_var__5577" (class "java.lang.Object"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "var_type" "clojure.core$generate_class$emit_get_var__5577" (class "java.lang.Object"))))
                                      (14 (aload_0))
                                      (15 (aload_3))
                                      (16 (putfield (fieldCP "ctype" "clojure.core$generate_class$emit_get_var__5577" (class "java.lang.Object"))))
                                      (19 (return))
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 206)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (checkcast (class "clojure.asm.commons.GeneratorAdapter")))
                                      (4 (invokevirtual
					(methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label"))))
                                      (7 (astore_3))
                                      (8 (aload_1))
                                      (9 (checkcast (class "clojure.asm.commons.GeneratorAdapter")))
                                      (12 (invokevirtual
					(methodCP "newLabel" "clojure.asm.commons.GeneratorAdapter" () (class "clojure.asm.Label"))))
                                      (15 (astore 4))
                                      (17 (aload_1))
                                      (18 (checkcast (class "clojure.asm.commons.GeneratorAdapter")))
                                      (21 (aload_0))
                                      (22 (getfield (fieldCP "ctype" "clojure.core$generate_class$emit_get_var__5577" (class "java.lang.Object"))))
                                      (25 (checkcast (class "clojure.asm.Type")))
                                      (28 (aload_0))
                                      (29 (getfield (fieldCP "var_name" "clojure.core$generate_class$emit_get_var__5577" (class "java.lang.Object"))))
                                      (32 (checkcast (class "clojure.lang.IFn")))
                                      (35 (aload_2))
                                      (36 (aconst_null))
                                      (37 (astore_2))
                                      (38 (invokeinterface
					(methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2))
                                      (43 (checkcast (class "java.lang.String")))
                                      (46 (aload_0))
                                      (47 (getfield (fieldCP "var_type" "clojure.core$generate_class$emit_get_var__5577" (class "java.lang.Object"))))
                                      (50 (checkcast (class "clojure.asm.Type")))
                                      (53 (invokevirtual
					(methodCP "getStatic" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "java.lang.String") (class "clojure.asm.Type")) void)))
                                      (56 (aconst_null))
                                      (57 (pop))
                                      (58 (aload_1))
                                      (59 (checkcast (class "clojure.asm.commons.GeneratorAdapter")))
                                      (62 (invokevirtual
					(methodCP "dup" "clojure.asm.commons.GeneratorAdapter" () void)))
                                      (65 (aconst_null))
                                      (66 (pop))
                                      (67 (aload_1))
                                      (68 (checkcast (class "clojure.asm.commons.GeneratorAdapter")))
                                      (71 (aload_0))
                                      (72 (getfield (fieldCP "var_type" "clojure.core$generate_class$emit_get_var__5577" (class "java.lang.Object"))))
                                      (75 (checkcast (class "clojure.asm.Type")))
                                      (78 (ldc 0))        ;;STRING:: "boolean isBound()"
                                      (80 (checkcast (class "java.lang.String")))
                                      (83 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (86 (checkcast (class "clojure.asm.commons.Method")))
                                      (89 (invokevirtual
					(methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void)))
                                      (92 (aconst_null))
                                      (93 (pop))
                                      (94 (aload_1))
                                      (95 (checkcast (class "clojure.asm.commons.GeneratorAdapter")))
                                      (98 (getstatic (fieldCP "EQ" "clojure.asm.commons.GeneratorAdapter" int)))
                                      (101 (aload_3))
                                      (102 (checkcast (class "clojure.asm.Label")))
                                      (105 (invokevirtual
					(methodCP "ifZCmp" "clojure.asm.commons.GeneratorAdapter" (int (class "clojure.asm.Label")) void)))
                                      (108 (aconst_null))
                                      (109 (pop))
                                      (110 (aload_1))
                                      (111 (checkcast (class "clojure.asm.commons.GeneratorAdapter")))
                                      (114 (aload_0))
                                      (115 (getfield (fieldCP "var_type" "clojure.core$generate_class$emit_get_var__5577" (class "java.lang.Object"))))
                                      (118 (checkcast (class "clojure.asm.Type")))
                                      (121 (ldc 1))       ;;STRING:: "Object get()"
                                      (123 (checkcast (class "java.lang.String")))
                                      (126 (invokestatic
					(methodCP "getMethod" "clojure.asm.commons.Method" ((class "java.lang.String")) (class "clojure.asm.commons.Method"))))
                                      (129 (checkcast (class "clojure.asm.commons.Method")))
                                      (132 (invokevirtual
					(methodCP "invokeVirtual" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Type") (class "clojure.asm.commons.Method")) void)))
                                      (135 (aconst_null))
                                      (136 (pop))
                                      (137 (aload_1))
                                      (138 (checkcast (class "clojure.asm.commons.GeneratorAdapter")))
                                      (141 (aload 4))
                                      (143 (checkcast (class "clojure.asm.Label")))
                                      (146 (invokevirtual
					(methodCP "goTo" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void)))
                                      (149 (aconst_null))
                                      (150 (pop))
                                      (151 (aload_1))
                                      (152 (checkcast (class "clojure.asm.commons.GeneratorAdapter")))
                                      (155 (aload_3))
                                      (156 (aconst_null))
                                      (157 (astore_3))
                                      (158 (checkcast (class "clojure.asm.Label")))
                                      (161 (invokevirtual
					(methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void)))
                                      (164 (aconst_null))
                                      (165 (pop))
                                      (166 (aload_1))
                                      (167 (checkcast (class "clojure.asm.commons.GeneratorAdapter")))
                                      (170 (invokevirtual
					(methodCP "pop" "clojure.asm.commons.GeneratorAdapter" () void)))
                                      (173 (aconst_null))
                                      (174 (pop))
                                      (175 (aload_1))
                                      (176 (checkcast (class "clojure.asm.MethodAdapter")))
                                      (179 (getstatic (fieldCP "ACONST_NULL" "clojure.asm.Opcodes" int)))
                                      (182 (invokevirtual
					(methodCP "visitInsn" "clojure.asm.MethodAdapter" (int) void)))
                                      (185 (aconst_null))
                                      (186 (pop))
                                      (187 (aload_1))
                                      (188 (aconst_null))
                                      (189 (astore_1))
                                      (190 (checkcast (class "clojure.asm.commons.GeneratorAdapter")))
                                      (193 (aload 4))
                                      (195 (aconst_null))
                                      (196 (astore 4))
                                      (198 (checkcast (class "clojure.asm.Label")))
                                      (201 (invokevirtual
					(methodCP "mark" "clojure.asm.commons.GeneratorAdapter" ((class "clojure.asm.Label")) void)))
                                      (204 (aconst_null))
                                      (205 (areturn))
                                      (endofcode 206))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$generate_class$emit_get_var__5577-class-table*
  (make-static-class-decls 
   *clojure.core$generate_class$emit_get_var__5577*))

(defconst *package-name-map* 
  ("clojure.core$generate_class$emit_get_var__5577" . "clojure"))

