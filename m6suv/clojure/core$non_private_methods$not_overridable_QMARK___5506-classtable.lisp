; core$non_private_methods$not_overridable_QMARK___5506-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:44 CDT 2014.
;

(defconst *clojure.core$non_private_methods$not_overridable_QMARK___5506*
 (make-class-def
      '(class "clojure.core$non_private_methods$not_overridable_QMARK___5506"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "not")
                        (STRING  "=")
                        (STRING  "finalize"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 27)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "not"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$non_private_methods$not_overridable_QMARK___5506" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "="
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$non_private_methods$not_overridable_QMARK___5506" (class "clojure.lang.Var"))))
                                      (26 (return))
                                      (endofcode 27))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 6) (code_length . 168)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "java.lang.reflect.Method"))) 
                                      (4 (invokevirtual (methodCP "getModifiers" "java.lang.reflect.Method" () int))) 
                                      (7 (istore_2)) 
                                      (8 (getstatic (fieldCP "const__0" "clojure.core$non_private_methods$not_overridable_QMARK___5506" (class "clojure.lang.Var")))) 
                                      (11 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (14 (checkcast (class "clojure.lang.IFn"))) 
                                      (17 (iload_2)) 
                                      (18 (invokestatic (methodCP "isPublic" "java.lang.reflect.Modifier" (int) boolean))) 
                                      (21 (istore_3)) 
                                      (22 (iload_3)) 
                                      (23 (ifeq 43)) ;;to TAG_0
                                      (26 (iload_3)) 
                                      (27 (ifeq 36))  ;;to TAG_1
                                      (30 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (33 (goto 39)) ;;to TAG_2
                                      (36 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_1
                                      (39 (goto 59)) ;;to TAG_3;;at TAG_2
                                      (42 (pop)) 
                                      (43 (iload_2)) ;;at TAG_0
                                      (44 (invokestatic (methodCP "isProtected" "java.lang.reflect.Modifier" (int) boolean))) 
                                      (47 (ifeq 56)) ;;to TAG_4
                                      (50 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (53 (goto 59)) ;;to TAG_3
                                      (56 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_4
                                      (59 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_3
                                      (64 (astore_3)) 
                                      (65 (aload_3)) 
                                      (66 (dup)) 
                                      (67 (ifnull 82)) ;;to TAG_5
                                      (70 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (73 (if_acmpeq 83)) ;;to TAG_6
                                      (76 (aload_3)) 
                                      (77 (aconst_null)) 
                                      (78 (astore_3)) 
                                      (79 (goto 167)) ;;to TAG_7
                                      (82 (pop)) ;;at TAG_5
                                      (83 (iload_2)) ;;at TAG_6
                                      (84 (invokestatic (methodCP "isStatic" "java.lang.reflect.Modifier" (int) boolean))) 
                                      (87 (istore 4)) 
                                      (89 (iload 4)) 
                                      (91 (ifeq 112)) ;;to TAG_8
                                      (94 (iload 4)) 
                                      (96 (ifeq 105)) ;;to TAG_9
                                      (99 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (102 (goto 108)) ;;to TAG_10
                                      (105 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_9
                                      (108 (goto 167)) ;;to TAG_7;;at TAG_10
                                      (111 (pop)) 
                                      (112 (iload_2)) ;;at TAG_8
                                      (113 (invokestatic (methodCP "isFinal" "java.lang.reflect.Modifier" (int) boolean))) 
                                      (116 (istore 5)) 
                                      (118 (iload 5)) 
                                      (120 (ifeq 141)) ;;to TAG_11
                                      (123 (iload 5)) 
                                      (125 (ifeq 134)) ;;to TAG_12
                                      (128 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (131 (goto 137)) ;;to TAG_13
                                      (134 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_12
                                      (137 (goto 167)) ;;to TAG_7;;at TAG_13
                                      (140 (pop)) 
                                      (141 (ldc 3)) ;;at TAG_11;;STRING:: "finalize"
                                      (143 (aload_1)) 
                                      (144 (aconst_null)) 
                                      (145 (astore_1)) 
                                      (146 (checkcast (class "java.lang.reflect.Method"))) 
                                      (149 (invokevirtual (methodCP "getName" "java.lang.reflect.Method" () (class "java.lang.String")))) 
                                      (152 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (155 (ifeq 164)) ;;to TAG_14
                                      (158 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (161 (goto 167)) ;;to TAG_7
                                      (164 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_14
                                      (167 (areturn)) ;;at TAG_7
                                      (endofcode 168))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$non_private_methods$not_overridable_QMARK___5506-class-table*
  (make-static-class-decls 
   *clojure.core$non_private_methods$not_overridable_QMARK___5506*))

(defconst *package-name-map* 
  ("clojure.core$non_private_methods$not_overridable_QMARK___5506" . "clojure"))

