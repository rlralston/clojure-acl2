; core$assert_same_protocol$fn__5890-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:40 CDT 2014.
;

(defconst *clojure.core$assert_same_protocol$fn__5890*
 (make-class-def
      '(class "clojure.core$assert_same_protocol$fn__5890"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "println")
                        (STRING  "str")
                        (STRING  "pop-thread-bindings")
                        (STRING  "Warning: protocol")
                        (STRING  "is overwriting")
                        (STRING  "method ")
                        (STRING  "sym")
                        (STRING  " of protocol ")
                        (STRING  "function "))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "p" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "protocol_var" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "v" (class "java.lang.Object") (accessflags  *class* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 40)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "println"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$assert_same_protocol$fn__5890" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "str"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$assert_same_protocol$fn__5890" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "pop-thread-bindings"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$assert_same_protocol$fn__5890" (class "clojure.lang.Var"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 4) (code_length . 20)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "p" "clojure.core$assert_same_protocol$fn__5890" (class "java.lang.Object"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "protocol_var" "clojure.core$assert_same_protocol$fn__5890" (class "java.lang.Object"))))
                                      (14 (aload_0))
                                      (15 (aload_3))
                                      (16 (putfield (fieldCP "v" "clojure.core$assert_same_protocol$fn__5890" (class "java.lang.Object"))))
                                      (19 (return))
                                      (endofcode 20))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 10) (max_locals . 3) (code_length . 140)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$assert_same_protocol$fn__5890" (class "clojure.lang.Var")))) ;;at TAG_4
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (ldc 4)) ;;STRING:: "Warning: protocol"
                                      (11 (aload_0)) 
                                      (12 (getfield (fieldCP "protocol_var" "clojure.core$assert_same_protocol$fn__5890" (class "java.lang.Object")))) 
                                      (15 (ldc 5)) ;;STRING:: "is overwriting"
                                      (17 (aload_0)) 
                                      (18 (getfield (fieldCP "p" "clojure.core$assert_same_protocol$fn__5890" (class "java.lang.Object")))) 
                                      (21 (dup)) 
                                      (22 (ifnull 70)) ;;to TAG_0
                                      (25 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (28 (if_acmpeq 71)) ;;to TAG_1
                                      (31 (getstatic (fieldCP "const__1" "clojure.core$assert_same_protocol$fn__5890" (class "clojure.lang.Var")))) 
                                      (34 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (37 (checkcast (class "clojure.lang.IFn"))) 
                                      (40 (ldc 6)) ;;STRING:: "method "
                                      (42 (aload_0)) 
                                      (43 (getfield (fieldCP "v" "clojure.core$assert_same_protocol$fn__5890" (class "java.lang.Object")))) 
                                      (46 (ldc 7)) ;;STRING:: "sym"
                                      (48 (invokestatic (methodCP "invokeNoArgInstanceMember" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String")) (class "java.lang.Object")))) 
                                      (51 (ldc 8)) ;;STRING:: " of protocol "
                                      (53 (aload_0)) 
                                      (54 (getfield (fieldCP "p" "clojure.core$assert_same_protocol$fn__5890" (class "java.lang.Object")))) 
                                      (57 (ldc 7)) ;;STRING:: "sym"
                                      (59 (invokestatic (methodCP "invokeNoArgInstanceMember" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String")) (class "java.lang.Object")))) 
                                      (62 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (67 (goto 96))  ;;to TAG_2
                                      (70 (pop)) ;;at TAG_0
                                      (71 (getstatic (fieldCP "const__1" "clojure.core$assert_same_protocol$fn__5890" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (74 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (77 (checkcast (class "clojure.lang.IFn"))) 
                                      (80 (ldc 9)) ;;STRING:: "function "
                                      (82 (aload_0)) 
                                      (83 (getfield (fieldCP "v" "clojure.core$assert_same_protocol$fn__5890" (class "java.lang.Object")))) 
                                      (86 (ldc 7)) ;;STRING:: "sym"
                                      (88 (invokestatic (methodCP "invokeNoArgInstanceMember" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String")) (class "java.lang.Object")))) 
                                      (91 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (96 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) ;;at TAG_2
                                      (101 (astore_1)) 
                                      (102 (getstatic (fieldCP "const__2" "clojure.core$assert_same_protocol$fn__5890" (class "clojure.lang.Var")))) ;;at TAG_5
                                      (105 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (108 (checkcast (class "clojure.lang.IFn"))) 
                                      (111 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (116 (pop)) 
                                      (117 (goto 138)) ;;to TAG_3
                                      (120 (astore_2)) ;;at TAG_6
                                      (121 (getstatic (fieldCP "const__2" "clojure.core$assert_same_protocol$fn__5890" (class "clojure.lang.Var")))) 
                                      (124 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (127 (checkcast (class "clojure.lang.IFn"))) 
                                      (130 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (135 (pop)) 
                                      (136 (aload_2)) 
                                      (137 (athrow)) 
                                      (138 (aload_1)) ;;at TAG_3
                                      (139 (areturn)) 
                                      (endofcode 140))
                                   (Exceptions 
                                     (handler 0 102  120 (class "java.lang.Throwable")))
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$assert_same_protocol$fn__5890-class-table*
  (make-static-class-decls 
   *clojure.core$assert_same_protocol$fn__5890*))

(defconst *package-name-map* 
  ("clojure.core$assert_same_protocol$fn__5890" . "clojure"))

