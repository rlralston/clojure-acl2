; core$check_cyclic_dependency-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:41 CDT 2014.
;

(defconst *clojure.core$check_cyclic_dependency*
 (make-class-def
      '(class "clojure.core$check_cyclic_dependency"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "some")
                        (STRING  "rest")
                        (STRING  "*pending-paths*")
                        (STRING  "map")
                        (STRING  "cons")
                        (STRING  "apply")
                        (STRING  "str")
                        (STRING  "interpose")
                        (STRING  "->")
                        (STRING  "Cyclic load dependency: "))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 105)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "some"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "rest"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "*pending-paths*"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "map"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "cons"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var"))))
                                      (65 (ldc 0))        ;;STRING:: "clojure.core"
                                      (67 (ldc 6))        ;;STRING:: "apply"
                                      (69 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (72 (checkcast (class "clojure.lang.Var")))
                                      (75 (putstatic (fieldCP "const__5" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var"))))
                                      (78 (ldc 0))        ;;STRING:: "clojure.core"
                                      (80 (ldc 7))        ;;STRING:: "str"
                                      (82 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (85 (checkcast (class "clojure.lang.Var")))
                                      (88 (putstatic (fieldCP "const__6" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var"))))
                                      (91 (ldc 0))        ;;STRING:: "clojure.core"
                                      (93 (ldc 8))        ;;STRING:: "interpose"
                                      (95 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (98 (checkcast (class "clojure.lang.Var")))
                                      (101 (putstatic (fieldCP "const__7" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var"))))
                                      (104 (return))
                                      (endofcode 105))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 180)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (iconst_1)) 
                                      (10 (anewarray (class "java.lang.Object"))) 
                                      (13 (dup)) 
                                      (14 (iconst_0)) 
                                      (15 (aload_1)) 
                                      (16 (aastore)) 
                                      (17 (invokestatic (methodCP "set" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentSet")))) 
                                      (20 (getstatic (fieldCP "const__1" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var")))) 
                                      (23 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (26 (checkcast (class "clojure.lang.IFn"))) 
                                      (29 (getstatic (fieldCP "const__2" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var")))) 
                                      (32 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (35 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (40 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (45 (dup)) 
                                      (46 (ifnull 177)) ;;to TAG_0
                                      (49 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (52 (if_acmpeq 178)) ;;to TAG_1
                                      (55 (getstatic (fieldCP "const__3" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var")))) 
                                      (58 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (61 (checkcast (class "clojure.lang.IFn"))) 
                                      (64 (new (class "clojure.core$check_cyclic_dependency$fn__5006"))) 
                                      (67 (dup)) 
                                      (68 (aload_1)) 
                                      (69 (invokespecial (methodCP "<init>" "clojure.core$check_cyclic_dependency$fn__5006" ((class "java.lang.Object")) void))) 
                                      (72 (getstatic (fieldCP "const__4" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var")))) 
                                      (75 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (78 (checkcast (class "clojure.lang.IFn"))) 
                                      (81 (aload_1)) 
                                      (82 (aconst_null)) 
                                      (83 (astore_1)) 
                                      (84 (getstatic (fieldCP "const__2" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var")))) 
                                      (87 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (90 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (95 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (100 (astore_2)) 
                                      (101 (getstatic (fieldCP "const__5" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var")))) 
                                      (104 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (107 (checkcast (class "clojure.lang.IFn"))) 
                                      (110 (getstatic (fieldCP "const__6" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var")))) 
                                      (113 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (116 (getstatic (fieldCP "const__7" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var")))) 
                                      (119 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (122 (checkcast (class "clojure.lang.IFn"))) 
                                      (125 (ldc 9)) ;;STRING:: "->"
                                      (127 (aload_2)) 
                                      (128 (aconst_null)) 
                                      (129 (astore_2)) 
                                      (130 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (135 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (140 (astore_3)) 
                                      (141 (new (class "java.lang.Exception"))) 
                                      (144 (dup)) 
                                      (145 (getstatic (fieldCP "const__6" "clojure.core$check_cyclic_dependency" (class "clojure.lang.Var")))) 
                                      (148 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (151 (checkcast (class "clojure.lang.IFn"))) 
                                      (154 (ldc 10)) ;;STRING:: "Cyclic load dependency: "
                                      (156 (aload_3)) 
                                      (157 (aconst_null)) 
                                      (158 (astore_3)) 
                                      (159 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (164 (checkcast (class "java.lang.String"))) 
                                      (167 (invokespecial (methodCP "<init>" "java.lang.Exception" ((class "java.lang.String")) void))) 
                                      (170 (checkcast (class "java.lang.Throwable"))) 
                                      (173 (athrow)) 
                                      (174 (goto 179))  ;;to TAG_2
                                      (177 (pop)) ;;at TAG_0
                                      (178 (aconst_null)) ;;at TAG_1
                                      (179 (areturn)) ;;at TAG_2
                                      (endofcode 180))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$check_cyclic_dependency-class-table*
  (make-static-class-decls 
   *clojure.core$check_cyclic_dependency*))

(defconst *package-name-map* 
  ("clojure.core$check_cyclic_dependency" . "clojure"))

