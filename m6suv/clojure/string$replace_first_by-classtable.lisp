; string$replace_first_by-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:58 CDT 2014.
;

(defconst *clojure.string$replace_first_by*
 (make-class-def
      '(class "clojure.string$replace_first_by"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "re-matcher")
                        (STRING  "re-groups")
                        (STRING  "str"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 40)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "re-matcher"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.string$replace_first_by" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "re-groups"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.string$replace_first_by" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "str"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.string$replace_first_by" (class "clojure.lang.Var"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 7) (code_length . 152)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.string$replace_first_by" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_2)) 
                                      (10 (aconst_null)) 
                                      (11 (astore_2)) 
                                      (12 (aload_1)) 
                                      (13 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (18 (astore 4)) 
                                      (20 (aload 4)) 
                                      (22 (checkcast (class "java.util.regex.Matcher"))) 
                                      (25 (invokevirtual (methodCP "find" "java.util.regex.Matcher" () boolean))) 
                                      (28 (ifeq 148))  ;;to TAG_0
                                      (31 (new (class "java.lang.StringBuffer"))) 
                                      (34 (dup)) 
                                      (35 (aload_1)) 
                                      (36 (aconst_null)) 
                                      (37 (astore_1)) 
                                      (38 (checkcast (class "java.lang.CharSequence"))) 
                                      (41 (invokeinterface (methodCP "length" "java.lang.CharSequence" () int) 1)) 
                                      (46 (invokespecial (methodCP "<init>" "java.lang.StringBuffer" (int) void))) 
                                      (49 (astore 5)) 
                                      (51 (aload_3)) 
                                      (52 (aconst_null)) 
                                      (53 (astore_3)) 
                                      (54 (checkcast (class "clojure.lang.IFn"))) 
                                      (57 (getstatic (fieldCP "const__1" "clojure.string$replace_first_by" (class "clojure.lang.Var")))) 
                                      (60 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (63 (checkcast (class "clojure.lang.IFn"))) 
                                      (66 (aload 4)) 
                                      (68 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (73 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (78 (checkcast (class "java.lang.String"))) 
                                      (81 (invokestatic (methodCP "quoteReplacement" "java.util.regex.Matcher" ((class "java.lang.String")) (class "java.lang.String")))) 
                                      (84 (astore 6)) 
                                      (86 (aload 4)) 
                                      (88 (checkcast (class "java.util.regex.Matcher"))) 
                                      (91 (aload 5)) 
                                      (93 (checkcast (class "java.lang.StringBuffer"))) 
                                      (96 (aload 6)) 
                                      (98 (aconst_null)) 
                                      (99 (astore 6)) 
                                      (101 (checkcast (class "java.lang.String"))) 
                                      (104 (invokevirtual (methodCP "appendReplacement" "java.util.regex.Matcher" ((class "java.lang.StringBuffer") (class "java.lang.String")) (class "java.util.regex.Matcher")))) 
                                      (107 (pop)) 
                                      (108 (aload 4)) 
                                      (110 (aconst_null)) 
                                      (111 (astore 4)) 
                                      (113 (checkcast (class "java.util.regex.Matcher"))) 
                                      (116 (aload 5)) 
                                      (118 (checkcast (class "java.lang.StringBuffer"))) 
                                      (121 (invokevirtual (methodCP "appendTail" "java.util.regex.Matcher" ((class "java.lang.StringBuffer")) (class "java.lang.StringBuffer")))) 
                                      (124 (pop)) 
                                      (125 (getstatic (fieldCP "const__2" "clojure.string$replace_first_by" (class "clojure.lang.Var")))) 
                                      (128 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (131 (checkcast (class "clojure.lang.IFn"))) 
                                      (134 (aload 5)) 
                                      (136 (aconst_null)) 
                                      (137 (astore 5)) 
                                      (139 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (144 (goto 151)) ;;to TAG_1
                                      (147 (pop)) 
                                      (148 (aload_1)) ;;at TAG_0
                                      (149 (aconst_null)) 
                                      (150 (astore_1)) 
                                      (151 (areturn)) ;;at TAG_1
                                      (endofcode 152))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *string$replace_first_by-class-table*
  (make-static-class-decls 
   *clojure.string$replace_first_by*))

(defconst *package-name-map* 
  ("clojure.string$replace_first_by" . "clojure"))

