; pprint$miser_nl_QMARK_-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:56 CDT 2014.
;

(defconst *clojure.pprint$miser_nl_QMARK_*
 (make-class-def
      '(class "clojure.pprint$miser_nl_QMARK_"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.pprint")
                        (STRING  "get-miser-width")
                        (STRING  "get-max-column")
                        (STRING  "base")
                        (STRING  "clojure.core")
                        (STRING  "deref")
                        (STRING  ">=")
                        (STRING  "start-col")
                        (STRING  "-")
                        (STRING  "linear-nl?"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "__site__0__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__0__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1)
                        (field "__site__1__" (class "clojure.lang.KeywordLookupSite") (accessflags  *class*  *final*  *static* ) -1)
                        (field "__thunk__1__" (class "clojure.lang.ILookupThunk") (accessflags  *class*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 4) (max_locals . 0) (code_length . 143)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.pprint"
                                      (2 (ldc 1))         ;;STRING:: "get-miser-width"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.pprint"
                                      (15 (ldc 2))        ;;STRING:: "get-max-column"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Var"))))
                                      (26 (aconst_null))
                                      (27 (ldc 3))        ;;STRING:: "base"
                                      (29 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (32 (checkcast (class "clojure.lang.Keyword")))
                                      (35 (putstatic (fieldCP "const__2" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Keyword"))))
                                      (38 (ldc 4))        ;;STRING:: "clojure.core"
                                      (40 (ldc 5))        ;;STRING:: "deref"
                                      (42 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (45 (checkcast (class "clojure.lang.Var")))
                                      (48 (putstatic (fieldCP "const__3" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Var"))))
                                      (51 (ldc 4))        ;;STRING:: "clojure.core"
                                      (53 (ldc 6))        ;;STRING:: ">="
                                      (55 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (58 (checkcast (class "clojure.lang.Var")))
                                      (61 (putstatic (fieldCP "const__4" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Var"))))
                                      (64 (aconst_null))
                                      (65 (ldc 7))        ;;STRING:: "start-col"
                                      (67 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (70 (checkcast (class "clojure.lang.Keyword")))
                                      (73 (putstatic (fieldCP "const__5" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Keyword"))))
                                      (76 (ldc 4))        ;;STRING:: "clojure.core"
                                      (78 (ldc 8))        ;;STRING:: "-"
                                      (80 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (83 (checkcast (class "clojure.lang.Var")))
                                      (86 (putstatic (fieldCP "const__6" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Var"))))
                                      (89 (ldc 0))        ;;STRING:: "clojure.pprint"
                                      (91 (ldc 9))        ;;STRING:: "linear-nl?"
                                      (93 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (96 (checkcast (class "clojure.lang.Var")))
                                      (99 (putstatic (fieldCP "const__7" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Var"))))
                                      (102 (new (class "clojure.lang.KeywordLookupSite")))
                                      (105 (dup))
                                      (106 (aconst_null))
                                      (107 (ldc 3))       ;;STRING:: "base"
                                      (109 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (112 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (115 (dup))
                                      (116 (putstatic (fieldCP "__site__0__" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.KeywordLookupSite"))))
                                      (119 (putstatic (fieldCP "__thunk__0__" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.ILookupThunk"))))
                                      (122 (new (class "clojure.lang.KeywordLookupSite")))
                                      (125 (dup))
                                      (126 (aconst_null))
                                      (127 (ldc 7))       ;;STRING:: "start-col"
                                      (129 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (132 (invokespecial
					(methodCP "<init>" "clojure.lang.KeywordLookupSite" ((class "clojure.lang.Keyword")) void)))
                                      (135 (dup))
                                      (136 (putstatic (fieldCP "__site__1__" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.KeywordLookupSite"))))
                                      (139 (putstatic (fieldCP "__thunk__1__" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.ILookupThunk"))))
                                      (142 (return))
                                      (endofcode 143))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 9) (code_length . 272)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (astore 4)) 
                                      (17 (getstatic (fieldCP "const__1" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Var")))) 
                                      (20 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (23 (checkcast (class "clojure.lang.IFn"))) 
                                      (26 (getstatic (fieldCP "__thunk__0__" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.ILookupThunk")))) 
                                      (29 (dup)) 
                                      (30 (getstatic (fieldCP "const__3" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Var")))) 
                                      (33 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (36 (checkcast (class "clojure.lang.IFn"))) 
                                      (39 (getstatic (fieldCP "const__3" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Var")))) 
                                      (42 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (45 (checkcast (class "clojure.lang.IFn"))) 
                                      (48 (aload_1)) 
                                      (49 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (54 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (59 (dup_x2)) 
                                      (60 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (65 (dup_x2)) 
                                      (66 (if_acmpeq 73)) ;;to TAG_0
                                      (69 (pop)) 
                                      (70 (goto 95))  ;;to TAG_1
                                      (73 (swap)) ;;at TAG_0
                                      (74 (pop)) 
                                      (75 (dup)) 
                                      (76 (getstatic (fieldCP "__site__0__" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.KeywordLookupSite")))) 
                                      (79 (swap)) 
                                      (80 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (85 (dup)) 
                                      (86 (putstatic (fieldCP "__thunk__0__" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.ILookupThunk")))) 
                                      (89 (swap)) 
                                      (90 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (95 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_1
                                      (100 (astore 5)) 
                                      (102 (aload 4)) 
                                      (104 (astore 6)) 
                                      (106 (aload 6)) 
                                      (108 (dup)) 
                                      (109 (ifnull 265)) ;;to TAG_2
                                      (112 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (115 (if_acmpeq 266)) ;;to TAG_3
                                      (118 (aload 5)) 
                                      (120 (astore 7)) 
                                      (122 (aload 7)) 
                                      (124 (dup)) 
                                      (125 (ifnull 256)) ;;to TAG_4
                                      (128 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (131 (if_acmpeq 257)) ;;to TAG_5
                                      (134 (getstatic (fieldCP "const__3" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Var")))) 
                                      (137 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (140 (checkcast (class "clojure.lang.IFn"))) 
                                      (143 (getstatic (fieldCP "__thunk__1__" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.ILookupThunk")))) 
                                      (146 (dup)) 
                                      (147 (aload_2)) 
                                      (148 (dup_x2)) 
                                      (149 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (154 (dup_x2)) 
                                      (155 (if_acmpeq 162)) ;;to TAG_6
                                      (158 (pop)) 
                                      (159 (goto 184)) ;;to TAG_7
                                      (162 (swap)) ;;at TAG_6
                                      (163 (pop)) 
                                      (164 (dup)) 
                                      (165 (getstatic (fieldCP "__site__1__" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.KeywordLookupSite")))) 
                                      (168 (swap)) 
                                      (169 (invokeinterface (methodCP "fault" "clojure.lang.ILookupSite" ((class "java.lang.Object")) (class "clojure.lang.ILookupThunk")) 2)) 
                                      (174 (dup)) 
                                      (175 (putstatic (fieldCP "__thunk__1__" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.ILookupThunk")))) 
                                      (178 (swap)) 
                                      (179 (invokeinterface (methodCP "get" "clojure.lang.ILookupThunk" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (184 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_7
                                      (189 (aload 5)) 
                                      (191 (aconst_null)) 
                                      (192 (astore 5)) 
                                      (194 (aload 4)) 
                                      (196 (aconst_null)) 
                                      (197 (astore 4)) 
                                      (199 (invokestatic (methodCP "minus" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (202 (invokestatic (methodCP "gte" "clojure.lang.Numbers" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (205 (istore 8)) 
                                      (207 (iload 8)) 
                                      (209 (ifeq 239)) ;;to TAG_8
                                      (212 (getstatic (fieldCP "const__7" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.Var")))) 
                                      (215 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (218 (checkcast (class "clojure.lang.IFn"))) 
                                      (221 (aload_1)) 
                                      (222 (aconst_null)) 
                                      (223 (astore_1)) 
                                      (224 (aload_2)) 
                                      (225 (aconst_null)) 
                                      (226 (astore_2)) 
                                      (227 (aload_3)) 
                                      (228 (aconst_null)) 
                                      (229 (astore_3)) 
                                      (230 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (235 (goto 253)) ;;to TAG_9
                                      (238 (pop)) 
                                      (239 (iload 8)) ;;at TAG_8
                                      (241 (ifeq 250)) ;;to TAG_10
                                      (244 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (247 (goto 253)) ;;to TAG_9
                                      (250 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_10
                                      (253 (goto 262)) ;;to TAG_11;;at TAG_9
                                      (256 (pop)) ;;at TAG_4
                                      (257 (aload 7)) ;;at TAG_5
                                      (259 (aconst_null)) 
                                      (260 (astore 7)) 
                                      (262 (goto 271)) ;;to TAG_12;;at TAG_11
                                      (265 (pop)) ;;at TAG_2
                                      (266 (aload 6)) ;;at TAG_3
                                      (268 (aconst_null)) 
                                      (269 (astore 6)) 
                                      (271 (areturn)) ;;at TAG_12
                                      (endofcode 272))
                                   (Exceptions )
                                   (StackMap )))
                        (method "swapThunk"
                              (parameters int (class "clojure.lang.ILookupThunk"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 3) (code_length . 39)
                                   (parsedcode
                                      (0 (iload_1)) 
                                      (1 (tableswitch (tableswitchinfo 38 (0 . 1) (24 31))))  ;;to TAG_2;;to TAG_0;;to TAG_1
                                      (24 (aload_2)) ;;at TAG_1
                                      (25 (putstatic (fieldCP "__thunk__0__" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.ILookupThunk")))) 
                                      (28 (goto 38)) ;;to TAG_0
                                      (31 (aload_2)) ;;at TAG_2
                                      (32 (putstatic (fieldCP "__thunk__1__" "clojure.pprint$miser_nl_QMARK_" (class "clojure.lang.ILookupThunk")))) 
                                      (35 (goto 38)) ;;to TAG_0
                                      (38 (return)) ;;at TAG_0
                                      (endofcode 39))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$miser_nl_QMARK_-class-table*
  (make-static-class-decls 
   *clojure.pprint$miser_nl_QMARK_*))

(defconst *package-name-map* 
  ("clojure.pprint$miser_nl_QMARK_" . "clojure"))

