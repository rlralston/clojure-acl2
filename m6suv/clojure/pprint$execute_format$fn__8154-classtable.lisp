; pprint$execute_format$fn__8154-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:55 CDT 2014.
;

(defconst *clojure.pprint$execute_format$fn__8154*
 (make-class-def
      '(class "clojure.pprint$execute_format$fn__8154"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.pprint")
                        (STRING  "execute-format")
                        (STRING  "clojure.core")
                        (STRING  "not")
                        (STRING  "identical?"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "wrapped_stream" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "args" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "real_stream" (class "java.lang.Object") (accessflags  *class* ) -1)
                        (field "format" (class "java.lang.Object") (accessflags  *class* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 40)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.pprint"
                                      (2 (ldc 1))         ;;STRING:: "execute-format"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$execute_format$fn__8154" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.core"
                                      (15 (ldc 3))        ;;STRING:: "not"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$execute_format$fn__8154" (class "clojure.lang.Var"))))
                                      (26 (ldc 2))        ;;STRING:: "clojure.core"
                                      (28 (ldc 4))        ;;STRING:: "identical?"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.pprint$execute_format$fn__8154" (class "clojure.lang.Var"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 5) (code_length . 26)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "wrapped_stream" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object"))))
                                      (9 (aload_0))
                                      (10 (aload_2))
                                      (11 (putfield (fieldCP "args" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object"))))
                                      (14 (aload_0))
                                      (15 (aload_3))
                                      (16 (putfield (fieldCP "real_stream" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object"))))
                                      (19 (aload_0))
                                      (20 (aload 4))
                                      (22 (putfield (fieldCP "format" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object"))))
                                      (25 (return))
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 3) (code_length . 191)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$execute_format$fn__8154" (class "clojure.lang.Var")))) ;;at TAG_11
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_0)) 
                                      (10 (getfield (fieldCP "format" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (13 (aload_0)) 
                                      (14 (aconst_null)) 
                                      (15 (putfield (fieldCP "format" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (18 (aload_0)) 
                                      (19 (getfield (fieldCP "args" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (22 (aload_0)) 
                                      (23 (aconst_null)) 
                                      (24 (putfield (fieldCP "args" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (27 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (32 (astore_1)) 
                                      (33 (getstatic (fieldCP "const__1" "clojure.pprint$execute_format$fn__8154" (class "clojure.lang.Var")))) ;;at TAG_12
                                      (36 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (39 (checkcast (class "clojure.lang.IFn"))) 
                                      (42 (aload_0)) 
                                      (43 (getfield (fieldCP "real_stream" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (46 (aload_0)) 
                                      (47 (aconst_null)) 
                                      (48 (putfield (fieldCP "real_stream" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (51 (aload_0)) 
                                      (52 (getfield (fieldCP "wrapped_stream" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (55 (invokestatic (methodCP "identical" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (58 (ifeq 67)) ;;to TAG_0
                                      (61 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (64 (goto 70))  ;;to TAG_1
                                      (67 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_0
                                      (70 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_1
                                      (75 (dup)) 
                                      (76 (ifnull 105)) ;;to TAG_2
                                      (79 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (82 (if_acmpeq 106)) ;;to TAG_3
                                      (85 (aload_0)) 
                                      (86 (getfield (fieldCP "wrapped_stream" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (89 (aload_0)) 
                                      (90 (aconst_null)) 
                                      (91 (putfield (fieldCP "wrapped_stream" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (94 (checkcast (class "java.io.Writer"))) 
                                      (97 (invokevirtual (methodCP "flush" "java.io.Writer" () void))) 
                                      (100 (aconst_null)) 
                                      (101 (pop)) 
                                      (102 (goto 108)) ;;to TAG_4
                                      (105 (pop)) ;;at TAG_2
                                      (106 (aconst_null)) ;;at TAG_3
                                      (107 (pop)) 
                                      (108 (goto 189)) ;;to TAG_5;;at TAG_4
                                      (111 (astore_2)) ;;at TAG_13
                                      (112 (getstatic (fieldCP "const__1" "clojure.pprint$execute_format$fn__8154" (class "clojure.lang.Var")))) 
                                      (115 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (118 (checkcast (class "clojure.lang.IFn"))) 
                                      (121 (aload_0)) 
                                      (122 (getfield (fieldCP "real_stream" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (125 (aload_0)) 
                                      (126 (aconst_null)) 
                                      (127 (putfield (fieldCP "real_stream" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (130 (aload_0)) 
                                      (131 (getfield (fieldCP "wrapped_stream" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (134 (invokestatic (methodCP "identical" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (137 (ifeq 146)) ;;to TAG_6
                                      (140 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (143 (goto 149)) ;;to TAG_7
                                      (146 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_6
                                      (149 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_7
                                      (154 (dup)) 
                                      (155 (ifnull 184)) ;;to TAG_8
                                      (158 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (161 (if_acmpeq 185)) ;;to TAG_9
                                      (164 (aload_0)) 
                                      (165 (getfield (fieldCP "wrapped_stream" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (168 (aload_0)) 
                                      (169 (aconst_null)) 
                                      (170 (putfield (fieldCP "wrapped_stream" "clojure.pprint$execute_format$fn__8154" (class "java.lang.Object")))) 
                                      (173 (checkcast (class "java.io.Writer"))) 
                                      (176 (invokevirtual (methodCP "flush" "java.io.Writer" () void))) 
                                      (179 (aconst_null)) 
                                      (180 (pop)) 
                                      (181 (goto 187)) ;;to TAG_10
                                      (184 (pop)) ;;at TAG_8
                                      (185 (aconst_null)) ;;at TAG_9
                                      (186 (pop)) 
                                      (187 (aload_2)) ;;at TAG_10
                                      (188 (athrow)) 
                                      (189 (aload_1)) ;;at TAG_5
                                      (190 (areturn)) 
                                      (endofcode 191))
                                   (Exceptions 
                                     (handler 0 33  111 (class "java.lang.Throwable")))
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$execute_format$fn__8154-class-table*
  (make-static-class-decls 
   *clojure.pprint$execute_format$fn__8154*))

(defconst *package-name-map* 
  ("clojure.pprint$execute_format$fn__8154" . "clojure"))

