; pprint$pprint_simple_default-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:56 CDT 2014.
;

(defconst *clojure.pprint$pprint_simple_default*
 (make-class-def
      '(class "clojure.pprint$pprint_simple_default"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "class")
                        (STRING  "clojure.pprint")
                        (STRING  "pprint-array")
                        (STRING  "*print-suppress-namespaces*")
                        (STRING  "symbol?")
                        (STRING  "print")
                        (STRING  "name")
                        (STRING  "else")
                        (STRING  "pr"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 104)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "class"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.pprint"
                                      (15 (ldc 3))        ;;STRING:: "pprint-array"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var"))))
                                      (26 (ldc 2))        ;;STRING:: "clojure.pprint"
                                      (28 (ldc 4))        ;;STRING:: "*print-suppress-namespaces*"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 5))        ;;STRING:: "symbol?"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 6))        ;;STRING:: "print"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var"))))
                                      (65 (ldc 0))        ;;STRING:: "clojure.core"
                                      (67 (ldc 7))        ;;STRING:: "name"
                                      (69 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (72 (checkcast (class "clojure.lang.Var")))
                                      (75 (putstatic (fieldCP "const__5" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var"))))
                                      (78 (aconst_null))
                                      (79 (ldc 8))        ;;STRING:: "else"
                                      (81 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (84 (checkcast (class "clojure.lang.Keyword")))
                                      (87 (putstatic (fieldCP "const__6" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Keyword"))))
                                      (90 (ldc 0))        ;;STRING:: "clojure.core"
                                      (92 (ldc 9))        ;;STRING:: "pr"
                                      (94 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (97 (checkcast (class "clojure.lang.Var")))
                                      (100 (putstatic (fieldCP "const__7" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var"))))
                                      (103 (return))
                                      (endofcode 104))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 166)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (checkcast (class "java.lang.Class"))) 
                                      (18 (invokevirtual (methodCP "isArray" "java.lang.Class" () boolean))) 
                                      (21 (ifeq 45)) ;;to TAG_0
                                      (24 (getstatic (fieldCP "const__1" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var")))) 
                                      (27 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (30 (checkcast (class "clojure.lang.IFn"))) 
                                      (33 (aload_1)) 
                                      (34 (aconst_null)) 
                                      (35 (astore_1)) 
                                      (36 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (41 (goto 165))  ;;to TAG_1
                                      (44 (pop)) 
                                      (45 (getstatic (fieldCP "const__2" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (48 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (51 (astore_2)) 
                                      (52 (aload_2)) 
                                      (53 (dup)) 
                                      (54 (ifnull 81)) ;;to TAG_2
                                      (57 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (60 (if_acmpeq 82)) ;;to TAG_3
                                      (63 (getstatic (fieldCP "const__3" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var")))) 
                                      (66 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (69 (checkcast (class "clojure.lang.IFn"))) 
                                      (72 (aload_1)) 
                                      (73 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (78 (goto 85)) ;;to TAG_4
                                      (81 (pop)) ;;at TAG_2
                                      (82 (aload_2)) ;;at TAG_3
                                      (83 (aconst_null)) 
                                      (84 (astore_2)) 
                                      (85 (dup)) ;;at TAG_4
                                      (86 (ifnull 129)) ;;to TAG_5
                                      (89 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (92 (if_acmpeq 130)) ;;to TAG_6
                                      (95 (getstatic (fieldCP "const__4" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var")))) 
                                      (98 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (101 (checkcast (class "clojure.lang.IFn"))) 
                                      (104 (getstatic (fieldCP "const__5" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var")))) 
                                      (107 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (110 (checkcast (class "clojure.lang.IFn"))) 
                                      (113 (aload_1)) 
                                      (114 (aconst_null)) 
                                      (115 (astore_1)) 
                                      (116 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (121 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (126 (goto 165))  ;;to TAG_1
                                      (129 (pop)) ;;at TAG_5
                                      (130 (getstatic (fieldCP "const__6" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Keyword")))) ;;at TAG_6
                                      (133 (dup)) 
                                      (134 (ifnull 163)) ;;to TAG_7
                                      (137 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (140 (if_acmpeq 164)) ;;to TAG_8
                                      (143 (getstatic (fieldCP "const__7" "clojure.pprint$pprint_simple_default" (class "clojure.lang.Var")))) 
                                      (146 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (149 (checkcast (class "clojure.lang.IFn"))) 
                                      (152 (aload_1)) 
                                      (153 (aconst_null)) 
                                      (154 (astore_1)) 
                                      (155 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (160 (goto 165))  ;;to TAG_1
                                      (163 (pop)) ;;at TAG_7
                                      (164 (aconst_null)) ;;at TAG_8
                                      (165 (areturn)) ;;at TAG_1
                                      (endofcode 166))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$pprint_simple_default-class-table*
  (make-static-class-decls 
   *clojure.pprint$pprint_simple_default*))

(defconst *package-name-map* 
  ("clojure.pprint$pprint_simple_default" . "clojure"))

