; inspector$loading__4910__auto__-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:49 CDT 2014.
;

(defconst *clojure.inspector$loading__4910__auto__*
 (make-class-def
      '(class "clojure.inspector$loading__4910__auto__"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "refer")
                        (STRING  "java.awt.BorderLayout")
                        (STRING  "java.awt.event.ActionEvent")
                        (STRING  "java.awt.event.ActionListener")
                        (STRING  "javax.swing.tree.TreeModel")
                        (STRING  "javax.swing.table.TableModel")
                        (STRING  "javax.swing.table.AbstractTableModel")
                        (STRING  "javax.swing.JPanel")
                        (STRING  "javax.swing.JTree")
                        (STRING  "javax.swing.JTable")
                        (STRING  "javax.swing.JScrollPane")
                        (STRING  "javax.swing.JFrame")
                        (STRING  "javax.swing.JToolBar")
                        (STRING  "javax.swing.JButton")
                        (STRING  "javax.swing.SwingUtilities"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 26)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "refer"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.inspector$loading__4910__auto__" (class "clojure.lang.Var"))))
                                      (13 (aconst_null))
                                      (14 (ldc 0))        ;;STRING:: "clojure.core"
                                      (16 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (19 (checkcast (class "clojure.lang.AFn")))
                                      (22 (putstatic (fieldCP "const__1" "clojure.inspector$loading__4910__auto__" (class "clojure.lang.AFn"))))
                                      (25 (return))
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters )
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 3) (code_length . 316)
                                   (parsedcode
                                      (0 (iconst_2)) 
                                      (1 (anewarray (class "java.lang.Object"))) 
                                      (4 (dup)) 
                                      (5 (iconst_0)) 
                                      (6 (getstatic (fieldCP "LOADER" "clojure.lang.Compiler" (class "clojure.lang.Var")))) 
                                      (9 (aastore)) 
                                      (10 (dup)) 
                                      (11 (iconst_1)) 
                                      (12 (aload_0)) 
                                      (13 (invokevirtual (methodCP "getClass" "java.lang.Object" () (class "java.lang.Class")))) 
                                      (16 (checkcast (class "java.lang.Class"))) 
                                      (19 (invokevirtual (methodCP "getClassLoader" "java.lang.Class" () (class "java.lang.ClassLoader")))) 
                                      (22 (aastore)) 
                                      (23 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (26 (checkcast (class "clojure.lang.Associative"))) 
                                      (29 (invokestatic (methodCP "pushThreadBindings" "clojure.lang.Var" ((class "clojure.lang.Associative")) void))) 
                                      (32 (getstatic (fieldCP "const__0" "clojure.inspector$loading__4910__auto__" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (35 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (38 (checkcast (class "clojure.lang.IFn"))) 
                                      (41 (getstatic (fieldCP "const__1" "clojure.inspector$loading__4910__auto__" (class "clojure.lang.AFn")))) 
                                      (44 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (49 (pop)) 
                                      (50 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (53 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (56 (checkcast (class "clojure.lang.Namespace"))) 
                                      (59 (ldc 2)) ;;STRING:: "java.awt.BorderLayout"
                                      (61 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (64 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (67 (pop)) 
                                      (68 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (71 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (74 (checkcast (class "clojure.lang.Namespace"))) 
                                      (77 (ldc 3)) ;;STRING:: "java.awt.event.ActionEvent"
                                      (79 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (82 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (85 (pop)) 
                                      (86 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (89 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (92 (checkcast (class "clojure.lang.Namespace"))) 
                                      (95 (ldc 4)) ;;STRING:: "java.awt.event.ActionListener"
                                      (97 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (100 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (103 (pop)) 
                                      (104 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (107 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (110 (checkcast (class "clojure.lang.Namespace"))) 
                                      (113 (ldc 5)) ;;STRING:: "javax.swing.tree.TreeModel"
                                      (115 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (118 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (121 (pop)) 
                                      (122 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (125 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (128 (checkcast (class "clojure.lang.Namespace"))) 
                                      (131 (ldc 6)) ;;STRING:: "javax.swing.table.TableModel"
                                      (133 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (136 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (139 (pop)) 
                                      (140 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (143 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (146 (checkcast (class "clojure.lang.Namespace"))) 
                                      (149 (ldc 7)) ;;STRING:: "javax.swing.table.AbstractTableModel"
                                      (151 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (154 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (157 (pop)) 
                                      (158 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (161 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (164 (checkcast (class "clojure.lang.Namespace"))) 
                                      (167 (ldc 8)) ;;STRING:: "javax.swing.JPanel"
                                      (169 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (172 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (175 (pop)) 
                                      (176 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (179 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (182 (checkcast (class "clojure.lang.Namespace"))) 
                                      (185 (ldc 9)) ;;STRING:: "javax.swing.JTree"
                                      (187 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (190 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (193 (pop)) 
                                      (194 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (197 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (200 (checkcast (class "clojure.lang.Namespace"))) 
                                      (203 (ldc 10)) ;;STRING:: "javax.swing.JTable"
                                      (205 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (208 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (211 (pop)) 
                                      (212 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (215 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (218 (checkcast (class "clojure.lang.Namespace"))) 
                                      (221 (ldc 11)) ;;STRING:: "javax.swing.JScrollPane"
                                      (223 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (226 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (229 (pop)) 
                                      (230 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (233 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (236 (checkcast (class "clojure.lang.Namespace"))) 
                                      (239 (ldc 12)) ;;STRING:: "javax.swing.JFrame"
                                      (241 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (244 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (247 (pop)) 
                                      (248 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (251 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (254 (checkcast (class "clojure.lang.Namespace"))) 
                                      (257 (ldc 13)) ;;STRING:: "javax.swing.JToolBar"
                                      (259 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (262 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (265 (pop)) 
                                      (266 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (269 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (272 (checkcast (class "clojure.lang.Namespace"))) 
                                      (275 (ldc 14)) ;;STRING:: "javax.swing.JButton"
                                      (277 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (280 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (283 (pop)) 
                                      (284 (getstatic (fieldCP "CURRENT_NS" "clojure.lang.RT" (class "clojure.lang.Var")))) 
                                      (287 (invokevirtual (methodCP "deref" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (290 (checkcast (class "clojure.lang.Namespace"))) 
                                      (293 (ldc 15)) ;;STRING:: "javax.swing.SwingUtilities"
                                      (295 (invokestatic (methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class")))) 
                                      (298 (invokevirtual (methodCP "importClass" "clojure.lang.Namespace" ((class "java.lang.Class")) (class "java.lang.Class")))) 
                                      (301 (astore_1)) 
                                      (302 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) ;;at TAG_2
                                      (305 (goto 314)) ;;to TAG_0
                                      (308 (astore_2)) ;;at TAG_3
                                      (309 (invokestatic (methodCP "popThreadBindings" "clojure.lang.Var" () void))) 
                                      (312 (aload_2)) 
                                      (313 (athrow)) 
                                      (314 (aload_1)) ;;at TAG_0
                                      (315 (areturn)) 
                                      (endofcode 316))
                                   (Exceptions 
                                     (handler 32 302  308 (class "java.lang.Throwable")))
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *inspector$loading__4910__auto__-class-table*
  (make-static-class-decls 
   *clojure.inspector$loading__4910__auto__*))

(defconst *package-name-map* 
  ("clojure.inspector$loading__4910__auto__" . "clojure"))

