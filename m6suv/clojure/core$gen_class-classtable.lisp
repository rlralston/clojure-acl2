; core$gen_class-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:44 CDT 2014.
;

(defconst *clojure.core$gen_class*
 (make-class-def
      '(class "clojure.core$gen_class"
            "clojure.lang.RestFn"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "*compile-files*")
                        (STRING  "into1")
                        (STRING  "map")
                        (STRING  "vec")
                        (STRING  "partition")
                        (LONG 2)
                        (STRING  "generate-class")
                        (STRING  "nth"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 115)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "*compile-files*"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$gen_class" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "into1"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$gen_class" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "map"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$gen_class" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "vec"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.core$gen_class" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "partition"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.core$gen_class" (class "clojure.lang.Var"))))
                                      (65 (ldc2_w 6))     ;; LONG:: "2"
                                      (68 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (71 (putstatic (fieldCP "const__5" "clojure.core$gen_class" (class "java.lang.Object"))))
                                      (74 (ldc 0))        ;;STRING:: "clojure.core"
                                      (76 (ldc 7))        ;;STRING:: "generate-class"
                                      (78 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (81 (checkcast (class "clojure.lang.Var")))
                                      (84 (putstatic (fieldCP "const__6" "clojure.core$gen_class" (class "clojure.lang.Var"))))
                                      (87 (ldc 0))        ;;STRING:: "clojure.core"
                                      (89 (ldc 8))        ;;STRING:: "nth"
                                      (91 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (94 (checkcast (class "clojure.lang.Var")))
                                      (97 (putstatic (fieldCP "const__7" "clojure.core$gen_class" (class "clojure.lang.Var"))))
                                      (100 (lconst_0))
                                      (101 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (104 (putstatic (fieldCP "const__8" "clojure.core$gen_class" (class "java.lang.Object"))))
                                      (107 (lconst_1))
                                      (108 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (111 (putstatic (fieldCP "const__9" "clojure.core$gen_class" (class "java.lang.Object"))))
                                      (114 (return))
                                      (endofcode 115))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.RestFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doInvoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 8) (code_length . 149)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$gen_class" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "get" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (dup)) 
                                      (7 (ifnull 146)) ;;to TAG_0
                                      (10 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (13 (if_acmpeq 147)) ;;to TAG_1
                                      (16 (getstatic (fieldCP "const__1" "clojure.core$gen_class" (class "clojure.lang.Var")))) 
                                      (19 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (22 (checkcast (class "clojure.lang.IFn"))) 
                                      (25 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentArrayMap" (class "clojure.lang.PersistentArrayMap")))) 
                                      (28 (getstatic (fieldCP "const__2" "clojure.core$gen_class" (class "clojure.lang.Var")))) 
                                      (31 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (34 (checkcast (class "clojure.lang.IFn"))) 
                                      (37 (getstatic (fieldCP "const__3" "clojure.core$gen_class" (class "clojure.lang.Var")))) 
                                      (40 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (43 (getstatic (fieldCP "const__4" "clojure.core$gen_class" (class "clojure.lang.Var")))) 
                                      (46 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (49 (checkcast (class "clojure.lang.IFn"))) 
                                      (52 (getstatic (fieldCP "const__5" "clojure.core$gen_class" (class "java.lang.Object")))) 
                                      (55 (aload_3)) 
                                      (56 (aconst_null)) 
                                      (57 (astore_3)) 
                                      (58 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (63 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (68 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (73 (astore 4)) 
                                      (75 (getstatic (fieldCP "const__6" "clojure.core$gen_class" (class "clojure.lang.Var")))) 
                                      (78 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (81 (checkcast (class "clojure.lang.IFn"))) 
                                      (84 (aload 4)) 
                                      (86 (aconst_null)) 
                                      (87 (astore 4)) 
                                      (89 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (94 (astore 5)) 
                                      (96 (aload 5)) 
                                      (98 (lconst_0)) 
                                      (99 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (102 (aconst_null)) 
                                      (103 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (106 (astore 6)) 
                                      (108 (aload 5)) 
                                      (110 (aconst_null)) 
                                      (111 (astore 5)) 
                                      (113 (lconst_1)) 
                                      (114 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (117 (aconst_null)) 
                                      (118 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (121 (astore 7)) 
                                      (123 (aload 6)) 
                                      (125 (aconst_null)) 
                                      (126 (astore 6)) 
                                      (128 (checkcast (class "java.lang.String"))) 
                                      (131 (aload 7)) 
                                      (133 (aconst_null)) 
                                      (134 (astore 7)) 
                                      (136 (checkcast (array byte))) 
                                      (139 (invokestatic (methodCP "writeClassFile" "clojure.lang.Compiler" ((class "java.lang.String") (array byte)) void))) 
                                      (142 (aconst_null)) 
                                      (143 (goto 148))  ;;to TAG_2
                                      (146 (pop)) ;;at TAG_0
                                      (147 (aconst_null)) ;;at TAG_1
                                      (148 (areturn)) ;;at TAG_2
                                      (endofcode 149))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getRequiredArity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_2))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$gen_class-class-table*
  (make-static-class-decls 
   *clojure.core$gen_class*))

(defconst *package-name-map* 
  ("clojure.core$gen_class" . "clojure"))

