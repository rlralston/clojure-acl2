; template$apply_template-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:58 CDT 2014.
;

(defconst *clojure.template$apply_template*
 (make-class-def
      '(class "clojure.template$apply_template"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "vector?")
                        (STRING  "str")
                        (STRING  "pr-str")
                        (STRING  "argv")
                        (STRING  "line")
                        (STRING  "column")
                        (STRING  "every?")
                        (STRING  "symbol?")
                        (STRING  "clojure.walk")
                        (STRING  "prewalk-replace")
                        (STRING  "zipmap")
                        (STRING  "Assert failed: "))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 6) (max_locals . 0) (code_length . 267)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "vector?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.template$apply_template" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "str"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.template$apply_template" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "pr-str"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.template$apply_template" (class "clojure.lang.Var"))))
                                      (39 (iconst_2))
                                      (40 (anewarray (class "java.lang.Object")))
                                      (43 (dup))
                                      (44 (iconst_0))
                                      (45 (aconst_null))
                                      (46 (ldc 1))        ;;STRING:: "vector?"
                                      (48 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (51 (aastore))
                                      (52 (dup))
                                      (53 (iconst_1))
                                      (54 (aconst_null))
                                      (55 (ldc 4))        ;;STRING:: "argv"
                                      (57 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (60 (aastore))
                                      (61 (invokestatic
					(methodCP "asList" "java.util.Arrays" ((array (class "java.lang.Object"))) (class "java.util.List"))))
                                      (64 (invokestatic
					(methodCP "create" "clojure.lang.PersistentList" ((class "java.util.List")) (class "clojure.lang.IPersistentList"))))
                                      (67 (checkcast (class "clojure.lang.IObj")))
                                      (70 (iconst_4))
                                      (71 (anewarray (class "java.lang.Object")))
                                      (74 (dup))
                                      (75 (iconst_0))
                                      (76 (aconst_null))
                                      (77 (ldc 5))        ;;STRING:: "line"
                                      (79 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (82 (aastore))
                                      (83 (dup))
                                      (84 (iconst_1))
                                      (85 (bipush 41))
                                      (87 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (90 (aastore))
                                      (91 (dup))
                                      (92 (iconst_2))
                                      (93 (aconst_null))
                                      (94 (ldc 6))        ;;STRING:: "column"
                                      (96 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (99 (aastore))
                                      (100 (dup))
                                      (101 (iconst_3))
                                      (102 (bipush 11))
                                      (104 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (107 (aastore))
                                      (108 (invokestatic
					(methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (111 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (114 (invokeinterface
					(methodCP "withMeta" "clojure.lang.IObj" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")) 2))
                                      (119 (putstatic (fieldCP "const__3" "clojure.template$apply_template" (class "java.lang.Object"))))
                                      (122 (ldc 0))       ;;STRING:: "clojure.core"
                                      (124 (ldc 7))       ;;STRING:: "every?"
                                      (126 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (129 (checkcast (class "clojure.lang.Var")))
                                      (132 (putstatic (fieldCP "const__4" "clojure.template$apply_template" (class "clojure.lang.Var"))))
                                      (135 (ldc 0))       ;;STRING:: "clojure.core"
                                      (137 (ldc 8))       ;;STRING:: "symbol?"
                                      (139 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (142 (checkcast (class "clojure.lang.Var")))
                                      (145 (putstatic (fieldCP "const__5" "clojure.template$apply_template" (class "clojure.lang.Var"))))
                                      (148 (iconst_3))
                                      (149 (anewarray (class "java.lang.Object")))
                                      (152 (dup))
                                      (153 (iconst_0))
                                      (154 (aconst_null))
                                      (155 (ldc 7))       ;;STRING:: "every?"
                                      (157 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (160 (aastore))
                                      (161 (dup))
                                      (162 (iconst_1))
                                      (163 (aconst_null))
                                      (164 (ldc 8))       ;;STRING:: "symbol?"
                                      (166 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (169 (aastore))
                                      (170 (dup))
                                      (171 (iconst_2))
                                      (172 (aconst_null))
                                      (173 (ldc 4))       ;;STRING:: "argv"
                                      (175 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (178 (aastore))
                                      (179 (invokestatic
					(methodCP "asList" "java.util.Arrays" ((array (class "java.lang.Object"))) (class "java.util.List"))))
                                      (182 (invokestatic
					(methodCP "create" "clojure.lang.PersistentList" ((class "java.util.List")) (class "clojure.lang.IPersistentList"))))
                                      (185 (checkcast (class "clojure.lang.IObj")))
                                      (188 (iconst_4))
                                      (189 (anewarray (class "java.lang.Object")))
                                      (192 (dup))
                                      (193 (iconst_0))
                                      (194 (aconst_null))
                                      (195 (ldc 5))       ;;STRING:: "line"
                                      (197 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (200 (aastore))
                                      (201 (dup))
                                      (202 (iconst_1))
                                      (203 (bipush 42))
                                      (205 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (208 (aastore))
                                      (209 (dup))
                                      (210 (iconst_2))
                                      (211 (aconst_null))
                                      (212 (ldc 6))       ;;STRING:: "column"
                                      (214 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (217 (aastore))
                                      (218 (dup))
                                      (219 (iconst_3))
                                      (220 (bipush 11))
                                      (222 (invokestatic
					(methodCP "valueOf" "java.lang.Integer" (int) (class "java.lang.Integer"))))
                                      (225 (aastore))
                                      (226 (invokestatic
					(methodCP "map" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap"))))
                                      (229 (checkcast (class "clojure.lang.IPersistentMap")))
                                      (232 (invokeinterface
					(methodCP "withMeta" "clojure.lang.IObj" ((class "clojure.lang.IPersistentMap")) (class "clojure.lang.IObj")) 2))
                                      (237 (putstatic (fieldCP "const__6" "clojure.template$apply_template" (class "java.lang.Object"))))
                                      (240 (ldc 9))       ;;STRING:: "clojure.walk"
                                      (242 (ldc 10))      ;;STRING:: "prewalk-replace"
                                      (244 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (247 (checkcast (class "clojure.lang.Var")))
                                      (250 (putstatic (fieldCP "const__7" "clojure.template$apply_template" (class "clojure.lang.Var"))))
                                      (253 (ldc 0))       ;;STRING:: "clojure.core"
                                      (255 (ldc 11))      ;;STRING:: "zipmap"
                                      (257 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (260 (checkcast (class "clojure.lang.Var")))
                                      (263 (putstatic (fieldCP "const__8" "clojure.template$apply_template" (class "clojure.lang.Var"))))
                                      (266 (return))
                                      (endofcode 267))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 4) (code_length . 194)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.template$apply_template" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (dup)) 
                                      (16 (ifnull 30)) ;;to TAG_0
                                      (19 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (22 (if_acmpeq 31)) ;;to TAG_1
                                      (25 (aconst_null)) 
                                      (26 (pop)) 
                                      (27 (goto 75))  ;;to TAG_2
                                      (30 (pop)) ;;at TAG_0
                                      (31 (new (class "java.lang.AssertionError"))) ;;at TAG_1
                                      (34 (dup)) 
                                      (35 (getstatic (fieldCP "const__1" "clojure.template$apply_template" (class "clojure.lang.Var")))) 
                                      (38 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (41 (checkcast (class "clojure.lang.IFn"))) 
                                      (44 (ldc 12)) ;;STRING:: "Assert failed: "
                                      (46 (getstatic (fieldCP "const__2" "clojure.template$apply_template" (class "clojure.lang.Var")))) 
                                      (49 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (52 (checkcast (class "clojure.lang.IFn"))) 
                                      (55 (getstatic (fieldCP "const__3" "clojure.template$apply_template" (class "java.lang.Object")))) 
                                      (58 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (63 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (68 (invokespecial (methodCP "<init>" "java.lang.AssertionError" ((class "java.lang.Object")) void))) 
                                      (71 (checkcast (class "java.lang.Throwable"))) 
                                      (74 (athrow)) 
                                      (75 (getstatic (fieldCP "const__4" "clojure.template$apply_template" (class "clojure.lang.Var")))) ;;at TAG_2
                                      (78 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (81 (checkcast (class "clojure.lang.IFn"))) 
                                      (84 (getstatic (fieldCP "const__5" "clojure.template$apply_template" (class "clojure.lang.Var")))) 
                                      (87 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (90 (aload_1)) 
                                      (91 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (96 (dup)) 
                                      (97 (ifnull 111)) ;;to TAG_3
                                      (100 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (103 (if_acmpeq 112)) ;;to TAG_4
                                      (106 (aconst_null)) 
                                      (107 (pop)) 
                                      (108 (goto 156)) ;;to TAG_5
                                      (111 (pop)) ;;at TAG_3
                                      (112 (new (class "java.lang.AssertionError"))) ;;at TAG_4
                                      (115 (dup)) 
                                      (116 (getstatic (fieldCP "const__1" "clojure.template$apply_template" (class "clojure.lang.Var")))) 
                                      (119 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (122 (checkcast (class "clojure.lang.IFn"))) 
                                      (125 (ldc 12)) ;;STRING:: "Assert failed: "
                                      (127 (getstatic (fieldCP "const__2" "clojure.template$apply_template" (class "clojure.lang.Var")))) 
                                      (130 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (133 (checkcast (class "clojure.lang.IFn"))) 
                                      (136 (getstatic (fieldCP "const__6" "clojure.template$apply_template" (class "java.lang.Object")))) 
                                      (139 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (144 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (149 (invokespecial (methodCP "<init>" "java.lang.AssertionError" ((class "java.lang.Object")) void))) 
                                      (152 (checkcast (class "java.lang.Throwable"))) 
                                      (155 (athrow)) 
                                      (156 (getstatic (fieldCP "const__7" "clojure.template$apply_template" (class "clojure.lang.Var")))) ;;at TAG_5
                                      (159 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (162 (checkcast (class "clojure.lang.IFn"))) 
                                      (165 (getstatic (fieldCP "const__8" "clojure.template$apply_template" (class "clojure.lang.Var")))) 
                                      (168 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (171 (checkcast (class "clojure.lang.IFn"))) 
                                      (174 (aload_1)) 
                                      (175 (aconst_null)) 
                                      (176 (astore_1)) 
                                      (177 (aload_3)) 
                                      (178 (aconst_null)) 
                                      (179 (astore_3)) 
                                      (180 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (185 (aload_2)) 
                                      (186 (aconst_null)) 
                                      (187 (astore_2)) 
                                      (188 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (193 (areturn)) 
                                      (endofcode 194))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *template$apply_template-class-table*
  (make-static-class-decls 
   *clojure.template$apply_template*))

(defconst *package-name-map* 
  ("clojure.template$apply_template" . "clojure"))

