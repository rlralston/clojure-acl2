; pprint$single_defn-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:57 CDT 2014.
;

(defconst *clojure.pprint$single_defn*
 (make-class-def
      '(class "clojure.pprint$single_defn"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "seq")
                        (STRING  "string?")
                        (STRING  "clojure.pprint")
                        (STRING  "cached-compile")
                        (STRING  " ~_")
                        (STRING  " ~@_")
                        (STRING  "~{~w~^ ~_~}"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 40)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "seq"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$single_defn" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "string?"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$single_defn" (class "clojure.lang.Var"))))
                                      (26 (ldc 3))        ;;STRING:: "clojure.pprint"
                                      (28 (ldc 4))        ;;STRING:: "cached-compile"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.pprint$single_defn" (class "clojure.lang.Var"))))
                                      (39 (return))
                                      (endofcode 40))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 5) (code_length . 266)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$single_defn" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (dup)) 
                                      (16 (ifnull 263)) ;;to TAG_0
                                      (19 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (22 (if_acmpeq 264))  ;;to TAG_1
                                      (25 (aload_2)) 
                                      (26 (aconst_null)) 
                                      (27 (astore_2)) 
                                      (28 (dup)) 
                                      (29 (ifnull 113)) ;;to TAG_2
                                      (32 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (35 (if_acmpeq 114)) ;;to TAG_3
                                      (38 (ldc 5)) ;;STRING:: " ~_"
                                      (40 (astore_3)) 
                                      (41 (getstatic (fieldCP "const__1" "clojure.pprint$single_defn" (class "clojure.lang.Var")))) 
                                      (44 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (47 (checkcast (class "clojure.lang.IFn"))) 
                                      (50 (aload_3)) 
                                      (51 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (56 (dup)) 
                                      (57 (ifnull 83)) ;;to TAG_4
                                      (60 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (63 (if_acmpeq 84)) ;;to TAG_5
                                      (66 (getstatic (fieldCP "const__2" "clojure.pprint$single_defn" (class "clojure.lang.Var")))) 
                                      (69 (checkcast (class "clojure.lang.IFn"))) 
                                      (72 (aload_3)) 
                                      (73 (aconst_null)) 
                                      (74 (astore_3)) 
                                      (75 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (80 (goto 87)) ;;to TAG_6
                                      (83 (pop)) ;;at TAG_4
                                      (84 (aload_3)) ;;at TAG_5
                                      (85 (aconst_null)) 
                                      (86 (astore_3)) 
                                      (87 (astore 4)) ;;at TAG_6
                                      (89 (new (class "clojure.pprint$single_defn$fn__8311"))) 
                                      (92 (dup)) 
                                      (93 (aload 4)) 
                                      (95 (aconst_null)) 
                                      (96 (astore 4)) 
                                      (98 (invokespecial (methodCP "<init>" "clojure.pprint$single_defn$fn__8311" ((class "java.lang.Object")) void))) 
                                      (101 (checkcast (class "clojure.lang.IFn"))) 
                                      (104 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (109 (pop)) 
                                      (110 (goto 186)) ;;to TAG_7
                                      (113 (pop)) ;;at TAG_2
                                      (114 (ldc 6)) ;;at TAG_3;;STRING:: " ~@_"
                                      (116 (astore_3)) 
                                      (117 (getstatic (fieldCP "const__1" "clojure.pprint$single_defn" (class "clojure.lang.Var")))) 
                                      (120 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (123 (checkcast (class "clojure.lang.IFn"))) 
                                      (126 (aload_3)) 
                                      (127 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (132 (dup)) 
                                      (133 (ifnull 159)) ;;to TAG_8
                                      (136 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (139 (if_acmpeq 160)) ;;to TAG_9
                                      (142 (getstatic (fieldCP "const__2" "clojure.pprint$single_defn" (class "clojure.lang.Var")))) 
                                      (145 (checkcast (class "clojure.lang.IFn"))) 
                                      (148 (aload_3)) 
                                      (149 (aconst_null)) 
                                      (150 (astore_3)) 
                                      (151 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (156 (goto 163)) ;;to TAG_10
                                      (159 (pop)) ;;at TAG_8
                                      (160 (aload_3)) ;;at TAG_9
                                      (161 (aconst_null)) 
                                      (162 (astore_3)) 
                                      (163 (astore 4)) ;;at TAG_10
                                      (165 (new (class "clojure.pprint$single_defn$fn__8314"))) 
                                      (168 (dup)) 
                                      (169 (aload 4)) 
                                      (171 (aconst_null)) 
                                      (172 (astore 4)) 
                                      (174 (invokespecial (methodCP "<init>" "clojure.pprint$single_defn$fn__8314" ((class "java.lang.Object")) void))) 
                                      (177 (checkcast (class "clojure.lang.IFn"))) 
                                      (180 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" () (class "java.lang.Object")) 1)) 
                                      (185 (pop)) 
                                      (186 (ldc 7)) ;;at TAG_7;;STRING:: "~{~w~^ ~_~}"
                                      (188 (astore_3)) 
                                      (189 (getstatic (fieldCP "const__1" "clojure.pprint$single_defn" (class "clojure.lang.Var")))) 
                                      (192 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (195 (checkcast (class "clojure.lang.IFn"))) 
                                      (198 (aload_3)) 
                                      (199 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (204 (dup)) 
                                      (205 (ifnull 231)) ;;to TAG_11
                                      (208 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (211 (if_acmpeq 232)) ;;to TAG_12
                                      (214 (getstatic (fieldCP "const__2" "clojure.pprint$single_defn" (class "clojure.lang.Var")))) 
                                      (217 (checkcast (class "clojure.lang.IFn"))) 
                                      (220 (aload_3)) 
                                      (221 (aconst_null)) 
                                      (222 (astore_3)) 
                                      (223 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (228 (goto 235)) ;;to TAG_13
                                      (231 (pop)) ;;at TAG_11
                                      (232 (aload_3)) ;;at TAG_12
                                      (233 (aconst_null)) 
                                      (234 (astore_3)) 
                                      (235 (astore 4)) ;;at TAG_13
                                      (237 (new (class "clojure.pprint$single_defn$fn__8317"))) 
                                      (240 (dup)) 
                                      (241 (aload 4)) 
                                      (243 (aconst_null)) 
                                      (244 (astore 4)) 
                                      (246 (invokespecial (methodCP "<init>" "clojure.pprint$single_defn$fn__8317" ((class "java.lang.Object")) void))) 
                                      (249 (checkcast (class "clojure.lang.IFn"))) 
                                      (252 (aload_1)) 
                                      (253 (aconst_null)) 
                                      (254 (astore_1)) 
                                      (255 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (260 (goto 265)) ;;to TAG_14
                                      (263 (pop)) ;;at TAG_0
                                      (264 (aconst_null)) ;;at TAG_1
                                      (265 (areturn)) ;;at TAG_14
                                      (endofcode 266))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$single_defn-class-table*
  (make-static-class-decls 
   *clojure.pprint$single_defn*))

(defconst *package-name-map* 
  ("clojure.pprint$single_defn" . "clojure"))

