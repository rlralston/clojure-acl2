; main-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:53 CDT 2014.
;

(defconst *clojure.main*
 (make-class-def
      '(class "clojure.main"
            "java.lang.Object"
            (constant_pool
                        (STRING  "clojure.main")
                        (STRING  "clojure.core")
                        (STRING  "require")
                        (STRING  "legacy-repl")
                        (STRING  "legacy-script")
                        (STRING  "main"))
            (fields
                        (field "CLOJURE_MAIN" (class "clojure.lang.Symbol") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "REQUIRE" (class "clojure.lang.Var") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "LEGACY_REPL" (class "clojure.lang.Var") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "LEGACY_SCRIPT" (class "clojure.lang.Var") (accessflags  *class*  *final*  *private*  *static* ) -1)
                        (field "MAIN" (class "clojure.lang.Var") (accessflags  *class*  *final*  *private*  *static* ) -1))
            (methods
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "java.lang.Object" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "legacy_repl"
                              (parameters (array (class "java.lang.String")))
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "REQUIRE" "clojure.main" (class "clojure.lang.Var"))))
                                      (3 (getstatic (fieldCP "CLOJURE_MAIN" "clojure.main" (class "clojure.lang.Symbol"))))
                                      (6 (invokevirtual
					(methodCP "invoke" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object"))))
                                      (9 (pop))
                                      (10 (getstatic (fieldCP "LEGACY_REPL" "clojure.main" (class "clojure.lang.Var"))))
                                      (13 (aload_0))
                                      (14 (invokestatic
					(methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq"))))
                                      (17 (invokevirtual
					(methodCP "invoke" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object"))))
                                      (20 (pop))
                                      (21 (return))
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "legacy_script"
                              (parameters (array (class "java.lang.String")))
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "REQUIRE" "clojure.main" (class "clojure.lang.Var"))))
                                      (3 (getstatic (fieldCP "CLOJURE_MAIN" "clojure.main" (class "clojure.lang.Symbol"))))
                                      (6 (invokevirtual
					(methodCP "invoke" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object"))))
                                      (9 (pop))
                                      (10 (getstatic (fieldCP "LEGACY_SCRIPT" "clojure.main" (class "clojure.lang.Var"))))
                                      (13 (aload_0))
                                      (14 (invokestatic
					(methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq"))))
                                      (17 (invokevirtual
					(methodCP "invoke" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object"))))
                                      (20 (pop))
                                      (21 (return))
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "main"
                              (parameters (array (class "java.lang.String")))
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 1) (code_length . 22)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "REQUIRE" "clojure.main" (class "clojure.lang.Var"))))
                                      (3 (getstatic (fieldCP "CLOJURE_MAIN" "clojure.main" (class "clojure.lang.Symbol"))))
                                      (6 (invokevirtual
					(methodCP "invoke" "clojure.lang.Var" ((class "java.lang.Object")) (class "java.lang.Object"))))
                                      (9 (pop))
                                      (10 (getstatic (fieldCP "MAIN" "clojure.main" (class "clojure.lang.Var"))))
                                      (13 (aload_0))
                                      (14 (invokestatic
					(methodCP "seq" "clojure.lang.RT" ((class "java.lang.Object")) (class "clojure.lang.ISeq"))))
                                      (17 (invokevirtual
					(methodCP "applyTo" "clojure.lang.Var" ((class "clojure.lang.ISeq")) (class "java.lang.Object"))))
                                      (20 (pop))
                                      (21 (return))
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 49)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.main"
                                      (2 (invokestatic
					(methodCP "intern" "clojure.lang.Symbol" ((class "java.lang.String")) (class "clojure.lang.Symbol"))))
                                      (5 (putstatic (fieldCP "CLOJURE_MAIN" "clojure.main" (class "clojure.lang.Symbol"))))
                                      (8 (ldc 1))         ;;STRING:: "clojure.core"
                                      (10 (ldc 2))        ;;STRING:: "require"
                                      (12 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (15 (putstatic (fieldCP "REQUIRE" "clojure.main" (class "clojure.lang.Var"))))
                                      (18 (ldc 0))        ;;STRING:: "clojure.main"
                                      (20 (ldc 3))        ;;STRING:: "legacy-repl"
                                      (22 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (25 (putstatic (fieldCP "LEGACY_REPL" "clojure.main" (class "clojure.lang.Var"))))
                                      (28 (ldc 0))        ;;STRING:: "clojure.main"
                                      (30 (ldc 4))        ;;STRING:: "legacy-script"
                                      (32 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (35 (putstatic (fieldCP "LEGACY_SCRIPT" "clojure.main" (class "clojure.lang.Var"))))
                                      (38 (ldc 0))        ;;STRING:: "clojure.main"
                                      (40 (ldc 5))        ;;STRING:: "main"
                                      (42 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (45 (putstatic (fieldCP "MAIN" "clojure.main" (class "clojure.lang.Var"))))
                                      (48 (return))
                                      (endofcode 49))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")))))


(defconst *main-class-table*
  (make-static-class-decls 
   *clojure.main*))

(defconst *package-name-map* 
  ("clojure.main" . "clojure"))

