; pprint$add_english_scales-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:55 CDT 2014.
;

(defconst *clojure.pprint$add_english_scales*
 (make-class-def
      '(class "clojure.pprint$add_english_scales"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "count")
                        (STRING  "dec")
                        (STRING  "first")
                        (STRING  "next")
                        (STRING  "nil?")
                        (STRING  "str")
                        (STRING  "apply")
                        (STRING  "interpose")
                        (STRING  "not")
                        (STRING  "empty?")
                        (STRING  "pos?")
                        (STRING  "+")
                        (STRING  "nth")
                        (STRING  "clojure.pprint")
                        (STRING  "english-scale-numbers")
                        (STRING  "conj")
                        (STRING  ", ")
                        (STRING  " "))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__11" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__12" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__13" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__14" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 196)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "count"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "dec"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "first"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "next"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "nil?"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (65 (ldc 0))        ;;STRING:: "clojure.core"
                                      (67 (ldc 6))        ;;STRING:: "str"
                                      (69 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (72 (checkcast (class "clojure.lang.Var")))
                                      (75 (putstatic (fieldCP "const__5" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (78 (ldc 0))        ;;STRING:: "clojure.core"
                                      (80 (ldc 7))        ;;STRING:: "apply"
                                      (82 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (85 (checkcast (class "clojure.lang.Var")))
                                      (88 (putstatic (fieldCP "const__6" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (91 (ldc 0))        ;;STRING:: "clojure.core"
                                      (93 (ldc 8))        ;;STRING:: "interpose"
                                      (95 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (98 (checkcast (class "clojure.lang.Var")))
                                      (101 (putstatic (fieldCP "const__7" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (104 (ldc 0))       ;;STRING:: "clojure.core"
                                      (106 (ldc 9))       ;;STRING:: "not"
                                      (108 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (111 (checkcast (class "clojure.lang.Var")))
                                      (114 (putstatic (fieldCP "const__8" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (117 (ldc 0))       ;;STRING:: "clojure.core"
                                      (119 (ldc 10))      ;;STRING:: "empty?"
                                      (121 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (124 (checkcast (class "clojure.lang.Var")))
                                      (127 (putstatic (fieldCP "const__9" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (130 (ldc 0))       ;;STRING:: "clojure.core"
                                      (132 (ldc 11))      ;;STRING:: "pos?"
                                      (134 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (137 (checkcast (class "clojure.lang.Var")))
                                      (140 (putstatic (fieldCP "const__10" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (143 (ldc 0))       ;;STRING:: "clojure.core"
                                      (145 (ldc 12))      ;;STRING:: "+"
                                      (147 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (150 (checkcast (class "clojure.lang.Var")))
                                      (153 (putstatic (fieldCP "const__11" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (156 (ldc 0))       ;;STRING:: "clojure.core"
                                      (158 (ldc 13))      ;;STRING:: "nth"
                                      (160 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (163 (checkcast (class "clojure.lang.Var")))
                                      (166 (putstatic (fieldCP "const__12" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (169 (ldc 14))      ;;STRING:: "clojure.pprint"
                                      (171 (ldc 15))      ;;STRING:: "english-scale-numbers"
                                      (173 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (176 (checkcast (class "clojure.lang.Var")))
                                      (179 (putstatic (fieldCP "const__13" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (182 (ldc 0))       ;;STRING:: "clojure.core"
                                      (184 (ldc 16))      ;;STRING:: "conj"
                                      (186 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (189 (checkcast (class "clojure.lang.Var")))
                                      (192 (putstatic (fieldCP "const__14" "clojure.pprint$add_english_scales" (class "clojure.lang.Var"))))
                                      (195 (return))
                                      (endofcode 196))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 10) (max_locals . 10) (code_length . 482)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (4 (istore_3)) 
                                      (5 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) 
                                      (8 (astore 4)) 
                                      (10 (iload_3)) 
                                      (11 (i2l)) 
                                      (12 (invokestatic (methodCP "dec" "clojure.lang.Numbers" (long) long))) 
                                      (15 (lstore 5)) 
                                      (17 (getstatic (fieldCP "const__2" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (20 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (23 (checkcast (class "clojure.lang.IFn"))) 
                                      (26 (aload_1)) 
                                      (27 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (32 (astore 7)) 
                                      (34 (getstatic (fieldCP "const__3" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (37 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (40 (checkcast (class "clojure.lang.IFn"))) 
                                      (43 (aload_1)) 
                                      (44 (aconst_null)) 
                                      (45 (astore_1)) 
                                      (46 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (51 (astore 8)) 
                                      (53 (aload 8)) ;;at TAG_19
                                      (55 (aconst_null)) 
                                      (56 (invokestatic (methodCP "identical" "clojure.lang.Util" ((class "java.lang.Object") (class "java.lang.Object")) boolean))) 
                                      (59 (ifeq 346)) ;;to TAG_0
                                      (62 (getstatic (fieldCP "const__5" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (65 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (68 (checkcast (class "clojure.lang.IFn"))) 
                                      (71 (getstatic (fieldCP "const__6" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (74 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (77 (checkcast (class "clojure.lang.IFn"))) 
                                      (80 (getstatic (fieldCP "const__5" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (83 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (86 (getstatic (fieldCP "const__7" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (89 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (92 (checkcast (class "clojure.lang.IFn"))) 
                                      (95 (ldc 17)) ;;STRING:: ", "
                                      (97 (aload 4)) 
                                      (99 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (104 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (109 (getstatic (fieldCP "const__8" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (112 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (115 (checkcast (class "clojure.lang.IFn"))) 
                                      (118 (getstatic (fieldCP "const__9" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (121 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (124 (checkcast (class "clojure.lang.IFn"))) 
                                      (127 (aload 7)) 
                                      (129 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (134 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (139 (astore 9)) 
                                      (141 (aload 9)) 
                                      (143 (dup)) 
                                      (144 (ifnull 186)) ;;to TAG_1
                                      (147 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (150 (if_acmpeq 187)) ;;to TAG_2
                                      (153 (getstatic (fieldCP "const__8" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (156 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (159 (checkcast (class "clojure.lang.IFn"))) 
                                      (162 (getstatic (fieldCP "const__9" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (165 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (168 (checkcast (class "clojure.lang.IFn"))) 
                                      (171 (aload 4)) 
                                      (173 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (178 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (183 (goto 192)) ;;to TAG_3
                                      (186 (pop)) ;;at TAG_1
                                      (187 (aload 9)) ;;at TAG_2
                                      (189 (aconst_null)) 
                                      (190 (astore 9)) 
                                      (192 (dup)) ;;at TAG_3
                                      (193 (ifnull 207)) ;;to TAG_4
                                      (196 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (199 (if_acmpeq 208)) ;;to TAG_5
                                      (202 (ldc 17)) ;;STRING:: ", "
                                      (204 (goto 209)) ;;to TAG_6
                                      (207 (pop)) ;;at TAG_4
                                      (208 (aconst_null)) ;;at TAG_5
                                      (209 (aload 7)) ;;at TAG_6
                                      (211 (getstatic (fieldCP "const__8" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (214 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (217 (checkcast (class "clojure.lang.IFn"))) 
                                      (220 (getstatic (fieldCP "const__9" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (223 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (226 (checkcast (class "clojure.lang.IFn"))) 
                                      (229 (aload 7)) 
                                      (231 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (236 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (241 (astore 9)) 
                                      (243 (aload 9)) 
                                      (245 (dup)) 
                                      (246 (ifnull 279)) ;;to TAG_7
                                      (249 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (252 (if_acmpeq 280)) ;;to TAG_8
                                      (255 (lload 5)) 
                                      (257 (aload_2)) 
                                      (258 (invokestatic (methodCP "add" "clojure.lang.Numbers" (long (class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (261 (invokestatic (methodCP "isPos" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (264 (ifeq 273)) ;;to TAG_9
                                      (267 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (270 (goto 276)) ;;to TAG_10
                                      (273 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) ;;at TAG_9
                                      (276 (goto 285)) ;;to TAG_11;;at TAG_10
                                      (279 (pop)) ;;at TAG_7
                                      (280 (aload 9)) ;;at TAG_8
                                      (282 (aconst_null)) 
                                      (283 (astore 9)) 
                                      (285 (dup)) ;;at TAG_11
                                      (286 (ifnull 335)) ;;to TAG_12
                                      (289 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (292 (if_acmpeq 336))  ;;to TAG_13
                                      (295 (getstatic (fieldCP "const__5" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (298 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (301 (checkcast (class "clojure.lang.IFn"))) 
                                      (304 (ldc 18)) ;;STRING:: " "
                                      (306 (getstatic (fieldCP "const__13" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (309 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (312 (lload 5)) 
                                      (314 (aload_2)) 
                                      (315 (invokestatic (methodCP "add" "clojure.lang.Numbers" (long (class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (318 (checkcast (class "java.lang.Number"))) 
                                      (321 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (324 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (327 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (332 (goto 337)) ;;to TAG_14
                                      (335 (pop)) ;;at TAG_12
                                      (336 (aconst_null)) ;;at TAG_13
                                      (337 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) ;;at TAG_14
                                      (342 (goto 481)) ;;to TAG_15
                                      (345 (pop)) 
                                      (346 (getstatic (fieldCP "const__9" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) ;;at TAG_0
                                      (349 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (352 (checkcast (class "clojure.lang.IFn"))) 
                                      (355 (aload 7)) 
                                      (357 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (362 (dup)) 
                                      (363 (ifnull 377)) ;;to TAG_16
                                      (366 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (369 (if_acmpeq 378)) ;;to TAG_17
                                      (372 (aload 4)) 
                                      (374 (goto 433)) ;;to TAG_18
                                      (377 (pop)) ;;at TAG_16
                                      (378 (getstatic (fieldCP "const__14" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) ;;at TAG_17
                                      (381 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (384 (checkcast (class "clojure.lang.IFn"))) 
                                      (387 (aload 4)) 
                                      (389 (getstatic (fieldCP "const__5" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (392 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (395 (checkcast (class "clojure.lang.IFn"))) 
                                      (398 (aload 7)) 
                                      (400 (ldc 18)) ;;STRING:: " "
                                      (402 (getstatic (fieldCP "const__13" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (405 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (408 (lload 5)) 
                                      (410 (aload_2)) 
                                      (411 (invokestatic (methodCP "add" "clojure.lang.Numbers" (long (class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (414 (checkcast (class "java.lang.Number"))) 
                                      (417 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (420 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int) (class "java.lang.Object")))) 
                                      (423 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (428 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (433 (lload 5)) ;;at TAG_18
                                      (435 (invokestatic (methodCP "dec" "clojure.lang.Numbers" (long) long))) 
                                      (438 (getstatic (fieldCP "const__2" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (441 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (444 (checkcast (class "clojure.lang.IFn"))) 
                                      (447 (aload 8)) 
                                      (449 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (454 (getstatic (fieldCP "const__3" "clojure.pprint$add_english_scales" (class "clojure.lang.Var")))) 
                                      (457 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (460 (checkcast (class "clojure.lang.IFn"))) 
                                      (463 (aload 8)) 
                                      (465 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (470 (astore 8)) 
                                      (472 (astore 7)) 
                                      (474 (lstore 5)) 
                                      (476 (astore 4)) 
                                      (478 (goto 53)) ;;to TAG_19
                                      (481 (areturn)) ;;at TAG_15
                                      (endofcode 482))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$add_english_scales-class-table*
  (make-static-class-decls 
   *clojure.pprint$add_english_scales*))

(defconst *package-name-map* 
  ("clojure.pprint$add_english_scales" . "clojure"))

