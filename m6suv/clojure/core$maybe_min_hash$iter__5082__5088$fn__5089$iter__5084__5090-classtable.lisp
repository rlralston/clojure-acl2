; core$maybe_min_hash$iter__5082__5088$fn__5089$iter__5084__5090-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:44 CDT 2014.
;

(defconst *clojure.core$maybe_min_hash$iter__5082__5088$fn__5089$iter__5084__5090*
 (make-class-def
      '(class "clojure.core$maybe_min_hash$iter__5082__5088$fn__5089$iter__5084__5090"
            "clojure.lang.AFunction"
            (constant_pool)
            (fields
                        (field "mask" (class "java.lang.Object") (accessflags  *class* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 0) (max_locals . 0) (code_length . 1)
                                   (parsedcode
                                      (0 (return))
                                      (endofcode 1))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "mask" "clojure.core$maybe_min_hash$iter__5082__5088$fn__5089$iter__5084__5090" (class "java.lang.Object"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 2) (code_length . 26)
                                   (parsedcode
                                      (0 (new (class "clojure.lang.LazySeq")))
                                      (3 (dup))
                                      (4 (new (class "clojure.core$maybe_min_hash$iter__5082__5088$fn__5089$iter__5084__5090$fn__5091")))
                                      (7 (dup))
                                      (8 (aload_0))
                                      (9 (getfield (fieldCP "mask" "clojure.core$maybe_min_hash$iter__5082__5088$fn__5089$iter__5084__5090" (class "java.lang.Object"))))
                                      (12 (aload_1))
                                      (13 (aconst_null))
                                      (14 (astore_1))
                                      (15 (aload_0))
                                      (16 (invokespecial
					(methodCP "<init>" "clojure.core$maybe_min_hash$iter__5082__5088$fn__5089$iter__5084__5090$fn__5091" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) void)))
                                      (19 (checkcast (class "clojure.lang.IFn")))
                                      (22 (invokespecial
					(methodCP "<init>" "clojure.lang.LazySeq" ((class "clojure.lang.IFn")) void)))
                                      (25 (areturn))
                                      (endofcode 26))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$maybe_min_hash$iter__5082__5088$fn__5089$iter__5084__5090-class-table*
  (make-static-class-decls 
   *clojure.core$maybe_min_hash$iter__5082__5088$fn__5089$iter__5084__5090*))

(defconst *package-name-map* 
  ("clojure.core$maybe_min_hash$iter__5082__5088$fn__5089$iter__5084__5090" . "clojure"))

