; core$get_super_and_interfaces-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:44 CDT 2014.
;

(defconst *clojure.core$get_super_and_interfaces*
 (make-class-def
      '(class "clojure.core$get_super_and_interfaces"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "first")
                        (STRING  "java.lang.Object")
                        (STRING  "next"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 35)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "first"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$get_super_and_interfaces" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "java.lang.Object"
                                      (15 (invokestatic
					(methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class"))))
                                      (18 (putstatic (fieldCP "const__1" "clojure.core$get_super_and_interfaces" (class "java.lang.Object"))))
                                      (21 (ldc 0))        ;;STRING:: "clojure.core"
                                      (23 (ldc 3))        ;;STRING:: "next"
                                      (25 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (28 (checkcast (class "clojure.lang.Var")))
                                      (31 (putstatic (fieldCP "const__2" "clojure.core$get_super_and_interfaces" (class "clojure.lang.Var"))))
                                      (34 (return))
                                      (endofcode 35))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 2) (code_length . 93)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$get_super_and_interfaces" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (checkcast (class "java.lang.Class"))) 
                                      (18 (invokevirtual (methodCP "isInterface" "java.lang.Class" () boolean))) 
                                      (21 (ifeq 47))  ;;to TAG_0
                                      (24 (iconst_2)) 
                                      (25 (anewarray (class "java.lang.Object"))) 
                                      (28 (dup)) 
                                      (29 (iconst_0)) 
                                      (30 (getstatic (fieldCP "const__1" "clojure.core$get_super_and_interfaces" (class "java.lang.Object")))) 
                                      (33 (aastore)) 
                                      (34 (dup)) 
                                      (35 (iconst_1)) 
                                      (36 (aload_1)) 
                                      (37 (aconst_null)) 
                                      (38 (astore_1)) 
                                      (39 (aastore)) 
                                      (40 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (43 (goto 92)) ;;to TAG_1
                                      (46 (pop)) 
                                      (47 (iconst_2)) ;;at TAG_0
                                      (48 (anewarray (class "java.lang.Object"))) 
                                      (51 (dup)) 
                                      (52 (iconst_0)) 
                                      (53 (getstatic (fieldCP "const__0" "clojure.core$get_super_and_interfaces" (class "clojure.lang.Var")))) 
                                      (56 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (59 (checkcast (class "clojure.lang.IFn"))) 
                                      (62 (aload_1)) 
                                      (63 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (68 (aastore)) 
                                      (69 (dup)) 
                                      (70 (iconst_1)) 
                                      (71 (getstatic (fieldCP "const__2" "clojure.core$get_super_and_interfaces" (class "clojure.lang.Var")))) 
                                      (74 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (77 (checkcast (class "clojure.lang.IFn"))) 
                                      (80 (aload_1)) 
                                      (81 (aconst_null)) 
                                      (82 (astore_1)) 
                                      (83 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (88 (aastore)) 
                                      (89 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (92 (areturn)) ;;at TAG_1
                                      (endofcode 93))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$get_super_and_interfaces-class-table*
  (make-static-class-decls 
   *clojure.core$get_super_and_interfaces*))

(defconst *package-name-map* 
  ("clojure.core$get_super_and_interfaces" . "clojure"))

