; core$throw_if-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:45 CDT 2014.
;

(defconst *clojure.core$throw_if*
 (make-class-def
      '(class "clojure.core$throw_if"
            "clojure.lang.RestFn"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "apply")
                        (STRING  "format")
                        (STRING  "into-array")
                        (STRING  "drop")
                        (LONG 2)
                        (STRING  "drop-while"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 75)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "apply"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$throw_if" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "format"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.core$throw_if" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "into-array"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.core$throw_if" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "drop"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.core$throw_if" (class "clojure.lang.Var"))))
                                      (52 (ldc2_w 5))     ;; LONG:: "2"
                                      (55 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (58 (putstatic (fieldCP "const__4" "clojure.core$throw_if" (class "java.lang.Object"))))
                                      (61 (ldc 0))        ;;STRING:: "clojure.core"
                                      (63 (ldc 6))        ;;STRING:: "drop-while"
                                      (65 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (68 (checkcast (class "clojure.lang.Var")))
                                      (71 (putstatic (fieldCP "const__5" "clojure.core$throw_if" (class "clojure.lang.Var"))))
                                      (74 (return))
                                      (endofcode 75))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.RestFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doInvoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 9) (code_length . 167)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aconst_null)) 
                                      (2 (astore_1)) 
                                      (3 (dup)) 
                                      (4 (ifnull 164)) ;;to TAG_0
                                      (7 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (10 (if_acmpeq 165)) ;;to TAG_1
                                      (13 (getstatic (fieldCP "const__0" "clojure.core$throw_if" (class "clojure.lang.Var")))) 
                                      (16 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (19 (checkcast (class "clojure.lang.IFn"))) 
                                      (22 (getstatic (fieldCP "const__1" "clojure.core$throw_if" (class "clojure.lang.Var")))) 
                                      (25 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (28 (aload_2)) 
                                      (29 (aconst_null)) 
                                      (30 (astore_2)) 
                                      (31 (aload_3)) 
                                      (32 (aconst_null)) 
                                      (33 (astore_3)) 
                                      (34 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (39 (astore 4)) 
                                      (41 (new (class "java.lang.Exception"))) 
                                      (44 (dup)) 
                                      (45 (aload 4)) 
                                      (47 (aconst_null)) 
                                      (48 (astore 4)) 
                                      (50 (checkcast (class "java.lang.String"))) 
                                      (53 (invokespecial (methodCP "<init>" "java.lang.Exception" ((class "java.lang.String")) void))) 
                                      (56 (astore 5)) 
                                      (58 (aload 5)) 
                                      (60 (checkcast (class "java.lang.Throwable"))) 
                                      (63 (invokevirtual (methodCP "getStackTrace" "java.lang.Throwable" () (array (class "java.lang.StackTraceElement"))))) 
                                      (66 (astore 6)) 
                                      (68 (new (class "clojure.core$throw_if$boring_QMARK___4943"))) 
                                      (71 (dup)) 
                                      (72 (invokespecial (methodCP "<init>" "clojure.core$throw_if$boring_QMARK___4943" () void))) 
                                      (75 (astore 7)) 
                                      (77 (getstatic (fieldCP "const__2" "clojure.core$throw_if" (class "clojure.lang.Var")))) 
                                      (80 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (83 (checkcast (class "clojure.lang.IFn"))) 
                                      (86 (getstatic (fieldCP "const__3" "clojure.core$throw_if" (class "clojure.lang.Var")))) 
                                      (89 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (92 (checkcast (class "clojure.lang.IFn"))) 
                                      (95 (getstatic (fieldCP "const__4" "clojure.core$throw_if" (class "java.lang.Object")))) 
                                      (98 (getstatic (fieldCP "const__5" "clojure.core$throw_if" (class "clojure.lang.Var")))) 
                                      (101 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (104 (checkcast (class "clojure.lang.IFn"))) 
                                      (107 (aload 7)) 
                                      (109 (aconst_null)) 
                                      (110 (astore 7)) 
                                      (112 (aload 6)) 
                                      (114 (aconst_null)) 
                                      (115 (astore 6)) 
                                      (117 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (122 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (127 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (132 (astore 8)) 
                                      (134 (aload 5)) 
                                      (136 (checkcast (class "java.lang.Throwable"))) 
                                      (139 (aload 8)) 
                                      (141 (aconst_null)) 
                                      (142 (astore 8)) 
                                      (144 (checkcast (array (class "java.lang.StackTraceElement")))) 
                                      (147 (invokevirtual (methodCP "setStackTrace" "java.lang.Throwable" ((array (class "java.lang.StackTraceElement"))) void))) 
                                      (150 (aconst_null)) 
                                      (151 (pop)) 
                                      (152 (aload 5)) 
                                      (154 (aconst_null)) 
                                      (155 (astore 5)) 
                                      (157 (checkcast (class "java.lang.Throwable"))) 
                                      (160 (athrow)) 
                                      (161 (goto 166))  ;;to TAG_2
                                      (164 (pop)) ;;at TAG_0
                                      (165 (aconst_null)) ;;at TAG_1
                                      (166 (areturn)) ;;at TAG_2
                                      (endofcode 167))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getRequiredArity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_2))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$throw_if-class-table*
  (make-static-class-decls 
   *clojure.core$throw_if*))

(defconst *package-name-map* 
  ("clojure.core$throw_if" . "clojure"))

