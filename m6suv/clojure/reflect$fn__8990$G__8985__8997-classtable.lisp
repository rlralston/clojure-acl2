; reflect$fn__8990$G__8985__8997-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:57 CDT 2014.
;

(defconst *clojure.reflect$fn__8990$G__8985__8997*
 (make-class-def
      '(class "clojure.reflect$fn__8990$G__8985__8997"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "-cache-protocol-fn")
                        (STRING  "clojure.reflect.Reflector"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "G__8986" (class "java.lang.Object") (accessflags  *class* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 22)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "-cache-protocol-fn"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.reflect$fn__8990$G__8985__8997" (class "clojure.lang.Var"))))
                                      (13 (ldc 2))        ;;STRING:: "clojure.reflect.Reflector"
                                      (15 (invokestatic
					(methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class"))))
                                      (18 (putstatic (fieldCP "const__1" "clojure.reflect$fn__8990$G__8985__8997" (class "java.lang.Object"))))
                                      (21 (return))
                                      (endofcode 22))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "G__8986" "clojure.reflect$fn__8990$G__8985__8997" (class "java.lang.Object"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 99)
                                   (parsedcode
                                      (0 (aload_0)) 
                                      (1 (checkcast (class "clojure.lang.AFunction"))) 
                                      (4 (getfield (fieldCP "__methodImplCache" "clojure.lang.AFunction" (class "clojure.lang.MethodImplCache")))) 
                                      (7 (astore_3)) 
                                      (8 (aload_3)) 
                                      (9 (aconst_null)) 
                                      (10 (astore_3)) 
                                      (11 (checkcast (class "clojure.lang.MethodImplCache"))) 
                                      (14 (aload_1)) 
                                      (15 (invokestatic (methodCP "classOf" "clojure.lang.Util" ((class "java.lang.Object")) (class "java.lang.Class")))) 
                                      (18 (checkcast (class "java.lang.Class"))) 
                                      (21 (invokevirtual (methodCP "fnFor" "clojure.lang.MethodImplCache" ((class "java.lang.Class")) (class "clojure.lang.IFn")))) 
                                      (24 (astore 4)) 
                                      (26 (aload 4)) 
                                      (28 (dup)) 
                                      (29 (ifnull 60)) ;;to TAG_0
                                      (32 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (35 (if_acmpeq 61)) ;;to TAG_1
                                      (38 (aload 4)) 
                                      (40 (aconst_null)) 
                                      (41 (astore 4)) 
                                      (43 (checkcast (class "clojure.lang.IFn"))) 
                                      (46 (aload_1)) 
                                      (47 (aconst_null)) 
                                      (48 (astore_1)) 
                                      (49 (aload_2)) 
                                      (50 (aconst_null)) 
                                      (51 (astore_2)) 
                                      (52 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (57 (goto 98))  ;;to TAG_2
                                      (60 (pop)) ;;at TAG_0
                                      (61 (getstatic (fieldCP "const__0" "clojure.reflect$fn__8990$G__8985__8997" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (64 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (67 (checkcast (class "clojure.lang.IFn"))) 
                                      (70 (aload_0)) 
                                      (71 (aload_1)) 
                                      (72 (getstatic (fieldCP "const__1" "clojure.reflect$fn__8990$G__8985__8997" (class "java.lang.Object")))) 
                                      (75 (aload_0)) 
                                      (76 (getfield (fieldCP "G__8986" "clojure.reflect$fn__8990$G__8985__8997" (class "java.lang.Object")))) 
                                      (79 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (84 (checkcast (class "clojure.lang.IFn"))) 
                                      (87 (aload_1)) 
                                      (88 (aconst_null)) 
                                      (89 (astore_1)) 
                                      (90 (aload_2)) 
                                      (91 (aconst_null)) 
                                      (92 (astore_2)) 
                                      (93 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (98 (areturn)) ;;at TAG_2
                                      (endofcode 99))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *reflect$fn__8990$G__8985__8997-class-table*
  (make-static-class-decls 
   *clojure.reflect$fn__8990$G__8985__8997*))

(defconst *package-name-map* 
  ("clojure.reflect$fn__8990$G__8985__8997" . "clojure"))

