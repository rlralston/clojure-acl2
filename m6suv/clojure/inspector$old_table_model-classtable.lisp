; inspector$old_table_model-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:49 CDT 2014.
;

(defconst *clojure.inspector$old_table_model*
 (make-class-def
      '(class "clojure.inspector$old_table_model"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "first")
                        (STRING  "count")
                        (STRING  "map?")
                        (STRING  "vals")
                        (STRING  "identity")
                        (STRING  "init-proxy")
                        (STRING  "removeTableModelListener")
                        (STRING  "isCellEditable")
                        (STRING  "getValueAt")
                        (STRING  "getRowCount")
                        (STRING  "getColumnName")
                        (STRING  "getColumnCount")
                        (STRING  "getColumnClass")
                        (STRING  "addTableModelListener"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 79)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "first"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.inspector$old_table_model" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "count"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.inspector$old_table_model" (class "clojure.lang.Var"))))
                                      (26 (ldc 0))        ;;STRING:: "clojure.core"
                                      (28 (ldc 3))        ;;STRING:: "map?"
                                      (30 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (33 (checkcast (class "clojure.lang.Var")))
                                      (36 (putstatic (fieldCP "const__2" "clojure.inspector$old_table_model" (class "clojure.lang.Var"))))
                                      (39 (ldc 0))        ;;STRING:: "clojure.core"
                                      (41 (ldc 4))        ;;STRING:: "vals"
                                      (43 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (46 (checkcast (class "clojure.lang.Var")))
                                      (49 (putstatic (fieldCP "const__3" "clojure.inspector$old_table_model" (class "clojure.lang.Var"))))
                                      (52 (ldc 0))        ;;STRING:: "clojure.core"
                                      (54 (ldc 5))        ;;STRING:: "identity"
                                      (56 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (59 (checkcast (class "clojure.lang.Var")))
                                      (62 (putstatic (fieldCP "const__4" "clojure.inspector$old_table_model" (class "clojure.lang.Var"))))
                                      (65 (ldc 0))        ;;STRING:: "clojure.core"
                                      (67 (ldc 6))        ;;STRING:: "init-proxy"
                                      (69 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (72 (checkcast (class "clojure.lang.Var")))
                                      (75 (putstatic (fieldCP "const__5" "clojure.inspector$old_table_model" (class "clojure.lang.Var"))))
                                      (78 (return))
                                      (endofcode 79))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 10) (max_locals . 7) (code_length . 254)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.inspector$old_table_model" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (astore_2)) 
                                      (16 (aload_2)) 
                                      (17 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (20 (istore_3)) 
                                      (21 (aload_1)) 
                                      (22 (invokestatic (methodCP "count" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (25 (istore 4)) 
                                      (27 (getstatic (fieldCP "const__2" "clojure.inspector$old_table_model" (class "clojure.lang.Var")))) 
                                      (30 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (33 (checkcast (class "clojure.lang.IFn"))) 
                                      (36 (aload_2)) 
                                      (37 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (42 (dup)) 
                                      (43 (ifnull 61)) ;;to TAG_0
                                      (46 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (49 (if_acmpeq 62)) ;;to TAG_1
                                      (52 (getstatic (fieldCP "const__3" "clojure.inspector$old_table_model" (class "clojure.lang.Var")))) 
                                      (55 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (58 (goto 68))  ;;to TAG_2
                                      (61 (pop)) ;;at TAG_0
                                      (62 (getstatic (fieldCP "const__4" "clojure.inspector$old_table_model" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (65 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (68 (astore 5)) ;;at TAG_2
                                      (70 (new (class "clojure.inspector.proxy$java.lang.Object$TableModel$521c1983"))) 
                                      (73 (dup)) 
                                      (74 (invokespecial (methodCP "<init>" "clojure.inspector.proxy$java.lang.Object$TableModel$521c1983" () void))) 
                                      (77 (astore 6)) 
                                      (79 (getstatic (fieldCP "const__5" "clojure.inspector$old_table_model" (class "clojure.lang.Var")))) 
                                      (82 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (85 (checkcast (class "clojure.lang.IFn"))) 
                                      (88 (aload 6)) 
                                      (90 (bipush 16)) 
                                      (92 (anewarray (class "java.lang.Object"))) 
                                      (95 (dup)) 
                                      (96 (iconst_0)) 
                                      (97 (ldc 7)) ;;STRING:: "removeTableModelListener"
                                      (99 (aastore)) 
                                      (100 (dup)) 
                                      (101 (iconst_1)) 
                                      (102 (new (class "clojure.inspector$old_table_model$fn__6900"))) 
                                      (105 (dup)) 
                                      (106 (invokespecial (methodCP "<init>" "clojure.inspector$old_table_model$fn__6900" () void))) 
                                      (109 (aastore)) 
                                      (110 (dup)) 
                                      (111 (iconst_2)) 
                                      (112 (ldc 8)) ;;STRING:: "isCellEditable"
                                      (114 (aastore)) 
                                      (115 (dup)) 
                                      (116 (iconst_3)) 
                                      (117 (new (class "clojure.inspector$old_table_model$fn__6902"))) 
                                      (120 (dup)) 
                                      (121 (invokespecial (methodCP "<init>" "clojure.inspector$old_table_model$fn__6902" () void))) 
                                      (124 (aastore)) 
                                      (125 (dup)) 
                                      (126 (iconst_4)) 
                                      (127 (ldc 9)) ;;STRING:: "getValueAt"
                                      (129 (aastore)) 
                                      (130 (dup)) 
                                      (131 (iconst_5)) 
                                      (132 (new (class "clojure.inspector$old_table_model$fn__6904"))) 
                                      (135 (dup)) 
                                      (136 (aload_1)) 
                                      (137 (aconst_null)) 
                                      (138 (astore_1)) 
                                      (139 (aload 5)) 
                                      (141 (aconst_null)) 
                                      (142 (astore 5)) 
                                      (144 (invokespecial (methodCP "<init>" "clojure.inspector$old_table_model$fn__6904" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (147 (aastore)) 
                                      (148 (dup)) 
                                      (149 (bipush 6)) 
                                      (151 (ldc 10)) ;;STRING:: "getRowCount"
                                      (153 (aastore)) 
                                      (154 (dup)) 
                                      (155 (bipush 7)) 
                                      (157 (new (class "clojure.inspector$old_table_model$fn__6906"))) 
                                      (160 (dup)) 
                                      (161 (iload 4)) 
                                      (163 (invokespecial (methodCP "<init>" "clojure.inspector$old_table_model$fn__6906" (int) void))) 
                                      (166 (aastore)) 
                                      (167 (dup)) 
                                      (168 (bipush 8)) 
                                      (170 (ldc 11)) ;;STRING:: "getColumnName"
                                      (172 (aastore)) 
                                      (173 (dup)) 
                                      (174 (bipush 9)) 
                                      (176 (new (class "clojure.inspector$old_table_model$fn__6908"))) 
                                      (179 (dup)) 
                                      (180 (aload_2)) 
                                      (181 (aconst_null)) 
                                      (182 (astore_2)) 
                                      (183 (invokespecial (methodCP "<init>" "clojure.inspector$old_table_model$fn__6908" ((class "java.lang.Object")) void))) 
                                      (186 (aastore)) 
                                      (187 (dup)) 
                                      (188 (bipush 10)) 
                                      (190 (ldc 12)) ;;STRING:: "getColumnCount"
                                      (192 (aastore)) 
                                      (193 (dup)) 
                                      (194 (bipush 11)) 
                                      (196 (new (class "clojure.inspector$old_table_model$fn__6910"))) 
                                      (199 (dup)) 
                                      (200 (iload_3)) 
                                      (201 (invokespecial (methodCP "<init>" "clojure.inspector$old_table_model$fn__6910" (int) void))) 
                                      (204 (aastore)) 
                                      (205 (dup)) 
                                      (206 (bipush 12)) 
                                      (208 (ldc 13)) ;;STRING:: "getColumnClass"
                                      (210 (aastore)) 
                                      (211 (dup)) 
                                      (212 (bipush 13)) 
                                      (214 (new (class "clojure.inspector$old_table_model$fn__6912"))) 
                                      (217 (dup)) 
                                      (218 (invokespecial (methodCP "<init>" "clojure.inspector$old_table_model$fn__6912" () void))) 
                                      (221 (aastore)) 
                                      (222 (dup)) 
                                      (223 (bipush 14)) 
                                      (225 (ldc 14)) ;;STRING:: "addTableModelListener"
                                      (227 (aastore)) 
                                      (228 (dup)) 
                                      (229 (bipush 15)) 
                                      (231 (new (class "clojure.inspector$old_table_model$fn__6914"))) 
                                      (234 (dup)) 
                                      (235 (invokespecial (methodCP "<init>" "clojure.inspector$old_table_model$fn__6914" () void))) 
                                      (238 (aastore)) 
                                      (239 (invokestatic (methodCP "mapUniqueKeys" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentMap")))) 
                                      (242 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (247 (pop)) 
                                      (248 (aload 6)) 
                                      (250 (aconst_null)) 
                                      (251 (astore 6)) 
                                      (253 (areturn)) 
                                      (endofcode 254))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *inspector$old_table_model-class-table*
  (make-static-class-decls 
   *clojure.inspector$old_table_model*))

(defconst *package-name-map* 
  ("clojure.inspector$old_table_model" . "clojure"))

