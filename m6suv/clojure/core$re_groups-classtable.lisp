; core$re_groups-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:45 CDT 2014.
;

(defconst *clojure.core$re_groups*
 (make-class-def
      '(class "clojure.core$re_groups"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "zero?")
                        (STRING  "<=")
                        (STRING  "conj")
                        (STRING  "inc"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 60)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "zero?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$re_groups" (class "clojure.lang.Var"))))
                                      (13 (lconst_0))
                                      (14 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (17 (putstatic (fieldCP "const__1" "clojure.core$re_groups" (class "java.lang.Object"))))
                                      (20 (ldc 0))        ;;STRING:: "clojure.core"
                                      (22 (ldc 2))        ;;STRING:: "<="
                                      (24 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (27 (checkcast (class "clojure.lang.Var")))
                                      (30 (putstatic (fieldCP "const__2" "clojure.core$re_groups" (class "clojure.lang.Var"))))
                                      (33 (ldc 0))        ;;STRING:: "clojure.core"
                                      (35 (ldc 3))        ;;STRING:: "conj"
                                      (37 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (40 (checkcast (class "clojure.lang.Var")))
                                      (43 (putstatic (fieldCP "const__3" "clojure.core$re_groups" (class "clojure.lang.Var"))))
                                      (46 (ldc 0))        ;;STRING:: "clojure.core"
                                      (48 (ldc 4))        ;;STRING:: "inc"
                                      (50 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (53 (checkcast (class "clojure.lang.Var")))
                                      (56 (putstatic (fieldCP "const__4" "clojure.core$re_groups" (class "clojure.lang.Var"))))
                                      (59 (return))
                                      (endofcode 60))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 6) (code_length . 87)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (checkcast (class "java.util.regex.Matcher"))) 
                                      (4 (invokevirtual (methodCP "groupCount" "java.util.regex.Matcher" () int))) 
                                      (7 (istore_2)) 
                                      (8 (iload_2)) 
                                      (9 (i2l)) 
                                      (10 (lconst_0)) 
                                      (11 (lcmp)) 
                                      (12 (ifne 28)) ;;to TAG_0
                                      (15 (aload_1)) 
                                      (16 (aconst_null)) 
                                      (17 (astore_1)) 
                                      (18 (checkcast (class "java.util.regex.Matcher"))) 
                                      (21 (invokevirtual (methodCP "group" "java.util.regex.Matcher" () (class "java.lang.String")))) 
                                      (24 (goto 86)) ;;to TAG_1
                                      (27 (pop)) 
                                      (28 (getstatic (fieldCP "EMPTY" "clojure.lang.PersistentVector" (class "clojure.lang.PersistentVector")))) ;;at TAG_0
                                      (31 (astore_3)) 
                                      (32 (lconst_0)) 
                                      (33 (lstore 4)) 
                                      (35 (lload 4)) ;;at TAG_3
                                      (37 (iload_2)) 
                                      (38 (i2l)) 
                                      (39 (lcmp)) 
                                      (40 (ifgt 85))  ;;to TAG_2
                                      (43 (getstatic (fieldCP "const__3" "clojure.core$re_groups" (class "clojure.lang.Var")))) 
                                      (46 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (49 (checkcast (class "clojure.lang.IFn"))) 
                                      (52 (aload_3)) 
                                      (53 (aload_1)) 
                                      (54 (checkcast (class "java.util.regex.Matcher"))) 
                                      (57 (lload 4)) 
                                      (59 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (62 (invokevirtual (methodCP "group" "java.util.regex.Matcher" (int) (class "java.lang.String")))) 
                                      (65 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (70 (lload 4)) 
                                      (72 (invokestatic (methodCP "inc" "clojure.lang.Numbers" (long) long))) 
                                      (75 (lstore 4)) 
                                      (77 (astore_3)) 
                                      (78 (goto 35)) ;;to TAG_3
                                      (81 (goto 86)) ;;to TAG_1
                                      (84 (pop)) 
                                      (85 (aload_3)) ;;at TAG_2
                                      (86 (areturn)) ;;at TAG_1
                                      (endofcode 87))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$re_groups-class-table*
  (make-static-class-decls 
   *clojure.core$re_groups*))

(defconst *package-name-map* 
  ("clojure.core$re_groups" . "clojure"))

