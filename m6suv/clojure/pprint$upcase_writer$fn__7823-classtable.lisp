; pprint$upcase_writer$fn__7823-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:57 CDT 2014.
;

(defconst *clojure.pprint$upcase_writer$fn__7823*
 (make-class-def
      '(class "clojure.pprint$upcase_writer$fn__7823"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "=")
                        (STRING  "class")
                        (STRING  "java.lang.String")
                        (STRING  "java.lang.Integer")
                        (STRING  "int")
                        (STRING  "char")
                        (STRING  "str")
                        (STRING  "No matching clause: "))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "writer" (class "java.lang.Object") (accessflags  *class* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 82)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "="
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$upcase_writer$fn__7823" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "class"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.pprint$upcase_writer$fn__7823" (class "clojure.lang.Var"))))
                                      (26 (ldc 3))        ;;STRING:: "java.lang.String"
                                      (28 (invokestatic
					(methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class"))))
                                      (31 (putstatic (fieldCP "const__2" "clojure.pprint$upcase_writer$fn__7823" (class "java.lang.Object"))))
                                      (34 (ldc 4))        ;;STRING:: "java.lang.Integer"
                                      (36 (invokestatic
					(methodCP "forName" "java.lang.Class" ((class "java.lang.String")) (class "java.lang.Class"))))
                                      (39 (putstatic (fieldCP "const__3" "clojure.pprint$upcase_writer$fn__7823" (class "java.lang.Object"))))
                                      (42 (ldc 0))        ;;STRING:: "clojure.core"
                                      (44 (ldc 5))        ;;STRING:: "int"
                                      (46 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (49 (checkcast (class "clojure.lang.Var")))
                                      (52 (putstatic (fieldCP "const__4" "clojure.pprint$upcase_writer$fn__7823" (class "clojure.lang.Var"))))
                                      (55 (ldc 0))        ;;STRING:: "clojure.core"
                                      (57 (ldc 6))        ;;STRING:: "char"
                                      (59 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (62 (checkcast (class "clojure.lang.Var")))
                                      (65 (putstatic (fieldCP "const__5" "clojure.pprint$upcase_writer$fn__7823" (class "clojure.lang.Var"))))
                                      (68 (ldc 0))        ;;STRING:: "clojure.core"
                                      (70 (ldc 7))        ;;STRING:: "str"
                                      (72 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (75 (checkcast (class "clojure.lang.Var")))
                                      (78 (putstatic (fieldCP "const__6" "clojure.pprint$upcase_writer$fn__7823" (class "clojure.lang.Var"))))
                                      (81 (return))
                                      (endofcode 82))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "writer" "clojure.pprint$upcase_writer$fn__7823" (class "java.lang.Object"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 38)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (getfield (fieldCP "writer" "clojure.pprint$upcase_writer$fn__7823" (class "java.lang.Object"))))
                                      (4 (checkcast (class "java.io.Writer")))
                                      (7 (aload_2))
                                      (8 (aconst_null))
                                      (9 (astore_2))
                                      (10 (checkcast (array char)))
                                      (13 (aload_3))
                                      (14 (aconst_null))
                                      (15 (astore_3))
                                      (16 (checkcast (class "java.lang.Number")))
                                      (19 (invokestatic
					(methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int)))
                                      (22 (aload 4))
                                      (24 (aconst_null))
                                      (25 (astore 4))
                                      (27 (checkcast (class "java.lang.Number")))
                                      (30 (invokestatic
					(methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int)))
                                      (33 (invokevirtual
					(methodCP "write" "java.io.Writer" ((array char) int int) void)))
                                      (36 (aconst_null))
                                      (37 (areturn))
                                      (endofcode 38))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 6) (code_length . 178)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.pprint$upcase_writer$fn__7823" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (astore_3)) 
                                      (7 (getstatic (fieldCP "const__1" "clojure.pprint$upcase_writer$fn__7823" (class "clojure.lang.Var")))) 
                                      (10 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (13 (checkcast (class "clojure.lang.IFn"))) 
                                      (16 (aload_2)) 
                                      (17 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (22 (astore 4)) 
                                      (24 (aload_3)) 
                                      (25 (checkcast (class "clojure.lang.IFn"))) 
                                      (28 (getstatic (fieldCP "const__2" "clojure.pprint$upcase_writer$fn__7823" (class "java.lang.Object")))) 
                                      (31 (aload 4)) 
                                      (33 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (38 (dup)) 
                                      (39 (ifnull 81)) ;;to TAG_0
                                      (42 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (45 (if_acmpeq 82)) ;;to TAG_1
                                      (48 (aload_2)) 
                                      (49 (aconst_null)) 
                                      (50 (astore_2)) 
                                      (51 (astore 5)) 
                                      (53 (aload_0)) 
                                      (54 (getfield (fieldCP "writer" "clojure.pprint$upcase_writer$fn__7823" (class "java.lang.Object")))) 
                                      (57 (checkcast (class "java.io.Writer"))) 
                                      (60 (aload 5)) 
                                      (62 (aconst_null)) 
                                      (63 (astore 5)) 
                                      (65 (checkcast (class "java.lang.String"))) 
                                      (68 (invokevirtual (methodCP "toUpperCase" "java.lang.String" () (class "java.lang.String")))) 
                                      (71 (checkcast (class "java.lang.String"))) 
                                      (74 (invokevirtual (methodCP "write" "java.io.Writer" ((class "java.lang.String")) void))) 
                                      (77 (aconst_null)) 
                                      (78 (goto 177))  ;;to TAG_2
                                      (81 (pop)) ;;at TAG_0
                                      (82 (aload_3)) ;;at TAG_1
                                      (83 (aconst_null)) 
                                      (84 (astore_3)) 
                                      (85 (checkcast (class "clojure.lang.IFn"))) 
                                      (88 (getstatic (fieldCP "const__3" "clojure.pprint$upcase_writer$fn__7823" (class "java.lang.Object")))) 
                                      (91 (aload 4)) 
                                      (93 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (98 (dup)) 
                                      (99 (ifnull 141)) ;;to TAG_3
                                      (102 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (105 (if_acmpeq 142)) ;;to TAG_4
                                      (108 (aload_2)) 
                                      (109 (aconst_null)) 
                                      (110 (astore_2)) 
                                      (111 (astore 5)) 
                                      (113 (aload_0)) 
                                      (114 (getfield (fieldCP "writer" "clojure.pprint$upcase_writer$fn__7823" (class "java.lang.Object")))) 
                                      (117 (checkcast (class "java.io.Writer"))) 
                                      (120 (aload 5)) 
                                      (122 (aconst_null)) 
                                      (123 (astore 5)) 
                                      (125 (invokestatic (methodCP "charCast" "clojure.lang.RT" ((class "java.lang.Object")) char))) 
                                      (128 (invokestatic (methodCP "toUpperCase" "java.lang.Character" (char) char))) 
                                      (131 (invokestatic (methodCP "intCast" "clojure.lang.RT" (char) int))) 
                                      (134 (invokevirtual (methodCP "write" "java.io.Writer" (int) void))) 
                                      (137 (aconst_null)) 
                                      (138 (goto 177))  ;;to TAG_2
                                      (141 (pop)) ;;at TAG_3
                                      (142 (new (class "java.lang.IllegalArgumentException"))) ;;at TAG_4
                                      (145 (dup)) 
                                      (146 (getstatic (fieldCP "const__6" "clojure.pprint$upcase_writer$fn__7823" (class "clojure.lang.Var")))) 
                                      (149 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (152 (checkcast (class "clojure.lang.IFn"))) 
                                      (155 (ldc 8)) ;;STRING:: "No matching clause: "
                                      (157 (aload 4)) 
                                      (159 (aconst_null)) 
                                      (160 (astore 4)) 
                                      (162 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (167 (checkcast (class "java.lang.String"))) 
                                      (170 (invokespecial (methodCP "<init>" "java.lang.IllegalArgumentException" ((class "java.lang.String")) void))) 
                                      (173 (checkcast (class "java.lang.Throwable"))) 
                                      (176 (athrow)) 
                                      (177 (areturn)) ;;at TAG_2
                                      (endofcode 178))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$upcase_writer$fn__7823-class-table*
  (make-static-class-decls 
   *clojure.pprint$upcase_writer$fn__7823*))

(defconst *package-name-map* 
  ("clojure.pprint$upcase_writer$fn__7823" . "clojure"))

