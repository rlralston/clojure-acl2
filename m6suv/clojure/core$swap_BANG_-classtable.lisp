; core$swap_BANG_-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:45 CDT 2014.
;

(defconst *clojure.core$swap_BANG_*
 (make-class-def
      '(class "clojure.core$swap_BANG_"
            "clojure.lang.RestFn"
            (constant_pool)
            (fields)
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 0) (max_locals . 0) (code_length . 1)
                                   (parsedcode
                                      (0 (return))
                                      (endofcode 1))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.RestFn" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "doInvoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 6) (max_locals . 6) (code_length . 32)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (aconst_null))
                                      (2 (astore_1))
                                      (3 (checkcast (class "clojure.lang.Atom")))
                                      (6 (aload_2))
                                      (7 (aconst_null))
                                      (8 (astore_2))
                                      (9 (checkcast (class "clojure.lang.IFn")))
                                      (12 (aload_3))
                                      (13 (aconst_null))
                                      (14 (astore_3))
                                      (15 (aload 4))
                                      (17 (aconst_null))
                                      (18 (astore 4))
                                      (20 (aload 5))
                                      (22 (aconst_null))
                                      (23 (astore 5))
                                      (25 (checkcast (class "clojure.lang.ISeq")))
                                      (28 (invokevirtual
					(methodCP "swap" "clojure.lang.Atom" ((class "clojure.lang.IFn") (class "java.lang.Object") (class "java.lang.Object") (class "clojure.lang.ISeq")) (class "java.lang.Object"))))
                                      (31 (areturn))
                                      (endofcode 32))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 5) (max_locals . 5) (code_length . 24)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (aconst_null))
                                      (2 (astore_1))
                                      (3 (checkcast (class "clojure.lang.Atom")))
                                      (6 (aload_2))
                                      (7 (aconst_null))
                                      (8 (astore_2))
                                      (9 (checkcast (class "clojure.lang.IFn")))
                                      (12 (aload_3))
                                      (13 (aconst_null))
                                      (14 (astore_3))
                                      (15 (aload 4))
                                      (17 (aconst_null))
                                      (18 (astore 4))
                                      (20 (invokevirtual
					(methodCP "swap" "clojure.lang.Atom" ((class "clojure.lang.IFn") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object"))))
                                      (23 (areturn))
                                      (endofcode 24))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 4) (max_locals . 4) (code_length . 19)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (aconst_null))
                                      (2 (astore_1))
                                      (3 (checkcast (class "clojure.lang.Atom")))
                                      (6 (aload_2))
                                      (7 (aconst_null))
                                      (8 (astore_2))
                                      (9 (checkcast (class "clojure.lang.IFn")))
                                      (12 (aload_3))
                                      (13 (aconst_null))
                                      (14 (astore_3))
                                      (15 (invokevirtual
					(methodCP "swap" "clojure.lang.Atom" ((class "clojure.lang.IFn") (class "java.lang.Object")) (class "java.lang.Object"))))
                                      (18 (areturn))
                                      (endofcode 19))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 3) (max_locals . 3) (code_length . 16)
                                   (parsedcode
                                      (0 (aload_1))
                                      (1 (aconst_null))
                                      (2 (astore_1))
                                      (3 (checkcast (class "clojure.lang.Atom")))
                                      (6 (aload_2))
                                      (7 (aconst_null))
                                      (8 (astore_2))
                                      (9 (checkcast (class "clojure.lang.IFn")))
                                      (12 (invokevirtual
					(methodCP "swap" "clojure.lang.Atom" ((class "clojure.lang.IFn")) (class "java.lang.Object"))))
                                      (15 (areturn))
                                      (endofcode 16))
                                   (Exceptions )
                                   (StackMap )))
                        (method "getRequiredArity"
                              (parameters )
                              (returntype . int)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 2)
                                   (parsedcode
                                      (0 (iconst_4))
                                      (1 (ireturn))
                                      (endofcode 2))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$swap_BANG_-class-table*
  (make-static-class-decls 
   *clojure.core$swap_BANG_*))

(defconst *package-name-map* 
  ("clojure.core$swap_BANG_" . "clojure"))

