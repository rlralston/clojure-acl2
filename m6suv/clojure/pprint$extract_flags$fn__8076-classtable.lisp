; pprint$extract_flags$fn__8076-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:55 CDT 2014.
;

(defconst *clojure.pprint$extract_flags$fn__8076*
 (make-class-def
      '(class "clojure.pprint$extract_flags$fn__8076"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "nth")
                        (LONG 2)
                        (STRING  "empty?")
                        (STRING  "get")
                        (STRING  "clojure.pprint")
                        (STRING  "flag-defs")
                        (STRING  "first")
                        (STRING  "contains?")
                        (STRING  "format-error")
                        (STRING  "str")
                        (STRING  "subs")
                        (STRING  "inc")
                        (STRING  "assoc")
                        (STRING  "Flag \"")
                        (STRING  "\" appears more than once in a directive"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__11" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__12" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__13" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 167)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "nth"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var"))))
                                      (13 (lconst_0))
                                      (14 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (17 (putstatic (fieldCP "const__1" "clojure.pprint$extract_flags$fn__8076" (class "java.lang.Object"))))
                                      (20 (lconst_1))
                                      (21 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (24 (putstatic (fieldCP "const__2" "clojure.pprint$extract_flags$fn__8076" (class "java.lang.Object"))))
                                      (27 (ldc2_w 2))     ;; LONG:: "2"
                                      (30 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (33 (putstatic (fieldCP "const__3" "clojure.pprint$extract_flags$fn__8076" (class "java.lang.Object"))))
                                      (36 (ldc 0))        ;;STRING:: "clojure.core"
                                      (38 (ldc 3))        ;;STRING:: "empty?"
                                      (40 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (43 (checkcast (class "clojure.lang.Var")))
                                      (46 (putstatic (fieldCP "const__4" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var"))))
                                      (49 (ldc 0))        ;;STRING:: "clojure.core"
                                      (51 (ldc 4))        ;;STRING:: "get"
                                      (53 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (56 (checkcast (class "clojure.lang.Var")))
                                      (59 (putstatic (fieldCP "const__5" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var"))))
                                      (62 (ldc 5))        ;;STRING:: "clojure.pprint"
                                      (64 (ldc 6))        ;;STRING:: "flag-defs"
                                      (66 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (69 (checkcast (class "clojure.lang.Var")))
                                      (72 (putstatic (fieldCP "const__6" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var"))))
                                      (75 (ldc 0))        ;;STRING:: "clojure.core"
                                      (77 (ldc 7))        ;;STRING:: "first"
                                      (79 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (82 (checkcast (class "clojure.lang.Var")))
                                      (85 (putstatic (fieldCP "const__7" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var"))))
                                      (88 (ldc 0))        ;;STRING:: "clojure.core"
                                      (90 (ldc 8))        ;;STRING:: "contains?"
                                      (92 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (95 (checkcast (class "clojure.lang.Var")))
                                      (98 (putstatic (fieldCP "const__8" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var"))))
                                      (101 (ldc 5))       ;;STRING:: "clojure.pprint"
                                      (103 (ldc 9))       ;;STRING:: "format-error"
                                      (105 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (108 (checkcast (class "clojure.lang.Var")))
                                      (111 (putstatic (fieldCP "const__9" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var"))))
                                      (114 (ldc 0))       ;;STRING:: "clojure.core"
                                      (116 (ldc 10))      ;;STRING:: "str"
                                      (118 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (121 (checkcast (class "clojure.lang.Var")))
                                      (124 (putstatic (fieldCP "const__10" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var"))))
                                      (127 (ldc 0))       ;;STRING:: "clojure.core"
                                      (129 (ldc 11))      ;;STRING:: "subs"
                                      (131 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (134 (checkcast (class "clojure.lang.Var")))
                                      (137 (putstatic (fieldCP "const__11" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var"))))
                                      (140 (ldc 0))       ;;STRING:: "clojure.core"
                                      (142 (ldc 12))      ;;STRING:: "inc"
                                      (144 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (147 (checkcast (class "clojure.lang.Var")))
                                      (150 (putstatic (fieldCP "const__12" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var"))))
                                      (153 (ldc 0))       ;;STRING:: "clojure.core"
                                      (155 (ldc 13))      ;;STRING:: "assoc"
                                      (157 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (160 (checkcast (class "clojure.lang.Var")))
                                      (163 (putstatic (fieldCP "const__13" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var"))))
                                      (166 (return))
                                      (endofcode 167))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 14) (max_locals . 7) (code_length . 386)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (aconst_null)) 
                                      (2 (astore_1)) 
                                      (3 (astore_2)) 
                                      (4 (aload_2)) 
                                      (5 (lconst_0)) 
                                      (6 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (9 (aconst_null)) 
                                      (10 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (13 (astore_3)) 
                                      (14 (aload_2)) 
                                      (15 (lconst_1)) 
                                      (16 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (19 (aconst_null)) 
                                      (20 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (23 (astore 4)) 
                                      (25 (aload_2)) 
                                      (26 (aconst_null)) 
                                      (27 (astore_2)) 
                                      (28 (ldc2_w 2)) ;; LONG:: "2"
                                      (31 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (34 (aconst_null)) 
                                      (35 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (38 (astore 5)) 
                                      (40 (getstatic (fieldCP "const__4" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var")))) 
                                      (43 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (46 (checkcast (class "clojure.lang.IFn"))) 
                                      (49 (aload_3)) 
                                      (50 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (55 (dup)) 
                                      (56 (ifnull 111)) ;;to TAG_0
                                      (59 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (62 (if_acmpeq 112)) ;;to TAG_1
                                      (65 (iconst_2)) 
                                      (66 (anewarray (class "java.lang.Object"))) 
                                      (69 (dup)) 
                                      (70 (iconst_0)) 
                                      (71 (aconst_null)) 
                                      (72 (aastore)) 
                                      (73 (dup)) 
                                      (74 (iconst_1)) 
                                      (75 (iconst_3)) 
                                      (76 (anewarray (class "java.lang.Object"))) 
                                      (79 (dup)) 
                                      (80 (iconst_0)) 
                                      (81 (aload_3)) 
                                      (82 (aconst_null)) 
                                      (83 (astore_3)) 
                                      (84 (aastore)) 
                                      (85 (dup)) 
                                      (86 (iconst_1)) 
                                      (87 (aload 4)) 
                                      (89 (aconst_null)) 
                                      (90 (astore 4)) 
                                      (92 (aastore)) 
                                      (93 (dup)) 
                                      (94 (iconst_2)) 
                                      (95 (aload 5)) 
                                      (97 (aconst_null)) 
                                      (98 (astore 5)) 
                                      (100 (aastore)) 
                                      (101 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (104 (aastore)) 
                                      (105 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (108 (goto 385))  ;;to TAG_2
                                      (111 (pop)) ;;at TAG_0
                                      (112 (getstatic (fieldCP "const__6" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (115 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (118 (getstatic (fieldCP "const__7" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var")))) 
                                      (121 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (124 (checkcast (class "clojure.lang.IFn"))) 
                                      (127 (aload_3)) 
                                      (128 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (133 (invokestatic (methodCP "get" "clojure.lang.RT" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (136 (astore 6)) 
                                      (138 (aload 6)) 
                                      (140 (dup)) 
                                      (141 (ifnull 341)) ;;to TAG_3
                                      (144 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (147 (if_acmpeq 342)) ;;to TAG_4
                                      (150 (getstatic (fieldCP "const__8" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var")))) 
                                      (153 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (156 (checkcast (class "clojure.lang.IFn"))) 
                                      (159 (aload 5)) 
                                      (161 (aload 6)) 
                                      (163 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (168 (dup)) 
                                      (169 (ifnull 235)) ;;to TAG_5
                                      (172 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (175 (if_acmpeq 236)) ;;to TAG_6
                                      (178 (getstatic (fieldCP "const__9" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var")))) 
                                      (181 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (184 (checkcast (class "clojure.lang.IFn"))) 
                                      (187 (getstatic (fieldCP "const__10" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var")))) 
                                      (190 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (193 (checkcast (class "clojure.lang.IFn"))) 
                                      (196 (ldc 14)) ;;STRING:: "Flag \""
                                      (198 (getstatic (fieldCP "const__7" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var")))) 
                                      (201 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (204 (checkcast (class "clojure.lang.IFn"))) 
                                      (207 (aload_3)) 
                                      (208 (aconst_null)) 
                                      (209 (astore_3)) 
                                      (210 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (215 (ldc 15)) ;;STRING:: "\" appears more than once in a directive"
                                      (217 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (222 (aload 4)) 
                                      (224 (aconst_null)) 
                                      (225 (astore 4)) 
                                      (227 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (232 (goto 338)) ;;to TAG_7
                                      (235 (pop)) ;;at TAG_5
                                      (236 (iconst_2)) ;;at TAG_6
                                      (237 (anewarray (class "java.lang.Object"))) 
                                      (240 (dup)) 
                                      (241 (iconst_0)) 
                                      (242 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (245 (aastore)) 
                                      (246 (dup)) 
                                      (247 (iconst_1)) 
                                      (248 (iconst_3)) 
                                      (249 (anewarray (class "java.lang.Object"))) 
                                      (252 (dup)) 
                                      (253 (iconst_0)) 
                                      (254 (getstatic (fieldCP "const__11" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var")))) 
                                      (257 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (260 (checkcast (class "clojure.lang.IFn"))) 
                                      (263 (aload_3)) 
                                      (264 (aconst_null)) 
                                      (265 (astore_3)) 
                                      (266 (getstatic (fieldCP "const__2" "clojure.pprint$extract_flags$fn__8076" (class "java.lang.Object")))) 
                                      (269 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (274 (aastore)) 
                                      (275 (dup)) 
                                      (276 (iconst_1)) 
                                      (277 (aload 4)) 
                                      (279 (invokestatic (methodCP "inc" "clojure.lang.Numbers" ((class "java.lang.Object")) (class "java.lang.Number")))) 
                                      (282 (aastore)) 
                                      (283 (dup)) 
                                      (284 (iconst_2)) 
                                      (285 (getstatic (fieldCP "const__13" "clojure.pprint$extract_flags$fn__8076" (class "clojure.lang.Var")))) 
                                      (288 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (291 (checkcast (class "clojure.lang.IFn"))) 
                                      (294 (aload 5)) 
                                      (296 (aconst_null)) 
                                      (297 (astore 5)) 
                                      (299 (aload 6)) 
                                      (301 (aconst_null)) 
                                      (302 (astore 6)) 
                                      (304 (iconst_2)) 
                                      (305 (anewarray (class "java.lang.Object"))) 
                                      (308 (dup)) 
                                      (309 (iconst_0)) 
                                      (310 (getstatic (fieldCP "TRUE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (313 (aastore)) 
                                      (314 (dup)) 
                                      (315 (iconst_1)) 
                                      (316 (aload 4)) 
                                      (318 (aconst_null)) 
                                      (319 (astore 4)) 
                                      (321 (aastore)) 
                                      (322 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (325 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 4)) 
                                      (330 (aastore)) 
                                      (331 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (334 (aastore)) 
                                      (335 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (338 (goto 385))  ;;to TAG_2;;at TAG_7
                                      (341 (pop)) ;;at TAG_3
                                      (342 (iconst_2)) ;;at TAG_4
                                      (343 (anewarray (class "java.lang.Object"))) 
                                      (346 (dup)) 
                                      (347 (iconst_0)) 
                                      (348 (aconst_null)) 
                                      (349 (aastore)) 
                                      (350 (dup)) 
                                      (351 (iconst_1)) 
                                      (352 (iconst_3)) 
                                      (353 (anewarray (class "java.lang.Object"))) 
                                      (356 (dup)) 
                                      (357 (iconst_0)) 
                                      (358 (aload_3)) 
                                      (359 (aconst_null)) 
                                      (360 (astore_3)) 
                                      (361 (aastore)) 
                                      (362 (dup)) 
                                      (363 (iconst_1)) 
                                      (364 (aload 4)) 
                                      (366 (aconst_null)) 
                                      (367 (astore 4)) 
                                      (369 (aastore)) 
                                      (370 (dup)) 
                                      (371 (iconst_2)) 
                                      (372 (aload 5)) 
                                      (374 (aconst_null)) 
                                      (375 (astore 5)) 
                                      (377 (aastore)) 
                                      (378 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (381 (aastore)) 
                                      (382 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (385 (areturn)) ;;at TAG_2
                                      (endofcode 386))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$extract_flags$fn__8076-class-table*
  (make-static-class-decls 
   *clojure.pprint$extract_flags$fn__8076*))

(defconst *package-name-map* 
  ("clojure.pprint$extract_flags$fn__8076" . "clojure"))

