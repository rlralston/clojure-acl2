; pprint$add_core_ns$fn__8434-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:54 CDT 2014.
;

(defconst *clojure.pprint$add_core_ns$fn__8434*
 (make-class-def
      '(class "clojure.pprint$add_core_ns$fn__8434"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "nth")
                        (STRING  "not")
                        (STRING  "namespace")
                        (STRING  "special-symbol?")
                        (STRING  "symbol")
                        (STRING  "name"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "core" (class "java.lang.Object") (accessflags  *class* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 93)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "nth"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.pprint$add_core_ns$fn__8434" (class "clojure.lang.Var"))))
                                      (13 (lconst_0))
                                      (14 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (17 (putstatic (fieldCP "const__1" "clojure.pprint$add_core_ns$fn__8434" (class "java.lang.Object"))))
                                      (20 (lconst_1))
                                      (21 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (24 (putstatic (fieldCP "const__2" "clojure.pprint$add_core_ns$fn__8434" (class "java.lang.Object"))))
                                      (27 (ldc 0))        ;;STRING:: "clojure.core"
                                      (29 (ldc 2))        ;;STRING:: "not"
                                      (31 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (34 (checkcast (class "clojure.lang.Var")))
                                      (37 (putstatic (fieldCP "const__3" "clojure.pprint$add_core_ns$fn__8434" (class "clojure.lang.Var"))))
                                      (40 (ldc 0))        ;;STRING:: "clojure.core"
                                      (42 (ldc 3))        ;;STRING:: "namespace"
                                      (44 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (47 (checkcast (class "clojure.lang.Var")))
                                      (50 (putstatic (fieldCP "const__4" "clojure.pprint$add_core_ns$fn__8434" (class "clojure.lang.Var"))))
                                      (53 (ldc 0))        ;;STRING:: "clojure.core"
                                      (55 (ldc 4))        ;;STRING:: "special-symbol?"
                                      (57 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (60 (checkcast (class "clojure.lang.Var")))
                                      (63 (putstatic (fieldCP "const__5" "clojure.pprint$add_core_ns$fn__8434" (class "clojure.lang.Var"))))
                                      (66 (ldc 0))        ;;STRING:: "clojure.core"
                                      (68 (ldc 5))        ;;STRING:: "symbol"
                                      (70 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (73 (checkcast (class "clojure.lang.Var")))
                                      (76 (putstatic (fieldCP "const__6" "clojure.pprint$add_core_ns$fn__8434" (class "clojure.lang.Var"))))
                                      (79 (ldc 0))        ;;STRING:: "clojure.core"
                                      (81 (ldc 6))        ;;STRING:: "name"
                                      (83 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (86 (checkcast (class "clojure.lang.Var")))
                                      (89 (putstatic (fieldCP "const__7" "clojure.pprint$add_core_ns$fn__8434" (class "clojure.lang.Var"))))
                                      (92 (return))
                                      (endofcode 93))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters (class "java.lang.Object"))
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 2) (max_locals . 2) (code_length . 10)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (aload_0))
                                      (5 (aload_1))
                                      (6 (putfield (fieldCP "core" "clojure.pprint$add_core_ns$fn__8434" (class "java.lang.Object"))))
                                      (9 (return))
                                      (endofcode 10))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 8) (max_locals . 6) (code_length . 163)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (astore_2)) 
                                      (2 (aload_2)) 
                                      (3 (lconst_0)) 
                                      (4 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (7 (aconst_null)) 
                                      (8 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (11 (astore_3)) 
                                      (12 (aload_2)) 
                                      (13 (aconst_null)) 
                                      (14 (astore_2)) 
                                      (15 (lconst_1)) 
                                      (16 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (19 (aconst_null)) 
                                      (20 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (23 (astore 4)) 
                                      (25 (getstatic (fieldCP "const__3" "clojure.pprint$add_core_ns$fn__8434" (class "clojure.lang.Var")))) 
                                      (28 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (31 (checkcast (class "clojure.lang.IFn"))) 
                                      (34 (getstatic (fieldCP "const__4" "clojure.pprint$add_core_ns$fn__8434" (class "clojure.lang.Var")))) 
                                      (37 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (40 (checkcast (class "clojure.lang.IFn"))) 
                                      (43 (aload_3)) 
                                      (44 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (49 (astore 5)) 
                                      (51 (aload 5)) 
                                      (53 (dup)) 
                                      (54 (ifnull 71)) ;;to TAG_0
                                      (57 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (60 (if_acmpeq 72)) ;;to TAG_1
                                      (63 (aload 5)) 
                                      (65 (aconst_null)) 
                                      (66 (astore 5)) 
                                      (68 (goto 87))  ;;to TAG_2
                                      (71 (pop)) ;;at TAG_0
                                      (72 (getstatic (fieldCP "const__5" "clojure.pprint$add_core_ns$fn__8434" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (75 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (78 (checkcast (class "clojure.lang.IFn"))) 
                                      (81 (aload_3)) 
                                      (82 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (87 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) ;;at TAG_2
                                      (92 (dup)) 
                                      (93 (ifnull 158)) ;;to TAG_3
                                      (96 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (99 (if_acmpeq 159)) ;;to TAG_4
                                      (102 (iconst_2)) 
                                      (103 (anewarray (class "java.lang.Object"))) 
                                      (106 (dup)) 
                                      (107 (iconst_0)) 
                                      (108 (getstatic (fieldCP "const__6" "clojure.pprint$add_core_ns$fn__8434" (class "clojure.lang.Var")))) 
                                      (111 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (114 (checkcast (class "clojure.lang.IFn"))) 
                                      (117 (aload_0)) 
                                      (118 (getfield (fieldCP "core" "clojure.pprint$add_core_ns$fn__8434" (class "java.lang.Object")))) 
                                      (121 (getstatic (fieldCP "const__7" "clojure.pprint$add_core_ns$fn__8434" (class "clojure.lang.Var")))) 
                                      (124 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (127 (checkcast (class "clojure.lang.IFn"))) 
                                      (130 (aload_3)) 
                                      (131 (aconst_null)) 
                                      (132 (astore_3)) 
                                      (133 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (138 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (143 (aastore)) 
                                      (144 (dup)) 
                                      (145 (iconst_1)) 
                                      (146 (aload 4)) 
                                      (148 (aconst_null)) 
                                      (149 (astore 4)) 
                                      (151 (aastore)) 
                                      (152 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (155 (goto 162)) ;;to TAG_5
                                      (158 (pop)) ;;at TAG_3
                                      (159 (aload_1)) ;;at TAG_4
                                      (160 (aconst_null)) 
                                      (161 (astore_1)) 
                                      (162 (areturn)) ;;at TAG_5
                                      (endofcode 163))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *pprint$add_core_ns$fn__8434-class-table*
  (make-static-class-decls 
   *clojure.pprint$add_core_ns$fn__8434*))

(defconst *package-name-map* 
  ("clojure.pprint$add_core_ns$fn__8434" . "clojure"))

