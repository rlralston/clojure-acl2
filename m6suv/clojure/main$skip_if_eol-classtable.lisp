; main$skip_if_eol-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:53 CDT 2014.
;

(defconst *clojure.main$skip_if_eol*
 (make-class-def
      '(class "clojure.main$skip_if_eol"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "=")
                        (STRING  "int")
                        (STRING  "line-start")
                        (LONG -1)
                        (STRING  "stream-end")
                        (STRING  "else")
                        (STRING  "body")
                        (STRING  "read")
                        (STRING  "unread"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 2) (max_locals . 0) (code_length . 92)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "="
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.main$skip_if_eol" (class "clojure.lang.Var"))))
                                      (13 (ldc 0))        ;;STRING:: "clojure.core"
                                      (15 (ldc 2))        ;;STRING:: "int"
                                      (17 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (20 (checkcast (class "clojure.lang.Var")))
                                      (23 (putstatic (fieldCP "const__1" "clojure.main$skip_if_eol" (class "clojure.lang.Var"))))
                                      (26 (bipush 10))
                                      (28 (invokestatic
					(methodCP "valueOf" "java.lang.Character" (char) (class "java.lang.Character"))))
                                      (31 (putstatic (fieldCP "const__2" "clojure.main$skip_if_eol" (class "java.lang.Object"))))
                                      (34 (aconst_null))
                                      (35 (ldc 3))        ;;STRING:: "line-start"
                                      (37 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (40 (checkcast (class "clojure.lang.Keyword")))
                                      (43 (putstatic (fieldCP "const__3" "clojure.main$skip_if_eol" (class "clojure.lang.Keyword"))))
                                      (46 (ldc2_w 4))     ;; LONG:: "-1"
                                      (49 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (52 (putstatic (fieldCP "const__4" "clojure.main$skip_if_eol" (class "java.lang.Object"))))
                                      (55 (aconst_null))
                                      (56 (ldc 5))        ;;STRING:: "stream-end"
                                      (58 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (61 (checkcast (class "clojure.lang.Keyword")))
                                      (64 (putstatic (fieldCP "const__5" "clojure.main$skip_if_eol" (class "clojure.lang.Keyword"))))
                                      (67 (aconst_null))
                                      (68 (ldc 6))        ;;STRING:: "else"
                                      (70 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (73 (checkcast (class "clojure.lang.Keyword")))
                                      (76 (putstatic (fieldCP "const__6" "clojure.main$skip_if_eol" (class "clojure.lang.Keyword"))))
                                      (79 (aconst_null))
                                      (80 (ldc 7))        ;;STRING:: "body"
                                      (82 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (85 (checkcast (class "clojure.lang.Keyword")))
                                      (88 (putstatic (fieldCP "const__7" "clojure.main$skip_if_eol" (class "clojure.lang.Keyword"))))
                                      (91 (return))
                                      (endofcode 92))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 7) (max_locals . 3) (code_length . 86)
                                   (parsedcode
                                      (0 (aload_1)) 
                                      (1 (ldc 8)) ;;STRING:: "read"
                                      (3 (invokestatic (methodCP "invokeNoArgInstanceMember" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String")) (class "java.lang.Object")))) 
                                      (6 (astore_2)) 
                                      (7 (aload_2)) 
                                      (8 (getstatic (fieldCP "const__2" "clojure.main$skip_if_eol" (class "java.lang.Object")))) 
                                      (11 (invokestatic (methodCP "intCast" "clojure.lang.RT" ((class "java.lang.Object")) int))) 
                                      (14 (i2l)) 
                                      (15 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") long) boolean))) 
                                      (18 (ifeq 28)) ;;to TAG_0
                                      (21 (getstatic (fieldCP "const__3" "clojure.main$skip_if_eol" (class "clojure.lang.Keyword")))) 
                                      (24 (goto 85)) ;;to TAG_1
                                      (27 (pop)) 
                                      (28 (aload_2)) ;;at TAG_0
                                      (29 (ldc2_w 4)) ;; LONG:: "-1"
                                      (32 (invokestatic (methodCP "equiv" "clojure.lang.Util" ((class "java.lang.Object") long) boolean))) 
                                      (35 (ifeq 45))  ;;to TAG_2
                                      (38 (getstatic (fieldCP "const__5" "clojure.main$skip_if_eol" (class "clojure.lang.Keyword")))) 
                                      (41 (goto 85)) ;;to TAG_1
                                      (44 (pop)) 
                                      (45 (getstatic (fieldCP "const__6" "clojure.main$skip_if_eol" (class "clojure.lang.Keyword")))) ;;at TAG_2
                                      (48 (dup)) 
                                      (49 (ifnull 83)) ;;to TAG_3
                                      (52 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (55 (if_acmpeq 84)) ;;to TAG_4
                                      (58 (aload_1)) 
                                      (59 (aconst_null)) 
                                      (60 (astore_1)) 
                                      (61 (ldc 9)) ;;STRING:: "unread"
                                      (63 (iconst_1)) 
                                      (64 (anewarray (class "java.lang.Object"))) 
                                      (67 (dup)) 
                                      (68 (iconst_0)) 
                                      (69 (aload_2)) 
                                      (70 (aconst_null)) 
                                      (71 (astore_2)) 
                                      (72 (aastore)) 
                                      (73 (invokestatic (methodCP "invokeInstanceMethod" "clojure.lang.Reflector" ((class "java.lang.Object") (class "java.lang.String") (array (class "java.lang.Object"))) (class "java.lang.Object")))) 
                                      (76 (pop)) 
                                      (77 (getstatic (fieldCP "const__7" "clojure.main$skip_if_eol" (class "clojure.lang.Keyword")))) 
                                      (80 (goto 85)) ;;to TAG_1
                                      (83 (pop)) ;;at TAG_3
                                      (84 (aconst_null)) ;;at TAG_4
                                      (85 (areturn)) ;;at TAG_1
                                      (endofcode 86))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *main$skip_if_eol-class-table*
  (make-static-class-decls 
   *clojure.main$skip_if_eol*))

(defconst *package-name-map* 
  ("clojure.main$skip_if_eol" . "clojure"))

