; core$prep_ints-classtable.lisp
; Automatically generated by jvm2acl2 on Tue May 27 00:28:45 CDT 2014.
;

(defconst *clojure.core$prep_ints*
 (make-class-def
      '(class "clojure.core$prep_ints"
            "clojure.lang.AFunction"
            (constant_pool
                        (STRING  "clojure.core")
                        (STRING  "fits-table?")
                        (STRING  "case-map")
                        (STRING  "int")
                        (STRING  "compact")
                        (STRING  "maybe-min-hash")
                        (STRING  "map")
                        (STRING  "nth")
                        (STRING  "zero?")
                        (STRING  "sparse"))
            (fields
                        (field "const__0" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__1" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__2" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__3" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__4" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__5" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__6" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__7" (class "clojure.lang.AFn") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__8" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__9" (class "java.lang.Object") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__10" (class "clojure.lang.Var") (accessflags  *class*  *final*  *public*  *static* ) -1)
                        (field "const__11" (class "clojure.lang.Keyword") (accessflags  *class*  *final*  *public*  *static* ) -1))
            (methods
                        (method "<clinit>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public*  *static* )
                              (code
                                   (max_stack . 5) (max_locals . 0) (code_length . 157)
                                   (parsedcode
                                      (0 (ldc 0))         ;;STRING:: "clojure.core"
                                      (2 (ldc 1))         ;;STRING:: "fits-table?"
                                      (4 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (7 (checkcast (class "clojure.lang.Var")))
                                      (10 (putstatic (fieldCP "const__0" "clojure.core$prep_ints" (class "clojure.lang.Var"))))
                                      (13 (lconst_0))
                                      (14 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (17 (putstatic (fieldCP "const__1" "clojure.core$prep_ints" (class "java.lang.Object"))))
                                      (20 (ldc 0))        ;;STRING:: "clojure.core"
                                      (22 (ldc 2))        ;;STRING:: "case-map"
                                      (24 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (27 (checkcast (class "clojure.lang.Var")))
                                      (30 (putstatic (fieldCP "const__2" "clojure.core$prep_ints" (class "clojure.lang.Var"))))
                                      (33 (ldc 0))        ;;STRING:: "clojure.core"
                                      (35 (ldc 3))        ;;STRING:: "int"
                                      (37 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (40 (checkcast (class "clojure.lang.Var")))
                                      (43 (putstatic (fieldCP "const__3" "clojure.core$prep_ints" (class "clojure.lang.Var"))))
                                      (46 (aconst_null))
                                      (47 (ldc 4))        ;;STRING:: "compact"
                                      (49 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (52 (checkcast (class "clojure.lang.Keyword")))
                                      (55 (putstatic (fieldCP "const__4" "clojure.core$prep_ints" (class "clojure.lang.Keyword"))))
                                      (58 (ldc 0))        ;;STRING:: "clojure.core"
                                      (60 (ldc 5))        ;;STRING:: "maybe-min-hash"
                                      (62 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (65 (checkcast (class "clojure.lang.Var")))
                                      (68 (putstatic (fieldCP "const__5" "clojure.core$prep_ints" (class "clojure.lang.Var"))))
                                      (71 (ldc 0))        ;;STRING:: "clojure.core"
                                      (73 (ldc 6))        ;;STRING:: "map"
                                      (75 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (78 (checkcast (class "clojure.lang.Var")))
                                      (81 (putstatic (fieldCP "const__6" "clojure.core$prep_ints" (class "clojure.lang.Var"))))
                                      (84 (iconst_2))
                                      (85 (anewarray (class "java.lang.Object")))
                                      (88 (dup))
                                      (89 (iconst_0))
                                      (90 (lconst_0))
                                      (91 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (94 (aastore))
                                      (95 (dup))
                                      (96 (iconst_1))
                                      (97 (lconst_0))
                                      (98 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (101 (aastore))
                                      (102 (invokestatic
					(methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector"))))
                                      (105 (checkcast (class "clojure.lang.AFn")))
                                      (108 (putstatic (fieldCP "const__7" "clojure.core$prep_ints" (class "clojure.lang.AFn"))))
                                      (111 (ldc 0))       ;;STRING:: "clojure.core"
                                      (113 (ldc 7))       ;;STRING:: "nth"
                                      (115 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (118 (checkcast (class "clojure.lang.Var")))
                                      (121 (putstatic (fieldCP "const__8" "clojure.core$prep_ints" (class "clojure.lang.Var"))))
                                      (124 (lconst_1))
                                      (125 (invokestatic
					(methodCP "valueOf" "java.lang.Long" (long) (class "java.lang.Long"))))
                                      (128 (putstatic (fieldCP "const__9" "clojure.core$prep_ints" (class "java.lang.Object"))))
                                      (131 (ldc 0))       ;;STRING:: "clojure.core"
                                      (133 (ldc 8))       ;;STRING:: "zero?"
                                      (135 (invokestatic
					(methodCP "var" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Var"))))
                                      (138 (checkcast (class "clojure.lang.Var")))
                                      (141 (putstatic (fieldCP "const__10" "clojure.core$prep_ints" (class "clojure.lang.Var"))))
                                      (144 (aconst_null))
                                      (145 (ldc 9))       ;;STRING:: "sparse"
                                      (147 (invokestatic
					(methodCP "keyword" "clojure.lang.RT" ((class "java.lang.String") (class "java.lang.String")) (class "clojure.lang.Keyword"))))
                                      (150 (checkcast (class "clojure.lang.Keyword")))
                                      (153 (putstatic (fieldCP "const__11" "clojure.core$prep_ints" (class "clojure.lang.Keyword"))))
                                      (156 (return))
                                      (endofcode 157))
                                   (Exceptions )
                                   (StackMap )))
                        (method "<init>"
                              (parameters )
                              (returntype . void)
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 1) (max_locals . 1) (code_length . 5)
                                   (parsedcode
                                      (0 (aload_0))
                                      (1 (invokespecial
					(methodCP "<init>" "clojure.lang.AFunction" () void)))
                                      (4 (return))
                                      (endofcode 5))
                                   (Exceptions )
                                   (StackMap )))
                        (method "invoke"
                              (parameters (class "java.lang.Object") (class "java.lang.Object"))
                              (returntype . (class "java.lang.Object"))
                              (accessflags  *class*  *public* )
                              (code
                                   (max_stack . 9) (max_locals . 6) (code_length . 313)
                                   (parsedcode
                                      (0 (getstatic (fieldCP "const__0" "clojure.core$prep_ints" (class "clojure.lang.Var")))) 
                                      (3 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (6 (checkcast (class "clojure.lang.IFn"))) 
                                      (9 (aload_1)) 
                                      (10 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (15 (dup)) 
                                      (16 (ifnull 88)) ;;to TAG_0
                                      (19 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (22 (if_acmpeq 89)) ;;to TAG_1
                                      (25 (iconst_4)) 
                                      (26 (anewarray (class "java.lang.Object"))) 
                                      (29 (dup)) 
                                      (30 (iconst_0)) 
                                      (31 (getstatic (fieldCP "const__1" "clojure.core$prep_ints" (class "java.lang.Object")))) 
                                      (34 (aastore)) 
                                      (35 (dup)) 
                                      (36 (iconst_1)) 
                                      (37 (getstatic (fieldCP "const__1" "clojure.core$prep_ints" (class "java.lang.Object")))) 
                                      (40 (aastore)) 
                                      (41 (dup)) 
                                      (42 (iconst_2)) 
                                      (43 (getstatic (fieldCP "const__2" "clojure.core$prep_ints" (class "clojure.lang.Var")))) 
                                      (46 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (49 (checkcast (class "clojure.lang.IFn"))) 
                                      (52 (getstatic (fieldCP "const__3" "clojure.core$prep_ints" (class "clojure.lang.Var")))) 
                                      (55 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (58 (getstatic (fieldCP "const__3" "clojure.core$prep_ints" (class "clojure.lang.Var")))) 
                                      (61 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (64 (aload_1)) 
                                      (65 (aconst_null)) 
                                      (66 (astore_1)) 
                                      (67 (aload_2)) 
                                      (68 (aconst_null)) 
                                      (69 (astore_2)) 
                                      (70 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (75 (aastore)) 
                                      (76 (dup)) 
                                      (77 (iconst_3)) 
                                      (78 (getstatic (fieldCP "const__4" "clojure.core$prep_ints" (class "clojure.lang.Keyword")))) 
                                      (81 (aastore)) 
                                      (82 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (85 (goto 312))  ;;to TAG_2
                                      (88 (pop)) ;;at TAG_0
                                      (89 (getstatic (fieldCP "const__5" "clojure.core$prep_ints" (class "clojure.lang.Var")))) ;;at TAG_1
                                      (92 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (95 (checkcast (class "clojure.lang.IFn"))) 
                                      (98 (getstatic (fieldCP "const__6" "clojure.core$prep_ints" (class "clojure.lang.Var")))) 
                                      (101 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (104 (checkcast (class "clojure.lang.IFn"))) 
                                      (107 (getstatic (fieldCP "const__3" "clojure.core$prep_ints" (class "clojure.lang.Var")))) 
                                      (110 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (113 (aload_1)) 
                                      (114 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 3)) 
                                      (119 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object")) (class "java.lang.Object")) 2)) 
                                      (124 (astore_3)) 
                                      (125 (aload_3)) 
                                      (126 (dup)) 
                                      (127 (ifnull 142)) ;;to TAG_3
                                      (130 (getstatic (fieldCP "FALSE" "java.lang.Boolean" (class "java.lang.Boolean")))) 
                                      (133 (if_acmpeq 143)) ;;to TAG_4
                                      (136 (aload_3)) 
                                      (137 (aconst_null)) 
                                      (138 (astore_3)) 
                                      (139 (goto 146)) ;;to TAG_5
                                      (142 (pop)) ;;at TAG_3
                                      (143 (getstatic (fieldCP "const__7" "clojure.core$prep_ints" (class "clojure.lang.AFn")))) ;;at TAG_4
                                      (146 (astore_3)) ;;at TAG_5
                                      (147 (aload_3)) 
                                      (148 (lconst_0)) 
                                      (149 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (152 (aconst_null)) 
                                      (153 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (156 (astore 4)) 
                                      (158 (aload_3)) 
                                      (159 (aconst_null)) 
                                      (160 (astore_3)) 
                                      (161 (lconst_1)) 
                                      (162 (invokestatic (methodCP "intCast" "clojure.lang.RT" (long) int))) 
                                      (165 (aconst_null)) 
                                      (166 (invokestatic (methodCP "nth" "clojure.lang.RT" ((class "java.lang.Object") int (class "java.lang.Object")) (class "java.lang.Object")))) 
                                      (169 (astore 5)) 
                                      (171 (aload 5)) 
                                      (173 (invokestatic (methodCP "isZero" "clojure.lang.Numbers" ((class "java.lang.Object")) boolean))) 
                                      (176 (ifeq 243)) ;;to TAG_6
                                      (179 (iconst_4)) 
                                      (180 (anewarray (class "java.lang.Object"))) 
                                      (183 (dup)) 
                                      (184 (iconst_0)) 
                                      (185 (getstatic (fieldCP "const__1" "clojure.core$prep_ints" (class "java.lang.Object")))) 
                                      (188 (aastore)) 
                                      (189 (dup)) 
                                      (190 (iconst_1)) 
                                      (191 (getstatic (fieldCP "const__1" "clojure.core$prep_ints" (class "java.lang.Object")))) 
                                      (194 (aastore)) 
                                      (195 (dup)) 
                                      (196 (iconst_2)) 
                                      (197 (getstatic (fieldCP "const__2" "clojure.core$prep_ints" (class "clojure.lang.Var")))) 
                                      (200 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (203 (checkcast (class "clojure.lang.IFn"))) 
                                      (206 (getstatic (fieldCP "const__3" "clojure.core$prep_ints" (class "clojure.lang.Var")))) 
                                      (209 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (212 (getstatic (fieldCP "const__3" "clojure.core$prep_ints" (class "clojure.lang.Var")))) 
                                      (215 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (218 (aload_1)) 
                                      (219 (aconst_null)) 
                                      (220 (astore_1)) 
                                      (221 (aload_2)) 
                                      (222 (aconst_null)) 
                                      (223 (astore_2)) 
                                      (224 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (229 (aastore)) 
                                      (230 (dup)) 
                                      (231 (iconst_3)) 
                                      (232 (getstatic (fieldCP "const__11" "clojure.core$prep_ints" (class "clojure.lang.Keyword")))) 
                                      (235 (aastore)) 
                                      (236 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (239 (goto 312))  ;;to TAG_2
                                      (242 (pop)) 
                                      (243 (iconst_4)) ;;at TAG_6
                                      (244 (anewarray (class "java.lang.Object"))) 
                                      (247 (dup)) 
                                      (248 (iconst_0)) 
                                      (249 (aload 4)) 
                                      (251 (aastore)) 
                                      (252 (dup)) 
                                      (253 (iconst_1)) 
                                      (254 (aload 5)) 
                                      (256 (aastore)) 
                                      (257 (dup)) 
                                      (258 (iconst_2)) 
                                      (259 (getstatic (fieldCP "const__2" "clojure.core$prep_ints" (class "clojure.lang.Var")))) 
                                      (262 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (265 (checkcast (class "clojure.lang.IFn"))) 
                                      (268 (new (class "clojure.core$prep_ints$fn__5113"))) 
                                      (271 (dup)) 
                                      (272 (aload 4)) 
                                      (274 (aconst_null)) 
                                      (275 (astore 4)) 
                                      (277 (aload 5)) 
                                      (279 (aconst_null)) 
                                      (280 (astore 5)) 
                                      (282 (invokespecial (methodCP "<init>" "clojure.core$prep_ints$fn__5113" ((class "java.lang.Object") (class "java.lang.Object")) void))) 
                                      (285 (getstatic (fieldCP "const__3" "clojure.core$prep_ints" (class "clojure.lang.Var")))) 
                                      (288 (invokevirtual (methodCP "getRawRoot" "clojure.lang.Var" () (class "java.lang.Object")))) 
                                      (291 (aload_1)) 
                                      (292 (aconst_null)) 
                                      (293 (astore_1)) 
                                      (294 (aload_2)) 
                                      (295 (aconst_null)) 
                                      (296 (astore_2)) 
                                      (297 (invokeinterface (methodCP "invoke" "clojure.lang.IFn" ((class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object") (class "java.lang.Object")) (class "java.lang.Object")) 5)) 
                                      (302 (aastore)) 
                                      (303 (dup)) 
                                      (304 (iconst_3)) 
                                      (305 (getstatic (fieldCP "const__4" "clojure.core$prep_ints" (class "clojure.lang.Keyword")))) 
                                      (308 (aastore)) 
                                      (309 (invokestatic (methodCP "vector" "clojure.lang.RT" ((array (class "java.lang.Object"))) (class "clojure.lang.IPersistentVector")))) 
                                      (312 (areturn)) ;;at TAG_2
                                      (endofcode 313))
                                   (Exceptions )
                                   (StackMap ))))
            (interfaces)
            (accessflags  *class*  *final*  *public*  *super*  *synchronized* )
            (attributes
              (attribute "SourceFile")
              (attribute "SourceDebugExtension")))))


(defconst *core$prep_ints-class-table*
  (make-static-class-decls 
   *clojure.core$prep_ints*))

(defconst *package-name-map* 
  ("clojure.core$prep_ints" . "clojure"))

